/**
 * @license
 * Copyright Color-Coding Studio. All Rights Reserved.
 *
 * Use of this source code is governed by an Apache License, Version 2.0
 * that can be found in the LICENSE file at http://www.apache.org/licenses/LICENSE-2.0
 */
declare namespace sap {
    /**
     * <p><p>The main UI5 control library, with responsive controls that can be used in touch devices as well as desktop browsers.</p></p>
     */
    namespace m {
        /**
         * <p>Hide the soft keyboard.</p>
         */
        function closeKeyboard(): void;
        /**
         * <p>Search given control's parents and try to find iScroll.</p>
         * @param {sap.ui.core.Control} oControl <p>Control to start the search at</p>
         * @returns iScroll|undefined <p>iScroll reference or undefined if cannot find</p>
         */
        function getIScroll(oControl: sap.ui.core.Control): any | undefined;
        /**
         * <p>Finds default locale settings once and returns always the same.</p><p>We should not need to create new instance to get same locale settings This method keeps the locale instance in the scope and returns the same after first run</p>
         * @returns sap.ui.core.Locale <p>Locale instance</p>
         */
        function getLocale(): sap.ui.core.Locale;
        /**
         * <p>Finds default locale data once and returns always the same.</p>
         * @returns sap.ui.core.LocaleData <p>LocaleData instance</p>
         */
        function getLocaleData(): sap.ui.core.LocaleData;
        /**
         * <p>Search given control's parents and try to find a ScrollDelegate.</p>
         * @param {sap.ui.core.Control} oControl <p>Starting point for the search</p>
         * @param {boolean} bGlobal <p>Whether the search should stop on component level (<code>false</code>) or not</p>
         * @returns Object|undefined <p>ScrollDelegate or undefined if it cannot be found</p>
         */
        function getScrollDelegate(oControl: sap.ui.core.Control, bGlobal: boolean): any | undefined;
        /**
         * <p>Checks if the given parameter is a valid JsDate Object.</p>
         * @param {any} value <p>Any variable to test.</p>
         * @returns boolean <p>Whether the given parameter is a valid JsDate Object.</p>
         */
        function isDate(value: any): boolean;
        /**
         * <p>Given a list of touches, count the number of touches related with the given element.</p>
         * @param {TouchList} oTouchList <p>The list of touch objects to search.</p>
         * @param {any | HTMLElement | string} vElement <p>A jQuery element or an element reference or an element id.</p>
         * @returns number <p>The number of touches related with the given element.</p>
         */
        function countContained(oTouchList: TouchList, vElement: any | HTMLElement | string): number;
        /**
         * <p>Given a list of touch objects, find the touch that matches the given one.</p>
         * @param {TouchList} oTouchList <p>The list of touch objects to search.</p>
         * @param {Touch | number} oTouch <p>A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.</p>
         * @returns object|undefined <p>The touch matching if any.</p>
         */
        function find(oTouchList: TouchList, oTouch: Touch | number): any | undefined;
        /**
         * <p>The <code>sap.m.ActionListItem</code> can be used like a <code>button</code> to fire actions when pressed. <b>Note:</b> The inherited <code>selected</code> property of the <code>sap.m.ListItemBase</code> is not supported.</p>
         */
        export class ActionListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new ActionListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ActionListItem/methods/getText">text</a>.</p><p>Defines the text that appears in the control.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ActionListItem/methods/getText">text</a>.</p><p>Defines the text that appears in the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.ActionListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.ActionListItem;
        }
        /**
         * <p>The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.</p>
         */
        export class ActionSelect extends sap.m.Select {
            /**
             * <p>Constructor for a new ActionSelect.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some button into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSelect/methods/getButtons">buttons</a>.</p>
             * @param {sap.ui.core.ID | sap.m.Button} vButton <p>The buttons to add; if empty, nothing is inserted</p>
             * @returns sap.m.ActionSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addButton(vButton: sap.ui.core.ID | sap.m.Button): sap.m.ActionSelect;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSelect/methods/getButtons">buttons</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getButtons(): sap.ui.core.ID[];
            /**
             * <p>Remove all buttons from the ActionSelect.</p>
             * @returns string[] <p>An array with the ids of the removed elements (might be empty).</p>
             */
            removeAllButtons(): string[];
            /**
             * <p>Button to be removed from the ActionSelect content.</p>
             * @param {number | string | sap.m.Button} vButton <p>The button to remove or its index or id.</p>
             * @returns string <p>The id of the removed button or null.</p>
             */
            removeButton(vButton: number | string | sap.m.Button): string;
        }
        /**
         * <p>The action sheet holds a list of options from which the user can select to complete an action. </p><h3>Overview</h3><p> The options of the action sheet are represented as <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">buttons</a> with icons. Elements in the action sheet are left-aligned. Actions should be arranged in order of importance, from top to bottom. </p><h3>Guidelines</h3><p> <ul> <li>Always display text or text and icons for the actions. Do not use icons only.</li> <li>Always provide a Cancel button on mobile phones.</li> <li>Avoid scrolling on action sheets.</li> </ul> </p><h3>Responsive Behavior</h3><p> On mobile phones the action sheet is displayed in a <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">dialog</a>.</p><p>On tablets and desktop the action sheet is displayed in a <a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">popover</a>.</p><p>When an action is triggered, the action sheet closes and you can display a confirmation as a <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageToast">message toast</a>.</p>
         */
        export class ActionSheet extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ActionSheet.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some button to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to add; if empty, nothing is inserted</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addButton(oButton: sap.m.Button): sap.m.ActionSheet;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ActionSheet/events/afterClose">afterClose</a> event of this <code>sap.m.ActionSheet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.</p><p>This event will be fired after the ActionSheet is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ActionSheet/events/afterOpen">afterOpen</a> event of this <code>sap.m.ActionSheet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.</p><p>This event will be fired after the ActionSheet is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ActionSheet/events/beforeClose">beforeClose</a> event of this <code>sap.m.ActionSheet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.</p><p>This event will be fired before the ActionSheet is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ActionSheet/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.ActionSheet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.</p><p>This event will be fired before the ActionSheet is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancelButtonPress" href="#/api/sap.m.ActionSheet/events/cancelButtonPress">cancelButtonPress</a> event of this <code>sap.m.ActionSheet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.</p><p>This event is fired when the cancelButton is clicked.</p><p><b>Note: </b> For any device other than phones, this event would be fired always when the Popover closes. To prevent this behavior, the <code>showCancelButton</code> property needs to be set to <code>false</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancelButtonPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Calling this method will make the ActionSheet disappear from the screen.</p>
             */
            close(): void;
            /**
             * <p>Destroys all the buttons in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyButtons(): sap.m.ActionSheet;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ActionSheet/events/afterClose">afterClose</a> event of this <code>sap.m.ActionSheet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ActionSheet/events/afterOpen">afterOpen</a> event of this <code>sap.m.ActionSheet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ActionSheet/events/beforeClose">beforeClose</a> event of this <code>sap.m.ActionSheet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ActionSheet/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.ActionSheet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancelButtonPress" href="#/api/sap.m.ActionSheet/events/cancelButtonPress">cancelButtonPress</a> event of this <code>sap.m.ActionSheet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancelButtonPress(fnFunction: Function, oListener?: any): sap.m.ActionSheet;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ActionSheet/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.ActionSheet;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ActionSheet/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.ActionSheet;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ActionSheet/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.ActionSheet;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ActionSheet/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.ActionSheet;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancelButtonPress" href="#/api/sap.m.ActionSheet/events/cancelButtonPress">cancelButtonPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancelButtonPress(mParameters?: any): sap.m.ActionSheet;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p><p>These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.</p>
             * @returns sap.m.Button[] 
             */
            getButtons(): sap.m.Button[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelButtonText" href="#/api/sap.m.ActionSheet/methods/getCancelButtonText">cancelButtonText</a>.</p><p>This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.</p>
             * @returns string <p>Value of property <code>cancelButtonText</code></p>
             */
            getCancelButtonText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.ActionSheet/methods/getPlacement">placement</a>.</p><p>The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.</p><p>Default value is <code>Bottom</code>.</p>
             * @returns sap.m.PlacementType <p>Value of property <code>placement</code></p>
             */
            getPlacement(): sap.m.PlacementType;
            /**
             * <p>Gets the ID of the hidden label</p>
             * @returns string <p>ID of hidden text</p>
             */
            protected getPopupHiddenLabelId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCancelButton" href="#/api/sap.m.ActionSheet/methods/getShowCancelButton">showCancelButton</a>.</p><p>If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showCancelButton</code></p>
             */
            getShowCancelButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ActionSheet/methods/getTitle">title</a>.</p><p>Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Button} oButton <p>The button whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfButton(oButton: sap.m.Button): number;
            /**
             * <p>Inserts a button into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the button should be inserted at; for a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted at the last position</p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertButton(oButton: sap.m.Button, iIndex: number): sap.m.ActionSheet;
            /**
             * <p>The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.</p>
             * @returns boolean <p>Whether the ActionSheet is open.</p>
             */
            isOpen(): boolean;
            /**
             * <p>Calling this method will make the ActionSheet visible on the screen. The control parameter is the object to which the ActionSheet will be placed. It can be not only a UI5 control, but also an existing DOM reference. The side of the placement depends on the <code>placement</code> property set in the Popover (on tablet and desktop). On other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.</p>
             * @param {any} oControl <p>The control to which the ActionSheet is opened</p>
             */
            openBy(oControl: any): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllButtons(): sap.m.Button[];
            /**
             * <p>Removes a button from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.ActionSheet/methods/getButtons">buttons</a>.</p>
             * @param {number | string | sap.m.Button} vButton <p>The button to remove or its index or id</p>
             * @returns sap.m.Button <p>The removed button or <code>null</code></p>
             */
            removeButton(vButton: number | string | sap.m.Button): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelButtonText" href="#/api/sap.m.ActionSheet/methods/getCancelButtonText">cancelButtonText</a>.</p><p>This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sCancelButtonText <p>New value for property <code>cancelButtonText</code></p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCancelButtonText(sCancelButtonText: string): sap.m.ActionSheet;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.ActionSheet/methods/getPlacement">placement</a>.</p><p>The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Bottom</code>.</p>
             * @param {sap.m.PlacementType} sPlacement <p>New value for property <code>placement</code></p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlacement(sPlacement: sap.m.PlacementType): sap.m.ActionSheet;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCancelButton" href="#/api/sap.m.ActionSheet/methods/getShowCancelButton">showCancelButton</a>.</p><p>If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowCancelButton <p>New value for property <code>showCancelButton</code></p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowCancelButton(bShowCancelButton: boolean): sap.m.ActionSheet;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ActionSheet/methods/getTitle">title</a>.</p><p>Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ActionSheet <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ActionSheet;
        }
        /**
         * <p>The root element of a UI5 mobile app.</p><h3>Overview</h3><p>The <code>App</code> inherits from <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">sap.m.NavContainer</a> and thus provides its navigation capabilities. It adds certain header tags to the HTML page which are considered useful for mobile apps.</p><h3>Usage</h3><p>You can configure the home icon of the <code>App</code>. For more information, see the <code>homeIcon</code> property.</p><p>There are options for setting the background color and a background image with the use of the <code>backgroundColor</code> and <code>backgroundImage</code> properties.</p>
         */
        export class App extends sap.m.NavContainer {
            /**
             * <p>Constructor for a new <code>App</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.App/methods/getBackgroundColor">backgroundColor</a>.</p><p>Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required. Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting. Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</p>
             * @returns string <p>Value of property <code>backgroundColor</code></p>
             */
            getBackgroundColor(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.App/methods/getBackgroundImage">backgroundImage</a>.</p><p>Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required. This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting. Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>backgroundImage</code></p>
             */
            getBackgroundImage(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.App/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque). This can be used to make the application content better readable by making the background image partly transparent.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>backgroundOpacity</code></p>
             */
            getBackgroundOpacity(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.App/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>backgroundRepeat</code></p>
             */
            getBackgroundRepeat(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.App/methods/getHomeIcon">homeIcon</a>.</p><p>The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".</p><p>Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.</p><p>This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.</p><p>A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.</p><p>One example is:</p><p>app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png', 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });</p><p>The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one of the sizes is not given, the largest given icon will be used for this size.</p><p>On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".</p>
             * @returns any <p>Value of property <code>homeIcon</code></p>
             */
            getHomeIcon(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMobileWebAppCapable" href="#/api/sap.m.App/methods/getMobileWebAppCapable">mobileWebAppCapable</a>.</p><p>Determines whether the <code>App</code> is displayed without address bar when opened from an exported home screen icon on a mobile device.</p><p>Keep in mind that if enabled, there is no back button provided by the browser and the app must provide own navigation on all displayed pages to avoid dead ends.</p><p><b>Note</b> The property can be toggled, but it doesn't take effect in real time. It takes the set value at the moment when the home screen icon is exported by the user. For example, if the icon is exported while the property is set to <code>true</code>, the <code>App</code> will have no address bar when opened from that same icon regardless of a changed property value to <code>false</code> at a later time.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>mobileWebAppCapable</code></p>
             */
            getMobileWebAppCapable(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.App/methods/getBackgroundColor">backgroundColor</a>.</p><p>Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required. Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting. Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sBackgroundColor <p>New value for property <code>backgroundColor</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundColor(sBackgroundColor: string): sap.m.App;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.App/methods/getBackgroundImage">backgroundImage</a>.</p><p>Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required. This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting. Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sBackgroundImage <p>New value for property <code>backgroundImage</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundImage(sBackgroundImage: sap.ui.core.URI): sap.m.App;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.App/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque). This can be used to make the application content better readable by making the background image partly transparent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} fBackgroundOpacity <p>New value for property <code>backgroundOpacity</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundOpacity(fBackgroundOpacity: number): sap.m.App;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.App/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bBackgroundRepeat <p>New value for property <code>backgroundRepeat</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.App;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.App/methods/getHomeIcon">homeIcon</a>.</p><p>The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".</p><p>Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.</p><p>This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.</p><p>A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.</p><p>One example is:</p><p>app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png', 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });</p><p>The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one of the sizes is not given, the largest given icon will be used for this size.</p><p>On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oHomeIcon <p>New value for property <code>homeIcon</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHomeIcon(oHomeIcon: any): sap.m.App;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMobileWebAppCapable" href="#/api/sap.m.App/methods/getMobileWebAppCapable">mobileWebAppCapable</a>.</p><p>Determines whether the <code>App</code> is displayed without address bar when opened from an exported home screen icon on a mobile device.</p><p>Keep in mind that if enabled, there is no back button provided by the browser and the app must provide own navigation on all displayed pages to avoid dead ends.</p><p><b>Note</b> The property can be toggled, but it doesn't take effect in real time. It takes the set value at the moment when the home screen icon is exported by the user. For example, if the icon is exported while the property is set to <code>true</code>, the <code>App</code> will have no address bar when opened from that same icon regardless of a changed property value to <code>false</code> at a later time.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bMobileWebAppCapable <p>New value for property <code>mobileWebAppCapable</code></p>
             * @returns sap.m.App <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMobileWebAppCapable(bMobileWebAppCapable: boolean): sap.m.App;
        }
        /**
         * <p><p>Available Background Design.</p></p>
         */
        export enum BackgroundDesign {
            /**
             * <p>A solid background color dependent on the theme.</p>
             */
            Solid = "Solid",
            /**
             * <p>A translucent background depending on the opacity value of the theme.</p>
             */
            Translucent = "Translucent",
            /**
             * <p>Transparent background.</p>
             */
            Transparent = "Transparent",
        }
        /**
         * <p>Used as a header, sub-header and a footer of a page.</p><h3>Overview</h3><p>The <code>Bar</code> control consists of three areas to hold its content. It has the capability to center content, such as a title, while having other controls on the left and right side.</p><h3>Usage</h3><p>With the use of the <code>design</code> property, you can set the style of the <code>Bar</code> to appear as a header, sub-header and footer.</p><p><b>Note:</b> Do not place a <code>sap.m.Bar</code> inside another <code>sap.m.Bar</code> or inside any bar-like control. Doing so causes unpredictable behavior.</p><h3>Responsive Behavior</h3><p>The content in the middle area is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between.</p>
         */
        export class Bar extends sap.ui.core.Control implements sap.m.IBar {
            /**
             * <p>Constructor for a new <code>Bar</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Sets classes according to the context of the page. Possible contexts are header, footer and subheader.</p>
             */
            protected _applyContextClassFor: any;
            /**
             * <p>Sets HTML tag according to the context of the page. Possible contexts are header, footer and subheader.</p>
             */
            protected _applyTag: any;
            /**
             * <p>Sets classes and HTML tag according to the context of the page. Possible contexts are header, footer and subheader.</p>
             */
            protected applyTagAndContextClassFor: any;
            /**
             * <p>Gets the available Bar contexts.</p>
             */
            protected getContext: any;
            /**
             * <p>Gets the HTML tag of the root element.</p>
             */
            protected getHTMLTag: any;
            /**
             * <p>Determines whether the Bar is sensitive to the container context.</p><p>Implementation of the IBar interface.</p>
             */
            protected isContextSensitive: any;
            /**
             * <p>Sets the HTML tag of the root element.</p>
             */
            protected setHTMLTag: any;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Bar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Bar;
            /**
             * <p>Adds some contentLeft to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p>
             * @param {sap.ui.core.Control} oContentLeft <p>The contentLeft to add; if empty, nothing is inserted</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContentLeft(oContentLeft: sap.ui.core.Control): sap.m.Bar;
            /**
             * <p>Adds some contentMiddle to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p>
             * @param {sap.ui.core.Control} oContentMiddle <p>The contentMiddle to add; if empty, nothing is inserted</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContentMiddle(oContentMiddle: sap.ui.core.Control): sap.m.Bar;
            /**
             * <p>Adds some contentRight to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p>
             * @param {sap.ui.core.Control} oContentRight <p>The contentRight to add; if empty, nothing is inserted</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContentRight(oContentRight: sap.ui.core.Control): sap.m.Bar;
            /**
             * <p>Destroys all the contentLeft in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContentLeft(): sap.m.Bar;
            /**
             * <p>Destroys all the contentMiddle in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContentMiddle(): sap.m.Bar;
            /**
             * <p>Destroys all the contentRight in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContentRight(): sap.m.Bar;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Bar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p><p>Represents the left content area, usually containing a button or an app icon. If it is overlapped by the right content, its content will disappear and the text will show an ellipsis.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContentLeft(): sap.ui.core.Control[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p><p>Represents the middle content area. Controls such as label, segmented buttons or select can be placed here. The content is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContentMiddle(): sap.ui.core.Control[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p><p>Represents the right content area. Controls such as action buttons or search field can be placed here.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContentRight(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Bar/methods/getDesign">design</a>.</p><p>Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.m.BarDesign <p>Value of property <code>design</code></p>
             */
            getDesign(): sap.m.BarDesign;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContentLeft <p>The contentLeft whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContentLeft(oContentLeft: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContentMiddle <p>The contentMiddle whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContentMiddle(oContentMiddle: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContentRight <p>The contentRight whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContentRight(oContentRight: sap.ui.core.Control): number;
            /**
             * <p>Inserts a contentLeft into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p>
             * @param {sap.ui.core.Control} oContentLeft <p>The contentLeft to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the contentLeft should be inserted at; for a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value greater than the current size of the aggregation, the contentLeft is inserted at the last position</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContentLeft(oContentLeft: sap.ui.core.Control, iIndex: number): sap.m.Bar;
            /**
             * <p>Inserts a contentMiddle into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p>
             * @param {sap.ui.core.Control} oContentMiddle <p>The contentMiddle to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the contentMiddle should be inserted at; for a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value greater than the current size of the aggregation, the contentMiddle is inserted at the last position</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContentMiddle(oContentMiddle: sap.ui.core.Control, iIndex: number): sap.m.Bar;
            /**
             * <p>Inserts a contentRight into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p>
             * @param {sap.ui.core.Control} oContentRight <p>The contentRight to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the contentRight should be inserted at; for a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value greater than the current size of the aggregation, the contentRight is inserted at the last position</p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContentRight(oContentRight: sap.ui.core.Control, iIndex: number): sap.m.Bar;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Bar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContentLeft(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContentMiddle(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContentRight(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Bar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a contentLeft from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLeft" href="#/api/sap.m.Bar/methods/getContentLeft">contentLeft</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContentLeft <p>The contentLeft to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed contentLeft or <code>null</code></p>
             */
            removeContentLeft(vContentLeft: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a contentMiddle from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMiddle" href="#/api/sap.m.Bar/methods/getContentMiddle">contentMiddle</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContentMiddle <p>The contentMiddle to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed contentMiddle or <code>null</code></p>
             */
            removeContentMiddle(vContentMiddle: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a contentRight from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRight" href="#/api/sap.m.Bar/methods/getContentRight">contentRight</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContentRight <p>The contentRight to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed contentRight or <code>null</code></p>
             */
            removeContentRight(vContentRight: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Bar/methods/getDesign">design</a>.</p><p>Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.m.BarDesign} sDesign <p>New value for property <code>design</code></p>
             * @returns sap.m.Bar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDesign(sDesign: sap.m.BarDesign): sap.m.Bar;
        }
        /**
         * <p><p>Types of the Bar design.</p></p>
         */
        export enum BarDesign {
            /**
             * <p>The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</p>
             */
            Auto = "Auto",
            /**
             * <p>The bar will be styled like a footer of the page.</p>
             */
            Footer = "Footer",
            /**
             * <p>The bar will be styled like a header of the page.</p>
             */
            Header = "Header",
            /**
             * <p>The bar will be styled like a subheader of the page.</p>
             */
            SubHeader = "SubHeader",
        }
        /**
         * <p>Enables users to navigate between items by providing a list of links to previous steps in the user's navigation path. The last three steps can be accessed as links directly, while the remaining links prior to them are available in a drop-down menu.</p>
         */
        export class Breadcrumbs extends sap.ui.core.Control implements sap.m.IBreadcrumbs {
            /**
             * <p>Constructor for a new <code>Breadcrumbs</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some link to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p>
             * @param {sap.m.Link} oLink <p>The link to add; if empty, nothing is inserted</p>
             * @returns sap.m.Breadcrumbs <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addLink(oLink: sap.m.Link): sap.m.Breadcrumbs;
            /**
             * <p>Destroys all the links in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p>
             * @returns sap.m.Breadcrumbs <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLinks(): sap.m.Breadcrumbs;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCurrentLocationText" href="#/api/sap.m.Breadcrumbs/methods/getCurrentLocationText">currentLocationText</a>.</p><p>Determines the text of current/last element in the Breadcrumbs path.</p>
             * @returns string <p>Value of property <code>currentLocationText</code></p>
             */
            getCurrentLocationText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p><p>A list of all the active link elements in the Breadcrumbs control. <b>Note:</b> Enabling the property <code>wrapping</code> of the link will not work since it's incompatible with the concept of the control. The other properties will work, but their effect may be undesirable.</p>
             * @returns sap.m.Link[] 
             */
            getLinks(): sap.m.Link[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSeparatorStyle" href="#/api/sap.m.Breadcrumbs/methods/getSeparatorStyle">separatorStyle</a>.</p><p>Determines the visual style of the separator between the <code>Breadcrumbs</code> elements.</p><p>Default value is <code>Slash</code>.</p>
             * @returns sap.m.BreadcrumbsSeparatorStyle <p>Value of property <code>separatorStyle</code></p>
             */
            getSeparatorStyle(): sap.m.BreadcrumbsSeparatorStyle;
            /**
             * <p>Checks for the provided <code>sap.m.Link</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Link} oLink <p>The link whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfLink(oLink: sap.m.Link): number;
            /**
             * <p>Inserts a link into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p>
             * @param {sap.m.Link} oLink <p>The link to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the link should be inserted at; for a negative value of <code>iIndex</code>, the link is inserted at position 0; for a value greater than the current size of the aggregation, the link is inserted at the last position</p>
             * @returns sap.m.Breadcrumbs <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertLink(oLink: sap.m.Link, iIndex: number): sap.m.Breadcrumbs;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Link[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllLinks(): sap.m.Link[];
            /**
             * <p>Removes a link from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLinks" href="#/api/sap.m.Breadcrumbs/methods/getLinks">links</a>.</p>
             * @param {number | string | sap.m.Link} vLink <p>The link to remove or its index or id</p>
             * @returns sap.m.Link <p>The removed link or <code>null</code></p>
             */
            removeLink(vLink: number | string | sap.m.Link): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCurrentLocationText" href="#/api/sap.m.Breadcrumbs/methods/getCurrentLocationText">currentLocationText</a>.</p><p>Determines the text of current/last element in the Breadcrumbs path.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sCurrentLocationText <p>New value for property <code>currentLocationText</code></p>
             * @returns sap.m.Breadcrumbs <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCurrentLocationText(sCurrentLocationText: string): sap.m.Breadcrumbs;
            /**
             * <p>Custom setter for the <code>Breadcrumbs</code> separator style.</p>
             * @param {string} sSeparatorStyle 
             * @returns any <p>this</p>
             */
            setSeparatorStyle(sSeparatorStyle: string): any;
        }
        /**
         * <p><p>Variations of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Breadcrumbs">sap.m.Breadcrumbs</a> separators.</p></p>
         */
        export enum BreadcrumbsSeparatorStyle {
            /**
             * <p>The separator will appear as "\"</p>
             */
            BackSlash = "BackSlash",
            /**
             * <p>The separator will appear as "\\"</p>
             */
            DoubleBackSlash = "DoubleBackSlash",
            /**
             * <p>The separator will appear as ">>"</p>
             */
            DoubleGreaterThan = "DoubleGreaterThan",
            /**
             * <p>The separator will appear as "//"</p>
             */
            DoubleSlash = "DoubleSlash",
            /**
             * <p>The separator will appear as ">"</p>
             */
            GreaterThan = "GreaterThan",
            /**
             * <p>The separator will appear as "/"</p>
             */
            Slash = "Slash",
        }
        /**
         * <p>BusyDialog is used to indicate that the system is busy. </p><h3>Overview</h3><p> When the busy dialog is displayed, the whole application is blocked. </p><h3>Structure</h3><p> The busy dialog can hold several elements, most of which are optional. <ul> <li><code>title</code> - A title for the dialog. By default, there is no title.</li> <li><code>text</code> - A text displayed above the busy animation.</li> <li><code>showCancelButton</code> - An optional Cancel button to stop the execution.</li> <li><code>customIcon</code> - An optional alternative icon to use as a busy animation.</li> </ul> </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>The operation lasts more than one second.</li> <li>You want to indicate loading in a page-to-page navigation (lightweight version).</li> <li>Offer a Cancel button if you expect the process to run more than 10 seconds.</li> <li> If you do not show a title or text, use the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.InvisibleText">invisible text</a> control to provide the reason for users with assistive technologies.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>The screen is not supposed to be blocked. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.BusyIndicator">sap.m.BusyIndicator</a> for the specific application part.</li> <li>Do not use the title of the busy dialog. Provide a precise text describing the operation in <code>text</code>.</li> </ul></p>
         */
        export class BusyDialog extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new BusyDialog.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyDialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.BusyDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.BusyDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.BusyDialog/events/close">close</a> event of this <code>sap.m.BusyDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.BusyDialog</code> itself.</p><p>Fires when the busy dialog is closed. Note: the BusyDialog will not be closed by the InstanceManager.closeAllDialogs method</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code> itself</p>
             * @returns sap.m.BusyDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachClose(oData: any, fnFunction: Function, oListener?: any): sap.m.BusyDialog;
            /**
             * <p>Closes the BusyDialog.</p>
             * @param {boolean} isClosedFromUserInteraction <p>Indicates if the BusyDialog is closed from a user interaction.</p>
             * @returns sap.m.BusyDialog <p>The modified BusyDialog.</p>
             */
            close(isClosedFromUserInteraction: boolean): sap.m.BusyDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.BusyDialog/events/close">close</a> event of this <code>sap.m.BusyDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.BusyDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachClose(fnFunction: Function, oListener?: any): sap.m.BusyDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.BusyDialog/events/close">close</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.BusyDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireClose(mParameters?: any): sap.m.BusyDialog;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyDialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelButtonText" href="#/api/sap.m.BusyDialog/methods/getCancelButtonText">cancelButtonText</a>.</p><p>The text of the cancel button. The default text is "Cancel" (translated to the respective language).</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>cancelButtonText</code></p>
             */
            getCancelButtonText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.BusyDialog/methods/getCustomIcon">customIcon</a>.</p><p>Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>customIcon</code></p>
             */
            getCustomIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconDensityAware" href="#/api/sap.m.BusyDialog/methods/getCustomIconDensityAware">customIconDensityAware</a>.</p><p>If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices. By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.</p><p>If bandwidth is the key for the application, set this value to <code>false</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>customIconDensityAware</code></p>
             */
            getCustomIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconHeight" href="#/api/sap.m.BusyDialog/methods/getCustomIconHeight">customIconHeight</a>.</p><p>Height of the provided icon with default value "44px".</p><p>Default value is <code>44px</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>customIconHeight</code></p>
             */
            getCustomIconHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconRotationSpeed" href="#/api/sap.m.BusyDialog/methods/getCustomIconRotationSpeed">customIconRotationSpeed</a>.</p><p>Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.</p><p>Default value is <code>1000</code>.</p>
             * @returns number <p>Value of property <code>customIconRotationSpeed</code></p>
             */
            getCustomIconRotationSpeed(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconWidth" href="#/api/sap.m.BusyDialog/methods/getCustomIconWidth">customIconWidth</a>.</p><p>Width of the provided icon with default value "44px".</p><p>Default value is <code>44px</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>customIconWidth</code></p>
             */
            getCustomIconWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCancelButton" href="#/api/sap.m.BusyDialog/methods/getShowCancelButton">showCancelButton</a>.</p><p>Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showCancelButton</code></p>
             */
            getShowCancelButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.BusyDialog/methods/getText">text</a>.</p><p>Optional text displayed inside the dialog.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.BusyDialog/methods/getTitle">title</a>.</p><p>Sets the title of the BusyDialog. The default value is an empty string.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Opens the BusyDialog.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            open(): sap.m.BusyDialog;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyDialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyDialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Shows the text for the cancel button.</p>
             * @param {string} sText <p>Text for the cancel button.</p>
             * @returns sap.m.BusyDialog <p>The modified BusyDialog.</p>
             */
            setCancelButtonText(sText: string): sap.m.BusyDialog;
            /**
             * <p>Sets custom icon.</p>
             * @param {string} sIcon <p>Icon to use as a busy animation.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setCustomIcon(sIcon: string): sap.m.BusyDialog;
            /**
             * <p>Sets the density of the custom icon.</p>
             * @param {boolean} bIsDensityAware <p>Determines if the source image will be loaded directly without attempting to fetch the density for high density devices.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setCustomIconDensityAware(bIsDensityAware: boolean): sap.m.BusyDialog;
            /**
             * <p>Sets the height of the custom icon.</p>
             * @param {string} sHeight <p>Height of the provided icon in CSSSize.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setCustomIconHeight(sHeight: string): sap.m.BusyDialog;
            /**
             * <p>Sets the rotation speed of the custom icon.</p>
             * @param {number} iSpeed <p>Defines the rotation speed of the given image.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setCustomIconRotationSpeed(iSpeed: number): sap.m.BusyDialog;
            /**
             * <p>Sets the width of the custom icon.</p>
             * @param {string} sWidth <p>Width of the provided icon in CSSSize.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setCustomIconWidth(sWidth: string): sap.m.BusyDialog;
            /**
             * <p>Shows the cancel button.</p>
             * @param {boolean} bIsCancelButtonShown <p>Determines if the Cancel button is shown.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setShowCancelButton(bIsCancelButtonShown: boolean): sap.m.BusyDialog;
            /**
             * <p>Sets the text for the BusyDialog.</p>
             * @param {string} sText <p>The text for the BusyDialog.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setText(sText: string): sap.m.BusyDialog;
            /**
             * <p>Sets the title for the BusyDialog.</p>
             * @param {string} sTitle <p>The title for the BusyDialog.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setTitle(sTitle: string): sap.m.BusyDialog;
            /**
             * <p>Sets the tooltip for the BusyDialog.</p>
             * @param {string} sTooltip <p>The tooltip for the BusyDialog.</p>
             * @returns sap.m.BusyDialog <p>BusyDialog reference for chaining.</p>
             */
            setTooltip(sTooltip: string): sap.m.BusyDialog;
        }
        /**
         * <p>Informs the user about an ongoing operation. </p><h3>Overview</h3><p> The busy indicator implies that an action is taking place within a single control. You can set the size of the icon, the text, but also define a custom icon to be used instead. </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>The user needs to be able to cancel the operation.</li> <li>Only part of the application or a particular control is affected.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>The operation takes less than one second.</li> <li>You need to block the screen and prevent the user from starting another activity. In this case, use the <a target="_self" class="jsdoclink" href="#/api/sap.m.BusyDialog">busy dialog</a>.</li> <li>Do not change the mouse cursor to indicate the ongoing operation.</li> <li>Do not show multiple busy indicators at once</li> </ul></p>
         */
        export class BusyIndicator extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new BusyIndicator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.BusyIndicator;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.BusyIndicator/methods/getCustomIcon">customIcon</a>.</p><p>Icon URL if an icon is used as the busy indicator.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>customIcon</code></p>
             */
            getCustomIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconDensityAware" href="#/api/sap.m.BusyIndicator/methods/getCustomIconDensityAware">customIconDensityAware</a>.</p><p>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device. By default, this is set to true but then one or more requests are sent to the server, trying to get the density perfect version of the specified image. If bandwidth is the key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>customIconDensityAware</code></p>
             */
            getCustomIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconHeight" href="#/api/sap.m.BusyIndicator/methods/getCustomIconHeight">customIconHeight</a>.</p><p>Height of the provided icon. By default 44px are used.</p><p>Default value is <code>44px</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>customIconHeight</code></p>
             */
            getCustomIconHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconRotationSpeed" href="#/api/sap.m.BusyIndicator/methods/getCustomIconRotationSpeed">customIconRotationSpeed</a>.</p><p>Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms. <b>Note:</b> Values are considered valid when greater than or equal to 0. If invalid value is provided the speed defaults to 0.</p><p>Default value is <code>1000</code>.</p>
             * @returns number <p>Value of property <code>customIconRotationSpeed</code></p>
             */
            getCustomIconRotationSpeed(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconWidth" href="#/api/sap.m.BusyIndicator/methods/getCustomIconWidth">customIconWidth</a>.</p><p>Width of the provided icon. By default 44px are used.</p><p>Default value is <code>44px</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>customIconWidth</code></p>
             */
            getCustomIconWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.m.BusyIndicator/methods/getSize">size</a>.</p><p>Defines the size of the busy indicator. The animation consists of three circles, each of which will be this size. Therefore the total width of the control amounts to three times the given size.</p><p>Default value is <code>1rem</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>size</code></p>
             */
            getSize(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.BusyIndicator/methods/getText">text</a>.</p><p>Defines text to be displayed below the busy indicator. It can be used to inform the user of the current operation.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.BusyIndicator/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.BusyIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.BusyIndicator/methods/getCustomIcon">customIcon</a>.</p><p>Icon URL if an icon is used as the busy indicator.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sCustomIcon <p>New value for property <code>customIcon</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIcon(sCustomIcon: sap.ui.core.URI): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconDensityAware" href="#/api/sap.m.BusyIndicator/methods/getCustomIconDensityAware">customIconDensityAware</a>.</p><p>If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device. By default, this is set to true but then one or more requests are sent to the server, trying to get the density perfect version of the specified image. If bandwidth is the key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bCustomIconDensityAware <p>New value for property <code>customIconDensityAware</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIconDensityAware(bCustomIconDensityAware: boolean): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconHeight" href="#/api/sap.m.BusyIndicator/methods/getCustomIconHeight">customIconHeight</a>.</p><p>Height of the provided icon. By default 44px are used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>44px</code>.</p>
             * @param {sap.ui.core.CSSSize} sCustomIconHeight <p>New value for property <code>customIconHeight</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIconHeight(sCustomIconHeight: sap.ui.core.CSSSize): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconRotationSpeed" href="#/api/sap.m.BusyIndicator/methods/getCustomIconRotationSpeed">customIconRotationSpeed</a>.</p><p>Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms. <b>Note:</b> Values are considered valid when greater than or equal to 0. If invalid value is provided the speed defaults to 0.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1000</code>.</p>
             * @param {number} iCustomIconRotationSpeed <p>New value for property <code>customIconRotationSpeed</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIconRotationSpeed(iCustomIconRotationSpeed: number): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIconWidth" href="#/api/sap.m.BusyIndicator/methods/getCustomIconWidth">customIconWidth</a>.</p><p>Width of the provided icon. By default 44px are used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>44px</code>.</p>
             * @param {sap.ui.core.CSSSize} sCustomIconWidth <p>New value for property <code>customIconWidth</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIconWidth(sCustomIconWidth: sap.ui.core.CSSSize): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.m.BusyIndicator/methods/getSize">size</a>.</p><p>Defines the size of the busy indicator. The animation consists of three circles, each of which will be this size. Therefore the total width of the control amounts to three times the given size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1rem</code>.</p>
             * @param {sap.ui.core.CSSSize} sSize <p>New value for property <code>size</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSize(sSize: sap.ui.core.CSSSize): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.BusyIndicator/methods/getText">text</a>.</p><p>Defines text to be displayed below the busy indicator. It can be used to inform the user of the current operation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.BusyIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.BusyIndicator/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.BusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.BusyIndicator;
        }
        /**
         * <p>Enables users to trigger actions.</p><h3>Overview</h3><p>The user triggers an action by clicking or tapping the <code>Button</code> or by pressing certain keyboard keys, such as Enter.</p><h3>Usage</h3><p>For the <code>Button</code> UI, you can define text, icon, or both. You can also specify whether the text or the icon is displayed first.</p><p>You can choose from a set of predefined <a target="_self" class="jsdoclink" href="#/api/sap.m.ButtonType">ButtonTypes</a> that offer different styling to correspond to the triggered action.</p><p>You can set the <code>Button</code> as enabled or disabled. An enabled <code>Button</code> can be pressed by clicking or tapping it and it changes its style to provide visual feedback to the user that it is pressed or hovered over with the mouse cursor. A disabled <code>Button</code> appears inactive and cannot be pressed.</p>
         */
        export class Button extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>Button</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Button/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Button;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Button/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Button;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Button/events/press">press</a> event of this <code>sap.m.Button</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Button</code> itself.</p><p>Fired when the user clicks or taps on the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Button</code> itself</p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Button;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Button/events/press">press</a> event of this <code>sap.m.Button</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Button;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Button/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.Button;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.Button/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (depressed) state of the button. Both active and default icon properties should be defined and have the same type: image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Button/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Button/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Button/methods/getEnabled">enabled</a>.</p><p>Determines whether the <code>Button</code> is enabled (default is set to <code>true</code>). A disabled <code>Button</code> has different colors depending on the <a target="_self" class="jsdoclink" href="#/api/sap.m.ButtonType">ButtonType</a>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Button/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as graphical element within the <code>Button</code>. It can be an image or an icon from the icon font.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.Button/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconFirst" href="#/api/sap.m.Button/methods/getIconFirst">iconFirst</a>.</p><p>Determines whether the icon is displayed before the text.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconFirst</code></p>
             */
            getIconFirst(): boolean;
            /**
             * <p>Defines to which DOM reference the Popup should be docked</p>
             * @returns HTMLElement <p>the DOM reference that Popup should dock to</p>
             */
            protected getPopupAnchorDomRef(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Button/methods/getText">text</a>.</p><p>Determines the text of the <code>Button</code>.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Button/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Button/methods/getType">type</a>.</p><p>Defines the <code>Button</code> type.</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.m.ButtonType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.ButtonType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Button/methods/getWidth">width</a>.</p><p>Defines the <code>Button</code> width.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Button/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Button/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Button/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Button/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.Button/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (depressed) state of the button. Both active and default icon properties should be defined and have the same type: image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Button/methods/getEnabled">enabled</a>.</p><p>Determines whether the <code>Button</code> is enabled (default is set to <code>true</code>). A disabled <code>Button</code> has different colors depending on the <a target="_self" class="jsdoclink" href="#/api/sap.m.ButtonType">ButtonType</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Button/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as graphical element within the <code>Button</code>. It can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.Button/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconFirst" href="#/api/sap.m.Button/methods/getIconFirst">iconFirst</a>.</p><p>Determines whether the icon is displayed before the text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconFirst <p>New value for property <code>iconFirst</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconFirst(bIconFirst: boolean): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Button/methods/getText">text</a>.</p><p>Determines the text of the <code>Button</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Button/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Button/methods/getType">type</a>.</p><p>Defines the <code>Button</code> type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.m.ButtonType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ButtonType): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Button/methods/getWidth">width</a>.</p><p>Defines the <code>Button</code> width.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Button <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Button;
        }
        /**
         * <p><p>Different types for a button (predefined types).</p></p>
         */
        export enum ButtonType {
            /**
             * <p>accept type (green button)</p>
             */
            Accept = "Accept",
            /**
             * <p>back type (back navigation button for header)</p>
             */
            Back = "Back",
            /**
             * <p>default type (no special styling)</p>
             */
            Default = "Default",
            /**
             * <p>emphasized type</p>
             */
            Emphasized = "Emphasized",
            /**
             * <p>ghost type</p>
             */
            Ghost = "Ghost",
            /**
             * <p>reject style (red button)</p>
             */
            Reject = "Reject",
            /**
             * <p>transparent type</p>
             */
            Transparent = "Transparent",
            /**
             * <p>Unstyled type (no styling)</p>
             */
            Unstyled = "Unstyled",
            /**
             * <p>up type (up navigation button for header)</p>
             */
            Up = "Up",
        }
        /**
         * <p>The carousel allows the user to browse through a set of items by swiping right or left. </p><h3>Overview</h3><p> The control is mostly used for showing a gallery of images, but can hold any sap.m control. </p><h3>Structure</h3><p> The carousel consists of a the following elements: <ul> <li>Content area - displays the different items.</li> <li>Navigation - arrows to the left and right for switching between items.</li> <li>(optional) Paging - indicator at the bottom to show the current position in the set.</li> </ul> The paging indicator can be configured as follows: <ul> <li><code>showPageIndicator</code> - determines if the indicator is displayed.</li> <li>If the pages are less than 9, the page indicator is represented with bullets.</li> <li>If the pages are 9 or more, the page indicator is numeric.</li> <li><code>pageIndicatorPlacement</code> - determines where the indicator is located. Default (<code>sap.m.PlacementType.Bottom</code>) - below the content.</li> </ul> Additionally, you can also change the location of the navigation arrows. By setting <code>arrowsPlacement</code> to <code>sap.m.CarouselArrowsPlacement.PageIndicator</code>, the arrows will be located at the bottom by the paging indicator. Note: When the content is of type <code>sap.m.Image</code> add "Image" text at the end of the <code>"alt"</code> description in order to provide accessibility info for the UI element. </p><h3>Usage</h3><h4> When to use</h4><p> <ul> <li>The items you want to display are very different from each other.</li> <li>You want to display the items one after the other.</li> </ul> </p><h4> When not to use</h4><p> <ul> <li>The items you want to display need to be visible at the same time.</li> <li>The items you want to display are uniform and very similar</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>On touch devices, navigation is performed with swipe gestures (swipe right or swipe left).</li> <li>On desktop, navigation is done with the navigation arrows.</li> <li>The paging indicator (when activated) is visible on each form factor.</li> </ul></p>
         */
        export class Carousel extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Carousel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some page to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p>
             * @param {sap.ui.core.Control} oPage <p>The page to add; if empty, nothing is inserted</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addPage(oPage: sap.ui.core.Control): sap.m.Carousel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforePageChanged" href="#/api/sap.m.Carousel/events/beforePageChanged">beforePageChanged</a> event of this <code>sap.m.Carousel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Carousel</code> itself.</p><p>This event is fired before a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforePageChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.Carousel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="pageChanged" href="#/api/sap.m.Carousel/events/pageChanged">pageChanged</a> event of this <code>sap.m.Carousel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Carousel</code> itself.</p><p>This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPageChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.Carousel;
            /**
             * <p>Destroys the customLayout in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomLayout" href="#/api/sap.m.Carousel/methods/getCustomLayout">customLayout</a>.</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomLayout(): sap.m.Carousel;
            /**
             * <p>Destroys all the pages in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPages(): sap.m.Carousel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforePageChanged" href="#/api/sap.m.Carousel/events/beforePageChanged">beforePageChanged</a> event of this <code>sap.m.Carousel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforePageChanged(fnFunction: Function, oListener?: any): sap.m.Carousel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="pageChanged" href="#/api/sap.m.Carousel/events/pageChanged">pageChanged</a> event of this <code>sap.m.Carousel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPageChanged(fnFunction: Function, oListener?: any): sap.m.Carousel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforePageChanged" href="#/api/sap.m.Carousel/events/beforePageChanged">beforePageChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforePageChanged(mParameters?: any): sap.m.Carousel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="pageChanged" href="#/api/sap.m.Carousel/events/pageChanged">pageChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePageChanged(mParameters?: any): sap.m.Carousel;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActivePage" href="#/api/sap.m.Carousel/methods/getActivePage">activePage</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getActivePage(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getArrowsPlacement" href="#/api/sap.m.Carousel/methods/getArrowsPlacement">arrowsPlacement</a>.</p><p>Defines where the carousel's arrows are placed. Default is <code>sap.m.CarouselArrowsPlacement.Content</code> used to place the arrows on the sides of the carousel. Alternatively <code>sap.m.CarouselArrowsPlacement.PageIndicator</code> can be used to place the arrows on the sides of the page indicator.</p><p>Default value is <code>Content</code>.</p>
             * @returns sap.m.CarouselArrowsPlacement <p>Value of property <code>arrowsPlacement</code></p>
             */
            getArrowsPlacement(): sap.m.CarouselArrowsPlacement;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomLayout" href="#/api/sap.m.Carousel/methods/getCustomLayout">customLayout</a>.</p><p>Defines how many pages are displayed in the visible area of the <code>Carousel</code> control.</p><p><b>Note:</b> When this property is used, the <code>loop</code> property is ignored.</p>
             * @returns sap.m.CarouselLayout 
             */
            getCustomLayout(): sap.m.CarouselLayout;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Carousel/methods/getHeight">height</a>.</p><p>The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLoop" href="#/api/sap.m.Carousel/methods/getLoop">loop</a>.</p><p>Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>loop</code></p>
             */
            getLoop(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageIndicatorPlacement" href="#/api/sap.m.Carousel/methods/getPageIndicatorPlacement">pageIndicatorPlacement</a>.</p><p>Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.</p><p>Default value is <code>Bottom</code>.</p>
             * @returns sap.m.PlacementType <p>Value of property <code>pageIndicatorPlacement</code></p>
             */
            getPageIndicatorPlacement(): sap.m.PlacementType;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p><p>The content which the carousel displays.</p>
             * @returns sap.ui.core.Control[] 
             */
            getPages(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPageIndicator" href="#/api/sap.m.Carousel/methods/getShowPageIndicator">showPageIndicator</a>.</p><p>Show or hide carousel's page indicator.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showPageIndicator</code></p>
             */
            getShowPageIndicator(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Carousel/methods/getWidth">width</a>.</p><p>The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oPage <p>The page whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPage(oPage: sap.ui.core.Control): number;
            /**
             * <p>Inserts a page into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p>
             * @param {sap.ui.core.Control} oPage <p>The page to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the page should be inserted at; for a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value greater than the current size of the aggregation, the page is inserted at the last position</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPage(oPage: sap.ui.core.Control, iIndex: number): sap.m.Carousel;
            /**
             * <p>Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.</p>
             * @returns sap.m.Carousel 
             */
            next(): sap.m.Carousel;
            /**
             * <p>Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.</p>
             * @returns sap.m.Carousel 
             */
            previous(): sap.m.Carousel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPages(): sap.ui.core.Control[];
            /**
             * <p>Removes a page from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.Carousel/methods/getPages">pages</a>.</p>
             * @param {number | string | sap.ui.core.Control} vPage <p>The page to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed page or <code>null</code></p>
             */
            removePage(vPage: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActivePage" href="#/api/sap.m.Carousel/methods/getActivePage">activePage</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oActivePage <p>ID of an element which becomes the new target of this activePage association; alternatively, an element instance may be given</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActivePage(oActivePage: sap.ui.core.ID | sap.ui.core.Control): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getArrowsPlacement" href="#/api/sap.m.Carousel/methods/getArrowsPlacement">arrowsPlacement</a>.</p><p>Defines where the carousel's arrows are placed. Default is <code>sap.m.CarouselArrowsPlacement.Content</code> used to place the arrows on the sides of the carousel. Alternatively <code>sap.m.CarouselArrowsPlacement.PageIndicator</code> can be used to place the arrows on the sides of the page indicator.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Content</code>.</p>
             * @param {sap.m.CarouselArrowsPlacement} sArrowsPlacement <p>New value for property <code>arrowsPlacement</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setArrowsPlacement(sArrowsPlacement: sap.m.CarouselArrowsPlacement): sap.m.Carousel;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomLayout" href="#/api/sap.m.Carousel/methods/getCustomLayout">customLayout</a>.</p>
             * @param {sap.m.CarouselLayout} oCustomLayout <p>The customLayout to set</p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomLayout(oCustomLayout: sap.m.CarouselLayout): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Carousel/methods/getHeight">height</a>.</p><p>The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLoop" href="#/api/sap.m.Carousel/methods/getLoop">loop</a>.</p><p>Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bLoop <p>New value for property <code>loop</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLoop(bLoop: boolean): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageIndicatorPlacement" href="#/api/sap.m.Carousel/methods/getPageIndicatorPlacement">pageIndicatorPlacement</a>.</p><p>Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Bottom</code>.</p>
             * @param {sap.m.PlacementType} sPageIndicatorPlacement <p>New value for property <code>pageIndicatorPlacement</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPageIndicatorPlacement(sPageIndicatorPlacement: sap.m.PlacementType): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPageIndicator" href="#/api/sap.m.Carousel/methods/getShowPageIndicator">showPageIndicator</a>.</p><p>Show or hide carousel's page indicator.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowPageIndicator <p>New value for property <code>showPageIndicator</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowPageIndicator(bShowPageIndicator: boolean): sap.m.Carousel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Carousel/methods/getWidth">width</a>.</p><p>The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Carousel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Carousel;
        }
        /**
         * <p><p>Carousel arrows align.</p></p>
         */
        export enum CarouselArrowsPlacement {
            /**
             * <p>Carousel arrows are placed on the sides of the current Carousel page.</p>
             */
            Content = "Content",
            /**
             * <p>Carousel arrows are placed on the sides of the page indicator of the Carousel.</p>
             */
            PageIndicator = "PageIndicator",
        }
        /**
         * <p>Applies a <code>sap.m.CarouselLayout</code> to a provided DOM element or Control.</p>
         */
        export class CarouselLayout extends sap.ui.base.ManagedObject {
            /**
             * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisiblePagesCount" href="#/api/sap.m.CarouselLayout/methods/getVisiblePagesCount">visiblePagesCount</a>.</p><p>Defines how many pages are displayed in the visible area of the <code>Carousel</code> control. Value should be a positive number.</p><p><b>Note:</b> When this property is set to something different than the default value, the <code>loop</code> property of <code>Carousel</code> is ignored.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>visiblePagesCount</code></p>
             */
            getVisiblePagesCount(): number;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisiblePagesCount" href="#/api/sap.m.CarouselLayout/methods/getVisiblePagesCount">visiblePagesCount</a>.</p><p>Defines how many pages are displayed in the visible area of the <code>Carousel</code> control. Value should be a positive number.</p><p><b>Note:</b> When this property is set to something different than the default value, the <code>loop</code> property of <code>Carousel</code> is ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iVisiblePagesCount <p>New value for property <code>visiblePagesCount</code></p>
             * @returns sap.m.CarouselLayout <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisiblePagesCount(iVisiblePagesCount: number): sap.m.CarouselLayout;
        }
        /**
         * <p>Allows the user to set a binary value, such as true/false or yes/no for an item.</p><h3>Overview</h3><p>The <code>CheckBox</code> control consists of a box and a label that describes its purpose. If it's checked, an indicator is displayed inside the box.</p><p>To select/deselect the <code>CheckBox</code>, the user has to click or tap the square box or its label. Clicking or tapping toggles the <code>CheckBox</code> between checked and unchecked state. The <code>CheckBox</code> control only has 3 states - checked, unchecked and partially selected.</p><h3>Usage</h3><p>You can set the width of the element containing the box and the label manually with the use of the <code>width</code> property. If the text exceeds the available width, it is truncated.</p><p><b>Note:</b> When <code>useEntireWidth</code> property is set to <code>true</code>, the value of the <code>width</code> property is applied to the control as a whole (box and label). If <code>useEntireWidth</code> is set to <code>false</code>, the <code>width</code> is applied to the label only.</p><p>The touchable area for toggling the <code>CheckBox</code> ends where the text ends.</p><p>If the width allows more space than the text requires, white space is added. The text can be positioned manually in this space using the <code>textAlign</code> property.</p><p><b>Note:</b> Keep in mind that setting the <code>textAlign</code> property to <code>Right</code> can result in a large amount of white space between the box and the text.</p><p>You can disable the <code>CheckBox</code> by setting the <code>enabled</code> property to <code>false</code>, or use the <code>CheckBox</code> in read-only mode by setting the <code>editable</code> property to false.</p><p><b>Note:</b> Disabled and read-only states shouldn't be used together.</p>
         */
        export class CheckBox extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>CheckBox</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>The ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>The Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.CheckBox/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.CheckBox;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.CheckBox/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.CheckBox;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.CheckBox/events/select">select</a> event of this <code>sap.m.CheckBox</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.CheckBox</code> itself.</p><p>Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code> itself</p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.CheckBox;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.CheckBox/events/select">select</a> event of this <code>sap.m.CheckBox</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.CheckBox;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.CheckBox/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.CheckBox;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.CheckBox</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveHandling" href="#/api/sap.m.CheckBox/methods/getActiveHandling">activeHandling</a>.</p><p>Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>activeHandling</code></p>
             */
            getActiveHandling(): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.CheckBox/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.CheckBox/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.CheckBox/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines whether the <code>CheckBox</code> is in display only state.</p><p>When set to <code>true</code>, the <code>CheckBox</code> is not interactive, not editable, not focusable and not in the tab chain. This setting is used for forms in review mode.</p><p><Note:> When the property <code>enabled</code> is set to <code>false</code> this property has no effect.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>displayOnly</code></p>
             */
            getDisplayOnly(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.CheckBox/methods/getEditable">editable</a>.</p><p>Specifies whether the user shall be allowed to edit the state of the checkbox</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.CheckBox/methods/getEnabled">enabled</a>.</p><p>Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.CheckBox/methods/getName">name</a>.</p><p>The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPartiallySelected" href="#/api/sap.m.CheckBox/methods/getPartiallySelected">partiallySelected</a>.</p><p>Determines whether the <code>CheckBox</code> is displayed as partially selected.</p><p><b>Note:</b> This property leads only to visual change of the checkbox and the state cannot be achieved by user interaction. The visual state depends on the value of the <code>selected</code> property: <ul> <li>If <code>selected</code> = <code>true</code> and <code>partiallySelected</code> = <code>true</code>, the control is displayed as partially selected</li> <li>If <code>selected</code> = <code>true</code> and <code>partiallySelected</code> = <code>false</code>, the control is displayed as selected</li> <li>If <code>selected</code> = <code>false</code>, the control is displayed as not selected regardless of what is set for <code>partiallySelected</code></li> </ul></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>partiallySelected</code></p>
             */
            getPartiallySelected(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.CheckBox/methods/getSelected">selected</a>.</p><p>Determines whether the <code>CheckBox</code> is selected (checked).</p><p>When this property is set to <code>true</code>, the control is displayed as selected, unless the value of the <code>partiallySelected</code> property is also set to <code>true</code>. In this case, the control is displayed as partially selected.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Returns the CheckBox`s tab index.</p>
             * @returns number <p>iTabIndex for Checkbox</p>
             */
            protected getTabIndex(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.CheckBox/methods/getText">text</a>.</p><p>Defines the text displayed next to the checkbox</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.CheckBox/methods/getTextAlign">textAlign</a>.</p><p>Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.CheckBox/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseEntireWidth" href="#/api/sap.m.CheckBox/methods/getUseEntireWidth">useEntireWidth</a>.</p><p>Indicates if the given width will be applied to the control as a whole or to its label only.</p><p><b>Note:</b> by default the width is set to the label</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>useEntireWidth</code></p>
             */
            getUseEntireWidth(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.CheckBox/methods/getValueState">valueState</a>.</p><p>Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and 'Information'.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.CheckBox/methods/getWidth">width</a>.</p><p>Determines the total width of the control or the width of its label only, depending on the value of <code>useEntireWidth</code>.</p><p><b>Note:</b> When <code>useEntireWidth</code> is set to <code>true</code>, <code>width</code> is applied to the control as a whole (checkbox and label). Otherwise, <code>width</code> is applied to the label only.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.CheckBox/methods/getWrapping">wrapping</a>.</p><p>Determines whether the label's text is wrapped.</p><p>When set to <code>false</code> (default), the label's text is truncated with ellipsis at the end.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.CheckBox/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.CheckBox/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.CheckBox/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.CheckBox/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveHandling" href="#/api/sap.m.CheckBox/methods/getActiveHandling">activeHandling</a>.</p><p>Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bActiveHandling <p>New value for property <code>activeHandling</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveHandling(bActiveHandling: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.CheckBox/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines whether the <code>CheckBox</code> is in display only state.</p><p>When set to <code>true</code>, the <code>CheckBox</code> is not interactive, not editable, not focusable and not in the tab chain. This setting is used for forms in review mode.</p><p><Note:> When the property <code>enabled</code> is set to <code>false</code> this property has no effect.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisplayOnly <p>New value for property <code>displayOnly</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayOnly(bDisplayOnly: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.CheckBox/methods/getEditable">editable</a>.</p><p>Specifies whether the user shall be allowed to edit the state of the checkbox</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.CheckBox/methods/getEnabled">enabled</a>.</p><p>Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.CheckBox/methods/getName">name</a>.</p><p>The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPartiallySelected" href="#/api/sap.m.CheckBox/methods/getPartiallySelected">partiallySelected</a>.</p><p>Determines whether the <code>CheckBox</code> is displayed as partially selected.</p><p><b>Note:</b> This property leads only to visual change of the checkbox and the state cannot be achieved by user interaction. The visual state depends on the value of the <code>selected</code> property: <ul> <li>If <code>selected</code> = <code>true</code> and <code>partiallySelected</code> = <code>true</code>, the control is displayed as partially selected</li> <li>If <code>selected</code> = <code>true</code> and <code>partiallySelected</code> = <code>false</code>, the control is displayed as selected</li> <li>If <code>selected</code> = <code>false</code>, the control is displayed as not selected regardless of what is set for <code>partiallySelected</code></li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bPartiallySelected <p>New value for property <code>partiallySelected</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPartiallySelected(bPartiallySelected: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.CheckBox/methods/getSelected">selected</a>.</p><p>Determines whether the <code>CheckBox</code> is selected (checked).</p><p>When this property is set to <code>true</code>, the control is displayed as selected, unless the value of the <code>partiallySelected</code> property is also set to <code>true</code>. In this case, the control is displayed as partially selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.CheckBox;
            /**
             * <p>Sets the tab index of the control</p>
             * @param {number} iTabIndex <p>The tab index should be greater than or equal -1</p>
             * @returns sap.m.CheckBox <p>The <code>sap.m.CheckBox</code> instance</p>
             */
            protected setTabIndex(iTabIndex: number): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.CheckBox/methods/getText">text</a>.</p><p>Defines the text displayed next to the checkbox</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.CheckBox/methods/getTextAlign">textAlign</a>.</p><p>Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.CheckBox/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseEntireWidth" href="#/api/sap.m.CheckBox/methods/getUseEntireWidth">useEntireWidth</a>.</p><p>Indicates if the given width will be applied to the control as a whole or to its label only.</p><p><b>Note:</b> by default the width is set to the label</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUseEntireWidth <p>New value for property <code>useEntireWidth</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUseEntireWidth(bUseEntireWidth: boolean): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.CheckBox/methods/getValueState">valueState</a>.</p><p>Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning', 'Success' and 'Information'.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.CheckBox/methods/getWidth">width</a>.</p><p>Determines the total width of the control or the width of its label only, depending on the value of <code>useEntireWidth</code>.</p><p><b>Note:</b> When <code>useEntireWidth</code> is set to <code>true</code>, <code>width</code> is applied to the control as a whole (checkbox and label). Otherwise, <code>width</code> is applied to the label only.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.CheckBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.CheckBox/methods/getWrapping">wrapping</a>.</p><p>Determines whether the label's text is wrapped.</p><p>When set to <code>false</code> (default), the label's text is truncated with ellipsis at the end.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.CheckBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.CheckBox;
        }
        /**
         * <p>Represents a predefined range of colors for easier selection.</p><h3>Overview</h3><p> The <code>ColorPalette</code> provides the users with a range of predefined colors.</p><p>You can customize them with the use of the <code>colors</code> property. You can specify a <code>defaultColor</code> and display a "Default color" button for the user to choose directly. You can display a "More colors..." button that opens an additional color picker for the user to choose specific colors that are not present in the predefined range.</p><h3>Usage</h3><p>The palette is intended for users, who don't want to check and remember the different values of the colors and spend large amount of time to configure the right color through the color picker.</p><p>The control can be embedded in a form or can be opened as popover (by use of thin wrapper control <code>sap.m.ColorPalettePopover</code>).<br><br><span>Documentation links:</span><ul><li><a target="_self" class="jsdoclink" href="#/api/sap.m.ColorPalettePopover">sap.m.ColorPalettePopover</a></p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.ColorPicker">sap.ui.unified.ColorPicker</a> is used internally only if the <code>ColorPicker</code>
        is opened (not used for the initial rendering). If the <code>sap.ui.unified</code> library is not loaded
        before the <code>ColorPicker</code> is opened, it will be loaded upon opening. This could lead to a waiting
        time when the <code>ColorPicker</code> is opened for the first time. To prevent this, apps using the
        <code>ColorPalette</code> should also load the <code>sap.ui.unified</code> library.</li></ul></p>
         */
        export class ColorPalette extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ColorPalette</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalette/events/colorSelect">colorSelect</a> event of this <code>sap.m.ColorPalette</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ColorPalette</code> itself.</p><p>Fired when the user selects a color.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ColorPalette</code> itself</p>
             * @returns sap.m.ColorPalette <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachColorSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.ColorPalette;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalette/events/colorSelect">colorSelect</a> event of this <code>sap.m.ColorPalette</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ColorPalette <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachColorSelect(fnFunction: Function, oListener?: any): sap.m.ColorPalette;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalette/events/colorSelect">colorSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ColorPalette <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireColorSelect(mParameters?: any): sap.m.ColorPalette;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColors" href="#/api/sap.m.ColorPalette/methods/getColors">colors</a>.</p><p>Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.</p><p>Default value is <code>gold,darkorange,indianred,darkmagenta,cornflowerblue,deepskyblue,darkcyan,olivedrab,darkslategray,azure,white,lightgray,darkgray,dimgray,black</code>.</p>
             * @returns sap.ui.core.CSSColor[] <p>Value of property <code>colors</code></p>
             */
            getColors(): sap.ui.core.CSSColor[];
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColors" href="#/api/sap.m.ColorPalette/methods/getColors">colors</a>.</p><p>Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>gold,darkorange,indianred,darkmagenta,cornflowerblue,deepskyblue,darkcyan,olivedrab,darkslategray,azure,white,lightgray,darkgray,dimgray,black</code>.</p>
             * @param {sap.ui.core.CSSColor[]} sColors <p>New value for property <code>colors</code></p>
             * @returns sap.m.ColorPalette <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColors(sColors: sap.ui.core.CSSColor[]): sap.m.ColorPalette;
        }
        /**
         * <p>A thin wrapper over <a target="_self" class="jsdoclink" href="#/api/sap.m.ColorPalette">sap.m.ColorPalette</a> allowing the latter to be used in a popover.</p>
         */
        export class ColorPalettePopover extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ColorPalettePopover</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalettePopover/events/colorSelect">colorSelect</a> event of this <code>sap.m.ColorPalettePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ColorPalettePopover</code> itself.</p><p>Fired when the user selects a color.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ColorPalettePopover</code> itself</p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachColorSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.ColorPalettePopover;
            /**
             * <p>Closes the <code>ColorPalettePopover</code>.</p>
             * @returns sap.ui.core.Control 
             */
            close(): sap.ui.core.Control;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalettePopover/events/colorSelect">colorSelect</a> event of this <code>sap.m.ColorPalettePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachColorSelect(fnFunction: Function, oListener?: any): sap.m.ColorPalettePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalettePopover/events/colorSelect">colorSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireColorSelect(mParameters?: any): sap.m.ColorPalettePopover;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColors" href="#/api/sap.m.ColorPalettePopover/methods/getColors">colors</a>.</p><p>Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.</p><p>Default value is <code>gold,darkorange,indianred,darkmagenta,cornflowerblue,deepskyblue,darkcyan,olivedrab,darkslategray,azure,white,lightgray,darkgray,dimgray,black</code>.</p>
             * @returns sap.ui.core.CSSColor[] <p>Value of property <code>colors</code></p>
             */
            getColors(): sap.ui.core.CSSColor[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultColor" href="#/api/sap.m.ColorPalettePopover/methods/getDefaultColor">defaultColor</a>.</p><p>The color, which the app developer will receive when end-user chooses the "Default color" button. See event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalettePopover/events/colorSelect">colorSelect</a>.</p>
             * @returns sap.ui.core.CSSColor <p>Value of property <code>defaultColor</code></p>
             */
            getDefaultColor(): sap.ui.core.CSSColor;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayMode" href="#/api/sap.m.ColorPalettePopover/methods/getDisplayMode">displayMode</a>.</p><p>Determines the <code>displayMode</code> of the <code>ColorPicker</code> among three types - Default, Large and Simplified</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.ui.unified.ColorPickerDisplayMode <p>Value of property <code>displayMode</code></p>
             */
            getDisplayMode(): sap.ui.unified.ColorPickerDisplayMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDefaultColorButton" href="#/api/sap.m.ColorPalettePopover/methods/getShowDefaultColorButton">showDefaultColorButton</a>.</p><p>Indicates if the button for default color selection is available.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showDefaultColorButton</code></p>
             */
            getShowDefaultColorButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowMoreColorsButton" href="#/api/sap.m.ColorPalettePopover/methods/getShowMoreColorsButton">showMoreColorsButton</a>.</p><p>Denotes if the color has been chosen by selecting the "Default Color" button (true or false)</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showMoreColorsButton</code></p>
             */
            getShowMoreColorsButton(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColors" href="#/api/sap.m.ColorPalettePopover/methods/getColors">colors</a>.</p><p>Defines the List of colors displayed in the palette. Minimum is 2 colors, maximum is 15 colors.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>gold,darkorange,indianred,darkmagenta,cornflowerblue,deepskyblue,darkcyan,olivedrab,darkslategray,azure,white,lightgray,darkgray,dimgray,black</code>.</p>
             * @param {sap.ui.core.CSSColor[]} sColors <p>New value for property <code>colors</code></p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColors(sColors: sap.ui.core.CSSColor[]): sap.m.ColorPalettePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultColor" href="#/api/sap.m.ColorPalettePopover/methods/getDefaultColor">defaultColor</a>.</p><p>The color, which the app developer will receive when end-user chooses the "Default color" button. See event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="colorSelect" href="#/api/sap.m.ColorPalettePopover/events/colorSelect">colorSelect</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSColor} sDefaultColor <p>New value for property <code>defaultColor</code></p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDefaultColor(sDefaultColor: sap.ui.core.CSSColor): sap.m.ColorPalettePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayMode" href="#/api/sap.m.ColorPalettePopover/methods/getDisplayMode">displayMode</a>.</p><p>Determines the <code>displayMode</code> of the <code>ColorPicker</code> among three types - Default, Large and Simplified</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.ui.unified.ColorPickerDisplayMode} sDisplayMode <p>New value for property <code>displayMode</code></p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayMode(sDisplayMode: sap.ui.unified.ColorPickerDisplayMode): sap.m.ColorPalettePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDefaultColorButton" href="#/api/sap.m.ColorPalettePopover/methods/getShowDefaultColorButton">showDefaultColorButton</a>.</p><p>Indicates if the button for default color selection is available.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowDefaultColorButton <p>New value for property <code>showDefaultColorButton</code></p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowDefaultColorButton(bShowDefaultColorButton: boolean): sap.m.ColorPalettePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowMoreColorsButton" href="#/api/sap.m.ColorPalettePopover/methods/getShowMoreColorsButton">showMoreColorsButton</a>.</p><p>Denotes if the color has been chosen by selecting the "Default Color" button (true or false)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowMoreColorsButton <p>New value for property <code>showMoreColorsButton</code></p>
             * @returns sap.m.ColorPalettePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowMoreColorsButton(bShowMoreColorsButton: boolean): sap.m.ColorPalettePopover;
        }
        /**
         * <p>The <code>sap.m.Column</code> allows to define column specific properties that will be applied when rendering the <code>sap.m.Table</code>.</p><p>See section "<a target="_self" href="#/topic/6f778a805bc3453dbb66e246d8271839">Defining Column Width</a>" in the documentation to understand how to define the <code>width</code> property of the <code>sap.m.Column</code> to render a <code>sap.m.Table</code> control properly.</p>
         */
        export class Column extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new Column.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Clears the last value of the column if mergeDuplicates property is true</p>
             * @returns sap.m.Column 
             */
            protected clearLastValue(): sap.m.Column;
            /**
             * <p>Destroys the footer in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Column/methods/getFooter">footer</a>.</p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFooter(): sap.m.Column;
            /**
             * <p>Destroys the header in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.Column/methods/getHeader">header</a>.</p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeader(): sap.m.Column;
            /**
             * <p>Returns CSS alignment according to column hAlign setting or given parameter for Begin/End values checks the locale settings</p>
             * @param {String} sAlign <p>TextAlign enumeration</p>
             * @returns String <p>left|center|right</p>
             */
            protected getCssAlign(sAlign?: String): String;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDemandPopin" href="#/api/sap.m.Column/methods/getDemandPopin">demandPopin</a>.</p><p>According to your minScreenWidth settings, the column can be hidden in different screen sizes. Setting this property to true, shows this column as pop-in instead of hiding it.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>demandPopin</code></p>
             */
            getDemandPopin(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Column/methods/getFooter">footer</a>.</p><p>Control to be displayed in the column footer.</p>
             * @returns sap.ui.core.Control 
             */
            getFooter(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHAlign" href="#/api/sap.m.Column/methods/getHAlign">hAlign</a>.</p><p>Defines the horizontal alignment of the column content.</p><p><b>Note:</b> Text controls with a <code>textAlign</code> property inherits the horizontal alignment.</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>hAlign</code></p>
             */
            getHAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.Column/methods/getHeader">header</a>.</p><p>Control to be displayed in the column header.</p>
             * @returns sap.ui.core.Control 
             */
            getHeader(): sap.ui.core.Control;
            /**
             * <p>Gets the initial order of the column</p>
             * @returns number <p>initial order of the column</p>
             */
            protected getInitialOrder(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMergeDuplicates" href="#/api/sap.m.Column/methods/getMergeDuplicates">mergeDuplicates</a>.</p><p>Set <code>true</code> to merge repeating/duplicate cells into one cell block. See <code>mergeFunctionName</code> property to customize. <b>Note:</b> Merging only happens at the rendering of the <code>sap.m.Table</code> control, subsequent changes on the cell or item do not have any effect on the merged state of the cells, therefore this feature should not be used together with two-way binding. This property is ignored if any column is configured to be shown as a pop-in.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>mergeDuplicates</code></p>
             */
            getMergeDuplicates(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMergeFunctionName" href="#/api/sap.m.Column/methods/getMergeFunctionName">mergeFunctionName</a>.</p><p>Defines the control serialization function if <code>mergeDuplicates</code> property is set to <code>true</code>. The control itself uses this function to compare values of two repeating cells. Default value "getText" is suitable for <code>sap.m.Label</code> and <code>sap.m.Text</code> controls but for the <code>sap.ui.core.Icon</code> control "getSrc" function should be used to merge icons. <b>Note:</b> You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"</p><p>Default value is <code>getText</code>.</p>
             * @returns string <p>Value of property <code>mergeFunctionName</code></p>
             */
            getMergeFunctionName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinScreenWidth" href="#/api/sap.m.Column/methods/getMinScreenWidth">minScreenWidth</a>.</p><p>Defines the minimum screen width to show or hide this column. By default column is always shown. The responsive behavior of the <code>sap.m.Table</code> is determined by this property. As an example by setting <code>minScreenWidth</code> property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile. As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the <a target="_self" class="jsdoclink" href="#/api/sap.m.ScreenSize">sap.m.ScreenSize</a> enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....). Please also see <code>demandPopin</code> property for further responsive design options.</p>
             * @returns string <p>Value of property <code>minScreenWidth</code></p>
             */
            getMinScreenWidth(): string;
            /**
             * <p>Gets the order of the column</p>
             * @returns number <p>nOrder order of the column</p>
             */
            protected getOrder(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopinDisplay" href="#/api/sap.m.Column/methods/getPopinDisplay">popinDisplay</a>.</p><p>Defines enumerated display options for the pop-in.</p><p>Default value is <code>Block</code>.</p>
             * @returns sap.m.PopinDisplay <p>Value of property <code>popinDisplay</code></p>
             */
            getPopinDisplay(): sap.m.PopinDisplay;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortIndicator" href="#/api/sap.m.Column/methods/getSortIndicator">sortIndicator</a>.</p><p>Defines if a column is sorted by setting the sort indicator for this column.</p><p><b>Note:</b> Defining this property does not trigger the sorting.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.SortOrder <p>Value of property <code>sortIndicator</code></p>
             */
            getSortIndicator(): sap.ui.core.SortOrder;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStyleClass" href="#/api/sap.m.Column/methods/getStyleClass">styleClass</a>.</p><p>CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.</p>
             * @returns string <p>Value of property <code>styleClass</code></p>
             */
            getStyleClass(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.Column/methods/getVAlign">vAlign</a>.</p><p>Defines the vertical alignment of the cells in a column. This property does not affect the vertical alignment of header and footer.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.VerticalAlign <p>Value of property <code>vAlign</code></p>
             */
            getVAlign(): sap.ui.core.VerticalAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.Column/methods/getVisible">visible</a>.</p><p>Specifies whether or not the column is visible. Invisible columns are not rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Column/methods/getWidth">width</a>.</p><p>Defines the width of the column. If you leave it empty then this column covers the remaining space.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Determines whether the column will be hidden via media queries or not</p>
             */
            protected isHidden(): void;
            /**
             * <p>Determines whether the column will be shown as pop-in or not</p>
             */
            protected isPopin(): void;
            /**
             * <p>Gets called from the Table when the all items are removed</p>
             */
            protected onItemsRemoved(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDemandPopin" href="#/api/sap.m.Column/methods/getDemandPopin">demandPopin</a>.</p><p>According to your minScreenWidth settings, the column can be hidden in different screen sizes. Setting this property to true, shows this column as pop-in instead of hiding it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDemandPopin <p>New value for property <code>demandPopin</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDemandPopin(bDemandPopin: boolean): sap.m.Column;
            /**
             * <p>Display or hide the column from given table This does not set the visibility property of the column</p>
             * @param {any} oTableDomRef <p>Table DOM reference</p>
             * @param {boolean} bDisplay <p>whether visible or not</p>
             */
            protected setDisplay(oTableDomRef: any, bDisplay?: boolean): void;
            /**
             * <p>Display or hide the column from given table via checking media query changes</p>
             * @param {any} oTableDomRef <p>Table DOM reference</p>
             */
            protected setDisplayViaMedia(oTableDomRef: any): void;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Column/methods/getFooter">footer</a>.</p>
             * @param {sap.ui.core.Control} oFooter <p>The footer to set</p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooter(oFooter: sap.ui.core.Control): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHAlign" href="#/api/sap.m.Column/methods/getHAlign">hAlign</a>.</p><p>Defines the horizontal alignment of the column content.</p><p><b>Note:</b> Text controls with a <code>textAlign</code> property inherits the horizontal alignment.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sHAlign <p>New value for property <code>hAlign</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHAlign(sHAlign: sap.ui.core.TextAlign): sap.m.Column;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.Column/methods/getHeader">header</a>.</p>
             * @param {sap.ui.core.Control} oHeader <p>The header to set</p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeader(oHeader: sap.ui.core.Control): sap.m.Column;
            /**
             * <p>Sets the visible column index Negative index values can be used to clear</p>
             * @param {number} nIndex <p>index of the visible column</p>
             */
            protected setIndex(nIndex: number): void;
            /**
             * <p>Sets the initial order of the column</p>
             * @param {number} nOrder <p>initial order of the column</p>
             */
            protected setInitialOrder(nOrder: number): void;
            /**
             * <p>Sets the last value of the column if mergeDuplicates property is true</p>
             * @param {any} value <p>Any Value</p>
             * @returns sap.m.Column 
             */
            protected setLastValue(value: any): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMergeDuplicates" href="#/api/sap.m.Column/methods/getMergeDuplicates">mergeDuplicates</a>.</p><p>Set <code>true</code> to merge repeating/duplicate cells into one cell block. See <code>mergeFunctionName</code> property to customize. <b>Note:</b> Merging only happens at the rendering of the <code>sap.m.Table</code> control, subsequent changes on the cell or item do not have any effect on the merged state of the cells, therefore this feature should not be used together with two-way binding. This property is ignored if any column is configured to be shown as a pop-in.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bMergeDuplicates <p>New value for property <code>mergeDuplicates</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMergeDuplicates(bMergeDuplicates: boolean): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMergeFunctionName" href="#/api/sap.m.Column/methods/getMergeFunctionName">mergeFunctionName</a>.</p><p>Defines the control serialization function if <code>mergeDuplicates</code> property is set to <code>true</code>. The control itself uses this function to compare values of two repeating cells. Default value "getText" is suitable for <code>sap.m.Label</code> and <code>sap.m.Text</code> controls but for the <code>sap.ui.core.Icon</code> control "getSrc" function should be used to merge icons. <b>Note:</b> You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>getText</code>.</p>
             * @param {string} sMergeFunctionName <p>New value for property <code>mergeFunctionName</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMergeFunctionName(sMergeFunctionName: string): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinScreenWidth" href="#/api/sap.m.Column/methods/getMinScreenWidth">minScreenWidth</a>.</p><p>Defines the minimum screen width to show or hide this column. By default column is always shown. The responsive behavior of the <code>sap.m.Table</code> is determined by this property. As an example by setting <code>minScreenWidth</code> property to "40em" (or "640px" or "Tablet") shows this column on tablet (and desktop) but hides on mobile. As you can give specific CSS sizes (e.g: "480px" or "40em"), you can also use the <a target="_self" class="jsdoclink" href="#/api/sap.m.ScreenSize">sap.m.ScreenSize</a> enumeration (e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....). Please also see <code>demandPopin</code> property for further responsive design options.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMinScreenWidth <p>New value for property <code>minScreenWidth</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinScreenWidth(sMinScreenWidth: string): sap.m.Column;
            /**
             * <p>Sets the order of the column Does not do the visual effect Table should be invalidate to re-render</p>
             * @param {number} nOrder <p>order of the column</p>
             */
            protected setOrder(nOrder: number): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopinDisplay" href="#/api/sap.m.Column/methods/getPopinDisplay">popinDisplay</a>.</p><p>Defines enumerated display options for the pop-in.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Block</code>.</p>
             * @param {sap.m.PopinDisplay} sPopinDisplay <p>New value for property <code>popinDisplay</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPopinDisplay(sPopinDisplay: sap.m.PopinDisplay): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortIndicator" href="#/api/sap.m.Column/methods/getSortIndicator">sortIndicator</a>.</p><p>Defines if a column is sorted by setting the sort indicator for this column.</p><p><b>Note:</b> Defining this property does not trigger the sorting.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.SortOrder} sSortIndicator <p>New value for property <code>sortIndicator</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSortIndicator(sSortIndicator: sap.ui.core.SortOrder): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStyleClass" href="#/api/sap.m.Column/methods/getStyleClass">styleClass</a>.</p><p>CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sStyleClass <p>New value for property <code>styleClass</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStyleClass(sStyleClass: string): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.Column/methods/getVAlign">vAlign</a>.</p><p>Defines the vertical alignment of the cells in a column. This property does not affect the vertical alignment of header and footer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.VerticalAlign} sVAlign <p>New value for property <code>vAlign</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVAlign(sVAlign: sap.ui.core.VerticalAlign): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.Column/methods/getVisible">visible</a>.</p><p>Specifies whether or not the column is visible. Invisible columns are not rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Column/methods/getWidth">width</a>.</p><p>Defines the width of the column. If you leave it empty then this column covers the remaining space.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Column <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Column;
        }
        /**
         * <p><code>sap.m.ColumnListItem</code> can be used with the <code>cells</code> aggregation to create rows for the <code>sap.m.Table</code> control. The <code>columns</code> aggregation of the <code>sap.m.Table</code> should match with the cells aggregation.</p><p><b>Note:</b> This control should only be used within the <code>sap.m.Table</code> control. The inherited <code>counter</code> property of <code>sap.m.ListItemBase</code> is not supported.</p>
         */
        export class ColumnListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new ColumnListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Returns pop-in DOMRef as a jQuery Object</p>
             */
            protected $Popin(): void;
            /**
             * <p>Adds some cell to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p>
             * @param {sap.ui.core.Control} oCell <p>The cell to add; if empty, nothing is inserted</p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addCell(oCell: sap.ui.core.Control): sap.m.ColumnListItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindCells(oBindingInfo: any): sap.m.ColumnListItem;
            /**
             * <p>Destroys all the cells in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCells(): sap.m.ColumnListItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p><p>Every <code>control</code> inside the <code>cells</code> aggregation defines one cell of the row. <b>Note:</b> The order of the <code>cells</code> aggregation must match the order of the <code>columns</code> aggregation of <code>sap.m.Table</code>.</p>
             * @returns sap.ui.core.Control[] 
             */
            getCells(): sap.ui.core.Control[];
            /**
             * <p>Returns the tabbable DOM elements as a jQuery collection</p>
             * @returns any <p>jQuery object</p>
             */
            protected getTabbables(): any;
            /**
             * <p>Returns the tabbable DOM elements as a jQuery collection When popin is available this separated dom should also be included</p>
             * @returns any <p>jQuery object</p>
             */
            protected getTabbables(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.ColumnListItem/methods/getVAlign">vAlign</a>.</p><p>Sets the vertical alignment of all the cells within the table row (including selection and navigation). <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.VerticalAlign <p>Value of property <code>vAlign</code></p>
             */
            getVAlign(): sap.ui.core.VerticalAlign;
            /**
             * <p>Determines whether control has pop-in or not.</p>
             */
            protected hasPopin(): void;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oCell <p>The cell whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfCell(oCell: sap.ui.core.Control): number;
            /**
             * <p>Inserts a cell into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p>
             * @param {sap.ui.core.Control} oCell <p>The cell to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the cell should be inserted at; for a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value greater than the current size of the aggregation, the cell is inserted at the last position</p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertCell(oCell: sap.ui.core.Control, iIndex: number): sap.m.ColumnListItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllCells(): sap.ui.core.Control[];
            /**
             * <p>Removes a cell from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a>.</p>
             * @param {number | string | sap.ui.core.Control} vCell <p>The cell to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed cell or <code>null</code></p>
             */
            removeCell(vCell: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Pemove pop-in from DOM</p>
             */
            protected removePopin(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.ColumnListItem/methods/getVAlign">vAlign</a>.</p><p>Sets the vertical alignment of all the cells within the table row (including selection and navigation). <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.VerticalAlign} sVAlign <p>New value for property <code>vAlign</code></p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVAlign(sVAlign: sap.ui.core.VerticalAlign): sap.m.ColumnListItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.m.ColumnListItem/methods/getCells">cells</a> from model data.</p>
             * @returns sap.m.ColumnListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindCells(): sap.m.ColumnListItem;
        }
        /**
         * <p>A drop-down list for selecting and filtering values. </p><h3>Overview</h3><p> The control represents a drop-down menu with a list of the available options and a text input field to narrow down the options. </p><h3>Structure</h3><p> The combo-box consists of the following elements: <ul> <li> Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.</li> <li> Drop-down arrow - expands\collapses the option list.</li> <li> Option list - the list of available options.</li> </ul> By setting the <code>showSecondaryValues</code> property, the combo box can display an additional value for each option (if there is one). </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You need to select only one item in a long list of options (between 13 and 200) or your custom user input.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>You need to select between only two options. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Switch">switch</a> control instead.</li> <li>You need to select between up to 12 options. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">select</a> control instead.</li> <li>You need to select between more than 200 options. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Input">input</a> control with value help instead.</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>The width of the option list adapts to its content. The minimum width is the input field plus the drop-down arrow.</li> <li>There is no horizontal scrolling in the option list. Entries in the list that are too long will be truncated.</li> <li>On phone devices the combo box option list opens a dialog.</li> </ul></p>
         */
        export class ComboBox extends sap.m.ComboBoxBase {
            /**
             * <p>Constructor for a new ComboBox.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Configures the SuggestionsPopover's list.</p>
             * @param {sap.m.List} oList <p>The list instance to be configured</p>
             */
            protected _configureList(oList: sap.m.List): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> event of this <code>sap.m.InputBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.InputBase</code> itself.</p><p>Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code> itself</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.InputBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.ComboBox/events/change">change</a> event of this <code>sap.m.ComboBox</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ComboBox</code> itself.</p><p>This event is fired when the value in the text input field is changed in combination with one of the following actions:</p><p><ul> <li>The focus leaves the text input field</li> <li>The <i>Enter</i> key is pressed</li> </ul></p><p>In addition, this event is also fired when an item in the list is selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code> itself</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.ComboBox;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ComboBox/events/selectionChange">selectionChange</a> event of this <code>sap.m.ComboBox</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ComboBox</code> itself.</p><p>This event is fired when the user types something that matches with an item in the list; it is also fired when the user presses on a list item, or when navigating via keyboard.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code> itself</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.ComboBox;
            /**
             * <p>Clears the selection. To be overwritten by subclasses.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Clears the selection.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Closes the control's picker popup.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            close(): sap.m.ComboBoxBase;
            /**
             * <p>Closes the control's picker popup and focus input field.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            close(): sap.m.ComboBox;
            /**
             * <p>Base method for picker configuration</p>
             * @param {sap.m.Popover | sap.m.Dialog} oPicker <p>Picker instance</p>
             */
            protected configPicker(oPicker: sap.m.Popover | sap.m.Dialog): void;
            /**
             * <p><code>ComboBox</code> picker configuration</p>
             * @param {sap.m.Popover | sap.m.Dialog} oPicker <p>Picker instance</p>
             */
            protected configPicker(oPicker: sap.m.Popover | sap.m.Dialog): void;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a>.</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.ComboBoxBase;
            /**
             * <p>Destroys all the items in the aggregation named <code>items</code>.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            destroyItems(): sap.m.ComboBox;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> event of this <code>sap.m.InputBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.InputBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.ComboBox/events/change">change</a> event of this <code>sap.m.ComboBox</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.ComboBox;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ComboBox/events/selectionChange">selectionChange</a> event of this <code>sap.m.ComboBox</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.ComboBox;
            /**
             * <p>This method will be called when the ComboBox is being destroyed.</p>
             */
            protected exit(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.InputBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.ComboBox/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.ComboBox;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ComboBox/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.ComboBox;
            /**
             * <p>Gets the default selected item from the aggregation named <code>items</code>.</p>
             * @returns null <p>Null, as there is no default selected item</p>
             */
            protected getDefaultSelectedItem(): null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSecondaryValues" href="#/api/sap.m.ComboBox/methods/getFilterSecondaryValues">filterSecondaryValues</a>.</p><p>Indicates whether the filter should check in both the <code>text</code> and the <code>additionalText</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> for the suggestion.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>filterSecondaryValues</code></p>
             */
            getFilterSecondaryValues(): boolean;
            /**
             * <p>Gets the selected item object from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The current target of the <code>selectedItem</code> association, or <code>null</code>.</p>
             */
            getSelectedItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItemId" href="#/api/sap.m.ComboBox/methods/getSelectedItemId">selectedItemId</a>.</p><p>ID of the selected item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedItemId</code></p>
             */
            getSelectedItemId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.ComboBox/methods/getSelectedKey">selectedKey</a>.</p><p>Key of the selected item.</p><p><b>Note:</b> If duplicate keys exist, the first item matching the key is used.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedKey</code></p>
             */
            getSelectedKey(): string;
            /**
             * <p>This method will be called when the ComboBox is initially created.</p>
             */
            protected init(): void;
            /**
             * <p>This event handler will be called after the ComboBox Picker's List is rendered.</p>
             */
            protected onAfterRenderingList(): void;
            /**
             * <p>This event handler will be called after the ComboBox's Picker is rendered.</p>
             */
            protected onAfterRenderingPicker(): void;
            /**
             * <p>This event handler is called before the picker popup is opened.</p>
             */
            protected onBeforeOpen(): void;
            /**
             * <p>This event handler will be called before the ComboBox is rendered.</p>
             */
            protected onBeforeRendering(): void;
            /**
             * <p>This event handler will be called before the ComboBox' Picker of type <code>sap.m.Popover</code> is rendered.</p>
             */
            protected onBeforeRenderingDropdown(): void;
            /**
             * <p>This event handler will be called before the ComboBox Picker's List is rendered.</p>
             */
            protected onBeforeRenderingList(): void;
            /**
             * <p>This event handler will be called before the ComboBox's Picker is rendered.</p>
             */
            protected onBeforeRenderingPicker(): void;
            /**
             * <p>Opens the control's picker popup.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.ComboBoxBase;
            /**
             * <p>Opens the control's picker popup.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.ComboBox;
            /**
             * <p>Removes all the controls in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea and clears the selection.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea and clears the selection.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or ID.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to be removed or its index or ID.</p>
             * @returns sap.ui.core.Item <p>The removed item or <code>null</code>.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Selects the text within the input field between the specified start and end positions. Only supported for input control's type of Text, Url, Tel and Password.</p>
             * @param {number} iSelectionStart <p>The index into the text at which the first selected character is located.</p>
             * @param {number} iSelectionEnd <p>The index into the text at which the last selected character is located.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            protected selectText(iSelectionStart: number, iSelectionEnd: number): sap.m.InputBase;
            /**
             * <p>Sets the start and end positions of the current text selection.</p>
             * @param {number} iSelectionStart <p>The index of the first selected character.</p>
             * @param {number} iSelectionEnd <p>The index of the character after the last selected character.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining</p>
             */
            protected selectText(iSelectionStart: number, iSelectionEnd: number): sap.m.ComboBox;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSecondaryValues" href="#/api/sap.m.ComboBox/methods/getFilterSecondaryValues">filterSecondaryValues</a>.</p><p>Indicates whether the filter should check in both the <code>text</code> and the <code>additionalText</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> for the suggestion.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bFilterSecondaryValues <p>New value for property <code>filterSecondaryValues</code></p>
             * @returns sap.m.ComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFilterSecondaryValues(bFilterSecondaryValues: boolean): sap.m.ComboBox;
            /**
             * <p>Sets the <code>selectedItem</code> association.</p><p>Default value is <code>null</code>.</p>
             * @param {string | sap.ui.core.Item | null} vItem <p>New value for the <code>selectedItem</code> association. If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association. Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear the selection.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItem(vItem: string | sap.ui.core.Item | null): sap.m.ComboBox;
            /**
             * <p>Sets the <code>selectedItemId</code> property.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string | undefined} vItem <p>New value for property <code>selectedItemId</code>. If the provided <code>vItem</code> is an empty string <code>""</code> or <code>undefined</code>, the selection is cleared. If the ID has no corresponding aggregated item, the selected item is not changed.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItemId(vItem: string | undefined): sap.m.ComboBox;
            /**
             * <p>Sets the <code>selectedKey</code> property.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string} sKey <p>New value for property <code>selectedKey</code>. If the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>, the selection is cleared. If duplicate keys exist, the first item matching the key is selected. If a key is set and no item exists with that key, the visual selection remains the same.</p>
             * @returns sap.m.ComboBox <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedKey(sKey: string): sap.m.ComboBox;
            /**
             * <p>Synchronizes the <code>selectedItem</code> association and the <code>selectedItemId</code> property.</p>
             */
            protected synchronizeSelection(): void;
            /**
             * <p>Creates picker if doesn't exist yet and sync with Control items To be overwritten by subclasses.</p>
             */
            protected syncPickerContent(): void;
            /**
             * <p>Creates picker if doesn't exist yet and sync with Control items</p>
             * @returns sap.m.Dialog|sap.m.Popover 
             */
            protected syncPickerContent(): sap.m.Dialog | sap.m.Popover;
        }
        /**
         * <p>An abstract class for combo boxes.</p>
         */
        export abstract class ComboBoxBase extends sap.m.ComboBoxTextField {
            /**
             * <p>Constructor for a new <code>sap.m.ComboBoxBase</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets the ID of the hidden label for the group header items</p>
             * @returns string <p>Id of hidden text</p>
             */
            protected _getGroupHeaderInvisibleText(): string;
            /**
             * <p>Handles highlighting of items after filtering.</p>
             * @param {string} sValue <p>The value of the item</p>
             */
            protected _highlightList(sValue: string): void;
            /**
             * <p>Adds an item to the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to be added; if empty, nothing is added.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            addItem(oItem: sap.ui.core.Item): sap.m.ComboBoxBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loadItems" href="#/api/sap.m.ComboBoxBase/events/loadItems">loadItems</a> event of this <code>sap.m.ComboBoxBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ComboBoxBase</code> itself.</p><p>This event is fired when the end user clicks the combo box button to open the dropdown list and the data used to display items is not already loaded. Alternatively, it is fired after the user moves the cursor to the combo box text field and perform an action that requires data to be loaded. For example, pressing F4 to open the dropdown list or typing something in the text field fires the event.</p><p><b>Note:</b> Use this feature in performance critical scenarios only. Loading the data lazily (on demand) to defer initialization has several implications for the end user experience. For example, the busy indicator has to be shown while the items are being loaded and assistive technology software also has to announce the state changes (which may be confusing for some screen reader users).</p><p><b>Note</b>: Currently the <code>sap.m.MultiComboBox</code> does not support this event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ComboBoxBase</code> itself</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLoadItems(oData: any, fnFunction: Function, oListener?: any): sap.m.ComboBoxBase;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.ComboBoxBase;
            /**
             * <p>Clears the selection. To be overwritten by subclasses.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Closes the control's picker popup.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            close(): sap.m.ComboBoxBase;
            /**
             * <p>Base method for picker configuration</p>
             * @param {sap.m.Popover | sap.m.Dialog} oPicker <p>Picker instance</p>
             */
            protected configPicker(oPicker: sap.m.Popover | sap.m.Dialog): void;
            /**
             * <p>Creates a picker popup container where the selection should take place. To be overwritten by subclasses.</p>
             * @param {string} sPickerType <p>The picker type</p>
             * @returns sap.m.Popover|sap.m.Dialog <p>The picker popup to be used.</p>
             */
            protected createPicker(sPickerType: string): sap.m.Popover | sap.m.Dialog;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a>.</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.ComboBoxBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loadItems" href="#/api/sap.m.ComboBoxBase/events/loadItems">loadItems</a> event of this <code>sap.m.ComboBoxBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLoadItems(fnFunction: Function, oListener?: any): sap.m.ComboBoxBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loadItems" href="#/api/sap.m.ComboBoxBase/events/loadItems">loadItems</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLoadItems(mParameters?: any): sap.m.ComboBoxBase;
            /**
             * <p>Gets the enabled items from the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item[]} aItems <p>Items to filter.</p>
             * @returns sap.ui.core.Item[] <p>An array containing the enabled items.</p>
             */
            getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
            /**
             * <p>Gets the first item from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item <p>The first item, or null if there are no items.</p>
             */
            getFirstItem(): sap.ui.core.Item;
            /**
             * <p>Gets the input properties, which should be forwarded from the combobox text field to the picker text field</p>
             * @returns any[] <p>Array of the forwardable properties</p>
             */
            protected getInputForwardableProperties(): any[];
            /**
             * <p>Gets the item from the aggregation named <code>items</code> at the given 0-based index.</p>
             * @param {number} iIndex <p>Index of the item to return.</p>
             * @returns sap.ui.core.Item <p>Item at the given index, or null if none.</p>
             */
            getItemAt(iIndex: number): sap.ui.core.Item;
            /**
             * <p>Gets the item with the given key from the aggregation named <code>items</code>.<br> <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.</p>
             * @param {string} sKey <p>An item key that specifies the item to retrieve.</p>
             * @returns sap.ui.core.Item <p>The matching item</p>
             */
            getItemByKey(sKey: string): sap.ui.core.Item;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a>.</p><p>Defines the items contained within this control.</p>
             * @returns sap.ui.core.Item[] 
             */
            getItems(): sap.ui.core.Item[];
            /**
             * <p>Gets the last item from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item <p>The last item, or null if there are no items.</p>
             */
            getLastItem(): sap.ui.core.Item;
            /**
             * <p>Gets the control's picker popup.</p>
             * @returns sap.m.Dialog|sap.m.Popover|null <p>The picker instance the <code>createPicker()</code> method.</p>
             */
            protected getPicker(): sap.m.Dialog | sap.m.Popover | null;
            /**
             * <p>Gets the ID of the hidden label</p>
             * @returns string <p>Id of hidden text</p>
             */
            protected getPickerInvisibleTextId(): string;
            /**
             * <p>Gets the control's input from the picker.</p>
             * @returns sap.m.ComboBoxTextField|sap.m.Input|null <p>Picker's input for filtering the list</p>
             */
            protected getPickerTextField(): sap.m.ComboBoxTextField | sap.m.Input | null;
            /**
             * <p>Gets the property <code>_sPickerType</code></p>
             * @returns string <p>The picker type</p>
             */
            protected getPickerType(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.ComboBoxBase/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSecondaryValues</code></p>
             */
            getShowSecondaryValues(): boolean;
            /**
             * <p>Determines whether the control has content or not.</p>
             * @returns boolean <p>True if the control has content</p>
             */
            protected hasContent(): boolean;
            /**
             * <p>Highlights Dom Refs based on a value of the input and text of an item</p>
             * @param {string} sValue <p>Currently typed value of the input</p>
             * @param {object[]} aItemsDomRefs <p>Array of objects with information for dom ref and text to be highlighted</p>
             * @param {Function} fnBold <p>Method for bolding the text</p>
             */
            protected highLightList(sValue: string, aItemsDomRefs: object[], fnBold: Function): void;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.ui.core.Item): number;
            /**
             * <p>Inserts an item into the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to be inserted; if empty, nothing is inserted.</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.ComboBoxBase;
            /**
             * <p>Finds the common items of two arrays</p>
             * @param {sap.ui.core.Item[]} aItems <p>Array of Items</p>
             * @param {sap.ui.core.Item[]} aOtherItems <p>Second array of items</p>
             * @returns sap.ui.core.Item[] <p>Array of unique items from both arrays</p>
             */
            protected intersectItems(aItems: sap.ui.core.Item[], aOtherItems: sap.ui.core.Item[]): sap.ui.core.Item[];
            /**
             * <p>indicating if a character is currently composing.</p>
             * @returns boolean <p>Whether or not a character is composing. True if after "compositionstart" event and before "compositionend" event.</p>
             */
            protected isComposingCharacter(): boolean;
            /**
             * <p>indicating if a character is currently composing.</p>
             * @returns boolean <p>Whether or not a character is composing. True if after "compositionstart" event and before "compositionend" event.</p>
             */
            protected isComposingCharacter(): boolean;
            /**
             * <p>Indicates whether the control's picker popup is open.</p>
             * @returns boolean <p>Determines whether the control's picker popup is currently open (this includes opening and closing animations).</p>
             */
            isOpen(): boolean;
            /**
             * <p>Called when the composition of a passage of text has been completed or cancelled.</p>
             * @param {any} oEvent <p>The event object.</p>
             */
            protected oncompositionend(oEvent: any): void;
            /**
             * <p>Called when the composition of a passage of text is started.</p>
             */
            protected oncompositionstart(): void;
            /**
             * <p>Opens the control's picker popup.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.ComboBoxBase;
            /**
             * <p>Removes all the controls in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea and clears the selection.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or ID.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Sets a custom filter function for items. The function accepts two parameters: - currenly typed value in the input field - item to be matched The function should return a Boolean value (true or false) which represents whether an item will be shown in the dropdown or not.</p>
             * @param {Function} fnFilter <p>A callback function called when typing in a ComboBoxBase control or ancestor.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            setFilterFunction(fnFilter: Function): sap.m.ComboBoxBase;
            /**
             * <p>Sets the property <code>_sPickerType</code>.</p>
             * @param {string} sPickerType <p>The picker type</p>
             */
            protected setPickerType(sPickerType: string): void;
            /**
             * <p>Sets the selectable property of <code>sap.ui.core.Item</code></p>
             * @param {sap.ui.core.Item} oItem <p>The item to set the property</p>
             * @param {boolean} bSelectable <p>The selectable value</p>
             */
            protected setSelectable(oItem: sap.ui.core.Item, bSelectable: boolean): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.ComboBoxBase/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowSecondaryValues <p>New value for property <code>showSecondaryValues</code></p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.ComboBoxBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.InputBase/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValueStateMessage <p>New value for property <code>showValueStateMessage</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.InputBase;
            /**
             * <p>Sets whether the value state message should be shown or not</p>
             * @param {boolean} bShow <p>The new value state text</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setShowValueStateMessage(bShow?: boolean): sap.m.InputBase;
            /**
             * <p>Sets the TextField handler</p>
             * @param {sap.m.ComboBoxTextField | sap.m.Input} oTextField <p>Text field instance</p>
             */
            protected setTextFieldHandler(oTextField: sap.m.ComboBoxTextField | sap.m.Input): void;
            /**
             * <p>Setter for property <code>valueState</code>.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.InputBase;
            /**
             * <p>Sets the visualization of the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>The new value state</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setValueState(sValueState?: sap.ui.core.ValueState): sap.m.InputBase;
            /**
             * <p>Setter for property <code>valueStateText</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sText <p>New value for property <code>valueStateText</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining</p>
             */
            setValueStateText(sText: string): sap.m.InputBase;
            /**
             * <p>Sets the value state text</p>
             * @param {string} sValueStateText <p>The new value state text</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setValueStateText(sValueStateText?: string): sap.m.InputBase;
            /**
             * <p>Opens the <code>SuggestionsPopover</code> with the available items.</p>
             * @param {Function} fnFilter <p>Function to filter the items shown in the SuggestionsPopover</p>
             */
            showItems(fnFilter: Function): void;
            /**
             * <p>Creates picker if doesn't exist yet and sync with Control items To be overwritten by subclasses.</p>
             */
            protected syncPickerContent(): void;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.ComboBoxBase;
        }
        /**
         * <p>The <code>sap.m.ComboBoxTextField</code>.</p>
         */
        export class ComboBoxTextField extends sap.m.InputBase {
            /**
             * <p>Constructor for a new <code>sap.m.ComboBoxTextField</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Returns the arrow icon</p>
             * @returns sap.ui.core.Icon <p>Icon</p>
             */
            protected getIcon(): sap.ui.core.Icon;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.ComboBoxTextField/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the text field.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowButton" href="#/api/sap.m.ComboBoxTextField/methods/getShowButton">showButton</a>.</p><p>Indicates whether the dropdown downward-facing arrow button is shown.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showButton</code></p>
             */
            getShowButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets the <code>value</code>.</p><p>Default value is an empty string.</p>
             * @returns string <p>The value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.ComboBoxTextField/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the text field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sMaxWidth <p>New value for property <code>maxWidth</code></p>
             * @returns sap.m.ComboBoxTextField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): sap.m.ComboBoxTextField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowButton" href="#/api/sap.m.ComboBoxTextField/methods/getShowButton">showButton</a>.</p><p>Indicates whether the dropdown downward-facing arrow button is shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowButton <p>New value for property <code>showButton</code></p>
             * @returns sap.m.ComboBoxTextField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowButton(bShowButton: boolean): sap.m.ComboBoxTextField;
        }
        /**
         * <p>This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well. <b>Note:</b> Even though the content aggregation allows any control, complex responsive layout controls (e.g. <code>Table, Form</code>) should not be aggregated as content.</p>
         */
        export class CustomListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new CustomListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.CustomListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.CustomListItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.CustomListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindContent(oBindingInfo: any): sap.m.CustomListItem;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p>
             * @returns sap.m.CustomListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.CustomListItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p><p>The content of this list item</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.CustomListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.CustomListItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomListItem/methods/getContent">content</a> from model data.</p>
             * @returns sap.m.CustomListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindContent(): sap.m.CustomListItem;
        }
        /**
         * <p>Use the CustomTile control to display application specific content in the Tile control. The tile width is 8.5em and height is 10em.</p>
         */
        export class CustomTile extends sap.m.Tile {
            /**
             * <p>Constructor for a new CustomTile.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Destroys the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTile/methods/getContent">content</a>.</p>
             * @returns sap.m.CustomTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.CustomTile;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTile/methods/getContent">content</a>.</p><p>Defines the content of the CustomTile.</p>
             * @returns sap.ui.core.Control 
             */
            getContent(): sap.ui.core.Control;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTile/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to set</p>
             * @returns sap.m.CustomTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContent(oContent: sap.ui.core.Control): sap.m.CustomTile;
        }
        /**
         * <p>The <code>CustomTreeItem</code> control with a content aggregation is used to customize the tree items within the <code>Tree</code> control.<br><b>Note:</b> Even though the content aggregation can be used for any control, complex responsive layout controls, such as <code>Table, Form</code> etc, should not be aggregated as content.</p>
         */
        export class CustomTreeItem extends sap.m.TreeItemBase {
            /**
             * <p>Constructor for a new CustomTreeItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.CustomTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.CustomTreeItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.CustomTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindContent(oBindingInfo: any): sap.m.CustomTreeItem;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p>
             * @returns sap.m.CustomTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.CustomTreeItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p><p>The content of this tree item.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.CustomTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.CustomTreeItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.CustomTreeItem/methods/getContent">content</a> from model data.</p>
             * @returns sap.m.CustomTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindContent(): sap.m.CustomTreeItem;
        }
        /**
         * <p>Enables the users to select a localized date between 0001-01-01 and 9999-12-31.</p><h3>Overview</h3><p>The <code>DatePicker</code> lets the users select a localized date using touch, mouse, or keyboard input. It consists of two parts: the date input field and the date picker.</p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.Calendar">sap.ui.unified.Calendar</a> is used internally only if the <code>DatePicker</code> is opened (not used for the initial rendering). If the <code>sap.ui.unified</code> library is not loaded before the <code>DatePicker</code> is opened, it will be loaded upon opening. This could lead to a waiting time when the <code>DatePicker</code> is opened for the first time. To prevent this, apps using the <code>DatePicker</code> should also load the <code>sap.ui.unified</code> library.</p><h3>Usage</h3><p>The user can enter a date by: <ul><li>Using the calendar that opens in a popup</li> <li>Typing it in directly in the input field (not available for mobile devices)</li></ul></p><p>On app level, there are two options to provide a date for the <code>DatePicker</code> - as a string to the <code>value</code> property or as a JavaScript Date object to the <code>dateValue</code> property (only one of these properties should be used at a time):</p><p><ul><li>Use the <code>value</code> property if you want to bind the <code>DatePicker</code> to a model using the <code>sap.ui.model.type.Date</code></li> <li>Use the <code>value</code> property if the date is provided as a string from the backend or inside the app (for example, as ABAP type DATS field)</li> <li>Use the <code>dateValue</code> property if the date is already provided as a JavaScript Date object or you want to work with a JavaScript Date object. Use <code>dateValue</code> as a helper property to easily obtain the day, month and year of the chosen date. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead</li></ul></p><h3>Formatting</h3><p>All formatting and parsing of dates from and to strings is done using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a>. If a date is entered by typing it into the input field, it must fit to the used date format and locale.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. See <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>For example, if the <code>valueFormat</code> is "yyyy-MM-dd", the <code>displayFormat</code> is "MMM d, y", and the used locale is English, a valid value string is "2015-07-30", which leads to an output of "Jul 30, 2015".</p><p>If no placeholder is set to the <code>DatePicker</code>, the used <code>displayFormat</code> is displayed as a placeholder. If another placeholder is needed, it must be set.</p><p><b>Note:</b> If the string does NOT match the <code>displayFormat</code> (from user input) or the <code>valueFormat</code> (on app level), the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> makes an attempt to parse it based on the locale settings. For more information, see the respective documentation in the API Reference.</p><h3>Responsive behavior</h3><p>The <code>DatePicker</code> is smaller in compact mode and provides a touch-friendly size in cozy mode.</p><p>On mobile devices, one tap on the input field opens the <code>DatePicker</code> in full screen. To close the window, the user can select a date (which triggers the close event), or select Cancel.</p>
         */
        export class DatePicker extends sap.m.DateTimeField {
            /**
             * <p>Constructor for a new <code>DatePicker</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some <code>specialDate</code> to the aggregation <code>specialDates</code>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>the specialDate to add; if empty, nothing is added</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.DatePicker;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.DatePicker/events/navigate">navigate</a> event of this <code>sap.m.DatePicker</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.DatePicker</code> itself.</p><p>Fired when navigating in <code>Calendar</code> popup.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.DatePicker</code> itself</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.DatePicker;
            /**
             * <p>Destroys all the specialDates in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.DatePicker/methods/getSpecialDates">specialDates</a>.</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySpecialDates(): sap.m.DatePicker;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.DatePicker/events/navigate">navigate</a> event of this <code>sap.m.DatePicker</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavigate(fnFunction: Function, oListener?: any): sap.m.DatePicker;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.InputBase;
            /**
             * <p>Fire event change to attached listeners.</p><p>Expects following event parameters: <ul> <li>'value' of type <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li> <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li> </ul></p>
             * @param {{ [key: string]: any }} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.m.DatePicker <p><code>this</code> to allow method chaining</p>
             */
            protected fireChange(mArguments?: { [key: string]: any }): sap.m.DatePicker;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.DatePicker/events/navigate">navigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireNavigate(mParameters?: any): sap.m.DatePicker;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p>
             * @returns any <p>Value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>The date as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p>
             * @returns any <p>the value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeField/methods/getDisplayFormat">displayFormat</a>.</p><p>Determines the format, displayed in the input field.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>The date is displayed in the input field using this format. By default, the medium format of the used locale is used.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
            <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
            title="Information published on non SAP site" class="sapUISDKExternalLink"/> <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored. The format defined in the binding will be used.</p>
             * @returns string <p>the value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormatType" href="#/api/sap.m.DatePicker/methods/getDisplayFormatType">displayFormatType</a>.</p><p>Displays date in this given type in input field. Default value is taken from locale settings. Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the configuration is used. <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>displayFormatType</code></p>
             */
            getDisplayFormatType(): string;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLegend" href="#/api/sap.m.DatePicker/methods/getLegend">legend</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getLegend(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxDate" href="#/api/sap.m.DatePicker/methods/getMaxDate">maxDate</a>.</p><p>Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>, the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.</p>
             * @returns any <p>Value of property <code>maxDate</code></p>
             */
            getMaxDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDate" href="#/api/sap.m.DatePicker/methods/getMinDate">minDate</a>.</p><p>Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>, the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.</p>
             * @returns any <p>Value of property <code>minDate</code></p>
             */
            getMinDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondaryCalendarType" href="#/api/sap.m.DatePicker/methods/getSecondaryCalendarType">secondaryCalendarType</a>.</p><p>If set, the days in the calendar popup are also displayed in this calendar type If not set, the dates are only displayed in the primary calendar type</p>
             * @returns sap.ui.core.CalendarType <p>Value of property <code>secondaryCalendarType</code></p>
             */
            getSecondaryCalendarType(): sap.ui.core.CalendarType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowFooter" href="#/api/sap.m.DatePicker/methods/getShowFooter">showFooter</a>.</p><p>Hides or shows the popover's footer.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showFooter</code></p>
             */
            getShowFooter(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.DatePicker/methods/getSpecialDates">specialDates</a>.</p><p>Date Range with type to visualize special days in the Calendar. If one day is assigned to more than one Type, only the first one will be used.</p><p>To set a single date (instead of a range), set only the startDate property of the sap.ui.unified.DateRange class.</p><p><b>Note:</b> Since 1.48 you could set a non-working day via the sap.ui.unified.CalendarDayType.NonWorking enum type just as any other special date type using sap.ui.unified.DateRangeType.</p>
             * @returns sap.ui.core.Element[] 
             */
            getSpecialDates(): sap.ui.core.Element[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Getter for property <code>value</code>.</p><p>Returns a date as a string in the format defined in property <code>valueFormat</code>.</p><p><b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p>
             * @returns string <p>the value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
            <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
            title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".</p><p><b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored. The format defined in the binding will be used.</p>
             * @returns string <p>the value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.DatePicker/methods/getSpecialDates">specialDates</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Element} oSpecialDate <p>The specialDate whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSpecialDate(oSpecialDate: sap.ui.core.Element): number;
            /**
             * <p>Inserts a <code>specialDate</code> to the aggregation <code>specialDates</code>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>the specialDate to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>the 0-based index the <code>specialDate</code> should be inserted at; for a negative value of <code>iIndex</code>, the <code>specialDate</code> is inserted at position 0; for a value greater than the current size of the aggregation, the <code>specialDate</code> is inserted at the last position</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.DatePicker;
            /**
             * <p>Checks if the picker is open</p>
             * @returns boolean 
             */
            protected isOpen(): boolean;
            /**
             * <p>Returns if the last entered value is valid.</p>
             * @returns boolean 
             */
            isValidValue(): boolean;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.DatePicker/methods/getSpecialDates">specialDates</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Element[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSpecialDates(): sap.ui.core.Element[];
            /**
             * <p>Removes a <code>specialDate</code> from the aggregation <code>specialDates</code>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The <code>specialDate</code> to remove or its index or id</p>
             * @returns sap.ui.unified.DateTypeRange <p>The removed <code>specialDate</code> or null</p>
             */
            removeSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormatType" href="#/api/sap.m.DatePicker/methods/getDisplayFormatType">displayFormatType</a>.</p><p>Displays date in this given type in input field. Default value is taken from locale settings. Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the configuration is used. <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sDisplayFormatType <p>New value for property <code>displayFormatType</code></p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayFormatType(sDisplayFormatType: string): sap.m.DatePicker;
            /**
             * <p>Sets the associated legend.</p>
             * @param {sap.ui.core.ID | sap.ui.unified.CalendarLegend} oLegend <p>ID of an element which becomes the new target of this <code>legend</code> association; alternatively, an element instance may be given</p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLegend(oLegend: sap.ui.core.ID | sap.ui.unified.CalendarLegend): sap.m.DatePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxDate" href="#/api/sap.m.DatePicker/methods/getMaxDate">maxDate</a>.</p><p>Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>, the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oMaxDate <p>New value for property <code>maxDate</code></p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxDate(oMaxDate: any): sap.m.DatePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDate" href="#/api/sap.m.DatePicker/methods/getMinDate">minDate</a>.</p><p>Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>, the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oMinDate <p>New value for property <code>minDate</code></p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinDate(oMinDate: any): sap.m.DatePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondaryCalendarType" href="#/api/sap.m.DatePicker/methods/getSecondaryCalendarType">secondaryCalendarType</a>.</p><p>If set, the days in the calendar popup are also displayed in this calendar type If not set, the dates are only displayed in the primary calendar type</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CalendarType} sSecondaryCalendarType <p>New value for property <code>secondaryCalendarType</code></p>
             * @returns sap.m.DatePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSecondaryCalendarType(sSecondaryCalendarType: sap.ui.core.CalendarType): sap.m.DatePicker;
            /**
             * <p>Sets <code>showFooter</code> property to the given boolean value</p>
             * @param {undefined} bFlag <p>when true footer is displayed</p>
             */
            setShowFooter(bFlag: undefined): void;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.InputBase;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Expects a date as a string in the format defined in property <code>valueFormat</code>.</p><p><b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p><p>If Data binding using a <code>sap.ui.model.type.Date</code> is used, please set the <code>formatOption</code> <code>stricktParsing</code> to <code>true</code>. This prevents unwanted automatic corrections of wrong input.</p>
             * @param {string} sValue <p>The new value of the input.</p>
             * @returns sap.m.DatePicker <p><code>this</code> to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.DatePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.InputBase/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p><b>Note:</b> If the provided width is too small, the control gets stretched to its min width, which is needed in order for the control to be usable and well aligned.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.InputBase;
            /**
             * <p>Defines the width of the DatePicker. Default value is 100%</p>
             * @param {string} sWidth <p>new value for <code>width</code></p>
             * @returns sap.m.DatePicker <p><code>this</code> to allow method chaining</p>
             */
            setWidth(sWidth: string): sap.m.DatePicker;
        }
        /**
         * <p>A single-field input control that enables the users to enter a localized date range (between 0001-01-01 and 9999-12-31).</p><h3>Overview</h3><p>The <code>DateRangeSelection</code> enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar. They can also navigate directly from one month or year to another.</p><p><b>Note:</b> The control is not UTC aware and the selected date range starts from 00:00:00:000 of the first date and ends in 23:59:59:999 on the second date.</p><p>The <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.Calendar">sap.ui.unified.Calendar</a> is used internally only if the <code>DateRangeSelection</code> is opened (not used for the initial rendering). If the <code>sap.ui.unified</code> library is not loaded before the <code>DateRangeSelection</code> is opened, it will be loaded upon opening. This could lead to a waiting time when the <code>DateRangeSelection</code> is opened for the first time. To prevent this, apps using the <code>DateRangeSelection</code> should also load the <code>sap.ui.unified</code> library.</p><h3>Usage</h3><p><i>When to use?</i></p><p>If you need a date range and know that your user is a power user who has to input lots of data. If the keyboard is the primary device used for navigating the app, use two input fields. This allows the user to quickly jump from field to field. By selecting a date in one of the fields, the other field should recognize the information and jump to the same selection.</p><p><i>When not to use?</i></p><p>If the user's primary goal is not to select ranges or if you just want to enter a date and a time. For such cases, use the <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a>.</p><p>The user can enter a date by: <ul><li>Using the calendar that opens in a popup</li> <li>Typing it in directly in the input field (not available for mobile devices)</li></ul></p><p>On app level, there are two options to provide a date for the <code>DateRangeSelection</code> - date range as a string to the <code>value</code> property or JavaScript Date objects to the <code>dateValue</code> and <code>secondDateValue</code> properties (only one of these options should be used at a time):</p><p><ul><li>Use the <code>value</code> property if the date range is already provided as a formatted string</li> <li>Use the <code>dateValue</code> and <code>secondDateValue</code> properties if the date range is already provided as JavaScript Date objects or you want to work with JavaScript Date objects</li></ul></p><h3>Formatting</h3><p>All formatting and parsing of dates from and to strings is done using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a>. If a date is entered by typing it into the input field, it must fit to the used date format and locale.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. See <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>For example, if the <code>displayFormat</code> is "MMM d, y", delimiter is "-", and the used locale is English, a valid value string is "Jul 29, 2015 - Jul 31, 2015" and it is displayed in the same way in the input field.</p><p>If no placeholder is set to the <code>DateRangeSelection</code>, the used <code>displayFormat</code> is displayed as a placeholder. If another placeholder is needed, it must be set.</p><p><b>Note:</b> If the string does NOT match the <code>displayFormat</code> (from user input) or the <code>valueFormat</code> (on app level), the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> makes an attempt to parse it based on the locale settings. For more information, see the respective documentation in the API Reference.</p><h3>Responsive behavior</h3><p>The <code>DateRangeSelection</code> is fully responsive. It is smaller in compact mode and provides a touch-friendly size in cozy mode.</p>
         */
        export class DateRangeSelection extends sap.m.DatePicker {
            /**
             * <p>Constructor for a new <code>DateRangeSelection</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.InputBase;
            /**
             * <p>Fire event change to attached listeners.</p><p>Expects following event parameters: <ul> <li>'value' of type <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li> <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li> </ul></p>
             * @param {{ [key: string]: any }} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.m.DatePicker <p><code>this</code> to allow method chaining</p>
             */
            protected fireChange(mArguments?: { [key: string]: any }): sap.m.DatePicker;
            /**
             * <p>Fire event change to attached listeners.</p><p>Expects following event parameters: <ul> <li>'value' of type <code>string</code> The new value of the <code>sap.m.DateRangeSelection</code>.</li> <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li> <li>'from' of type <code>object</code> Current start date after change.</li> <li>'to' of type <code>object</code> Current end date after change.</li> </ul></p>
             * @param {{ [key: string]: any }} mArguments <p>The arguments to pass along with the event.</p>
             * @returns sap.m.DateRangeSelection <p><code>this</code> to allow method chaining</p>
             */
            protected fireChange(mArguments?: { [key: string]: any }): sap.m.DateRangeSelection;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p>
             * @returns any <p>Value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>The date as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p>
             * @returns any <p>the value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Getter for property <code>dateValue</code>.</p><p>The start date of the range as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p>
             * @returns any <p>the value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDelimiter" href="#/api/sap.m.DateRangeSelection/methods/getDelimiter">delimiter</a>.</p><p>Delimiter between start and end date. Default value is "-". If no delimiter is given, the one defined for the used locale is used.</p><p>Default value is <code>-</code>.</p>
             * @returns string <p>Value of property <code>delimiter</code></p>
             */
            getDelimiter(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondDateValue" href="#/api/sap.m.DateRangeSelection/methods/getSecondDateValue">secondDateValue</a>.</p><p>The end date of the range as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p>
             * @returns any <p>Value of property <code>secondDateValue</code></p>
             */
            getSecondDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Getter for property <code>value</code>.</p><p>Returns a date as a string in the format defined in property <code>valueFormat</code>.</p><p><b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p>
             * @returns string <p>the value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Getter for property <code>value</code>.</p><p>Returns a date as a string in the format defined in property <code>displayFormat</code>.</p><p><b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p>
             * @returns string <p>the value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
            <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
            title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".</p><p><b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored. The format defined in the binding will be used.</p>
             * @returns string <p>the value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Getter for property <code>valueFormat</code>.</p><p><b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.</p>
             * @returns string <p>the value of property valueFormat</p>
             */
            getValueFormat(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oDateValue <p>New value for property <code>dateValue</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDateValue(oDateValue: any): sap.m.DateTimeField;
            /**
             * <p>Setter for property <code>dateValue</code>.</p><p>The start date of the range as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p>
             * @param {any} oDateValue <p>New value for property <code>dateValue</code></p>
             * @returns sap.m.DateRangeSelection <p><code>this</code> to allow method chaining.</p>
             */
            setDateValue(oDateValue: any): sap.m.DateRangeSelection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDelimiter" href="#/api/sap.m.DateRangeSelection/methods/getDelimiter">delimiter</a>.</p><p>Delimiter between start and end date. Default value is "-". If no delimiter is given, the one defined for the used locale is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-</code>.</p>
             * @param {string} sDelimiter <p>New value for property <code>delimiter</code></p>
             * @returns sap.m.DateRangeSelection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDelimiter(sDelimiter: string): sap.m.DateRangeSelection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondDateValue" href="#/api/sap.m.DateRangeSelection/methods/getSecondDateValue">secondDateValue</a>.</p><p>The end date of the range as JavaScript Date object. This is independent from any formatter.</p><p><b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oSecondDateValue <p>New value for property <code>secondDateValue</code></p>
             * @returns sap.m.DateRangeSelection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSecondDateValue(oSecondDateValue: any): sap.m.DateRangeSelection;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.InputBase;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Expects a date as a string in the format defined in property <code>valueFormat</code>.</p><p><b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p><p>If Data binding using a <code>sap.ui.model.type.Date</code> is used, please set the <code>formatOption</code> <code>stricktParsing</code> to <code>true</code>. This prevents unwanted automatic corrections of wrong input.</p>
             * @param {string} sValue <p>The new value of the input.</p>
             * @returns sap.m.DatePicker <p><code>this</code> to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.DatePicker;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Expects a date as a string in the format defined in property <code>displayFormat</code>.</p><p><b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.</p><p>If this property is used, the <code>dateValue</code> property should not be changed from the caller.</p>
             * @param {string} sValue <p>The new value of the input.</p>
             * @returns sap.m.DateRangeSelection <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.DateRangeSelection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueFormat <p>New value for property <code>valueFormat</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueFormat(sValueFormat: string): sap.m.DateTimeField;
            /**
             * <p>Setter for property <code>valueFormat</code>.</p><p><b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.</p>
             * @param {string} sValueFormat <p>New value for property valueFormat</p>
             * @returns sap.m.DateRangeSelection <p><code>this</code> to allow method chaining</p>
             */
            setValueFormat(sValueFormat: string): sap.m.DateRangeSelection;
        }
        /**
         * <p>The <code>sap.m.DateTimeField</code> control provides a basic functionality for date/time input controls.</p><p>To be extended by date and time picker controls. For internal use only.</p>
         */
        export abstract class DateTimeField extends sap.m.InputBase {
            /**
             * <p>Constructor for a new <code>sap.m.DateTimeField</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p>
             * @returns any <p>Value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeField/methods/getDisplayFormat">displayFormat</a>.</p><p>Determines the format, displayed in the input field.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocusedDateValue" href="#/api/sap.m.DateTimeField/methods/getInitialFocusedDateValue">initialFocusedDateValue</a>.</p><p>Holds a reference to a JavaScript Date Object to define the initially focused date/time when the picker popup is opened.</p><p><b>Notes:</b> <ul> <li>Setting this property does not change the <code>value</code> property.</li> <li>Depending on the context this property is used in (<a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a>), it takes into account only the time part, only the date part or both parts of the JavaScript Date Object.</li> </ul></p>
             * @returns any <p>Value of property <code>initialFocusedDateValue</code></p>
             */
            getInitialFocusedDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oDateValue <p>New value for property <code>dateValue</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDateValue(oDateValue: any): sap.m.DateTimeField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeField/methods/getDisplayFormat">displayFormat</a>.</p><p>Determines the format, displayed in the input field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDisplayFormat <p>New value for property <code>displayFormat</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayFormat(sDisplayFormat: string): sap.m.DateTimeField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocusedDateValue" href="#/api/sap.m.DateTimeField/methods/getInitialFocusedDateValue">initialFocusedDateValue</a>.</p><p>Holds a reference to a JavaScript Date Object to define the initially focused date/time when the picker popup is opened.</p><p><b>Notes:</b> <ul> <li>Setting this property does not change the <code>value</code> property.</li> <li>Depending on the context this property is used in (<a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a>), it takes into account only the time part, only the date part or both parts of the JavaScript Date Object.</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oInitialFocusedDateValue <p>New value for property <code>initialFocusedDateValue</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialFocusedDateValue(oInitialFocusedDateValue: any): sap.m.DateTimeField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueFormat <p>New value for property <code>valueFormat</code></p>
             * @returns sap.m.DateTimeField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueFormat(sValueFormat: string): sap.m.DateTimeField;
        }
        /**
         * <p>Allows end users to interact with date (between 0001-01-01 and 9999-12-31) and/or time and select from a date and/or time pad.</p><p><b>Note:</b> This control should not be used any longer, instead please use the dedicated <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code> control.</p>
         */
        export class DateTimeInput extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new DateTimeInput.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.DateTimeInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.DateTimeInput;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.DateTimeInput/events/change">change</a> event of this <code>sap.m.DateTimeInput</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.DateTimeInput</code> itself.</p><p>This event gets fired when the selection has finished and the value has changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code> itself</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.DateTimeInput;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DateTimeInput/methods/getValue">value</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindValue(oBindingInfo: any): sap.m.DateTimeInput;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.DateTimeInput/events/change">change</a> event of this <code>sap.m.DateTimeInput</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.DateTimeInput;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.DateTimeInput/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.DateTimeInput;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.DateTimeInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeInput/methods/getDateValue">dateValue</a>.</p><p>This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.</p>
             * @returns any <p>Value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeInput/methods/getDisplayFormat">displayFormat</a>.</p><p>Displays date value in this given format in text field. Default value is taken from locale settings. If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins. If the user's browser supports native picker then this property is overwritten by browser with locale settings.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.DateTimeInput/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.DateTimeInput/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.DateTimeInput/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.DateTimeInput/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p>
             * @returns string <p>Value of property <code>placeholder</code></p>
             */
            getPlaceholder(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.DateTimeInput/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showValueStateMessage</code></p>
             */
            getShowValueStateMessage(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.DateTimeInput/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is shown inside the input field.</p><p>Default value is <code>Initial</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.DateTimeInput/methods/getTextDirection">textDirection</a>.</p><p>Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code></p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.DateTimeInput/methods/getType">type</a>.</p><p>Type of DateTimeInput (e.g. Date, Time, DateTime)</p><p>Default value is <code>Date</code>.</p>
             * @returns sap.m.DateTimeInputType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.DateTimeInputType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DateTimeInput/methods/getValue">value</a>.</p><p>Defines the value of the control.</p><p>The new value must be in the format set by <code>valueFormat</code>.</p><p>The "Now" literal can also be assigned as a parameter to show the current date and/or time.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeInput/methods/getValueFormat">valueFormat</a>.</p><p>Given value property should match with valueFormat to parse date. Default value is taken from locale settings. You can only set and get value in this format. If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.DateTimeInput/methods/getValueState">valueState</a>.</p><p>Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.DateTimeInput/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</p>
             * @returns string <p>Value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.DateTimeInput/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.DateTimeInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.DateTimeInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeInput/methods/getDateValue">dateValue</a>.</p><p>This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oDateValue <p>New value for property <code>dateValue</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDateValue(oDateValue: any): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeInput/methods/getDisplayFormat">displayFormat</a>.</p><p>Displays date value in this given format in text field. Default value is taken from locale settings. If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins. If the user's browser supports native picker then this property is overwritten by browser with locale settings.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDisplayFormat <p>New value for property <code>displayFormat</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayFormat(sDisplayFormat: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.DateTimeInput/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.DateTimeInput/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.DateTimeInput/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.DateTimeInput/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sPlaceholder <p>New value for property <code>placeholder</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholder(sPlaceholder: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.DateTimeInput/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValueStateMessage <p>New value for property <code>showValueStateMessage</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.DateTimeInput/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is shown inside the input field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Initial</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.DateTimeInput/methods/getTextDirection">textDirection</a>.</p><p>Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.DateTimeInput/methods/getType">type</a>.</p><p>Type of DateTimeInput (e.g. Date, Time, DateTime)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Date</code>.</p>
             * @param {sap.m.DateTimeInputType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.DateTimeInputType): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DateTimeInput/methods/getValue">value</a>.</p><p>Defines the value of the control.</p><p>The new value must be in the format set by <code>valueFormat</code>.</p><p>The "Now" literal can also be assigned as a parameter to show the current date and/or time.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeInput/methods/getValueFormat">valueFormat</a>.</p><p>Given value property should match with valueFormat to parse date. Default value is taken from locale settings. You can only set and get value in this format. If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueFormat <p>New value for property <code>valueFormat</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueFormat(sValueFormat: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.DateTimeInput/methods/getValueState">valueState</a>.</p><p>Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.DateTimeInput/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueStateText <p>New value for property <code>valueStateText</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueStateText(sValueStateText: string): sap.m.DateTimeInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.DateTimeInput/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.DateTimeInput;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DateTimeInput/methods/getValue">value</a> from model data.</p>
             * @returns sap.m.DateTimeInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindValue(): sap.m.DateTimeInput;
        }
        /**
         * <p><p>A subset of DateTimeInput types that fit to a simple API returning one string.</p></p>
         */
        export enum DateTimeInputType {
            /**
             * <p>An input control for specifying a date value. The user can select a month, day of the month, and year.<span class="sapUiDeprecated"><br>Deprecated as of version 1.22.0. Instead, use dedicated <em>sap.m.DatePicker</em> control.</span></p>
             */
            Date = "Date",
            /**
             * <p>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.<span class="sapUiDeprecated"><br>Deprecated as of version 1.32.8. Instead, use dedicated <em>sap.m.DatePicker</em> and <em>sap.m.TimePicker</em> controls.</span></p>
             */
            DateTime = "DateTime",
            /**
             * <p>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.<span class="sapUiDeprecated"><br>Deprecated as of version 1.32.8. Instead, use dedicated <em>sap.m.TimePicker</em> control.</span></p>
             */
            Time = "Time",
        }
        /**
         * <p>Enables the users to select date (between 0001-01-01 and 9999-12-31) and time values in a combined input.</p><h3>Overview</h3><p>The <code>DateTimePicker</code> control consists of two parts: the input field and the date/time picker.</p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.Calendar">sap.ui.unified.Calendar</a> is used internally only if the <code>DateTimePicker</code> is opened (not used for the initial rendering). If the <code>sap.ui.unified</code> library is not loaded before the <code>DateTimePicker</code> is opened, it will be loaded upon opening. This could lead to a waiting time when the <code>DateTimePicker</code> is opened for the first time. To prevent this, apps using the <code>DateTimePicker</code> should also load the <code>sap.ui.unified</code> library.</p><h3>Usage</h3><p>Use this control if you need a combined date and time input control.</p><p>Don't use it if you want to use either a date or a time value. In this case, use the <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a> or the <a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a> controls instead.</p><p>The user can enter a date by: <ul> <li>Using the calendar or a time selector that opens in a popup</li> <li>Typing it in directly in the input field</li></ul></p><p>On app level, there are two options to provide a date for the <code>DateTimePicker</code> - as a string to the <code>value</code> property or as a JavaScript Date object to the <code>dateValue</code> property (only one of these properties should be used at a time):</p><p><ul><li>Use the <code>value</code> property if you want to bind the <code>DateTimePicker</code> to a model using the <code>sap.ui.model.type.DateTime</code></li> <li>Use the <code>value</code> property if the date is provided as a string from the backend or inside the app (for example, as ABAP type DATS field)</li> <li>Use the <code>dateValue</code> property if the date is already provided as a JavaScript Date object or you want to work with a JavaScript Date object. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead</li></ul></p><h3>Formatting</h3><p>All formatting and parsing of dates from and to strings is done using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a>. If a date is entered by typing it into the input field, it must fit to the used date format and locale.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. See <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>For example, if the <code>valueFormat</code> is "yyyy-MM-dd-HH-mm-ss", the <code>displayFormat</code> is "MMM d, y, HH:mm:ss", and the used locale is English, a valid value string is "2015-07-30-10-30-15", which leads to an output of "Jul 30, 2015, 10:30:15".</p><p>If no placeholder is set to the <code>DateTimePicker</code>, the used <code>displayFormat</code> is displayed as a placeholder. If another placeholder is needed, it must be set.</p><p><b>Note:</b> If the string does NOT match the <code>displayFormat</code> (from user input) or the <code>valueFormat</code> (on app level), the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> makes an attempt to parse it based on the locale settings. For more information, see the respective documentation in the API Reference.</p><h3>Responsive behavior</h3><p>The <code>DateTimePicker</code> is responsive and fully adapts to all devices. For larger screens, such as tablet or desktop, it opens as a popover. For mobile devices, it opens in full screen.</p>
         */
        export class DateTimePicker extends sap.m.DatePicker {
            /**
             * <p>Constructor for a new <code>DateTimePicker</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinutesStep" href="#/api/sap.m.DateTimePicker/methods/getMinutesStep">minutesStep</a>.</p><p>Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to 1. The minutes slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>minutesStep</code></p>
             */
            getMinutesStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondsStep" href="#/api/sap.m.DateTimePicker/methods/getSecondsStep">secondsStep</a>.</p><p>Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to 1. The seconds slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>secondsStep</code></p>
             */
            getSecondsStep(): number;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinutesStep" href="#/api/sap.m.DateTimePicker/methods/getMinutesStep">minutesStep</a>.</p><p>Sets the minutes slider step. If the step is less than 1, it will be automatically converted back to 1. The minutes slider is populated only by multiples of the step.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iMinutesStep <p>New value for property <code>minutesStep</code></p>
             * @returns sap.m.DateTimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinutesStep(iMinutesStep: number): sap.m.DateTimePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondsStep" href="#/api/sap.m.DateTimePicker/methods/getSecondsStep">secondsStep</a>.</p><p>Sets the seconds slider step. If the step is less than 1, it will be automatically converted back to 1. The seconds slider is populated only by multiples of the step.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iSecondsStep <p>New value for property <code>secondsStep</code></p>
             * @returns sap.m.DateTimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSecondsStep(iSecondsStep: number): sap.m.DateTimePicker;
        }
        /**
         * <p><p>Enum of the available deviation markers for the NumericContent control.</p></p>
         */
        export enum DeviationIndicator {
            /**
             * <p>The actual value is less than the target value.</p>
             */
            Down = "Down",
            /**
             * <p>No value.</p>
             */
            None = "None",
            /**
             * <p>The actual value is more than the target value.</p>
             */
            Up = "Up",
        }
        /**
         * <p>A popup that interrupts the current processing and prompts the user for an action or an input in a modal mode. </p><h3>Overview</h3><p> The Dialog control is used to prompt the user for an action or a confirmation. It interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The content of the Dialog is fully customizable. </p><h3>Structure</h3><p> A Dialog consists of a title, optional subtitle, content area and a footer for action buttons. The Dialog is usually displayed at the center of the screen. Its size and position can be changed by the user. To enable this, you need to set the properties <code>resizable</code> and <code>draggable</code> accordingly.</p><p>There are other specialized types of dialogs: <ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.P13nDialog">Personalization Dialog</a> - used for personalizing sorting, filtering and grouping in tables</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.SelectDialog">Select Dialog</a> - used to select one or more items from a comprehensive list</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.TableSelectDialog">Table Select Dialog</a> - used to make a selection from a comprehensive table containing multiple attributes or values</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.comp.valuehelpdialog.ValueHelpDialog">Value Help Dialog</a> - used to help the user find and select single and multiple values</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.ViewSettingsDialog">View Settings Dialog</a> - used to sort, filter, or group data within a (master) list or a table</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.BusyDialog">Busy Dialog</a> - used to block the screen and inform the user about an ongoing operation</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You want to display a system message.</li> <li>You want to interrupt the user’s action.</li> <li>You want to show a message with a short and a long description.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>You just want to confirm a successful action.</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>If the <code>stretch</code> property is set to <code>true</code>, the Dialog displays on full screen.</li> <li>If the <code>contentWidth</code> and/or <code>contentHeight</code> properties are set, the Dialog will try to fill those sizes.</li> <li>If there is no specific sizing, the Dialog will try to adjust its size to its content.</li> </ul> </p><h4>Smartphones</h4><p> If the Dialog has one or two actions, they will cover the entire footer. If there are more actions, they will overflow. </p><h4>Tablets</h4><p> The action buttons in the toolbar are <b>right-aligned</b>. Use <b>cozy</b> mode on tablet devices. </p><h4>Desktop</h4><p> The action buttons in the toolbar are <b>right-aligned</b>. Use <b>compact</b> mode on desktop.</p>
         */
        export class Dialog extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Dialog.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Returns the custom header instance when the <code>customHeader</code> aggregation is set. Otherwise, it returns the internal managed header instance. This method can be called within composite controls which use <code>sap.m.Dialog</code> inside.</p>
             */
            protected _getAnyHeader(): void;
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Dialog/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Dialog;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Dialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Dialog;
            /**
             * <p>Adds some button to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to add; if empty, nothing is inserted</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addButton(oButton: sap.m.Button): sap.m.Dialog;
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.Dialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Dialog/events/afterClose">afterClose</a> event of this <code>sap.m.Dialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Dialog</code> itself.</p><p>This event will be fired after the Dialog is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Dialog/events/afterOpen">afterOpen</a> event of this <code>sap.m.Dialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Dialog</code> itself.</p><p>This event will be fired after the Dialog is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Dialog/events/beforeClose">beforeClose</a> event of this <code>sap.m.Dialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Dialog</code> itself.</p><p>This event will be fired before the Dialog is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Dialog/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.Dialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Dialog</code> itself.</p><p>This event will be fired before the Dialog is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Close the dialog.</p>
             */
            close(): void;
            /**
             * <p>Destroys the beginButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Dialog/methods/getBeginButton">beginButton</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyBeginButton(): sap.m.Dialog;
            /**
             * <p>Destroys all the buttons in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyButtons(): sap.m.Dialog;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.Dialog;
            /**
             * <p>Destroys the customHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Dialog/methods/getCustomHeader">customHeader</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomHeader(): sap.m.Dialog;
            /**
             * <p>Destroys the endButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Dialog/methods/getEndButton">endButton</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyEndButton(): sap.m.Dialog;
            /**
             * <p>Destroys the subHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Dialog/methods/getSubHeader">subHeader</a>.</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySubHeader(): sap.m.Dialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Dialog/events/afterClose">afterClose</a> event of this <code>sap.m.Dialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Dialog/events/afterOpen">afterOpen</a> event of this <code>sap.m.Dialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Dialog/events/beforeClose">beforeClose</a> event of this <code>sap.m.Dialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Dialog/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.Dialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.Dialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Dialog/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.Dialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Dialog/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.Dialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Dialog/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.Dialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Dialog/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.Dialog;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Dialog/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Dialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Dialog/methods/getBeginButton">beginButton</a>.</p><p>The button which is rendered to the left side (right side in RTL mode) of the <code>endButton</code> in the footer area inside the Dialog. As of version 1.21.1, there's a new aggregation <code>buttons</code> created with which more than 2 buttons can be added to the footer area of the Dialog. If the new <code>buttons</code> aggregation is set, any change made to this aggregation has no effect anymore. When running on a phone, this <code>button</code> (and the <code>endButton</code> together when set) is (are) rendered at the center of the footer area. When running on other platforms, this <code>button</code> (and the <code>endButton</code> together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</p>
             * @returns sap.m.Button 
             */
            getBeginButton(): sap.m.Button;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p><p>Buttons can be added to the footer area of the Dialog through this aggregation. When this aggregation is set, any change to the <code>beginButton</code> and <code>endButton</code> has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.</p>
             * @returns sap.m.Button[] 
             */
            getButtons(): sap.m.Button[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p><p>The content inside the Dialog.<br/><b>Note:</b> When the content of the Dialog is comprised of controls that use <code>position: absolute</code>, such as <code>SplitContainer</code>, the Dialog has to have either <code>stretch: true</code> or <code>contentHeight</code> set.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.Dialog/methods/getContentHeight">contentHeight</a>.</p><p>Preferred height of the content in the Dialog. If the preferred height is bigger than the available space on a screen, it will be overwritten by the maximum available height on a screen in order to make sure that the Dialog isn't cut off.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentHeight</code></p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.Dialog/methods/getContentWidth">contentWidth</a>.</p><p>Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait mode. If the preferred width is less than the minimum width of the Dialog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of the Dialog width on tablet is 400px.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentWidth</code></p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Dialog/methods/getCustomHeader">customHeader</a>.</p><p>When it is set, the <code>icon</code>, <code>title</code> and <code>showHeader</code> properties are ignored. Only the <code>customHeader</code> is shown as the header of the Dialog.</p>
             * @returns sap.m.IBar 
             */
            getCustomHeader(): sap.m.IBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraggable" href="#/api/sap.m.Dialog/methods/getDraggable">draggable</a>.</p><p>Indicates whether the Dialog is draggable. If this property is set to <code>true</code>, the Dialog will be draggable by its header. This property has a default value <code>false</code>. The Dialog can be draggable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>draggable</code></p>
             */
            getDraggable(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Dialog/methods/getEndButton">endButton</a>.</p><p>The button which is rendered to the right side (left side in RTL mode) of the <code>beginButton</code> in the footer area inside the Dialog. As of version 1.21.1, there's a new aggregation <code>buttons</code> created with which more than 2 buttons can be added to the footer area of Dialog. If the new <code>buttons</code> aggregation is set, any change made to this aggregation has no effect anymore. When running on a phone, this <code>button</code> (and the <code>beginButton</code> together when set) is (are) rendered at the center of the footer area. When running on other platforms, this <code>button</code> (and the <code>beginButton</code> together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.</p>
             * @returns sap.m.Button 
             */
            getEndButton(): sap.m.Button;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEscapeHandler" href="#/api/sap.m.Dialog/methods/getEscapeHandler">escapeHandler</a>.</p><p>This property expects a function with one parameter of type Promise. In the function, you should call either <code>resolve()</code> or <code>reject()</code> on the Promise object.<br/> The function allows you to define custom behavior which will be executed when the Escape key is pressed. By default, when the Escape key is pressed, the Dialog is immediately closed.</p>
             * @returns any <p>Value of property <code>escapeHandler</code></p>
             */
            getEscapeHandler(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.Dialog/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content area. The Dialog detects if there's <code>sap.m.NavContainer</code>, <code>sap.m.Page</code>, <code>sap.m.ScrollContainer</code> or <code>sap.m.SplitContainer</code> as a direct child added to the Dialog. If there is, the Dialog will turn off <code>scrolling</code> by setting this property to <code>false</code>, automatically ignoring the existing value of the property.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>horizontalScrolling</code></p>
             */
            getHorizontalScrolling(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Dialog/methods/getIcon">icon</a>.</p><p>Icon displayed in the Dialog header. This <code>icon</code> is invisible on the iOS platform and it is density-aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.Dialog/methods/getInitialFocus">initialFocus</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialFocus(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.Dialog/methods/getResizable">resizable</a>.</p><p>Indicates whether the Dialog is resizable. If this property is set to <code>true</code>, the Dialog will have a resize handler in its bottom right corner. This property has a default value <code>false</code>. The Dialog can be resizable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>resizable</code></p>
             */
            getResizable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Dialog/methods/getShowHeader">showHeader</a>.</p><p>Determines whether the header is shown inside the Dialog. If this property is set to <code>true</code>, the <code>text</code> and <code>icon</code> properties are ignored. This property has a default value <code>true</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHeader</code></p>
             */
            getShowHeader(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.Dialog/methods/getState">state</a>.</p><p>Affects the <code>icon</code> and the <code>title</code> color. If other than <code>none</code> is set, a predefined icon will be added to the Dialog. Setting the <code>icon</code> property will overwrite the predefined icon. The default value is <code>none</code> which doesn't add any icon to the Dialog control. This property is by now only supported by the blue crystal theme.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>state</code></p>
             */
            getState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStretch" href="#/api/sap.m.Dialog/methods/getStretch">stretch</a>.</p><p>Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched to 93% of the viewport. This property is only applicable to a Standard Dialog. Message-type Dialog ignores it.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>stretch</code></p>
             */
            getStretch(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Dialog/methods/getSubHeader">subHeader</a>.</p><p>When a <code>subHeader</code> is assigned to the Dialog, it's rendered directly after the main header in the Dialog. The <code>subHeader</code> is out of the content area and won't be scrolled when the content size is bigger than the content area size.</p>
             * @returns sap.m.IBar 
             */
            getSubHeader(): sap.m.IBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Dialog/methods/getTitle">title</a>.</p><p>Title text appears in the Dialog header.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Dialog/methods/getType">type</a>.</p><p>The <code>type</code> of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on tablet and desktop.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.DialogType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.DialogType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.Dialog/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content area. The Dialog detects if there's <code>sap.m.NavContainer</code>, <code>sap.m.Page</code>, <code>sap.m.ScrollContainer</code> or <code>sap.m.SplitContainer</code> as a direct child added to the Dialog. If there is, the Dialog will turn off <code>scrolling</code> by setting this property to <code>false</code>, automatically ignoring the existing value of this property.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>verticalScrolling</code></p>
             */
            getVerticalScrolling(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Button} oButton <p>The button whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfButton(oButton: sap.m.Button): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a button into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the button should be inserted at; for a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted at the last position</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertButton(oButton: sap.m.Button, iIndex: number): sap.m.Dialog;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Dialog;
            /**
             * <p>The method checks if the Dialog is open. It returns <code>true</code> when the Dialog is currently open (this includes opening and closing animations), otherwise it returns <code>false</code>.</p>
             * @returns undefined <p>boolean</p>
             */
            isOpen(): undefined;
            /**
             * <p>Open the dialog.</p>
             */
            open(): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Dialog/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Dialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllButtons(): sap.m.Button[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Dialog/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Dialog/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a button from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.Dialog/methods/getButtons">buttons</a>.</p>
             * @param {number | string | sap.m.Button} vButton <p>The button to remove or its index or id</p>
             * @returns sap.m.Button <p>The removed button or <code>null</code></p>
             */
            removeButton(vButton: number | string | sap.m.Button): sap.m.Button;
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Dialog/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Dialog/methods/getBeginButton">beginButton</a>.</p>
             * @param {sap.m.Button} oBeginButton <p>The beginButton to set</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBeginButton(oBeginButton: sap.m.Button): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.Dialog/methods/getContentHeight">contentHeight</a>.</p><p>Preferred height of the content in the Dialog. If the preferred height is bigger than the available space on a screen, it will be overwritten by the maximum available height on a screen in order to make sure that the Dialog isn't cut off.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentHeight <p>New value for property <code>contentHeight</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentHeight(sContentHeight: sap.ui.core.CSSSize): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.Dialog/methods/getContentWidth">contentWidth</a>.</p><p>Preferred width of the content in the Dialog. This property affects the width of the Dialog on a phone in landscape mode, a tablet or a desktop, because the Dialog has a fixed width on a phone in portrait mode. If the preferred width is less than the minimum width of the Dialog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of the Dialog width on tablet is 400px.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentWidth <p>New value for property <code>contentWidth</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentWidth(sContentWidth: sap.ui.core.CSSSize): sap.m.Dialog;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Dialog/methods/getCustomHeader">customHeader</a>.</p>
             * @param {sap.m.IBar} oCustomHeader <p>The customHeader to set</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomHeader(oCustomHeader: sap.m.IBar): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraggable" href="#/api/sap.m.Dialog/methods/getDraggable">draggable</a>.</p><p>Indicates whether the Dialog is draggable. If this property is set to <code>true</code>, the Dialog will be draggable by its header. This property has a default value <code>false</code>. The Dialog can be draggable only in desktop mode.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDraggable <p>New value for property <code>draggable</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDraggable(bDraggable: boolean): sap.m.Dialog;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Dialog/methods/getEndButton">endButton</a>.</p>
             * @param {sap.m.Button} oEndButton <p>The endButton to set</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEndButton(oEndButton: sap.m.Button): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEscapeHandler" href="#/api/sap.m.Dialog/methods/getEscapeHandler">escapeHandler</a>.</p><p>This property expects a function with one parameter of type Promise. In the function, you should call either <code>resolve()</code> or <code>reject()</code> on the Promise object.<br/> The function allows you to define custom behavior which will be executed when the Escape key is pressed. By default, when the Escape key is pressed, the Dialog is immediately closed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oEscapeHandler <p>New value for property <code>escapeHandler</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEscapeHandler(oEscapeHandler: any): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.Dialog/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>Indicates if the user can scroll horizontally inside the Dialog when the content is bigger than the content area. The Dialog detects if there's <code>sap.m.NavContainer</code>, <code>sap.m.Page</code>, <code>sap.m.ScrollContainer</code> or <code>sap.m.SplitContainer</code> as a direct child added to the Dialog. If there is, the Dialog will turn off <code>scrolling</code> by setting this property to <code>false</code>, automatically ignoring the existing value of the property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bHorizontalScrolling <p>New value for property <code>horizontalScrolling</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Dialog/methods/getIcon">icon</a>.</p><p>Icon displayed in the Dialog header. This <code>icon</code> is invisible on the iOS platform and it is density-aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.Dialog;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.Dialog/methods/getInitialFocus">initialFocus</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus <p>ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialFocus(oInitialFocus: sap.ui.core.ID | sap.ui.core.Control): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.Dialog/methods/getResizable">resizable</a>.</p><p>Indicates whether the Dialog is resizable. If this property is set to <code>true</code>, the Dialog will have a resize handler in its bottom right corner. This property has a default value <code>false</code>. The Dialog can be resizable only in desktop mode.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bResizable <p>New value for property <code>resizable</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setResizable(bResizable: boolean): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Dialog/methods/getShowHeader">showHeader</a>.</p><p>Determines whether the header is shown inside the Dialog. If this property is set to <code>true</code>, the <code>text</code> and <code>icon</code> properties are ignored. This property has a default value <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHeader <p>New value for property <code>showHeader</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHeader(bShowHeader: boolean): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.Dialog/methods/getState">state</a>.</p><p>Affects the <code>icon</code> and the <code>title</code> color. If other than <code>none</code> is set, a predefined icon will be added to the Dialog. Setting the <code>icon</code> property will overwrite the predefined icon. The default value is <code>none</code> which doesn't add any icon to the Dialog control. This property is by now only supported by the blue crystal theme.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.ui.core.ValueState): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStretch" href="#/api/sap.m.Dialog/methods/getStretch">stretch</a>.</p><p>Determines if the Dialog will be stretched to full screen on mobile. On desktop, the Dialog will be stretched to 93% of the viewport. This property is only applicable to a Standard Dialog. Message-type Dialog ignores it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bStretch <p>New value for property <code>stretch</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStretch(bStretch: boolean): sap.m.Dialog;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Dialog/methods/getSubHeader">subHeader</a>.</p>
             * @param {sap.m.IBar} oSubHeader <p>The subHeader to set</p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeader(oSubHeader: sap.m.IBar): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Dialog/methods/getTitle">title</a>.</p><p>Title text appears in the Dialog header.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Dialog/methods/getType">type</a>.</p><p>The <code>type</code> of the Dialog. In some themes, the type Message will limit the Dialog width within 480px on tablet and desktop.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.m.DialogType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.DialogType): sap.m.Dialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.Dialog/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>Indicates if the user can scroll vertically inside the Dialog when the content is bigger than the content area. The Dialog detects if there's <code>sap.m.NavContainer</code>, <code>sap.m.Page</code>, <code>sap.m.ScrollContainer</code> or <code>sap.m.SplitContainer</code> as a direct child added to the Dialog. If there is, the Dialog will turn off <code>scrolling</code> by setting this property to <code>false</code>, automatically ignoring the existing value of this property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVerticalScrolling <p>New value for property <code>verticalScrolling</code></p>
             * @returns sap.m.Dialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVerticalScrolling(bVerticalScrolling: boolean): sap.m.Dialog;
        }
        /**
         * <p><p>Enum for the ARIA role of <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a> control.</p></p>
         */
        export enum DialogRoleType {
            /**
             * <p>Represents the ARIA role <code>alertdialog</code>.</p>
             */
            AlertDialog = "AlertDialog",
            /**
             * <p>Represents the ARIA role <code>dialog</code>.</p>
             */
            Dialog = "Dialog",
        }
        /**
         * <p><p>Enum for the type of <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a> control.</p></p>
         */
        export enum DialogType {
            /**
             * <p>Dialog with type Message looks the same as the Standard Dialog in Android. It puts the Left and the Right buttons at the bottom of the Dialog in iOS.</p>
             */
            Message = "Message",
            /**
             * <p>This is the default value for Dialog type.</p><p>The Standard Dialog in iOS has a header on the top. The Left and the Right buttons are put inside the header. In Android, the Left and the Right buttons are put at the bottom of the Dialog.</p>
             */
            Standard = "Standard",
        }
        /**
         * <p><code>sap.m.DisplayListItem</code> can be used to represent a label and a value.</p>
         */
        export class DisplayListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new DisplayListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.DisplayListItem/methods/getLabel">label</a>.</p><p>Defines the label of the list item.</p>
             * @returns string <p>Value of property <code>label</code></p>
             */
            getLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DisplayListItem/methods/getValue">value</a>.</p><p>Defines the value of the list item.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueTextDirection" href="#/api/sap.m.DisplayListItem/methods/getValueTextDirection">valueTextDirection</a>.</p><p>Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>valueTextDirection</code></p>
             */
            getValueTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.DisplayListItem/methods/getLabel">label</a>.</p><p>Defines the label of the list item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLabel <p>New value for property <code>label</code></p>
             * @returns sap.m.DisplayListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabel(sLabel: string): sap.m.DisplayListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.DisplayListItem/methods/getValue">value</a>.</p><p>Defines the value of the list item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.DisplayListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.DisplayListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueTextDirection" href="#/api/sap.m.DisplayListItem/methods/getValueTextDirection">valueTextDirection</a>.</p><p>Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sValueTextDirection <p>New value for property <code>valueTextDirection</code></p>
             * @returns sap.m.DisplayListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueTextDirection(sValueTextDirection: sap.ui.core.TextDirection): sap.m.DisplayListItem;
        }
        /**
         * <p>A draft indicator is <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a>.</p>
         */
        export abstract class DraftIndicator extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new DraftIndicator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             */
            constructor(sId?: string);
            /**
             * <p>Clears the indicator state</p>
             */
            clearDraftState(): void;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDisplayTime" href="#/api/sap.m.DraftIndicator/methods/getMinDisplayTime">minDisplayTime</a>.</p><p>Minimum time in milliseconds for showing the draft indicator</p><p>Default value is <code>1500</code>.</p>
             * @returns number <p>Value of property <code>minDisplayTime</code></p>
             */
            getMinDisplayTime(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.DraftIndicator/methods/getState">state</a>.</p><p>State of the indicator. Could be "Saving", "Saved" and "Clear".</p><p>Default value is <code>Clear</code>.</p>
             * @returns sap.m.DraftIndicatorState <p>Value of property <code>state</code></p>
             */
            getState(): sap.m.DraftIndicatorState;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDisplayTime" href="#/api/sap.m.DraftIndicator/methods/getMinDisplayTime">minDisplayTime</a>.</p><p>Minimum time in milliseconds for showing the draft indicator</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1500</code>.</p>
             * @param {number} iMinDisplayTime <p>New value for property <code>minDisplayTime</code></p>
             * @returns sap.m.DraftIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinDisplayTime(iMinDisplayTime: number): sap.m.DraftIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.DraftIndicator/methods/getState">state</a>.</p><p>State of the indicator. Could be "Saving", "Saved" and "Clear".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Clear</code>.</p>
             * @param {sap.m.DraftIndicatorState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.DraftIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.m.DraftIndicatorState): sap.m.DraftIndicator;
            /**
             * <p>Sets the indicator in "Saved" state</p>
             */
            showDraftSaved(): void;
            /**
             * <p>Sets the indicator in "Saving..." state</p>
             */
            showDraftSaving(): void;
        }
        /**
         * <p><p>Enum for the state of <a target="_self" class="jsdoclink" href="#/api/sap.m.DraftIndicator">sap.m.DraftIndicator</a> control.</p></p>
         */
        export enum DraftIndicatorState {
            /**
             * <p>This is the default value for DraftIndicatorState type. This state has no visual information displayed.</p>
             */
            Clear = "Clear",
            /**
             * <p>Indicates that the draft is already saved</p>
             */
            Saved = "Saved",
            /**
             * <p>Indicates that the draft currently is being saved</p>
             */
            Saving = "Saving",
        }
        /**
         * <p>Provides filtering functionality with multiple parameters.</p><h3>Overview</h3><p>The <code>FacetFilter</code> control is used to provide filtering functionality with multiple parameters and supports the users in finding the information they need from potentially very large data sets.</p><p>Your app can have dependencies between facets where selection of filter items in one facet list limits the list of valid filters in another facet list.</p><p>The <code>FacetFilter</code> uses <a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilterList">FacetFilterList</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilterItem">FacetFilterItem</a> to model facets and their associated filters.</p><p><b>Note: </b><a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilterList">FacetFilterList</a> is a subclass of <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> and supports growing enablement feature via the property <code>growing</code>. When you use this feature, be aware that it only works with one-way data binding. Having growing feature enabled when the <code>items</code> aggregation is bound to a model with two-way data binding, may lead to unexpected and/or inconsistent behavior across browsers, such as unexpected closing of the list.</p><h3>Usage</h3><p>Use the <code>FacetFilter</code> if your app displays a large list of items that can be grouped by multiple parameters, for example products by category and supplier. With the <code>FacetFilter</code>, you allow the users to dynamically filter the list so it only displays products from the categories and suppliers they want to see.</p><p>While the <a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilterList">sap.m.FacetFilterList</a> popup is opened (when the user selects a button corresponding to the list's name), any other activities leading to focus change will close it. For example, when the popup is opened and the app developer loads a <a target="_self" class="jsdoclink" href="#/api/sap.m.BusyDialog">sap.m.BusyDialog</a> or any other dialog that obtains the focus, the popup will be closed.</p><h3>Responsive behavior</h3><p>The <code>FacetFilter</code> supports the following two types, which can be configured using the control's <code>type</code> property:</p><p><ul><li>Simple type (default) - only available for desktop and tablet screen sizes. The active facets are displayed as individually selectable buttons on the toolbar.</li> <li>Light type - automatically enabled on smart phone sized devices, but also available for desktop and tablets. The active facets and selected filter items are displayed in the summary bar. When the user selects the summary bar, a navigable dialog list of all facets is displayed. When the user selects a facet, the dialog scrolls to show the list of filters that are available for the selected facet.</li></ul></p><h3>Additional Information</h3><p>For more information, go to <b>Developer Guide</b> section in the Demo Kit and navigate to <b>More&nbsp;About&nbsp;Controls</b>&nbsp;>&nbsp;<b>sap.m</b>&nbsp;>&nbsp;<b>Facet&nbsp;Filter</b></p>
         */
        export class FacetFilter extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>FacetFilter</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some list to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p>
             * @param {sap.m.FacetFilterList} oList <p>The list to add; if empty, nothing is inserted</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addList(oList: sap.m.FacetFilterList): sap.m.FacetFilter;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.FacetFilter/events/confirm">confirm</a> event of this <code>sap.m.FacetFilter</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.</p><p>Fired when the user confirms filter selection.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachConfirm(oData: any, fnFunction: Function, oListener?: any): sap.m.FacetFilter;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.FacetFilter/events/reset">reset</a> event of this <code>sap.m.FacetFilter</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.</p><p>Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachReset(oData: any, fnFunction: Function, oListener?: any): sap.m.FacetFilter;
            /**
             * <p>Destroys all the lists in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLists(): sap.m.FacetFilter;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.FacetFilter/events/confirm">confirm</a> event of this <code>sap.m.FacetFilter</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachConfirm(fnFunction: Function, oListener?: any): sap.m.FacetFilter;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.FacetFilter/events/reset">reset</a> event of this <code>sap.m.FacetFilter</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachReset(fnFunction: Function, oListener?: any): sap.m.FacetFilter;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.FacetFilter/events/confirm">confirm</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireConfirm(mParameters?: any): sap.m.FacetFilter;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.FacetFilter/events/reset">reset</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireReset(mParameters?: any): sap.m.FacetFilter;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p><p>Collection of FacetFilterList controls.</p>
             * @returns sap.m.FacetFilterList[] 
             */
            getLists(): sap.m.FacetFilterList[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLiveSearch" href="#/api/sap.m.FacetFilter/methods/getLiveSearch">liveSearch</a>.</p><p>Enables/disables live search in the search field of all <code>sap.m.FacetFilterList</code> instances.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>liveSearch</code></p>
             */
            getLiveSearch(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPersonalization" href="#/api/sap.m.FacetFilter/methods/getShowPersonalization">showPersonalization</a>.</p><p>If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showPersonalization</code></p>
             */
            getShowPersonalization(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPopoverOKButton" href="#/api/sap.m.FacetFilter/methods/getShowPopoverOKButton">showPopoverOKButton</a>.</p><p>If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showPopoverOKButton</code></p>
             */
            getShowPopoverOKButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowReset" href="#/api/sap.m.FacetFilter/methods/getShowReset">showReset</a>.</p><p>Shows/hides the FacetFilter Reset button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showReset</code></p>
             */
            getShowReset(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSummaryBar" href="#/api/sap.m.FacetFilter/methods/getShowSummaryBar">showSummaryBar</a>.</p><p>Shows the summary bar instead of the FacetFilter buttons bar when set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSummaryBar</code></p>
             */
            getShowSummaryBar(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.FacetFilter/methods/getType">type</a>.</p><p>Defines the default appearance of the FacetFilter on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.</p><p>Default value is <code>Simple</code>.</p>
             * @returns sap.m.FacetFilterType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.FacetFilterType;
            /**
             * <p>Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.FacetFilterList} oList <p>The list whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfList(oList: sap.m.FacetFilterList): number;
            /**
             * <p>Inserts a list into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p>
             * @param {sap.m.FacetFilterList} oList <p>The list to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the list should be inserted at; for a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value greater than the current size of the aggregation, the list is inserted at the last position</p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertList(oList: sap.m.FacetFilterList, iIndex: number): sap.m.FacetFilter;
            /**
             * <p>Opens the FacetFilter dialog.</p>
             * @returns sap.m.FacetFilter <p>this pointer for chaining</p>
             */
            openFilterDialog(): sap.m.FacetFilter;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.FacetFilterList[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllLists(): sap.m.FacetFilterList[];
            /**
             * <p>Removes a list from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLists" href="#/api/sap.m.FacetFilter/methods/getLists">lists</a>.</p>
             * @param {number | string | sap.m.FacetFilterList} vList <p>The list to remove or its index or id</p>
             * @returns sap.m.FacetFilterList <p>The removed list or <code>null</code></p>
             */
            removeList(vList: number | string | sap.m.FacetFilterList): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLiveSearch" href="#/api/sap.m.FacetFilter/methods/getLiveSearch">liveSearch</a>.</p><p>Enables/disables live search in the search field of all <code>sap.m.FacetFilterList</code> instances.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bLiveSearch <p>New value for property <code>liveSearch</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLiveSearch(bLiveSearch: boolean): sap.m.FacetFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPersonalization" href="#/api/sap.m.FacetFilter/methods/getShowPersonalization">showPersonalization</a>.</p><p>If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowPersonalization <p>New value for property <code>showPersonalization</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowPersonalization(bShowPersonalization: boolean): sap.m.FacetFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowPopoverOKButton" href="#/api/sap.m.FacetFilter/methods/getShowPopoverOKButton">showPopoverOKButton</a>.</p><p>If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowPopoverOKButton <p>New value for property <code>showPopoverOKButton</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowPopoverOKButton(bShowPopoverOKButton: boolean): sap.m.FacetFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowReset" href="#/api/sap.m.FacetFilter/methods/getShowReset">showReset</a>.</p><p>Shows/hides the FacetFilter Reset button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowReset <p>New value for property <code>showReset</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowReset(bShowReset: boolean): sap.m.FacetFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSummaryBar" href="#/api/sap.m.FacetFilter/methods/getShowSummaryBar">showSummaryBar</a>.</p><p>Shows the summary bar instead of the FacetFilter buttons bar when set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowSummaryBar <p>New value for property <code>showSummaryBar</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSummaryBar(bShowSummaryBar: boolean): sap.m.FacetFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.FacetFilter/methods/getType">type</a>.</p><p>Defines the default appearance of the FacetFilter on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Simple</code>.</p>
             * @param {sap.m.FacetFilterType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.FacetFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.FacetFilterType): sap.m.FacetFilter;
        }
        /**
         * <p>Represents a value for the <a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilterList">sap.m.FacetFilterList</a> control.</p>
         */
        export class FacetFilterItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new <code>FacetFilterItem</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FacetFilterItem/methods/getKey">key</a>.</p><p>Can be used as input for subsequent actions.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FacetFilterItem/methods/getText">text</a>.</p><p>Determines the text to be displayed for the item.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FacetFilterItem/methods/getKey">key</a>.</p><p>Can be used as input for subsequent actions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.FacetFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.FacetFilterItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FacetFilterItem/methods/getText">text</a>.</p><p>Determines the text to be displayed for the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.FacetFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.FacetFilterItem;
        }
        /**
         * <p>Represents a list of values for the <a target="_self" class="jsdoclink" href="#/api/sap.m.FacetFilter">sap.m.FacetFilter</a> control.</p><p><b>Note: </b><code>FacetFilterList</code> is a subclass of <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> and supports growing enablement feature via the property <code>growing</code>. When you use this feature, be aware that it only works with one-way data binding. Having growing feature enabled when the <code>items</code> aggregation is bound to a model with two-way data binding, may lead to unexpected and/or inconsistent behavior across browsers, such as unexpected closing of the list.</p><p>While the <code>FacetFilterList</code> popup is opened (when the user selects a button corresponding to the list's name), any other activities leading to focus change will close it. For example, when the popup is opened and the app developer loads a <a target="_self" class="jsdoclink" href="#/api/sap.m.BusyDialog">sap.m.BusyDialog</a> or any other dialog that obtains the focus, the popup will be closed.</p>
         */
        export class FacetFilterList extends sap.m.List {
            /**
             * <p>Constructor for a new <code>FacetFilterList</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listClose" href="#/api/sap.m.FacetFilterList/events/listClose">listClose</a> event of this <code>sap.m.FacetFilterList</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.</p><p>Triggered after the list of items is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachListClose(oData: any, fnFunction: Function, oListener?: any): sap.m.FacetFilterList;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listOpen" href="#/api/sap.m.FacetFilterList/events/listOpen">listOpen</a> event of this <code>sap.m.FacetFilterList</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.</p><p>Fired before the filter list is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachListOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.FacetFilterList;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listClose" href="#/api/sap.m.FacetFilterList/events/listClose">listClose</a> event of this <code>sap.m.FacetFilterList</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachListClose(fnFunction: Function, oListener?: any): sap.m.FacetFilterList;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listOpen" href="#/api/sap.m.FacetFilterList/events/listOpen">listOpen</a> event of this <code>sap.m.FacetFilterList</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachListOpen(fnFunction: Function, oListener?: any): sap.m.FacetFilterList;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listClose" href="#/api/sap.m.FacetFilterList/events/listClose">listClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireListClose(mParameters?: any): sap.m.FacetFilterList;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listOpen" href="#/api/sap.m.FacetFilterList/events/listOpen">listOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireListOpen(mParameters?: any): sap.m.FacetFilterList;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.FacetFilterList/methods/getActive">active</a>.</p><p>Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>active</code></p>
             */
            getActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAllCount" href="#/api/sap.m.FacetFilterList/methods/getAllCount">allCount</a>.</p><p>Determines the number of objects that match this item in the target data set when all filter items are selected.</p>
             * @returns number <p>Value of property <code>allCount</code></p>
             */
            getAllCount(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDataType" href="#/api/sap.m.FacetFilterList/methods/getDataType">dataType</a>.</p><p>FacetFilterList data type. Only String data type will provide search function.</p><p>Default value is <code>String</code>.</p>
             * @returns sap.m.FacetFilterListDataType <p>Value of property <code>dataType</code></p>
             */
            getDataType(): sap.m.FacetFilterListDataType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableCaseInsensitiveSearch" href="#/api/sap.m.FacetFilterList/methods/getEnableCaseInsensitiveSearch">enableCaseInsensitiveSearch</a>.</p><p>If set to <code>true</code>, enables case-insensitive search for OData.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableCaseInsensitiveSearch</code></p>
             */
            getEnableCaseInsensitiveSearch(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FacetFilterList/methods/getKey">key</a>.</p><p>Unique identifier for this filter list.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRetainListSequence" href="#/api/sap.m.FacetFilterList/methods/getRetainListSequence">retainListSequence</a>.</p><p>Retains the list sequence if it is inactive and made active again.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>retainListSequence</code></p>
             */
            getRetainListSequence(): boolean;
            /**
             * <p>Returns the keys of the selected elements as an associative array. An empty object is returned if no items are selected.</p>
             * @returns any <p>Object with the selected keys</p>
             */
            getSelectedKeys(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSequence" href="#/api/sap.m.FacetFilterList/methods/getSequence">sequence</a>.</p><p>Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.</p><p>Default value is <code>-1</code>.</p>
             * @returns number <p>Value of property <code>sequence</code></p>
             */
            getSequence(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRemoveFacetIcon" href="#/api/sap.m.FacetFilterList/methods/getShowRemoveFacetIcon">showRemoveFacetIcon</a>.</p><p>Specifies whether remove icon for facet is visible or hidden.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showRemoveFacetIcon</code></p>
             */
            getShowRemoveFacetIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.FacetFilterList/methods/getTitle">title</a>.</p><p>Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also displayed as a list item in the facet page of the dialog.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWordWrap" href="#/api/sap.m.FacetFilterList/methods/getWordWrap">wordWrap</a>.</p><p>If set to <code>true</code>, the item text wraps when it is too long.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wordWrap</code></p>
             */
            getWordWrap(): boolean;
            /**
             * <p>Removes the specified key from the selected keys cache and deselects the item.</p>
             * @param {string} sKey <p>The key of the selected item to be removed from the cache. If <code>null</code> then the text parameter will be used as the key.</p>
             * @param {string} sText <p>The text of the selected item to be removed from the cache. If the key parameter is <code>null</code> then text will be used as the key.</p>
             */
            removeSelectedKey(sKey: string, sText: string): void;
            /**
             * <p>Removes all selected keys from the selected keys cache and deselects all items.</p>
             */
            removeSelectedKeys(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.FacetFilterList/methods/getActive">active</a>.</p><p>Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bActive <p>New value for property <code>active</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActive(bActive: boolean): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAllCount" href="#/api/sap.m.FacetFilterList/methods/getAllCount">allCount</a>.</p><p>Determines the number of objects that match this item in the target data set when all filter items are selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iAllCount <p>New value for property <code>allCount</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAllCount(iAllCount: number): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDataType" href="#/api/sap.m.FacetFilterList/methods/getDataType">dataType</a>.</p><p>FacetFilterList data type. Only String data type will provide search function.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>String</code>.</p>
             * @param {sap.m.FacetFilterListDataType} sDataType <p>New value for property <code>dataType</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDataType(sDataType: sap.m.FacetFilterListDataType): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableCaseInsensitiveSearch" href="#/api/sap.m.FacetFilterList/methods/getEnableCaseInsensitiveSearch">enableCaseInsensitiveSearch</a>.</p><p>If set to <code>true</code>, enables case-insensitive search for OData.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableCaseInsensitiveSearch <p>New value for property <code>enableCaseInsensitiveSearch</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableCaseInsensitiveSearch(bEnableCaseInsensitiveSearch: boolean): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FacetFilterList/methods/getKey">key</a>.</p><p>Unique identifier for this filter list.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.ListBase/methods/getMode">mode</a>.</p><p>Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.ListMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.ListMode): sap.m.ListBase;
            /**
             * <p>Overrides to allow only MultiSelect and SingleSelectMaster list modes. If an invalid mode is given then the mode will not be changed.</p>
             * @param {sap.m.ListMode} mode <p>The list mode</p>
             * @returns sap.m.FacetFilterList <p><code>this</code> to allow method chaining</p>
             */
            setMode(mode: sap.m.ListMode): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRetainListSequence" href="#/api/sap.m.FacetFilterList/methods/getRetainListSequence">retainListSequence</a>.</p><p>Retains the list sequence if it is inactive and made active again.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRetainListSequence <p>New value for property <code>retainListSequence</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRetainListSequence(bRetainListSequence: boolean): sap.m.FacetFilterList;
            /**
             * <p>Used to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant. Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting. If aKeys is <code>undefined</code>, <code>null</code>, or {} (empty object) then all keys are deleted. After this method completes, only those items with matching keys will be selected. All other items in the list will be deselected.</p>
             * @param {any} oKeys <p>Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.</p>
             */
            setSelectedKeys(oKeys: any): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSequence" href="#/api/sap.m.FacetFilterList/methods/getSequence">sequence</a>.</p><p>Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {number} iSequence <p>New value for property <code>sequence</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSequence(iSequence: number): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRemoveFacetIcon" href="#/api/sap.m.FacetFilterList/methods/getShowRemoveFacetIcon">showRemoveFacetIcon</a>.</p><p>Specifies whether remove icon for facet is visible or hidden.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowRemoveFacetIcon <p>New value for property <code>showRemoveFacetIcon</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowRemoveFacetIcon(bShowRemoveFacetIcon: boolean): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.FacetFilterList/methods/getTitle">title</a>.</p><p>Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also displayed as a list item in the facet page of the dialog.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.FacetFilterList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWordWrap" href="#/api/sap.m.FacetFilterList/methods/getWordWrap">wordWrap</a>.</p><p>If set to <code>true</code>, the item text wraps when it is too long.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWordWrap <p>New value for property <code>wordWrap</code></p>
             * @returns sap.m.FacetFilterList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWordWrap(bWordWrap: boolean): sap.m.FacetFilterList;
        }
        /**
         * <p><p>FacetFilterList data types.</p></p>
         */
        export enum FacetFilterListDataType {
            /**
             * <p>An input control for specifying a Boolean value</p>
             */
            Boolean = "Boolean",
            /**
             * <p>An input control for specifying a date value. The user can select a month, day of the month, and year.</p>
             */
            Date = "Date",
            /**
             * <p>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.</p>
             */
            DateTime = "DateTime",
            /**
             * <p>An input control for specifying a Float value</p>
             */
            Float = "Float",
            /**
             * <p>>An input control for specifying an Integer value</p>
             */
            Integer = "Integer",
            /**
             * <p>An input control for specifying a String value</p>
             */
            String = "String",
            /**
             * <p>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.</p>
             */
            Time = "Time",
        }
        /**
         * <p><p>Used by the FacetFilter control to adapt its design according to type.</p></p>
         */
        export enum FacetFilterType {
            /**
             * <p>Forces FacetFilter to display in light mode.</p>
             */
            Light = "Light",
            /**
             * <p>Forces FacetFilter to display facet lists as a row of buttons, one button per facet.</p><p>The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.</p>
             */
            Simple = "Simple",
        }
        /**
         * <p>Displays a tile containing the text of the feed, a subheader, and a numeric value.</p>
         */
        export class FeedContent extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.FeedContent control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedContent/events/press">press</a> event of this <code>sap.m.FeedContent</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FeedContent</code> itself.</p><p>The event is triggered when the feed content is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FeedContent</code> itself</p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.FeedContent;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedContent/events/press">press</a> event of this <code>sap.m.FeedContent</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.FeedContent;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedContent/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.FeedContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentText" href="#/api/sap.m.FeedContent/methods/getContentText">contentText</a>.</p><p>The content text.</p>
             * @returns string <p>Value of property <code>contentText</code></p>
             */
            getContentText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.FeedContent/methods/getSubheader">subheader</a>.</p><p>The subheader.</p>
             * @returns string <p>Value of property <code>subheader</code></p>
             */
            getSubheader(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncateValueTo" href="#/api/sap.m.FeedContent/methods/getTruncateValueTo">truncateValueTo</a>.</p><p>The number of characters to display for the value property.</p><p>Default value is <code>4</code>.</p>
             * @returns number <p>Value of property <code>truncateValueTo</code></p>
             */
            getTruncateValueTo(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.FeedContent/methods/getValue">value</a>.</p><p>The actual value.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueColor" href="#/api/sap.m.FeedContent/methods/getValueColor">valueColor</a>.</p><p>The semantic color of the value.</p>
             * @returns sap.m.ValueColor <p>Value of property <code>valueColor</code></p>
             */
            getValueColor(): sap.m.ValueColor;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentText" href="#/api/sap.m.FeedContent/methods/getContentText">contentText</a>.</p><p>The content text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sContentText <p>New value for property <code>contentText</code></p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentText(sContentText: string): sap.m.FeedContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.FeedContent/methods/getSubheader">subheader</a>.</p><p>The subheader.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSubheader <p>New value for property <code>subheader</code></p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubheader(sSubheader: string): sap.m.FeedContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncateValueTo" href="#/api/sap.m.FeedContent/methods/getTruncateValueTo">truncateValueTo</a>.</p><p>The number of characters to display for the value property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>4</code>.</p>
             * @param {number} iTruncateValueTo <p>New value for property <code>truncateValueTo</code></p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTruncateValueTo(iTruncateValueTo: number): sap.m.FeedContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.FeedContent/methods/getValue">value</a>.</p><p>The actual value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.FeedContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueColor" href="#/api/sap.m.FeedContent/methods/getValueColor">valueColor</a>.</p><p>The semantic color of the value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.m.ValueColor} sValueColor <p>New value for property <code>valueColor</code></p>
             * @returns sap.m.FeedContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueColor(sValueColor: sap.m.ValueColor): sap.m.FeedContent;
        }
        /**
         * <p>The Feed Input allows the user to enter text for a new feed entry and then post it.</p>
         */
        export class FeedInput extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new FeedInput.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="post" href="#/api/sap.m.FeedInput/events/post">post</a> event of this <code>sap.m.FeedInput</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FeedInput</code> itself.</p><p>The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FeedInput</code> itself</p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPost(oData: any, fnFunction: Function, oListener?: any): sap.m.FeedInput;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="post" href="#/api/sap.m.FeedInput/events/post">post</a> event of this <code>sap.m.FeedInput</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPost(fnFunction: Function, oListener?: any): sap.m.FeedInput;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="post" href="#/api/sap.m.FeedInput/events/post">post</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePost(mParameters?: any): sap.m.FeedInput;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelForPicture" href="#/api/sap.m.FeedInput/methods/getAriaLabelForPicture">ariaLabelForPicture</a>.</p><p>Text for Picture which will be read by screenreader. If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.</p>
             * @returns string <p>Value of property <code>ariaLabelForPicture</code></p>
             */
            getAriaLabelForPicture(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtonTooltip" href="#/api/sap.m.FeedInput/methods/getButtonTooltip">buttonTooltip</a>.</p><p>Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element) or an instance of sap.ui.core.TooltipBase. If a new tooltip is set, any previously set tooltip is deactivated. The default value is set language dependent.</p><p>Default value is <code>Submit</code>.</p>
             * @returns sap.ui.core.TooltipBase <p>Value of property <code>buttonTooltip</code></p>
             */
            getButtonTooltip(): sap.ui.core.TooltipBase;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.FeedInput/methods/getEnabled">enabled</a>.</p><p>Set this flag to "false" to disable both text input and post button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.FeedInput/methods/getGrowing">growing</a>.</p><p>Indicates the ability of the control to automatically grow and shrink dynamically with its content.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>growing</code></p>
             */
            getGrowing(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingMaxLines" href="#/api/sap.m.FeedInput/methods/getGrowingMaxLines">growingMaxLines</a>.</p><p>Defines the maximum number of lines that the control can grow. Value is set to 0 by default, which means an unlimited numbers of rows. <b>Note:</b> Minimum value to set is equal to the <code>rows</code> property value, maximum value is 15.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>growingMaxLines</code></p>
             */
            getGrowingMaxLines(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedInput/methods/getIcon">icon</a>.</p><p>Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.FeedInput/methods/getIconDensityAware">iconDensityAware</a>.</p><p>Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities. If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.</p><p>If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.</p><p>Please be aware that this property is relevant only for images and not for icons.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.FeedInput/methods/getMaxLength">maxLength</a>.</p><p>The maximum length (the maximum number of characters) for the feed's input value. By default this is not limited.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>maxLength</code></p>
             */
            getMaxLength(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.FeedInput/methods/getPlaceholder">placeholder</a>.</p><p>The placeholder text shown in the input area as long as the user has not entered any text value.</p><p>Default value is <code>Post something here</code>.</p>
             * @returns string <p>Value of property <code>placeholder</code></p>
             */
            getPlaceholder(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.FeedInput/methods/getRows">rows</a>.</p><p>Defines the number of visible text lines for the control. <b>Note:</b> Minimum value is 2, maximum value is 15.</p><p>Default value is <code>2</code>.</p>
             * @returns number <p>Value of property <code>rows</code></p>
             */
            getRows(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowExceededText" href="#/api/sap.m.FeedInput/methods/getShowExceededText">showExceededText</a>.</p><p>Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.</p><p>If set to <code>false</code>, the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property. If set to <code>true</code>, the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below the input field displays their number.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showExceededText</code></p>
             */
            getShowExceededText(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.FeedInput/methods/getShowIcon">showIcon</a>.</p><p>If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showIcon</code></p>
             */
            getShowIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.FeedInput/methods/getValue">value</a>.</p><p>The text value of the feed input. As long as the user has not entered any text the post button is disabled</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelForPicture" href="#/api/sap.m.FeedInput/methods/getAriaLabelForPicture">ariaLabelForPicture</a>.</p><p>Text for Picture which will be read by screenreader. If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sAriaLabelForPicture <p>New value for property <code>ariaLabelForPicture</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAriaLabelForPicture(sAriaLabelForPicture: string): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtonTooltip" href="#/api/sap.m.FeedInput/methods/getButtonTooltip">buttonTooltip</a>.</p><p>Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element) or an instance of sap.ui.core.TooltipBase. If a new tooltip is set, any previously set tooltip is deactivated. The default value is set language dependent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Submit</code>.</p>
             * @param {sap.ui.core.TooltipBase} sButtonTooltip <p>New value for property <code>buttonTooltip</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setButtonTooltip(sButtonTooltip: sap.ui.core.TooltipBase): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.FeedInput/methods/getEnabled">enabled</a>.</p><p>Set this flag to "false" to disable both text input and post button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.FeedInput/methods/getGrowing">growing</a>.</p><p>Indicates the ability of the control to automatically grow and shrink dynamically with its content.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGrowing <p>New value for property <code>growing</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowing(bGrowing: boolean): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingMaxLines" href="#/api/sap.m.FeedInput/methods/getGrowingMaxLines">growingMaxLines</a>.</p><p>Defines the maximum number of lines that the control can grow. Value is set to 0 by default, which means an unlimited numbers of rows. <b>Note:</b> Minimum value to set is equal to the <code>rows</code> property value, maximum value is 15.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iGrowingMaxLines <p>New value for property <code>growingMaxLines</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingMaxLines(iGrowingMaxLines: number): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedInput/methods/getIcon">icon</a>.</p><p>Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.FeedInput/methods/getIconDensityAware">iconDensityAware</a>.</p><p>Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities. If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.</p><p>If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.</p><p>Please be aware that this property is relevant only for images and not for icons.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.FeedInput/methods/getMaxLength">maxLength</a>.</p><p>The maximum length (the maximum number of characters) for the feed's input value. By default this is not limited.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iMaxLength <p>New value for property <code>maxLength</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLength(iMaxLength: number): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.FeedInput/methods/getPlaceholder">placeholder</a>.</p><p>The placeholder text shown in the input area as long as the user has not entered any text value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Post something here</code>.</p>
             * @param {string} sPlaceholder <p>New value for property <code>placeholder</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholder(sPlaceholder: string): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.FeedInput/methods/getRows">rows</a>.</p><p>Defines the number of visible text lines for the control. <b>Note:</b> Minimum value is 2, maximum value is 15.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>2</code>.</p>
             * @param {number} iRows <p>New value for property <code>rows</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRows(iRows: number): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowExceededText" href="#/api/sap.m.FeedInput/methods/getShowExceededText">showExceededText</a>.</p><p>Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.</p><p>If set to <code>false</code>, the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property. If set to <code>true</code>, the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below the input field displays their number.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowExceededText <p>New value for property <code>showExceededText</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowExceededText(bShowExceededText: boolean): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.FeedInput/methods/getShowIcon">showIcon</a>.</p><p>If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowIcon <p>New value for property <code>showIcon</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIcon(bShowIcon: boolean): sap.m.FeedInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.FeedInput/methods/getValue">value</a>.</p><p>The text value of the feed input. As long as the user has not entered any text the post button is disabled</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.FeedInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.FeedInput;
        }
        /**
         * <p>The control provides a set of properties for text, sender information, time stamp. Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters. Beginning with release 1.44, sap.m.FormattedText was introduced which allows html formatted text to be displayed</p>
         */
        export class FeedListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new FeedListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p>
             * @param {sap.m.FeedListItemAction} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAction(oAction: sap.m.FeedListItemAction): sap.m.FeedListItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.FeedListItem/events/iconPress">iconPress</a> event of this <code>sap.m.FeedListItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.</p><p>Event is fired when the icon is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachIconPress(oData: any, fnFunction: Function, oListener?: any): sap.m.FeedListItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="senderPress" href="#/api/sap.m.FeedListItem/events/senderPress">senderPress</a> event of this <code>sap.m.FeedListItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.</p><p>Event is fired when name of the sender is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSenderPress(oData: any, fnFunction: Function, oListener?: any): sap.m.FeedListItem;
            /**
             * <p>Destroys all the actions in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyActions(): sap.m.FeedListItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.FeedListItem/events/iconPress">iconPress</a> event of this <code>sap.m.FeedListItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachIconPress(fnFunction: Function, oListener?: any): sap.m.FeedListItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="senderPress" href="#/api/sap.m.FeedListItem/events/senderPress">senderPress</a> event of this <code>sap.m.FeedListItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSenderPress(fnFunction: Function, oListener?: any): sap.m.FeedListItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.FeedListItem/events/iconPress">iconPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireIconPress(mParameters?: any): sap.m.FeedListItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="senderPress" href="#/api/sap.m.FeedListItem/events/senderPress">senderPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSenderPress(mParameters?: any): sap.m.FeedListItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p><p>Contains <a target="_self" class="jsdoclink" href="#/api/sap.m.FeedListItemAction">elements</a> that are displayed in the action sheet.</p>
             * @returns sap.m.FeedListItemAction[] 
             */
            getActions(): sap.m.FeedListItemAction[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.FeedListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Icon displayed when the list item is active.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertedLinksDefaultTarget" href="#/api/sap.m.FeedListItem/methods/getConvertedLinksDefaultTarget">convertedLinksDefaultTarget</a>.</p><p>Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.</p><p>Default value is <code>_blank</code>.</p>
             * @returns string <p>Value of property <code>convertedLinksDefaultTarget</code></p>
             */
            getConvertedLinksDefaultTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertLinksToAnchorTags" href="#/api/sap.m.FeedListItem/methods/getConvertLinksToAnchorTags">convertLinksToAnchorTags</a>.</p><p>Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.LinkConversion <p>Value of property <code>convertLinksToAnchorTags</code></p>
             */
            getConvertLinksToAnchorTags(): sap.m.LinkConversion;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedListItem/methods/getIcon">icon</a>.</p><p>Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed. Icon is only shown if showIcon = true.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconActive" href="#/api/sap.m.FeedListItem/methods/getIconActive">iconActive</a>.</p><p>If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconActive</code></p>
             */
            getIconActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.FeedListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.FeedListItem/methods/getInfo">info</a>.</p><p>The Info text.</p>
             * @returns string <p>Value of property <code>info</code></p>
             */
            getInfo(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLessLabel" href="#/api/sap.m.FeedListItem/methods/getLessLabel">lessLabel</a>.</p><p>Customizable text for the "LESS" link at the end of the feed list item.<br> Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number of characters.</p>
             * @returns string <p>Value of property <code>lessLabel</code></p>
             */
            getLessLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxCharacters" href="#/api/sap.m.FeedListItem/methods/getMaxCharacters">maxCharacters</a>.</p><p>The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.</p>
             * @returns number <p>Value of property <code>maxCharacters</code></p>
             */
            getMaxCharacters(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMoreLabel" href="#/api/sap.m.FeedListItem/methods/getMoreLabel">moreLabel</a>.</p><p>Customizable text for the "MORE" link at the end of the feed list item.<br> When the maximum number of characters defined by the <code>maxCharacters</code> property is exceeded and the text of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show the rest of the text.</p>
             * @returns string <p>Value of property <code>moreLabel</code></p>
             */
            getMoreLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSender" href="#/api/sap.m.FeedListItem/methods/getSender">sender</a>.</p><p>Sender of the chunk</p>
             * @returns string <p>Value of property <code>sender</code></p>
             */
            getSender(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSenderActive" href="#/api/sap.m.FeedListItem/methods/getSenderActive">senderActive</a>.</p><p>If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>senderActive</code></p>
             */
            getSenderActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.FeedListItem/methods/getShowIcon">showIcon</a>.</p><p>If set to "true" (default), icons will be displayed, if set to false icons are hidden</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showIcon</code></p>
             */
            getShowIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FeedListItem/methods/getText">text</a>.</p><p>The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTimestamp" href="#/api/sap.m.FeedListItem/methods/getTimestamp">timestamp</a>.</p><p>This chunks timestamp</p>
             * @returns string <p>Value of property <code>timestamp</code></p>
             */
            getTimestamp(): string;
            /**
             * <p>Checks for the provided <code>sap.m.FeedListItemAction</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.FeedListItemAction} oAction <p>The action whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAction(oAction: sap.m.FeedListItemAction): number;
            /**
             * <p>Inserts a action into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p>
             * @param {sap.m.FeedListItemAction} oAction <p>The action to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the action should be inserted at; for a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted at the last position</p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAction(oAction: sap.m.FeedListItemAction, iIndex: number): sap.m.FeedListItem;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.m.FeedListItemAction} vAction <p>The action to remove or its index or id</p>
             * @returns sap.m.FeedListItemAction <p>The removed action or <code>null</code></p>
             */
            removeAction(vAction: number | string | sap.m.FeedListItemAction): sap.m.FeedListItemAction;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.FeedListItem/methods/getActions">actions</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.FeedListItemAction[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllActions(): sap.m.FeedListItemAction[];
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.FeedListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Icon displayed when the list item is active.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertedLinksDefaultTarget" href="#/api/sap.m.FeedListItem/methods/getConvertedLinksDefaultTarget">convertedLinksDefaultTarget</a>.</p><p>Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>_blank</code>.</p>
             * @param {string} sConvertedLinksDefaultTarget <p>New value for property <code>convertedLinksDefaultTarget</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setConvertedLinksDefaultTarget(sConvertedLinksDefaultTarget: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertLinksToAnchorTags" href="#/api/sap.m.FeedListItem/methods/getConvertLinksToAnchorTags">convertLinksToAnchorTags</a>.</p><p>Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.LinkConversion} sConvertLinksToAnchorTags <p>New value for property <code>convertLinksToAnchorTags</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setConvertLinksToAnchorTags(sConvertLinksToAnchorTags: sap.m.LinkConversion): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedListItem/methods/getIcon">icon</a>.</p><p>Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed. Icon is only shown if showIcon = true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconActive" href="#/api/sap.m.FeedListItem/methods/getIconActive">iconActive</a>.</p><p>If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconActive <p>New value for property <code>iconActive</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconActive(bIconActive: boolean): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.FeedListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.FeedListItem/methods/getInfo">info</a>.</p><p>The Info text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sInfo <p>New value for property <code>info</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfo(sInfo: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLessLabel" href="#/api/sap.m.FeedListItem/methods/getLessLabel">lessLabel</a>.</p><p>Customizable text for the "LESS" link at the end of the feed list item.<br> Clicking the "LESS" link collapses the item, hiding the text that exceeds the allowed maximum number of characters.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLessLabel <p>New value for property <code>lessLabel</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLessLabel(sLessLabel: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxCharacters" href="#/api/sap.m.FeedListItem/methods/getMaxCharacters">maxCharacters</a>.</p><p>The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iMaxCharacters <p>New value for property <code>maxCharacters</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxCharacters(iMaxCharacters: number): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMoreLabel" href="#/api/sap.m.FeedListItem/methods/getMoreLabel">moreLabel</a>.</p><p>Customizable text for the "MORE" link at the end of the feed list item.<br> When the maximum number of characters defined by the <code>maxCharacters</code> property is exceeded and the text of the feed list item is collapsed, the "MORE" link can be used to expand the feed list item and show the rest of the text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMoreLabel <p>New value for property <code>moreLabel</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMoreLabel(sMoreLabel: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSender" href="#/api/sap.m.FeedListItem/methods/getSender">sender</a>.</p><p>Sender of the chunk</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSender <p>New value for property <code>sender</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSender(sSender: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSenderActive" href="#/api/sap.m.FeedListItem/methods/getSenderActive">senderActive</a>.</p><p>If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bSenderActive <p>New value for property <code>senderActive</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSenderActive(bSenderActive: boolean): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.FeedListItem/methods/getShowIcon">showIcon</a>.</p><p>If set to "true" (default), icons will be displayed, if set to false icons are hidden</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowIcon <p>New value for property <code>showIcon</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIcon(bShowIcon: boolean): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FeedListItem/methods/getText">text</a>.</p><p>The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTimestamp" href="#/api/sap.m.FeedListItem/methods/getTimestamp">timestamp</a>.</p><p>This chunks timestamp</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTimestamp <p>New value for property <code>timestamp</code></p>
             * @returns sap.m.FeedListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTimestamp(sTimestamp: string): sap.m.FeedListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.ListItemBase/methods/getType">type</a>.</p><p>Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inactive</code>.</p>
             * @param {sap.m.ListType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ListType): sap.m.ListItemBase;
            /**
             * <p>Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type = "sap.m.ListType.Active" for a FeedListItem</p>
             * @param {sap.m.ListType} type <p>new value for property type</p>
             * @returns sap.m.FeedListItem <p>this allows method chaining</p>
             */
            setType(type: sap.m.ListType): sap.m.FeedListItem;
        }
        /**
         * <p>An action item of FeedListItem</p>
         */
        export class FeedListItemAction extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new FeedListItemAction.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new element</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedListItemAction/events/press">press</a> event of this <code>sap.m.FeedListItemAction</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.FeedListItemAction</code> itself.</p><p>The <code>press</code> event is fired when the user triggers the corresponding action.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItemAction</code> itself</p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.FeedListItemAction;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedListItemAction/events/press">press</a> event of this <code>sap.m.FeedListItemAction</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.FeedListItemAction;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.FeedListItemAction/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.FeedListItemAction;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedListItemAction/methods/getIcon">icon</a>.</p><p>The icon of the action.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FeedListItemAction/methods/getKey">key</a>.</p><p>The key of the item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FeedListItemAction/methods/getText">text</a>.</p><p>The text of the item. It is used as a tooltip and for accessibility reasons.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.FeedListItemAction/methods/getIcon">icon</a>.</p><p>The icon of the action.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.FeedListItemAction;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.FeedListItemAction/methods/getKey">key</a>.</p><p>The key of the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.FeedListItemAction;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.FeedListItemAction/methods/getText">text</a>.</p><p>The text of the item. It is used as a tooltip and for accessibility reasons.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.FeedListItemAction <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.FeedListItemAction;
        }
        /**
         * <p><p>Available options for the layout of container lines along the cross axis of the flexbox layout.</p><p><b>Note:</b> This property has no effect in Internet Explorer 10.</p></p>
         */
        export enum FlexAlignContent {
            /**
             * <p>Line are packed toward the center of the line.</p>
             */
            Center = "Center",
            /**
             * <p>Lines are packed toward the end of the line.</p>
             */
            End = "End",
            /**
             * <p>Inherits the value from its parent.</p>
             */
            Inherit = "Inherit",
            /**
             * <p>Lines are evenly distributed in the line, with half-size spaces on either end. <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.</p>
             */
            SpaceAround = "SpaceAround",
            /**
             * <p>Lines are evenly distributed in the line.</p>
             */
            SpaceBetween = "SpaceBetween",
            /**
             * <p>Lines are packed toward the start of the line.</p>
             */
            Start = "Start",
            /**
             * <p>Lines stretch to take up the remaining space.</p>
             */
            Stretch = "Stretch",
        }
        /**
         * <p><p>Available options for the layout of all elements along the cross axis of the flexbox layout.</p></p>
         */
        export enum FlexAlignItems {
            /**
             * <p>If the flex item's inline axes are the same as the cross axis, this value is identical to "Start".</p><p>Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</p>
             */
            Baseline = "Baseline",
            /**
             * <p>The flex item's margin boxes are centered in the cross axis within the line.</p>
             */
            Center = "Center",
            /**
             * <p>The cross-start margin edges of the flex items are placed flush with the cross-end edge of the line.</p>
             */
            End = "End",
            /**
             * <p>Inherits the value from its parent.</p>
             */
            Inherit = "Inherit",
            /**
             * <p>The cross-start margin edges of the flex items are placed flush with the cross-start edge of the line.</p>
             */
            Start = "Start",
            /**
             * <p>Make the cross size of the item's margin boxes as close to the same size as the line as possible.</p>
             */
            Stretch = "Stretch",
        }
        /**
         * <p><p>Available options for the layout of individual elements along the cross axis of the flexbox layout overriding the default alignment.</p></p>
         */
        export enum FlexAlignSelf {
            /**
             * <p>Takes up the value of alignItems from the parent FlexBox</p>
             */
            Auto = "Auto",
            /**
             * <p>If the flex item's inline axis is the same as the cross axis, this value is identical to "Start".</p><p>Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.</p>
             */
            Baseline = "Baseline",
            /**
             * <p>The flex item's margin box is centered in the cross axis within the line.</p>
             */
            Center = "Center",
            /**
             * <p>The cross-start margin edges of the flex item is placed flush with the cross-end edge of the line.</p>
             */
            End = "End",
            /**
             * <p>Inherits the value from its parent.</p>
             */
            Inherit = "Inherit",
            /**
             * <p>The cross-start margin edges of the flex item is placed flush with the cross-start edge of the line.</p>
             */
            Start = "Start",
            /**
             * <p>Make the cross size of the item's margin box as close to the same size as the line as possible.</p>
             */
            Stretch = "Stretch",
        }
        /**
         * <p>The <code>sap.m.FlexBox</code> control builds the container for a flexible box layout.<br> <br> <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.<br><br><span>Documentation links:</span><ul><li><a target="_blank" href="https://www.w3.org/TR/css-flexbox-1/">https://www.w3.org/TR/css-flexbox-1/</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li><li><a target="_blank" href="https://www.w3schools.com/css/css3_flexbox.asp">https://www.w3schools.com/css/css3_flexbox.asp</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li></ul></p>
         */
        export class FlexBox extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>sap.m.FlexBox</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds item in the FlexBox.</p>
             * @param {any} oItem <p>Added item.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            addItem(oItem: any): sap.m.FlexBox;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.FlexBox/methods/getItems">items</a>.</p>
             * @returns sap.m.FlexBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.FlexBox;
            /**
             * <p>Gets the accessibility information.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The accessibility information.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlignContent" href="#/api/sap.m.FlexBox/methods/getAlignContent">alignContent</a>.</p><p>Determines the layout behavior of container lines when there's extra space along the cross-axis.</p><p>Default value is <code>Stretch</code>.</p>
             * @returns sap.m.FlexAlignContent <p>Value of property <code>alignContent</code></p>
             */
            getAlignContent(): sap.m.FlexAlignContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlignItems" href="#/api/sap.m.FlexBox/methods/getAlignItems">alignItems</a>.</p><p>Determines the layout behavior of items along the cross-axis.</p><p>Default value is <code>Stretch</code>.</p>
             * @returns sap.m.FlexAlignItems <p>Value of property <code>alignItems</code></p>
             */
            getAlignItems(): sap.m.FlexAlignItems;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.FlexBox/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Defines the background style of the <code>sap.m.FlexBox</code>.</p><p>Default value is <code>Transparent</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDirection" href="#/api/sap.m.FlexBox/methods/getDirection">direction</a>.</p><p>Determines the direction of the layout of child elements.</p><p>Default value is <code>Row</code>.</p>
             * @returns sap.m.FlexDirection <p>Value of property <code>direction</code></p>
             */
            getDirection(): sap.m.FlexDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayInline" href="#/api/sap.m.FlexBox/methods/getDisplayInline">displayInline</a>.</p><p>Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>displayInline</code></p>
             */
            getDisplayInline(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFitContainer" href="#/api/sap.m.FlexBox/methods/getFitContainer">fitContainer</a>.</p><p>Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>fitContainer</code></p>
             */
            getFitContainer(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.FlexBox/methods/getHeight">height</a>.</p><p>The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.FlexBox/methods/getItems">items</a>.</p><p>Flex items within the flexible box layout</p>
             * @returns sap.ui.core.Control[] 
             */
            getItems(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getJustifyContent" href="#/api/sap.m.FlexBox/methods/getJustifyContent">justifyContent</a>.</p><p>Determines the layout behavior along the main axis.</p><p>Default value is <code>Start</code>.</p>
             * @returns sap.m.FlexJustifyContent <p>Value of property <code>justifyContent</code></p>
             */
            getJustifyContent(): sap.m.FlexJustifyContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRenderType" href="#/api/sap.m.FlexBox/methods/getRenderType">renderType</a>.</p><p>Determines whether the layout is rendered as a series of divs or as an unordered list (ul).<br> <br> We recommend to use <code>Bare</code> in most cases to avoid layout issues due to browser inconsistencies.</p><p>Default value is <code>Div</code>.</p>
             * @returns sap.m.FlexRendertype <p>Value of property <code>renderType</code></p>
             */
            getRenderType(): sap.m.FlexRendertype;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.FlexBox/methods/getWidth">width</a>.</p><p>The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrap" href="#/api/sap.m.FlexBox/methods/getWrap">wrap</a>.</p><p>Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.</p><p>Default value is <code>NoWrap</code>.</p>
             * @returns sap.m.FlexWrap <p>Value of property <code>wrap</code></p>
             */
            getWrap(): sap.m.FlexWrap;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.FlexBox/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.ui.core.Control): number;
            /**
             * <p>Initializes the control.</p>
             */
            init(): void;
            /**
             * <p>Inserts single item.</p>
             * @param {any} oItem <p>Inserted item.</p>
             * @param {number} iIndex <p>Index of the inserted item.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            insertItem(oItem: any, iIndex: number): sap.m.FlexBox;
            /**
             * <p>Removes all items.</p>
             * @returns any <p>The removed items from flexbox.</p>
             */
            removeAllItems(): any;
            /**
             * <p>Removes single item.</p>
             * @param {any} vItem <p>Item to be removed.</p>
             * @returns any <p>The removed item.</p>
             */
            removeItem(vItem: any): any;
            /**
             * <p>Sets the alignment of content in the FlexBox.</p>
             * @param {string} sValue <p>Align content.</p>
             * @returns sap.m.FlexBox <p>this FlexBox reference for chaining.</p>
             */
            setAlignContent(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the alignment of items in the FlexBox.</p>
             * @param {string} sValue <p>Align items.</p>
             * @returns sap.m.FlexBox <p>this FlexBox reference for chaining.</p>
             */
            setAlignItems(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the background design.</p>
             * @param {string} sValue <p>Background design in string format.</p>
             * @returns sap.m.FlexBox <p>this FlexBox for reference chaining.</p>
             */
            setBackgroundDesign(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets direction for the FlexBox. It could be row, row-reverse, column or column-reverse.</p>
             * @param {string} sValue <p>FlexBox direction in string format.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            setDirection(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets display inline for nested or contained FlexBox.</p>
             * @param {boolean} bInline <p>Indication for display inline.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            setDisplayInline(bInline: boolean): sap.m.FlexBox;
            /**
             * <p>Sets <code>fitContainer</code> so you can have nested FlexBox containers in columns or rows.</p>
             * @param {string} sValue <p>Fit container in string format.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            setFitContainer(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the FlexBox height.</p>
             * @param {string} sValue <p>Height in string format.</p>
             * @returns sap.m.FlexBox <p>this FlexBox reference for chaining.</p>
             */
            setHeight(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the <code>justifyContent</code> - it can be flex-start, flex-end, center, space-between, space-around, space-evenly.</p>
             * @param {string} sValue <p>Justify content;</p>
             * @returns sap.m.FlexBox <p>this FlexBox reference for chaining.</p>
             */
            setJustifyContent(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the render type of the FlexBox.</p>
             * @param {string} sValue <p>Render type in string format.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            setRenderType(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the FlexBox width.</p>
             * @param {string} sValue <p>Width in string format.</p>
             * @returns sap.m.FlexBox <p>this FlexBox reference for chaining.</p>
             */
            setWidth(sValue: string): sap.m.FlexBox;
            /**
             * <p>Sets the wrapping.</p>
             * @param {string} sValue <p>Wrapping in the flexbox.</p>
             * @returns sap.m.FlexBox <p><code>this</code> FlexBox reference for chaining.</p>
             */
            setWrap(sValue: string): sap.m.FlexBox;
        }
        /**
         * <p><p>Available directions for flex layouts.</p></p>
         */
        export enum FlexDirection {
            /**
             * <p>Flex items are laid out along the direction of the block axis (usually top to bottom).</p>
             */
            Column = "Column",
            /**
             * <p>Flex items are laid out along the reverse direction of the block axis (usually bottom to top).</p>
             */
            ColumnReverse = "ColumnReverse",
            /**
             * <p>Inherits the value from its parent.</p>
             */
            Inherit = "Inherit",
            /**
             * <p>Flex items are laid out along the direction of the inline axis (text direction).</p>
             */
            Row = "Row",
            /**
             * <p>Flex items are laid out along the reverse direction of the inline axis (against the text direction).</p>
             */
            RowReverse = "RowReverse",
        }
        /**
         * <p>Holds layout data for a FlexBox / HBox / VBox.</p>
         */
        export class FlexItemData extends sap.ui.core.LayoutData {
            /**
             * <p>Constructor for a new <code>sap.m.FlexItemData</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new element.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlignSelf" href="#/api/sap.m.FlexItemData/methods/getAlignSelf">alignSelf</a>.</p><p>Determines cross-axis alignment of individual element (not currently supported in Internet Explorer).</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.m.FlexAlignSelf <p>Value of property <code>alignSelf</code></p>
             */
            getAlignSelf(): sap.m.FlexAlignSelf;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.FlexItemData/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Defines the background style of the flex item.</p><p>Default value is <code>Transparent</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBaseSize" href="#/api/sap.m.FlexItemData/methods/getBaseSize">baseSize</a>.</p><p>The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>baseSize</code></p>
             */
            getBaseSize(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowFactor" href="#/api/sap.m.FlexItemData/methods/getGrowFactor">growFactor</a>.</p><p>Determines the flexibility of the flex item when allocatable space is remaining.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>growFactor</code></p>
             */
            getGrowFactor(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxHeight" href="#/api/sap.m.FlexItemData/methods/getMaxHeight">maxHeight</a>.</p><p>The maximum height of the flex item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxHeight</code></p>
             */
            getMaxHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.FlexItemData/methods/getMaxWidth">maxWidth</a>.</p><p>The maximum height of the flex item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinHeight" href="#/api/sap.m.FlexItemData/methods/getMinHeight">minHeight</a>.</p><p>The minimum height of the flex item.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>minHeight</code></p>
             */
            getMinHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinWidth" href="#/api/sap.m.FlexItemData/methods/getMinWidth">minWidth</a>.</p><p>The minimum height of the flex item.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>minWidth</code></p>
             */
            getMinWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOrder" href="#/api/sap.m.FlexItemData/methods/getOrder">order</a>.</p><p>Determines the display order of flex items independent of their source code order.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>order</code></p>
             */
            getOrder(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShrinkFactor" href="#/api/sap.m.FlexItemData/methods/getShrinkFactor">shrinkFactor</a>.</p><p>The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>shrinkFactor</code></p>
             */
            getShrinkFactor(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStyleClass" href="#/api/sap.m.FlexItemData/methods/getStyleClass">styleClass</a>.</p><p>The style class will be applied to the flex item and can be used for CSS selectors.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>styleClass</code></p>
             */
            getStyleClass(): string;
            /**
             * <p>Sets the <code>alignSelf</code> property.</p>
             * @param {string} sValue <p>Align option.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setAlignSelf(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets background design for flex items.</p>
             * @param {string} sValue <p>Background design in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setBackgroundDesign(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets the base size for flex items.</p>
             * @param {string} sValue <p>Base size in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setBaseSize(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets the <code>growFactor</code> property.</p>
             * @param {string} sValue <p>Grow factor in string format.</p>
             * @returns sap.m.FlexItemData <p>this FlexItemData reference for chaining.</p>
             */
            setGrowFactor(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets maximum height.</p>
             * @param {string} sValue <p>Maximum height in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setMaxHeight(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets maximum width.</p>
             * @param {string} sValue <p>Maximum width in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setMaxWidth(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets minimum height.</p>
             * @param {string} sValue <p>Minimum height in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setMinHeight(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets minimum width.</p>
             * @param {string} sValue <p>Minimum width in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setMinWidth(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets the order.</p>
             * @param {string} sValue <p>Order in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setOrder(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets the <code>shrinkFactor</code> property.<br><br>References: <ul><li>https://www.w3.org/TR/css-flexbox-1/#propdef-flex-shrink</li></ul></p>
             * @param {string} sValue <p>Shrink factor in string format.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setShrinkFactor(sValue: string): sap.m.FlexItemData;
            /**
             * <p>Sets style class.</p>
             * @param {string} sValue <p>Style class.</p>
             * @returns sap.m.FlexItemData <p><code>this</code> FlexItemData reference for chaining.</p>
             */
            setStyleClass(sValue: string): sap.m.FlexItemData;
        }
        /**
         * <p><p>Available options for the layout of elements along the main axis of the flexbox layout.</p></p>
         */
        export enum FlexJustifyContent {
            /**
             * <p>Flex items are packed toward the center of the line.</p>
             */
            Center = "Center",
            /**
             * <p>Flex items are packed toward the end of the line.</p>
             */
            End = "End",
            /**
             * <p>Inherits the value from its parent.</p>
             */
            Inherit = "Inherit",
            /**
             * <p>Flex items are evenly distributed in the line, with half-size spaces on either end. <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.</p>
             */
            SpaceAround = "SpaceAround",
            /**
             * <p>Flex items are evenly distributed in the line.</p>
             */
            SpaceBetween = "SpaceBetween",
            /**
             * <p>Flex items are packed toward the start of the line.</p>
             */
            Start = "Start",
        }
        /**
         * <p><p>Determines the type of HTML elements used for rendering controls.</p></p>
         */
        export enum FlexRendertype {
            /**
             * <p>The UI5 controls are not wrapped in an additional HTML element, the surrounding Flex Box is a DIV element.</p>
             */
            Bare = "Bare",
            /**
             * <p>The UI5 controls are wrapped in DIV elements.</p>
             */
            Div = "Div",
            /**
             * <p>The UI5 controls are wrapped in LI elements, the surrounding Flex Box is an unordered list (UL).</p>
             */
            List = "List",
        }
        /**
         * <p><p>Available options for the wrapping behavior of a flex container.</p></p>
         */
        export enum FlexWrap {
            /**
             * <p>The flex container is single-line.</p>
             */
            NoWrap = "NoWrap",
            /**
             * <p>The flex container is multi-line.</p>
             */
            Wrap = "Wrap",
            /**
             * <p>The flex container is multi-line with the cross-axis start and end being swapped.</p>
             */
            WrapReverse = "WrapReverse",
        }
        /**
         * <p>The FormattedText control allows the usage of a limited set of tags for inline display of formatted text in HTML format.</p>
         */
        export class FormattedText extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new FormattedText.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertedLinksDefaultTarget" href="#/api/sap.m.FormattedText/methods/getConvertedLinksDefaultTarget">convertedLinksDefaultTarget</a>.</p><p>Determines the <code>target</code> attribute of the generated HTML anchor tags.</p><p><b>Note:</b> Applicable only if <code>ConvertLinksToAnchorTags</code> property is used with a value other than <code>sap.m.LinkConversion.None</code>. Options are the standard values for the <code>target</code> attribute of the HTML anchor tag: <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>.</p><p>Default value is <code>_blank</code>.</p>
             * @returns string <p>Value of property <code>convertedLinksDefaultTarget</code></p>
             */
            getConvertedLinksDefaultTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertLinksToAnchorTags" href="#/api/sap.m.FormattedText/methods/getConvertLinksToAnchorTags">convertLinksToAnchorTags</a>.</p><p>Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.LinkConversion <p>Value of property <code>convertLinksToAnchorTags</code></p>
             */
            getConvertLinksToAnchorTags(): sap.m.LinkConversion;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.FormattedText/methods/getHeight">height</a>.</p><p>Optional height of the control in CSS units.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHtmlText" href="#/api/sap.m.FormattedText/methods/getHtmlText">htmlText</a>.</p><p>Text in HTML format. The following tags are supported: <ul> <li><code>a</code></li> <li><code>abbr</code></li> <li><code>blockquote</code></li> <li><code>br</code></li> <li><code>cite</code></li> <li><code>code</code></li> <li><code>em</code></li> <li><code>h1</code></li> <li><code>h2</code></li> <li><code>h3</code></li> <li><code>h4</code></li> <li><code>h5</code></li> <li><code>h6</code></li> <li><code>p</code></li> <li><code>pre</code></li> <li><code>strong</code></li> <li><code>span</code></li> <li><code>u</code></li> <li><code>dl</code></li> <li><code>dt</code></li> <li><code>dl</code></li> <li><code>ul</code></li> <li><code>ol</code></li> <li><code>li</code></li> </ul> <p><code>class, style,</code> and <code>target</code> attributes are allowed. If <code>target</code> is not set, links open in a new window by default. <p>Only safe <code>href</code> attributes can be used. See <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Fsecurity%2FURLWhitelist">URLWhitelist</a>.</p><p><b>Note:</b> Keep in mind that not supported HTML tags and the content nested inside them are both not rendered by the control.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>htmlText</code></p>
             */
            getHtmlText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.FormattedText/methods/getWidth">width</a>.</p><p>Optional width of the control in CSS units.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertedLinksDefaultTarget" href="#/api/sap.m.FormattedText/methods/getConvertedLinksDefaultTarget">convertedLinksDefaultTarget</a>.</p><p>Determines the <code>target</code> attribute of the generated HTML anchor tags.</p><p><b>Note:</b> Applicable only if <code>ConvertLinksToAnchorTags</code> property is used with a value other than <code>sap.m.LinkConversion.None</code>. Options are the standard values for the <code>target</code> attribute of the HTML anchor tag: <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>_blank</code>.</p>
             * @param {string} sConvertedLinksDefaultTarget <p>New value for property <code>convertedLinksDefaultTarget</code></p>
             * @returns sap.m.FormattedText <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setConvertedLinksDefaultTarget(sConvertedLinksDefaultTarget: string): sap.m.FormattedText;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConvertLinksToAnchorTags" href="#/api/sap.m.FormattedText/methods/getConvertLinksToAnchorTags">convertLinksToAnchorTags</a>.</p><p>Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.LinkConversion} sConvertLinksToAnchorTags <p>New value for property <code>convertLinksToAnchorTags</code></p>
             * @returns sap.m.FormattedText <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setConvertLinksToAnchorTags(sConvertLinksToAnchorTags: sap.m.LinkConversion): sap.m.FormattedText;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.FormattedText/methods/getHeight">height</a>.</p><p>Optional height of the control in CSS units.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.FormattedText <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.FormattedText;
            /**
             * <p>Defines the HTML text to be displayed.</p>
             * @param {string} sText <p>HTML text as a string</p>
             * @returns sap.m.FormattedText <p>this for chaining</p>
             */
            setHtmlText(sText: string): sap.m.FormattedText;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.FormattedText/methods/getWidth">width</a>.</p><p>Optional width of the control in CSS units.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.FormattedText <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.FormattedText;
        }
        /**
         * <p><p>Enum for possible frame size types for sap.m.TileContent and sap.m.GenericTile control.</p></p>
         */
        export enum FrameType {
            /**
             * <p>The Auto frame type that adjusts the size of the control to the content. Support for this type in sap.m.GenericTile is deprecated since 1.48.0.</p>
             */
            Auto = "Auto",
            /**
             * <p>The 1x1 frame type.</p>
             */
            OneByOne = "OneByOne",
            /**
             * <p>The 2x1 frame type.</p>
             */
            TwoByOne = "TwoByOne",
            /**
             * <p>The 2/3 frame type.<span class="sapUiDeprecated"><br>Deprecated as of version 1.48.0</span></p>
             */
            TwoThirds = "TwoThirds",
        }
        /**
         * <p>The <code>sap.m.GenericTag</code> control displays app-specific, essential information. </p><h3>Structure</h3><p> The control consists of four different parts: <ul> <li>Status indicator with semantic colors (required)</li> <li>Icon that is displayed in the same color as the status indicator (optional)</li> <li>Text that is truncated automatically (required)</li> <li>Content area that can display either a control of type <a target="_self" class="jsdoclink" href="#/api/sap.m.ObjectNumber">sap.m.ObjectNumber</a> or a warning icon (optional)</li> </ul></p>
         */
        export class GenericTag extends sap.ui.core.Control implements sap.m.IOverflowToolbarContent, sap.m.IOverflowToolbarFlexibleContent {
            /**
             * <p>Constructor for a new <code>sap.m.GenericTag</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTag/events/press">press</a> event of this <code>sap.m.GenericTag</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.GenericTag</code> itself.</p><p>Fired when the user clicks/taps on the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.GenericTag</code> itself</p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.GenericTag;
            /**
             * <p>Destroys the value in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.GenericTag/methods/getValue">value</a>.</p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyValue(): sap.m.GenericTag;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTag/events/press">press</a> event of this <code>sap.m.GenericTag</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.GenericTag;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTag/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.GenericTag;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.GenericTag/methods/getDesign">design</a>.</p><p>Determines the visual mode of the control.</p><p>Default value is <code>Full</code>.</p>
             * @returns sap.m.GenericTagDesign <p>Value of property <code>design</code></p>
             */
            getDesign(): sap.m.GenericTagDesign;
            /**
             * <p>Sets the behavior of the <code>GenericTag</code> inside an <code>OverflowToolbar</code> configuration.</p>
             * @returns any <p>Configuration information for the <code>sap.m.IOverflowToolbarContent</code> interface.</p>
             */
            getOverflowToolbarConfig(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatus" href="#/api/sap.m.GenericTag/methods/getStatus">status</a>.</p><p>Determines the control status that is represented in different colors, including the the color bar and the color and type of the displayed icon.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>status</code></p>
             */
            getStatus(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.GenericTag/methods/getText">text</a>.</p><p>Defines the text rendered by the control. It's a value-descriptive text rendered on one line.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.GenericTag/methods/getValue">value</a>.</p><p>Numeric value rendered by the control.</p>
             * @returns sap.m.ObjectNumber 
             */
            getValue(): sap.m.ObjectNumber;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.GenericTag/methods/getValueState">valueState</a>.</p><p>Determines the state of the control.</p><p><b>Note:</b> When the error state is set, a warning type of icon is displayed that overrides the control set through the <code>value</code> aggregation.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.GenericTagValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.m.GenericTagValueState;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.GenericTag/methods/getDesign">design</a>.</p><p>Determines the visual mode of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Full</code>.</p>
             * @param {sap.m.GenericTagDesign} sDesign <p>New value for property <code>design</code></p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDesign(sDesign: sap.m.GenericTagDesign): sap.m.GenericTag;
            /**
             * <p>Sets the <code>status</code> property.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sStatus <p>New value for property <code>status</code>.</p>
             * @returns sap.m.GenericTag <p><code>this</code> to allow method chaining.</p>
             */
            setStatus(sStatus: sap.ui.core.ValueState): sap.m.GenericTag;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.GenericTag/methods/getText">text</a>.</p><p>Defines the text rendered by the control. It's a value-descriptive text rendered on one line.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.GenericTag;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.GenericTag/methods/getValue">value</a>.</p>
             * @param {sap.m.ObjectNumber} oValue <p>The value to set</p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(oValue: sap.m.ObjectNumber): sap.m.GenericTag;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.GenericTag/methods/getValueState">valueState</a>.</p><p>Determines the state of the control.</p><p><b>Note:</b> When the error state is set, a warning type of icon is displayed that overrides the control set through the <code>value</code> aggregation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.GenericTagValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.GenericTag <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.m.GenericTagValueState): sap.m.GenericTag;
        }
        /**
         * <p><p>Design modes for the <code>GenericTag</code> control.</p></p>
         */
        export enum GenericTagDesign {
            /**
             * <p>Everything from the control is rendered.</p>
             */
            Full = "Full",
            /**
             * <p>Everything from the control is rendered except the status icon.</p>
             */
            StatusIconHidden = "StatusIconHidden",
        }
        /**
         * <p><p>Value states for the <code>GenericTag</code> control.</p></p>
         */
        export enum GenericTagValueState {
            /**
             * <p>Warning icon is rendered that overrides the control set in the <code>value</code> aggregation of the <code>GenericTag</code> control.</p>
             */
            Error = "Error",
            /**
             * <p>The value is rendered in its normal state.</p>
             */
            None = "None",
        }
        /**
         * <p>Displays header, subheader, and a customizable main area in a tile format. Since 1.44, also an in-line format which contains only header and subheader is supported.</p>
         */
        export class GenericTile extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.GenericTile control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some tileContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p>
             * @param {sap.m.TileContent} oTileContent <p>The tileContent to add; if empty, nothing is inserted</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addTileContent(oTileContent: sap.m.TileContent): sap.m.GenericTile;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTile/events/press">press</a> event of this <code>sap.m.GenericTile</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.GenericTile</code> itself.</p><p>The event is triggered when the user presses the tile.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.GenericTile</code> itself</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.GenericTile;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindTileContent(oBindingInfo: any): sap.m.GenericTile;
            /**
             * <p>Destroys all the tileContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyTileContent(): sap.m.GenericTile;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTile/events/press">press</a> event of this <code>sap.m.GenericTile</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.GenericTile;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.GenericTile/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.GenericTile;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabel" href="#/api/sap.m.GenericTile/methods/getAriaLabel">ariaLabel</a>.</p><p>Additional description for aria-label. The aria-label is rendered before the standard aria-label.</p>
             * @returns string <p>Value of property <code>ariaLabel</code></p>
             */
            getAriaLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.GenericTile/methods/getBackgroundImage">backgroundImage</a>.</p><p>The URI of the background image.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>backgroundImage</code></p>
             */
            getBackgroundImage(): sap.ui.core.URI;
            /**
             * <p>Provides an interface to the tile's layout information consistent in all modes and content densities.</p>
             * @returns object[] <p>An array containing all of the tile's bounding rectangles</p>
             */
            protected getBoundingRects(): object[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFailedText" href="#/api/sap.m.GenericTile/methods/getFailedText">failedText</a>.</p><p>The message that appears when the control is in the Failed state.</p>
             * @returns string <p>Value of property <code>failedText</code></p>
             */
            getFailedText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFrameType" href="#/api/sap.m.GenericTile/methods/getFrameType">frameType</a>.</p><p>The frame type: OneByOne or TwoByOne. Set to OneByOne as default if no property is defined or set to Auto by the app.</p><p>Default value is <code>OneByOne</code>.</p>
             * @returns sap.m.FrameType <p>Value of property <code>frameType</code></p>
             */
            getFrameType(): sap.m.FrameType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.GenericTile/methods/getHeader">header</a>.</p><p>The header of the tile.</p>
             * @returns string <p>Value of property <code>header</code></p>
             */
            getHeader(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderImage" href="#/api/sap.m.GenericTile/methods/getHeaderImage">headerImage</a>.</p><p>The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>headerImage</code></p>
             */
            getHeaderImage(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageDescription" href="#/api/sap.m.GenericTile/methods/getImageDescription">imageDescription</a>.</p><p>Description of a header image that is used in the tooltip.</p>
             * @returns string <p>Value of property <code>imageDescription</code></p>
             */
            getImageDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.GenericTile/methods/getMode">mode</a>.</p><p>The mode of the GenericTile.</p><p>Default value is <code>ContentMode</code>.</p>
             * @returns sap.m.GenericTileMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.GenericTileMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScope" href="#/api/sap.m.GenericTile/methods/getScope">scope</a>.</p><p>Changes the visualization in order to enable additional actions with the Generic Tile.</p><p>Default value is <code>Display</code>.</p>
             * @returns sap.m.GenericTileScope <p>Value of property <code>scope</code></p>
             */
            getScope(): sap.m.GenericTileScope;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSizeBehavior" href="#/api/sap.m.GenericTile/methods/getSizeBehavior">sizeBehavior</a>.</p><p>If set to <code>TileSizeBehavior.Small</code>, the tile size is the same as it would be on a small-screened phone (374px wide and lower), regardless of the screen size of the actual device being used. If set to <code>TileSizeBehavior.Responsive</code>, the tile size adapts to the size of the screen.</p><p>Default value is <code>Responsive</code>.</p>
             * @returns sap.m.TileSizeBehavior <p>Value of property <code>sizeBehavior</code></p>
             */
            getSizeBehavior(): sap.m.TileSizeBehavior;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.GenericTile/methods/getState">state</a>.</p><p>The load status.</p><p>Default value is <code>Loaded</code>.</p>
             * @returns sap.m.LoadState <p>Value of property <code>state</code></p>
             */
            getState(): sap.m.LoadState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.GenericTile/methods/getSubheader">subheader</a>.</p><p>The subheader of the tile.</p>
             * @returns string <p>Value of property <code>subheader</code></p>
             */
            getSubheader(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p><p>The content of the tile.</p>
             * @returns sap.m.TileContent[] 
             */
            getTileContent(): sap.m.TileContent[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.GenericTile/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p>Default value is <code>Normal</code>.</p>
             * @returns sap.m.WrappingType <p>Value of property <code>wrappingType</code></p>
             */
            getWrappingType(): sap.m.WrappingType;
            /**
             * <p>Checks for the provided <code>sap.m.TileContent</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.TileContent} oTileContent <p>The tileContent whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfTileContent(oTileContent: sap.m.TileContent): number;
            /**
             * <p>Inserts a tileContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p>
             * @param {sap.m.TileContent} oTileContent <p>The tileContent to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the tileContent should be inserted at; for a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value greater than the current size of the aggregation, the tileContent is inserted at the last position</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertTileContent(oTileContent: sap.m.TileContent, iIndex: number): sap.m.GenericTile;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.TileContent[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTileContent(): sap.m.TileContent[];
            /**
             * <p>Removes a tileContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a>.</p>
             * @param {number | string | sap.m.TileContent} vTileContent <p>The tileContent to remove or its index or id</p>
             * @returns sap.m.TileContent <p>The removed tileContent or <code>null</code></p>
             */
            removeTileContent(vTileContent: number | string | sap.m.TileContent): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabel" href="#/api/sap.m.GenericTile/methods/getAriaLabel">ariaLabel</a>.</p><p>Additional description for aria-label. The aria-label is rendered before the standard aria-label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sAriaLabel <p>New value for property <code>ariaLabel</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAriaLabel(sAriaLabel: string): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.GenericTile/methods/getBackgroundImage">backgroundImage</a>.</p><p>The URI of the background image.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sBackgroundImage <p>New value for property <code>backgroundImage</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundImage(sBackgroundImage: sap.ui.core.URI): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFailedText" href="#/api/sap.m.GenericTile/methods/getFailedText">failedText</a>.</p><p>The message that appears when the control is in the Failed state.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sFailedText <p>New value for property <code>failedText</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFailedText(sFailedText: string): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFrameType" href="#/api/sap.m.GenericTile/methods/getFrameType">frameType</a>.</p><p>The frame type: OneByOne or TwoByOne. Set to OneByOne as default if no property is defined or set to Auto by the app.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>OneByOne</code>.</p>
             * @param {sap.m.FrameType} sFrameType <p>New value for property <code>frameType</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFrameType(sFrameType: sap.m.FrameType): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.GenericTile/methods/getHeader">header</a>.</p><p>The header of the tile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sHeader <p>New value for property <code>header</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeader(sHeader: string): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderImage" href="#/api/sap.m.GenericTile/methods/getHeaderImage">headerImage</a>.</p><p>The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sHeaderImage <p>New value for property <code>headerImage</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderImage(sHeaderImage: sap.ui.core.URI): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageDescription" href="#/api/sap.m.GenericTile/methods/getImageDescription">imageDescription</a>.</p><p>Description of a header image that is used in the tooltip.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sImageDescription <p>New value for property <code>imageDescription</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setImageDescription(sImageDescription: string): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.GenericTile/methods/getMode">mode</a>.</p><p>The mode of the GenericTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>ContentMode</code>.</p>
             * @param {sap.m.GenericTileMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.GenericTileMode): sap.m.GenericTile;
            /**
             * <p>Provides an interface to switch on or off the tile's press event. Used in SlideTile for Actions scope.</p>
             * @param {boolean} value <p>If set to true, the press event of the tile is active.</p>
             */
            protected setPressEnabled(value: boolean): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScope" href="#/api/sap.m.GenericTile/methods/getScope">scope</a>.</p><p>Changes the visualization in order to enable additional actions with the Generic Tile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Display</code>.</p>
             * @param {sap.m.GenericTileScope} sScope <p>New value for property <code>scope</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScope(sScope: sap.m.GenericTileScope): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSizeBehavior" href="#/api/sap.m.GenericTile/methods/getSizeBehavior">sizeBehavior</a>.</p><p>If set to <code>TileSizeBehavior.Small</code>, the tile size is the same as it would be on a small-screened phone (374px wide and lower), regardless of the screen size of the actual device being used. If set to <code>TileSizeBehavior.Responsive</code>, the tile size adapts to the size of the screen.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Responsive</code>.</p>
             * @param {sap.m.TileSizeBehavior} sSizeBehavior <p>New value for property <code>sizeBehavior</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSizeBehavior(sSizeBehavior: sap.m.TileSizeBehavior): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.GenericTile/methods/getState">state</a>.</p><p>The load status.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Loaded</code>.</p>
             * @param {sap.m.LoadState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.m.LoadState): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.GenericTile/methods/getSubheader">subheader</a>.</p><p>The subheader of the tile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSubheader <p>New value for property <code>subheader</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubheader(sSubheader: string): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.GenericTile/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Normal</code>.</p>
             * @param {sap.m.WrappingType} sWrappingType <p>New value for property <code>wrappingType</code></p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrappingType(sWrappingType: sap.m.WrappingType): sap.m.GenericTile;
            /**
             * <p>Shows the actions scope view of GenericTile without changing the scope. Used in SlideTile for Actions scope.</p>
             * @param {boolean} value <p>If set to true, actions view is showed.</p>
             */
            protected showActionsView(value: boolean): void;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTileContent" href="#/api/sap.m.GenericTile/methods/getTileContent">tileContent</a> from model data.</p>
             * @returns sap.m.GenericTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindTileContent(): sap.m.GenericTile;
        }
        /**
         * <p><p>Defines the mode of GenericTile.</p></p>
         */
        export enum GenericTileMode {
            /**
             * <p>Default mode (Two lines for the header and one line for the subtitle).</p>
             */
            ContentMode = "ContentMode",
            /**
             * <p>Header mode (Four lines for the header and one line for the subtitle).</p>
             */
            HeaderMode = "HeaderMode",
            /**
             * <p>Line mode (Implemented for both, cozy and compact densities).</p><p>Generic Tile is displayed as in-line element, header and subheader are displayed in one line. In case the texts need more than one line, the representation depends on the used density. <b>Cozy:</b> The text will be truncated and the full text is shown in a tooltip as soon as the tile is hovered (desktop only). <b>Compact:</b> Header and subheader are rendered continuously spanning multiple lines, no tooltip is provided).</p>
             */
            LineMode = "LineMode",
        }
        /**
         * <p><p>Defines the scopes of GenericTile enabling the developer to implement different "flavors" of tiles.</p></p>
         */
        export enum GenericTileScope {
            /**
             * <p>Action scope (Possible footer and Error State information is overlaid, "Remove" and "More" icons are added to the tile).</p>
             */
            Actions = "Actions",
            /**
             * <p>Default scope (The default scope of the tile, no action icons are rendered).</p>
             */
            Display = "Display",
        }
        /**
         * <p><code>sap.m.GroupHeaderListItem</code> is used to display the title of a group and act as separator between groups in <code>sap.m.List</code> and <code>sap.m.Table</code>. <b>Note:</b> The inherited properties <code>unread</code>, <code>selected</code>, <code>counter</code> and <code>press</code> event from <code>sap.m.ListItemBase</code> are not supported.</p>
         */
        export class GroupHeaderListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new GroupHeaderListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.GroupHeaderListItem/methods/getCount">count</a>.</p><p>Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group. <b>Note:</b> Will not be displayed if not set.</p>
             * @returns string <p>Value of property <code>count</code></p>
             */
            getCount(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.GroupHeaderListItem/methods/getTitle">title</a>.</p><p>Defines the title of the group header.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.GroupHeaderListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>titleTextDirection</code></p>
             */
            getTitleTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.GroupHeaderListItem/methods/getCount">count</a>.</p><p>Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group. <b>Note:</b> Will not be displayed if not set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sCount <p>New value for property <code>count</code></p>
             * @returns sap.m.GroupHeaderListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCount(sCount: string): sap.m.GroupHeaderListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.GroupHeaderListItem/methods/getTitle">title</a>.</p><p>Defines the title of the group header.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.GroupHeaderListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.GroupHeaderListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.GroupHeaderListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTitleTextDirection <p>New value for property <code>titleTextDirection</code></p>
             * @returns sap.m.GroupHeaderListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.GroupHeaderListItem;
        }
        /**
         */
        export class GrowingEnablement extends sap.ui.base.Object {
            /**
             * <p>Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing</p>
             * @param {sap.m.ListBase} oControl <p>the ListBase control of which this Growing is the delegate</p>
             */
            constructor(oControl: sap.m.ListBase);
        }
        /**
         * <p><code>sap.m.GrowingList</code> control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.</p>
         */
        export class GrowingList extends sap.m.List {
            /**
             * <p>Constructor for a new GrowingList.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollToLoad" href="#/api/sap.m.GrowingList/methods/getScrollToLoad">scrollToLoad</a>.</p><p>If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page. NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>scrollToLoad</code></p>
             */
            getScrollToLoad(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThreshold" href="#/api/sap.m.GrowingList/methods/getThreshold">threshold</a>.</p><p>Number of items requested from the server. To activate this you should set growing property to "true"</p><p>Default value is <code>20</code>.</p>
             * @returns number <p>Value of property <code>threshold</code></p>
             */
            getThreshold(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTriggerText" href="#/api/sap.m.GrowingList/methods/getTriggerText">triggerText</a>.</p><p>Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties. This property can be used only if growing property is set "true" and scrollToLoad property is set "false".</p>
             * @returns string <p>Value of property <code>triggerText</code></p>
             */
            getTriggerText(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollToLoad" href="#/api/sap.m.GrowingList/methods/getScrollToLoad">scrollToLoad</a>.</p><p>If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page. NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bScrollToLoad <p>New value for property <code>scrollToLoad</code></p>
             * @returns sap.m.GrowingList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScrollToLoad(bScrollToLoad: boolean): sap.m.GrowingList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThreshold" href="#/api/sap.m.GrowingList/methods/getThreshold">threshold</a>.</p><p>Number of items requested from the server. To activate this you should set growing property to "true"</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>20</code>.</p>
             * @param {number} iThreshold <p>New value for property <code>threshold</code></p>
             * @returns sap.m.GrowingList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setThreshold(iThreshold: number): sap.m.GrowingList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTriggerText" href="#/api/sap.m.GrowingList/methods/getTriggerText">triggerText</a>.</p><p>Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties. This property can be used only if growing property is set "true" and scrollToLoad property is set "false".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTriggerText <p>New value for property <code>triggerText</code></p>
             * @returns sap.m.GrowingList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTriggerText(sTriggerText: string): sap.m.GrowingList;
        }
        /**
         * <p>The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control, as it is just a specialized FlexBox control.<br> <br> <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.</p>
         */
        export class HBox extends sap.m.FlexBox {
            /**
             * <p>Constructor for a new HBox.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>The container that provides a horizontal layout. It provides a horizontal scrolling on the mobile devices. On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation. You can use left and right arrow keys to navigate through the inner content. The Home key puts focus on the first control and the End key puts focus on the last control. Use Enter or Space key to choose the control.</p>
         */
        export class HeaderContainer extends sap.ui.core.Control implements sap.m.ObjectHeaderContainer {
            /**
             * <p>Constructor for the new HeaderContainer control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.HeaderContainer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.HeaderContainer;
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.HeaderContainer;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.HeaderContainer;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.HeaderContainer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.HeaderContainer/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the content. The visualization of the different options depends on the used theme.</p><p>Default value is <code>Transparent</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p><p>Content to add to HeaderContainer.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.HeaderContainer/methods/getHeight">height</a>.</p><p>The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation and as '100%' in vertical orientation.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOrientation" href="#/api/sap.m.HeaderContainer/methods/getOrientation">orientation</a>.</p><p>The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In horizontal mode the content controls are displayed next to each other, in vertical mode the content controls are displayed on top of each other.</p><p>Default value is <code>Horizontal</code>.</p>
             * @returns sap.ui.core.Orientation <p>Value of property <code>orientation</code></p>
             */
            getOrientation(): sap.ui.core.Orientation;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollStep" href="#/api/sap.m.HeaderContainer/methods/getScrollStep">scrollStep</a>.</p><p>Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.</p><p>Default value is <code>300</code>.</p>
             * @returns number <p>Value of property <code>scrollStep</code></p>
             */
            getScrollStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollStepByItem" href="#/api/sap.m.HeaderContainer/methods/getScrollStepByItem">scrollStepByItem</a>.</p><p>Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop. Have priority over 'ScrollStep'. Have to be positive number.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>scrollStepByItem</code></p>
             */
            getScrollStepByItem(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollTime" href="#/api/sap.m.HeaderContainer/methods/getScrollTime">scrollTime</a>.</p><p>Scroll animation time in milliseconds.</p><p>Default value is <code>500</code>.</p>
             * @returns number <p>Value of property <code>scrollTime</code></p>
             */
            getScrollTime(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDividers" href="#/api/sap.m.HeaderContainer/methods/getShowDividers">showDividers</a>.</p><p>If set to true, it shows dividers between the different content controls.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showDividers</code></p>
             */
            getShowDividers(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverflowItem" href="#/api/sap.m.HeaderContainer/methods/getShowOverflowItem">showOverflowItem</a>.</p><p>Indicates whether the incomplete item on the edge of visible area is displayed or hidden.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showOverflowItem</code></p>
             */
            getShowOverflowItem(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.HeaderContainer/methods/getWidth">width</a>.</p><p>The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation and as 'auto' in vertical orientation.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.HeaderContainer;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.HeaderContainer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.HeaderContainer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.HeaderContainer/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.HeaderContainer/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the content. The visualization of the different options depends on the used theme.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Transparent</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.HeaderContainer/methods/getHeight">height</a>.</p><p>The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation and as '100%' in vertical orientation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOrientation" href="#/api/sap.m.HeaderContainer/methods/getOrientation">orientation</a>.</p><p>The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In horizontal mode the content controls are displayed next to each other, in vertical mode the content controls are displayed on top of each other.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Horizontal</code>.</p>
             * @param {sap.ui.core.Orientation} sOrientation <p>New value for property <code>orientation</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOrientation(sOrientation: sap.ui.core.Orientation): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollStep" href="#/api/sap.m.HeaderContainer/methods/getScrollStep">scrollStep</a>.</p><p>Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>300</code>.</p>
             * @param {number} iScrollStep <p>New value for property <code>scrollStep</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScrollStep(iScrollStep: number): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollStepByItem" href="#/api/sap.m.HeaderContainer/methods/getScrollStepByItem">scrollStepByItem</a>.</p><p>Number of items to scroll when the user chose Next or Previous buttons. Relevant only for desktop. Have priority over 'ScrollStep'. Have to be positive number.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iScrollStepByItem <p>New value for property <code>scrollStepByItem</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScrollStepByItem(iScrollStepByItem: number): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollTime" href="#/api/sap.m.HeaderContainer/methods/getScrollTime">scrollTime</a>.</p><p>Scroll animation time in milliseconds.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>500</code>.</p>
             * @param {number} iScrollTime <p>New value for property <code>scrollTime</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScrollTime(iScrollTime: number): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDividers" href="#/api/sap.m.HeaderContainer/methods/getShowDividers">showDividers</a>.</p><p>If set to true, it shows dividers between the different content controls.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowDividers <p>New value for property <code>showDividers</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowDividers(bShowDividers: boolean): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverflowItem" href="#/api/sap.m.HeaderContainer/methods/getShowOverflowItem">showOverflowItem</a>.</p><p>Indicates whether the incomplete item on the edge of visible area is displayed or hidden.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowOverflowItem <p>New value for property <code>showOverflowItem</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowOverflowItem(bShowOverflowItem: boolean): sap.m.HeaderContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.HeaderContainer/methods/getWidth">width</a>.</p><p>The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation and as 'auto' in vertical orientation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.HeaderContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.HeaderContainer;
        }
        /**
         * <p><p>Different levels for headers.</p></p>
         */
        export enum HeaderLevel {
            /**
             * <p>Header level 1</p>
             */
            H1 = "H1",
            /**
             * <p>Header level 2</p>
             */
            H2 = "H2",
            /**
             * <p>Header level 3</p>
             */
            H3 = "H3",
            /**
             * <p>Header level 4</p>
             */
            H4 = "H4",
            /**
             * <p>Header level 5</p>
             */
            H5 = "H5",
            /**
             * <p>Header level 6</p>
             */
            H6 = "H6",
        }
        /**
         * <p><p>Interface for controls which are suitable as a Header, Subheader or Footer of a Page. If the control does not want to get a context base style class, it has to implement the isContextSensitive method and return false</p></p>
         */
        export interface IBar {
        }
        /**
         * <p><p>Allowed tags for the implementation of the IBar interface.</p></p>
         */
        export enum IBarHTMLTag {
            /**
             * <p>Renders as a div element.</p>
             */
            Div = "Div",
            /**
             * <p>Renders as a footer element.</p>
             */
            Footer = "Footer",
            /**
             * <p>Renders as a header element.</p>
             */
            Header = "Header",
        }
        /**
         * <p>Helper Class for implementing the IBar interface. Should be created once per IBar instance.</p>
         */
        export class IBarInPageEnabler {
            /**
             */
            constructor();
        }
        /**
         * <p><p>Interface for controls which have the meaning of a breadcrumbs navigation.</p></p>
         */
        export interface IBreadcrumbs {
        }
        /**
         * <p><p>Represents an interface for controls, which are suitable as items for the sap.m.IconTabBar.</p></p>
         */
        export interface IconTab {
        }
        /**
         * <p>The IconTabBar represents a collection of tabs with associated content. </p><h3>Overview</h3><p> The IconTabBar can be used for navigation within an object, or as a filter. Different types of IconTabBar are used based on the contents. <ul> <li>Filter - There is only one main content for all tabs. The main content can be filtered, based on the selected tab.</li> <li>Normal tab bar - The contents of each tab are independent from each other.</li> <li>Combination of the above - There can be both filtered and independent contents.</li> </ul> </p><h3>Structure</h3><p> The IconTabBar can hold two types of entities <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabFilter">sap.m.IconTabFilter</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a></p><p>The IconTabBarFilter holds all information on an item - text, icon and count.</p><p>The IconTabBarSeparator holds an icon that can be used to show a process that runs from item to item. </p><h3>Usage</h3><h4>Text only</h4><p> Uses text labels as tabs with optional counter <ul> <li>Used when there are no suitable icons for all items.</li> <li>Used when longer labels are needed.</li> <li>If <code>headerMode</code> property is set to <code>Inline</code> the text and the count are displayed in one line.</li> <li><code>UpperCase</code> is disabled.</li> <li>Use title case.</li> </ul> </p><h4>Icon Tabs</h4><p> Round tabs with optional counter and label <ul> <li>Used when there are unique icons for all items.</li> <li>Only shorter labels are possible.</li> <li>Provide labels for all icons or for none. Do not mix these.</li> </ul> </p><h4>Tabs as filters</h4><p> Tabs with filtered content from the same set of items <ul> <li>Provide an <i>"All"</i> tab to show all items without filtering.</li> <li>Use counters to show the number of items in each filter.</li> </ul> </p><h4>Tabs as process steps</h4><p> Tabs show a single step in a process <ul> <li>Use an arrow (e.g. triple-chevron) as a separator to connect the steps.</li> <li>Use counters to show the number of items in each filter.</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>Text-only tabs are never truncated.</li> <li>Use the <code>expandable</code> property to specify whether users can collapse the tab container (default = true).</li> <li>On desktop, tabs can be dragged and dropped (property <code>enableTabReordering</code>).</li> <li>If you have a large number of tabs, you can scroll through them with the arrows. Additionally all tabs are available in an overflow button (property <code>showOverflowSelectList</code>).</li> </ul></p>
         */
        export class IconTabBar extends sap.ui.core.Control implements sap.m.ObjectHeaderContainer {
            /**
             * <p>Constructor for a new IconTabBar.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.IconTabBar;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p>
             * @param {sap.m.IconTab} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.IconTab): sap.m.IconTabBar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.IconTabBar/events/expand">expand</a> event of this <code>sap.m.IconTabBar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.</p><p>Indicates that the tab will expand or collapse.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachExpand(oData: any, fnFunction: Function, oListener?: any): sap.m.IconTabBar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabBar/events/select">select</a> event of this <code>sap.m.IconTabBar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.</p><p>Fires when an item is selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.IconTabBar;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.IconTabBar;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.IconTabBar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.IconTabBar/events/expand">expand</a> event of this <code>sap.m.IconTabBar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachExpand(fnFunction: Function, oListener?: any): sap.m.IconTabBar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabBar/events/select">select</a> event of this <code>sap.m.IconTabBar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.IconTabBar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.IconTabBar/events/expand">expand</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireExpand(mParameters?: any): sap.m.IconTabBar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabBar/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.IconTabBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getApplyContentPadding" href="#/api/sap.m.IconTabBar/methods/getApplyContentPadding">applyContentPadding</a>.</p><p>Determines whether the IconTabBar content fits to the full area. The paddings are removed if it's set to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>applyContentPadding</code></p>
             */
            getApplyContentPadding(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.IconTabBar/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the IconTabBar.</p><p>Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or "Transparent". Default is "Solid".</p><p>Default value is <code>Solid</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p><p>Represents the contents displayed below the IconTabBar. If there are multiple contents, they are rendered after each other. The developer has to manage to display the right one or use the content aggregation inside the IconTabFilter (which will be displayed instead if it is set).</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableTabReordering" href="#/api/sap.m.IconTabBar/methods/getEnableTabReordering">enableTabReordering</a>.</p><p>Specifies whether tab reordering is enabled. Relevant only for desktop devices. The <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a> cannot be dragged and dropped Items can be moved around <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableTabReordering</code></p>
             */
            getEnableTabReordering(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpandable" href="#/api/sap.m.IconTabBar/methods/getExpandable">expandable</a>.</p><p>Defines if the tabs are collapsible and expandable.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>expandable</code></p>
             */
            getExpandable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpanded" href="#/api/sap.m.IconTabBar/methods/getExpanded">expanded</a>.</p><p>Indicates if the actual tab content is expanded or not.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>expanded</code></p>
             */
            getExpanded(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderBackgroundDesign" href="#/api/sap.m.IconTabBar/methods/getHeaderBackgroundDesign">headerBackgroundDesign</a>.</p><p>Specifies the background color of the header.</p><p>Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or "Transparent". Default is "Solid".</p><p>Default value is <code>Solid</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>headerBackgroundDesign</code></p>
             */
            getHeaderBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderMode" href="#/api/sap.m.IconTabBar/methods/getHeaderMode">headerMode</a>.</p><p>Specifies the header mode. <b>Note:</b> The Inline mode works only if no icons are set.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.IconTabHeaderMode <p>Value of property <code>headerMode</code></p>
             */
            getHeaderMode(): sap.m.IconTabHeaderMode;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p><p>The items displayed in the IconTabBar.</p>
             * @returns sap.m.IconTab[] 
             */
            getItems(): sap.m.IconTab[];
            /**
             * <p>Reflector for the internal header's selectedKey property.</p>
             * @returns string <p>The current property value.</p>
             */
            getSelectedKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverflowSelectList" href="#/api/sap.m.IconTabBar/methods/getShowOverflowSelectList">showOverflowSelectList</a>.</p><p>Specifies if the overflow select list is displayed.</p><p>The overflow select list represents a list, where all tab filters are displayed, so the user can select specific tab filter easier.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showOverflowSelectList</code></p>
             */
            getShowOverflowSelectList(): boolean;
            /**
             * <p>Reflector for the internal header's showSelection property.</p>
             * @returns boolean <p>The current property value.</p>
             */
            getShowSelection(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStretchContentHeight" href="#/api/sap.m.IconTabBar/methods/getStretchContentHeight">stretchContentHeight</a>.</p><p>Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container. As a prerequisite, the height of the parent container must be defined as a fixed value.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>stretchContentHeight</code></p>
             */
            getStretchContentHeight(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTabDensityMode" href="#/api/sap.m.IconTabBar/methods/getTabDensityMode">tabDensityMode</a>.</p><p>Specifies the visual density mode of the tabs.</p><p>The values that can be applied are <code>Cozy</code>, <code>Compact</code> and <code>Inherit</code>. <code>Cozy</code> and <code>Compact</code> render the control in one of these modes independent of the global density settings. The <code>Inherit</code> value follows the global density settings which are applied. For compatibility reasons, the default value is <code>Cozy</code>.</p><p>Default value is <code>Cozy</code>.</p>
             * @returns sap.m.IconTabDensityMode <p>Value of property <code>tabDensityMode</code></p>
             */
            getTabDensityMode(): sap.m.IconTabDensityMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUpperCase" href="#/api/sap.m.IconTabBar/methods/getUpperCase">upperCase</a>.</p><p>Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>upperCase</code></p>
             */
            getUpperCase(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.m.IconTab</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.IconTab} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.IconTab): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.IconTabBar;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p>
             * @param {sap.m.IconTab} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.IconTab, iIndex: number): sap.m.IconTabBar;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.IconTab[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.IconTab[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabBar/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabBar/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.IconTab} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.IconTab <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.IconTab): sap.m.IconTab;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getApplyContentPadding" href="#/api/sap.m.IconTabBar/methods/getApplyContentPadding">applyContentPadding</a>.</p><p>Determines whether the IconTabBar content fits to the full area. The paddings are removed if it's set to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bApplyContentPadding <p>New value for property <code>applyContentPadding</code></p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setApplyContentPadding(bApplyContentPadding: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.IconTabBar/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the IconTabBar.</p><p>Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or "Transparent". Default is "Solid".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Solid</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.IconTabBar;
            /**
             * <p>Sets the enableTabReordering property.</p>
             * @param {boolean} value <p>New value for enableTabReordering.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setEnableTabReordering(value: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets the tabs as collapsible and expandable without re-rendering the control.</p>
             * @param {boolean} bExpandable <p>New parameter value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setExpandable(bExpandable: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets the tab content as expanded.</p>
             * @param {boolean} bExpanded <p>New parameter value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setExpanded(bExpanded: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets the header background design.</p>
             * @param {sap.m.BackgroundDesign} headerBackgroundDesign <p>New parameter value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setHeaderBackgroundDesign(headerBackgroundDesign: sap.m.BackgroundDesign): sap.m.IconTabBar;
            /**
             * <p>Sets the header mode.</p>
             * @param {sap.m.IconTabHeaderMode} mode <p>New parameter value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setHeaderMode(mode: sap.m.IconTabHeaderMode): sap.m.IconTabBar;
            /**
             * <p>Reflector for the internal header's selectedKey property.</p>
             * @param {string} sValue <p>The new value.</p>
             * @returns sap.m.IconTabBar <p>this Pointer for chaining.</p>
             */
            setSelectedKey(sValue: string): sap.m.IconTabBar;
            /**
             * <p>Sets the showOverflowSelectList property.</p>
             * @param {boolean} value <p>New value for showOverflowSelectList.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setShowOverflowSelectList(value: boolean): sap.m.IconTabBar;
            /**
             * <p>Reflector for the internal header's showSelection property.</p>
             * @param {boolean} bValue <p>the new value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setShowSelection(bValue: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStretchContentHeight" href="#/api/sap.m.IconTabBar/methods/getStretchContentHeight">stretchContentHeight</a>.</p><p>Determines whether the IconTabBar height is stretched to the maximum possible height of its parent container. As a prerequisite, the height of the parent container must be defined as a fixed value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bStretchContentHeight <p>New value for property <code>stretchContentHeight</code></p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStretchContentHeight(bStretchContentHeight: boolean): sap.m.IconTabBar;
            /**
             * <p>Sets the tab density mode.</p>
             * @param {sap.m.IconTabHeaderMode} mode <p>New parameter value.</p>
             * @returns sap.m.IconTabBar <p>this IconTabBar reference for chaining.</p>
             */
            setTabDensityMode(mode: sap.m.IconTabHeaderMode): sap.m.IconTabBar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUpperCase" href="#/api/sap.m.IconTabBar/methods/getUpperCase">upperCase</a>.</p><p>Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUpperCase <p>New value for property <code>upperCase</code></p>
             * @returns sap.m.IconTabBar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUpperCase(bUpperCase: boolean): sap.m.IconTabBar;
        }
        /**
         * <p><p>Specifies <code>IconTabBar</code> tab density mode.</p></p>
         */
        export enum IconTabDensityMode {
            /**
             * <p>Compact. In this mode the tabs will be set explicitly to compact mode independent of what mode is applied globally.</p>
             */
            Compact = "Compact",
            /**
             * <p>Cozy. In this mode the tabs will be set explicitly to compact mode independent of what mode is applied globally.</p>
             */
            Cozy = "Cozy",
            /**
             * <p>Inherit. In this mode the global configuration of the density mode will be applied.</p>
             */
            Inherit = "Inherit",
        }
        /**
         * <p>Represents a selectable item inside an IconTabBar.</p>
         */
        export class IconTabFilter extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new IconTabFilter.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.IconTabFilter;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.IconTabFilter;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p><p>The content displayed for this item (optional).</p><p>If this content is set, it is displayed instead of the general content inside the IconTabBar.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.IconTabFilter/methods/getCount">count</a>.</p><p>Represents the "count" text, which is displayed in the tab filter.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>count</code></p>
             */
            getCount(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.IconTabFilter/methods/getDesign">design</a>.</p><p>Specifies whether the icon and the texts are placed vertically or horizontally.</p><p>Default value is <code>Vertical</code>.</p>
             * @returns sap.m.IconTabFilterDesign <p>Value of property <code>design</code></p>
             */
            getDesign(): sap.m.IconTabFilterDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.IconTabFilter/methods/getIcon">icon</a>.</p><p>Specifies the icon to be displayed for the tab filter.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconColor" href="#/api/sap.m.IconTabFilter/methods/getIconColor">iconColor</a>.</p><p>Specifies the icon color.</p><p>If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor). Possible semantic colors are: Neutral, Positive, Critical, Negative. Instead of the semantic icon color the brand color can be used, this is named Default. Semantic colors and brand colors should not be mixed up inside one IconTabBar.</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.ui.core.IconColor <p>Value of property <code>iconColor</code></p>
             */
            getIconColor(): sap.ui.core.IconColor;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.IconTabFilter/methods/getIconDensityAware">iconDensityAware</a>.</p><p>If set to true, it sends one or more requests, trying to get the density perfect version of the image if this version of the image doesn't exist on the server. Default value is set to true.</p><p>If bandwidth is key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAll" href="#/api/sap.m.IconTabFilter/methods/getShowAll">showAll</a>.</p><p>Enables special visualization for disabled filter (show all items). <b>Note:</b> You can use this property when you use <code>IconTabBar</code> as a filter. In order for it to be displayed correctly, the other tabs in the filter should consist of an icon, text and an optional count. It can be set to true for the first tab filter. You can find more detailed information in the <a target="_blank" href="https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters">UX Guidelines</a>
            <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
            title="Information published on SAP site" class="sapUISDKExternalLink"/>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showAll</code></p>
             */
            getShowAll(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabFilter/methods/getVisible">visible</a>.</p><p>Specifies whether the tab filter is rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.IconTabFilter;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.IconTabFilter/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Renders this item in the IconTabHeader.</p>
             * @param {sap.ui.core.RenderManager} rm <p>the RenderManager that can be used for writing to the render output buffer</p>
             * @param {number} visibleIndex <p>the visible index within the parent control</p>
             * @param {number} visibleItemsCount <p>the visible items count</p>
             */
            protected render(rm: sap.ui.core.RenderManager, visibleIndex: number, visibleItemsCount: number): void;
            /**
             * <p>Renders this item in the IconTabSelectList.</p>
             * @param {sap.ui.core.RenderManager} rm <p>the RenderManager that can be used for writing to the render output buffer</p>
             * @param {sap.m.IconTabBarSelectList} selectList <p>the select list in which this filter is rendered</p>
             * @param {number} visibleIndex <p>the visible index within the parent control</p>
             * @param {number} visibleItemsCount <p>the visible items count</p>
             */
            protected renderInSelectList(rm: sap.ui.core.RenderManager, selectList: any, visibleIndex: number, visibleItemsCount: number): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.IconTabFilter/methods/getCount">count</a>.</p><p>Represents the "count" text, which is displayed in the tab filter.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sCount <p>New value for property <code>count</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCount(sCount: string): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.IconTabFilter/methods/getDesign">design</a>.</p><p>Specifies whether the icon and the texts are placed vertically or horizontally.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Vertical</code>.</p>
             * @param {sap.m.IconTabFilterDesign} sDesign <p>New value for property <code>design</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDesign(sDesign: sap.m.IconTabFilterDesign): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.IconTabFilter/methods/getIcon">icon</a>.</p><p>Specifies the icon to be displayed for the tab filter.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconColor" href="#/api/sap.m.IconTabFilter/methods/getIconColor">iconColor</a>.</p><p>Specifies the icon color.</p><p>If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor). Possible semantic colors are: Neutral, Positive, Critical, Negative. Instead of the semantic icon color the brand color can be used, this is named Default. Semantic colors and brand colors should not be mixed up inside one IconTabBar.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.ui.core.IconColor} sIconColor <p>New value for property <code>iconColor</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconColor(sIconColor: sap.ui.core.IconColor): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.IconTabFilter/methods/getIconDensityAware">iconDensityAware</a>.</p><p>If set to true, it sends one or more requests, trying to get the density perfect version of the image if this version of the image doesn't exist on the server. Default value is set to true.</p><p>If bandwidth is key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAll" href="#/api/sap.m.IconTabFilter/methods/getShowAll">showAll</a>.</p><p>Enables special visualization for disabled filter (show all items). <b>Note:</b> You can use this property when you use <code>IconTabBar</code> as a filter. In order for it to be displayed correctly, the other tabs in the filter should consist of an icon, text and an optional count. It can be set to true for the first tab filter. You can find more detailed information in the <a target="_blank" href="https://experience.sap.com/fiori-design-web/icontabbar/#tabs-as-filters">UX Guidelines</a>
            <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
            title="Information published on SAP site" class="sapUISDKExternalLink"/>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowAll <p>New value for property <code>showAll</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowAll(bShowAll: boolean): sap.m.IconTabFilter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabFilter/methods/getVisible">visible</a>.</p><p>Specifies whether the tab filter is rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.IconTabFilter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.IconTabFilter;
        }
        /**
         * <p><p>Available Filter Item Design.</p></p>
         */
        export enum IconTabFilterDesign {
            /**
             * <p>A horizontally layouted design providing more space for texts.</p>
             */
            Horizontal = "Horizontal",
            /**
             * <p>A vertically layouted design using minimum horizontal space.</p>
             */
            Vertical = "Vertical",
        }
        /**
         * <p>This control displays a number of IconTabFilters and IconTabSeparators. If the available horizontal space is exceeded, a horizontal scrolling appears.</p>
         */
        export class IconTabHeader extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new IconTabHeader.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p>
             * @param {sap.m.IconTab} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.IconTab): sap.m.IconTabHeader;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabHeader/events/select">select</a> event of this <code>sap.m.IconTabHeader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.IconTabHeader</code> itself.</p><p>Fires when an item is selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.IconTabHeader</code> itself</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.IconTabHeader;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.IconTabHeader;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabHeader/events/select">select</a> event of this <code>sap.m.IconTabHeader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.IconTabHeader;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.IconTabHeader/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.IconTabHeader;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.IconTabHeader/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the header.</p><p>Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or "Transparent". Default is "Solid".</p><p>Default value is <code>Solid</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableTabReordering" href="#/api/sap.m.IconTabHeader/methods/getEnableTabReordering">enableTabReordering</a>.</p><p>Specifies whether tab reordering is enabled. Relevant only for desktop devices. The <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a> cannot be dragged and dropped Items can be moved around <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableTabReordering</code></p>
             */
            getEnableTabReordering(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p><p>The items displayed in the IconTabHeader.</p>
             * @returns sap.m.IconTab[] 
             */
            getItems(): sap.m.IconTab[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.IconTabHeader/methods/getMode">mode</a>.</p><p>Specifies the header mode. <b>Note:</b> The Inline mode works only if no icons are set.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.IconTabHeaderMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.IconTabHeaderMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.IconTabHeader/methods/getSelectedKey">selectedKey</a>.</p><p>Key of the selected item.</p><p>If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the first item matching, the key is used.</p>
             * @returns string <p>Value of property <code>selectedKey</code></p>
             */
            getSelectedKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverflowSelectList" href="#/api/sap.m.IconTabHeader/methods/getShowOverflowSelectList">showOverflowSelectList</a>.</p><p>Specifies if the overflow select list is displayed.</p><p>The overflow select list represents a list, where all tab filters are displayed, so the user can select specific tab filter easier.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showOverflowSelectList</code></p>
             */
            getShowOverflowSelectList(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTabDensityMode" href="#/api/sap.m.IconTabHeader/methods/getTabDensityMode">tabDensityMode</a>.</p><p>Specifies the visual density mode of the tabs.</p><p>The values that can be applied are <code>Cozy</code>, <code>Compact</code> and <code>Inherit</code>. <code>Cozy</code> and <code>Compact</code> render the control in one of these modes independent of the global density settings. The <code>Inherit</code> value follows the global density settings which are applied. For compatibility reasons, the default value is <code>Cozy</code>.</p><p>Default value is <code>Cozy</code>.</p>
             * @returns sap.m.IconTabDensityMode <p>Value of property <code>tabDensityMode</code></p>
             */
            getTabDensityMode(): sap.m.IconTabDensityMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabHeader/methods/getVisible">visible</a>.</p><p>Specifies whether the control is rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.IconTab</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.IconTab} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.IconTab): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p>
             * @param {sap.m.IconTab} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.IconTab, iIndex: number): sap.m.IconTabHeader;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.IconTab[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.IconTab[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.IconTabHeader/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.IconTab} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.IconTab <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.IconTab): sap.m.IconTab;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.IconTabHeader/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Specifies the background color of the header.</p><p>Depending on the theme, you can change the state of the background color to "Solid", "Translucent", or "Transparent". Default is "Solid".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Solid</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.IconTabHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableTabReordering" href="#/api/sap.m.IconTabHeader/methods/getEnableTabReordering">enableTabReordering</a>.</p><p>Specifies whether tab reordering is enabled. Relevant only for desktop devices. The <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a> cannot be dragged and dropped Items can be moved around <a target="_self" class="jsdoclink" href="#/api/sap.m.IconTabSeparator">sap.m.IconTabSeparator</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableTabReordering <p>New value for property <code>enableTabReordering</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableTabReordering(bEnableTabReordering: boolean): sap.m.IconTabHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.IconTabHeader/methods/getMode">mode</a>.</p><p>Specifies the header mode. <b>Note:</b> The Inline mode works only if no icons are set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.m.IconTabHeaderMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.IconTabHeaderMode): sap.m.IconTabHeader;
            /**
             * <p>Sets the selected item based on key.</p>
             * @param {string} sKey <p>The key of the item to be selected</p>
             * @returns sap.m.IconTabHeader <p>this pointer for chaining</p>
             */
            setSelectedKey(sKey: string): sap.m.IconTabHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverflowSelectList" href="#/api/sap.m.IconTabHeader/methods/getShowOverflowSelectList">showOverflowSelectList</a>.</p><p>Specifies if the overflow select list is displayed.</p><p>The overflow select list represents a list, where all tab filters are displayed, so the user can select specific tab filter easier.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowOverflowSelectList <p>New value for property <code>showOverflowSelectList</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowOverflowSelectList(bShowOverflowSelectList: boolean): sap.m.IconTabHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTabDensityMode" href="#/api/sap.m.IconTabHeader/methods/getTabDensityMode">tabDensityMode</a>.</p><p>Specifies the visual density mode of the tabs.</p><p>The values that can be applied are <code>Cozy</code>, <code>Compact</code> and <code>Inherit</code>. <code>Cozy</code> and <code>Compact</code> render the control in one of these modes independent of the global density settings. The <code>Inherit</code> value follows the global density settings which are applied. For compatibility reasons, the default value is <code>Cozy</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Cozy</code>.</p>
             * @param {sap.m.IconTabDensityMode} sTabDensityMode <p>New value for property <code>tabDensityMode</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTabDensityMode(sTabDensityMode: sap.m.IconTabDensityMode): sap.m.IconTabHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabHeader/methods/getVisible">visible</a>.</p><p>Specifies whether the control is rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.IconTabHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.IconTabHeader;
        }
        /**
         * <p><p>Specifies <code>IconTabBar</code> header mode.</p></p>
         */
        export enum IconTabHeaderMode {
            /**
             * <p>Inline. In this mode when the <code>count</code> and the <code>text</code> are set, they are displayed in one line.</p>
             */
            Inline = "Inline",
            /**
             * <p>Standard. In this mode when the <code>count</code> and the <code>text</code> are set, they are displayed in two separate lines.</p>
             */
            Standard = "Standard",
        }
        /**
         * <p>Represents an Icon used to separate 2 tab filters.</p>
         */
        export class IconTabSeparator extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new IconTabSeparator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.IconTabSeparator/methods/getIcon">icon</a>.</p><p>The icon to display for this separator. If no icon is given, a separator line is used instead.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.IconTabSeparator/methods/getIconDensityAware">iconDensityAware</a>.</p><p>If set to true, it sends one or more requests, trying to get the density perfect version of the image if this version of the image doesn't exist on the server. Default value is set to true.</p><p>If bandwidth is key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabSeparator/methods/getVisible">visible</a>.</p><p>Specifies whether the separator is rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Renders the item in the IconTabHeader.</p>
             * @param {sap.ui.core.RenderManager} rm <p>the RenderManager that can be used for writing to the render output buffer</p>
             */
            protected render(rm: sap.ui.core.RenderManager): void;
            /**
             * <p>Renders this item in the IconTabSelectList.</p>
             * @param {sap.ui.core.RenderManager} rm <p>the RenderManager that can be used for writing to the render output buffer</p>
             * @param {sap.m.IconTabBarSelectList} selectList <p>the select list in which this filter is rendered</p>
             */
            protected renderInSelectList(rm: sap.ui.core.RenderManager, selectList: any): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.IconTabSeparator/methods/getIcon">icon</a>.</p><p>The icon to display for this separator. If no icon is given, a separator line is used instead.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.IconTabSeparator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.IconTabSeparator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.IconTabSeparator/methods/getIconDensityAware">iconDensityAware</a>.</p><p>If set to true, it sends one or more requests, trying to get the density perfect version of the image if this version of the image doesn't exist on the server. Default value is set to true.</p><p>If bandwidth is key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.IconTabSeparator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.IconTabSeparator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.IconTabSeparator/methods/getVisible">visible</a>.</p><p>Specifies whether the separator is rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.IconTabSeparator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.IconTabSeparator;
        }
        /**
         * <p><p>Represents an Interface for controls that can have their text hyphenated. Those controls can use <code>HyphenationSupport</code> mixin.</p></p>
         */
        export interface IHyphenation {
        }
        /**
         * <p>A wrapper around the IMG tag. The image can be loaded from a remote or local server.</p><p>Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.</p><p>There are various size setting options available, and the images can be combined with actions.</p><p>From version 1.30, new image mode sap.m.ImageMode.Background is added. When this mode is set, the src property is set using the css style 'background-image'. The properties 'backgroundSize', 'backgroundPosition', 'backgroundRepeat' have effect only when image is in sap.m.ImageMode.Background mode. In order to make the high density image correctly displayed, the 'backgroundSize' should be set to the dimension of the normal density version.</p>
         */
        export class Image extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Image.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Checks if the given value is valid for the <code>background-position</code> CSS property</p>
             * @param {string} sValue <p>the value to check</p>
             * @returns boolean <p>the check result</p>
             */
            protected _isValidBackgroundPositionValue(sValue: string): boolean;
            /**
             * <p>Checks if the given value is valid for the <code>background-size</code> CSS property</p>
             * @param {string} sValue <p>the value to check</p>
             * @returns boolean <p>the check result</p>
             */
            protected _isValidBackgroundSizeValue(sValue: string): boolean;
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Image/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Image;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Image/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Image;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.Image/events/error">error</a> event of this <code>sap.m.Image</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Image</code> itself.</p><p>Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachError(oData: any, fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="load" href="#/api/sap.m.Image/events/load">load</a> event of this <code>sap.m.Image</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Image</code> itself.</p><p>Event is fired when the image resource is loaded.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLoad(oData: any, fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Image/events/press">press</a> event of this <code>sap.m.Image</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Image</code> itself.</p><p>Event is fired when the user clicks on the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tap" href="#/api/sap.m.Image/events/tap">tap</a> event of this <code>sap.m.Image</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Image</code> itself.</p><p>Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTap(oData: any, fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailBox" href="#/api/sap.m.Image/methods/getDetailBox">detailBox</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindDetailBox(oBindingInfo: any): sap.m.Image;
            /**
             * <p>Destroys the detailBox in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailBox" href="#/api/sap.m.Image/methods/getDetailBox">detailBox</a>.</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyDetailBox(): sap.m.Image;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.Image/events/error">error</a> event of this <code>sap.m.Image</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachError(fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="load" href="#/api/sap.m.Image/events/load">load</a> event of this <code>sap.m.Image</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLoad(fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Image/events/press">press</a> event of this <code>sap.m.Image</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tap" href="#/api/sap.m.Image/events/tap">tap</a> event of this <code>sap.m.Image</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTap(fnFunction: Function, oListener?: any): sap.m.Image;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.Image/events/error">error</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireError(mParameters?: any): sap.m.Image;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="load" href="#/api/sap.m.Image/events/load">load</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLoad(mParameters?: any): sap.m.Image;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Image/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.Image;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tap" href="#/api/sap.m.Image/events/tap">tap</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTap(mParameters?: any): sap.m.Image;
            /**
             * <p>Returns the <code>sap.m.Image</code> accessibility information.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.Image</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveSrc" href="#/api/sap.m.Image/methods/getActiveSrc">activeSrc</a>.</p><p>The source property which is used when the image is pressed.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeSrc</code></p>
             */
            getActiveSrc(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlt" href="#/api/sap.m.Image/methods/getAlt">alt</a>.</p><p>The alternative text that is displayed in case the Image is not available, or cannot be displayed. If the image is set to decorative this property is ignored.</p>
             * @returns string <p>Value of property <code>alt</code></p>
             */
            getAlt(): string;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Image/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Image/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundPosition" href="#/api/sap.m.Image/methods/getBackgroundPosition">backgroundPosition</a>.</p><p>Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>Default value is <code>initial</code>.</p>
             * @returns string <p>Value of property <code>backgroundPosition</code></p>
             */
            getBackgroundPosition(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.Image/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>Default value is <code>no-repeat</code>.</p>
             * @returns string <p>Value of property <code>backgroundRepeat</code></p>
             */
            getBackgroundRepeat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundSize" href="#/api/sap.m.Image/methods/getBackgroundSize">backgroundSize</a>.</p><p>Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>Default value is <code>cover</code>.</p>
             * @returns string <p>Value of property <code>backgroundSize</code></p>
             */
            getBackgroundSize(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDecorative" href="#/api/sap.m.Image/methods/getDecorative">decorative</a>.</p><p>A decorative image is included for design reasons. Accessibility tools will ignore decorative images.</p><p>Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative). A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>decorative</code></p>
             */
            getDecorative(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDensityAware" href="#/api/sap.m.Image/methods/getDensityAware">densityAware</a>.</p><p>If this is set to <code>true</code>, one or more network requests will be made that try to obtain the density perfect version of the image.</p><p>By default, this is set to <code>false</code>, so the src image is loaded directly without attempting to fetch the density perfect image for high-density devices.</p><p><b>Note:</b> Before 1.60, the default value was set to <code>true</code>, which brought redundant network requests for apps that used the default but did not provide density perfect image versions on server-side. You should set this property to <code>true</code> only if you also provide the corresponding image versions for high-density devices.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>densityAware</code></p>
             */
            getDensityAware(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailBox" href="#/api/sap.m.Image/methods/getDetailBox">detailBox</a>.</p><p>A <code>sap.m.LightBox</code> instance, that will be opened automatically when the user interacts with the <code>Image</code> control.</p><p>The <code>tap</code> event will still be fired.</p>
             * @returns sap.m.LightBox 
             */
            getDetailBox(): sap.m.LightBox;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Image/methods/getHeight">height</a>.</p><p>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.Image/methods/getMode">mode</a>.</p><p>Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.</p><p>Default value is <code>Image</code>.</p>
             * @returns sap.m.ImageMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.ImageMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.m.Image/methods/getSrc">src</a>.</p><p>Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]</p>
             * @returns sap.ui.core.URI <p>Value of property <code>src</code></p>
             */
            getSrc(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseMap" href="#/api/sap.m.Image/methods/getUseMap">useMap</a>.</p><p>The name of the image map that defines the clickable areas</p>
             * @returns string <p>Value of property <code>useMap</code></p>
             */
            getUseMap(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Image/methods/getWidth">width</a>.</p><p>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Image/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Image/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Image/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Image/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveSrc" href="#/api/sap.m.Image/methods/getActiveSrc">activeSrc</a>.</p><p>The source property which is used when the image is pressed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sActiveSrc <p>New value for property <code>activeSrc</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveSrc(sActiveSrc: sap.ui.core.URI): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlt" href="#/api/sap.m.Image/methods/getAlt">alt</a>.</p><p>The alternative text that is displayed in case the Image is not available, or cannot be displayed. If the image is set to decorative this property is ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sAlt <p>New value for property <code>alt</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAlt(sAlt: string): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundPosition" href="#/api/sap.m.Image/methods/getBackgroundPosition">backgroundPosition</a>.</p><p>Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>initial</code>.</p>
             * @param {string} sBackgroundPosition <p>New value for property <code>backgroundPosition</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundPosition(sBackgroundPosition: string): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.Image/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>no-repeat</code>.</p>
             * @param {string} sBackgroundRepeat <p>New value for property <code>backgroundRepeat</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundRepeat(sBackgroundRepeat: string): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundSize" href="#/api/sap.m.Image/methods/getBackgroundSize">backgroundSize</a>.</p><p>Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>cover</code>.</p>
             * @param {string} sBackgroundSize <p>New value for property <code>backgroundSize</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundSize(sBackgroundSize: string): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDecorative" href="#/api/sap.m.Image/methods/getDecorative">decorative</a>.</p><p>A decorative image is included for design reasons. Accessibility tools will ignore decorative images.</p><p>Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative). A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bDecorative <p>New value for property <code>decorative</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDecorative(bDecorative: boolean): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDensityAware" href="#/api/sap.m.Image/methods/getDensityAware">densityAware</a>.</p><p>If this is set to <code>true</code>, one or more network requests will be made that try to obtain the density perfect version of the image.</p><p>By default, this is set to <code>false</code>, so the src image is loaded directly without attempting to fetch the density perfect image for high-density devices.</p><p><b>Note:</b> Before 1.60, the default value was set to <code>true</code>, which brought redundant network requests for apps that used the default but did not provide density perfect image versions on server-side. You should set this property to <code>true</code> only if you also provide the corresponding image versions for high-density devices.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDensityAware <p>New value for property <code>densityAware</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDensityAware(bDensityAware: boolean): sap.m.Image;
            /**
             * <p>Sets the <code>detailBox</code> aggregation.</p>
             * @param {sap.m.LightBox | undefined} oLightBox <p>Instance of the <code>LightBox</code> control or undefined</p>
             * @returns any <p><code>this</code> for chaining</p>
             */
            setDetailBox(oLightBox: sap.m.LightBox | undefined): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Image/methods/getHeight">height</a>.</p><p>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.Image/methods/getMode">mode</a>.</p><p>Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Image</code>.</p>
             * @param {sap.m.ImageMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.ImageMode): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.m.Image/methods/getSrc">src</a>.</p><p>Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sSrc <p>New value for property <code>src</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSrc(sSrc: sap.ui.core.URI): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseMap" href="#/api/sap.m.Image/methods/getUseMap">useMap</a>.</p><p>The name of the image map that defines the clickable areas</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sUseMap <p>New value for property <code>useMap</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUseMap(sUseMap: string): sap.m.Image;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Image/methods/getWidth">width</a>.</p><p>When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Image;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailBox" href="#/api/sap.m.Image/methods/getDetailBox">detailBox</a> from model data.</p>
             * @returns sap.m.Image <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindDetailBox(): sap.m.Image;
        }
        /**
         * <p>This control can be used to display image content in a GenericTile.</p>
         */
        export class ImageContent extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.ImageContent control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ImageContent/events/press">press</a> event of this <code>sap.m.ImageContent</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ImageContent</code> itself.</p><p>The event is triggered when the image content is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ImageContent</code> itself</p>
             * @returns sap.m.ImageContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ImageContent;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ImageContent/events/press">press</a> event of this <code>sap.m.ImageContent</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ImageContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.ImageContent;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ImageContent/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ImageContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.ImageContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.ImageContent/methods/getDescription">description</a>.</p><p>Description of image. This text is used to provide ScreenReader information.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.m.ImageContent/methods/getSrc">src</a>.</p><p>The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>src</code></p>
             */
            getSrc(): sap.ui.core.URI;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.ImageContent/methods/getDescription">description</a>.</p><p>Description of image. This text is used to provide ScreenReader information.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.ImageContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.ImageContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.m.ImageContent/methods/getSrc">src</a>.</p><p>The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sSrc <p>New value for property <code>src</code></p>
             * @returns sap.m.ImageContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSrc(sSrc: sap.ui.core.URI): sap.m.ImageContent;
        }
        /**
         * <p><p>Determines how the source image is used on the output DOM element.</p></p>
         */
        export enum ImageMode {
            /**
             * <p>The image is rendered with 'span' tag and the 'src' property is set to the 'background-image' CSS style on the output DOM element</p>
             */
            Background = "Background",
            /**
             * <p>The image is rendered with 'img' tag and the 'src' property is set to the src attribute on the output DOM element.</p>
             */
            Image = "Image",
        }
        /**
         * <p>Allows the user to enter and edit text or numeric values in one line.</p><h3>Overview</h3><p>You can enable the autocomplete suggestion feature and the value help option to easily enter a valid value.</p><h3>Guidelines</h3><p><ul> <li> Always provide a meaningful label for any input field </li> <li> Limit the length of the input field. This will visually emphasize the constraints for the field. </li> <li> Do not use the <code>placeholder</code> property as a label.</li> <li> Use the <code>description</code> property only for small fields with no placeholders (i.e. for currencies).</li> </ul></p><h3>Structure</h3><p>The controls inherits from <a target="_self" class="jsdoclink" href="#/api/sap.m.InputBase">sap.m.InputBase</a> which controls the core properties like: <ul> <li> editable / read-only </li> <li> enabled / disabled</li> <li> placeholder</li> <li> text direction</li> <li> value states</li> </ul> To aid the user during input, you can enable value help (<code>showValueHelp</code>) or autocomplete (<code>showSuggestion</code>). <strong>Value help</strong> will open a new dialog where you can refine your input. <strong>Autocomplete</strong> has three types of suggestions: <ul> <li> Single value - a list of suggestions of type <code>sap.ui.core.Item</code> or <code>sap.ui.core.ListItem</code> </li> <li> Two values - a list of two suggestions (ID and description) of type <code>sap.ui.core.Item</code> or <code>sap.ui.core.ListItem</code> </li> <li> Tabular suggestions of type <code>sap.m.ColumnListItem</code> </li> </ul> The suggestions are stored in two aggregations <code>suggestionItems</code> (for single and double values) and <code>suggestionRows</code> (for tabular values).</p><h3>Usage</h3><p><b>When to use:</b> Use the control for short inputs like emails, phones, passwords, fields for assisted value selection.</p><p><b>When not to use:</b> Don't use the control for long texts, dates, designated search fields, fields for multiple selection.</p>
         */
        export class Input extends sap.m.InputBase {
            /**
             * <p>Constructor for a new <code>Input</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Refreshes delayed items.</p>
             */
            _refreshItemsDelayed(): void;
            /**
             * <p>Adds some suggestionColumn to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p>
             * @param {sap.m.Column} oSuggestionColumn <p>The suggestionColumn to add; if empty, nothing is inserted</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSuggestionColumn(oSuggestionColumn: sap.m.Column): sap.m.Input;
            /**
             * <p>Adds suggestion item.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion item.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            addSuggestionItem(oItem: sap.ui.core.Item): sap.m.Input;
            /**
             * <p>Adds suggestion row.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion item.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            addSuggestionRow(oItem: sap.ui.core.Item): sap.m.Input;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Input/events/liveChange">liveChange</a> event of this <code>sap.m.Input</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Input</code> itself.</p><p>This event is fired when the value of the input is changed - e.g. at each keypress</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="submit" href="#/api/sap.m.Input/events/submit">submit</a> event of this <code>sap.m.Input</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Input</code> itself.</p><p>This event is fired when user presses the <code>Enter</code> key on the input.</p><p><b>Notes:</b> <ul> <li>The event is fired independent of whether there was a change before or not. If a change was performed, the event is fired after the change event.</li> <li>The event is also fired when an item of the select list is selected via <code>Enter</code>.</li> <li>The event is only fired on an input which allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).</li> </ul></p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSubmit(oData: any, fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.Input/events/suggest">suggest</a> event of this <code>sap.m.Input</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Input</code> itself.</p><p>This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSuggest(oData: any, fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggestionItemSelected" href="#/api/sap.m.Input/events/suggestionItemSelected">suggestionItemSelected</a> event of this <code>sap.m.Input</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Input</code> itself.</p><p>This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSuggestionItemSelected(oData: any, fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="valueHelpRequest" href="#/api/sap.m.Input/events/valueHelpRequest">valueHelpRequest</a> event of this <code>sap.m.Input</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Input</code> itself.</p><p>When the value help indicator is clicked, this event will be fired.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachValueHelpRequest(oData: any, fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindSuggestionColumns(oBindingInfo: any): sap.m.Input;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRows" href="#/api/sap.m.Input/methods/getSuggestionRows">suggestionRows</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindSuggestionRows(oBindingInfo: any): sap.m.Input;
            /**
             * <p>Cancels any pending suggestions.</p>
             */
            cancelPendingSuggest(): void;
            /**
             * <p>Clones input.</p>
             * @returns sap.m.Input <p>Cloned input.</p>
             */
            clone(): sap.m.Input;
            /**
             * <p>Closes the suggestion list.</p>
             */
            closeSuggestions(): void;
            /**
             * <p>Destroys all the suggestionColumns in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySuggestionColumns(): sap.m.Input;
            /**
             * <p>Destroys suggestion items.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            destroySuggestionItems(): sap.m.Input;
            /**
             * <p>Destroys all suggestion rows.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            destroySuggestionRows(): sap.m.Input;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Input/events/liveChange">liveChange</a> event of this <code>sap.m.Input</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="submit" href="#/api/sap.m.Input/events/submit">submit</a> event of this <code>sap.m.Input</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSubmit(fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.Input/events/suggest">suggest</a> event of this <code>sap.m.Input</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSuggest(fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggestionItemSelected" href="#/api/sap.m.Input/events/suggestionItemSelected">suggestionItemSelected</a> event of this <code>sap.m.Input</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSuggestionItemSelected(fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="valueHelpRequest" href="#/api/sap.m.Input/events/valueHelpRequest">valueHelpRequest</a> event of this <code>sap.m.Input</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachValueHelpRequest(fnFunction: Function, oListener?: any): sap.m.Input;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Input/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.Input;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="submit" href="#/api/sap.m.Input/events/submit">submit</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSubmit(mParameters?: any): sap.m.Input;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.Input/events/suggest">suggest</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSuggest(mParameters?: any): sap.m.Input;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggestionItemSelected" href="#/api/sap.m.Input/events/suggestionItemSelected">suggestionItemSelected</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSuggestionItemSelected(mParameters?: any): sap.m.Input;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="valueHelpRequest" href="#/api/sap.m.Input/events/valueHelpRequest">valueHelpRequest</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireValueHelpRequest(mParameters?: any): sap.m.Input;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets accessibility information for the input.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Accesibility information.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutocomplete" href="#/api/sap.m.Input/methods/getAutocomplete">autocomplete</a>.</p><p>Specifies whether autocomplete is enabled. Works only if "showSuggestion" property is set to true.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>autocomplete</code></p>
             */
            getAutocomplete(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.Input/methods/getDescription">description</a>.</p><p>The description is a text after the input field, e.g. units of measurement, currencies.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets the inner input DOM value.</p>
             * @returns any <p>The value of the input.</p>
             */
            protected getDOMValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableSuggestionsHighlighting" href="#/api/sap.m.Input/methods/getEnableSuggestionsHighlighting">enableSuggestionsHighlighting</a>.</p><p>Specifies whether the suggestions highlighting is enabled.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enableSuggestionsHighlighting</code></p>
             */
            getEnableSuggestionsHighlighting(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldWidth" href="#/api/sap.m.Input/methods/getFieldWidth">fieldWidth</a>.</p><p>This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.</p><p>Default value is <code>50%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>fieldWidth</code></p>
             */
            getFieldWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSuggests" href="#/api/sap.m.Input/methods/getFilterSuggests">filterSuggests</a>.</p><p>Defines whether to filter the provided suggestions before showing them to the user.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>filterSuggests</code></p>
             */
            getFilterSuggests(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.Input/methods/getMaxLength">maxLength</a>.</p><p>Maximum number of characters. Value '0' means the feature is switched off. This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>. If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>maxLength</code></p>
             */
            getMaxLength(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxSuggestionWidth" href="#/api/sap.m.Input/methods/getMaxSuggestionWidth">maxSuggestionWidth</a>.</p><p>If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field. Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxSuggestionWidth</code></p>
             */
            getMaxSuggestionWidth(): sap.ui.core.CSSSize;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.Input/methods/getSelectedItem">selectedItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedItem(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.Input/methods/getSelectedKey">selectedKey</a>.</p><p>Defines the key of the selected item.</p><p><b>Note:</b> If duplicate keys exist, the first item matching the key is used.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedKey</code></p>
             */
            getSelectedKey(): string;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedRow" href="#/api/sap.m.Input/methods/getSelectedRow">selectedRow</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedRow(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSuggestion" href="#/api/sap.m.Input/methods/getShowSuggestion">showSuggestion</a>.</p><p>If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSuggestion</code></p>
             */
            getShowSuggestion(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowTableSuggestionValueHelp" href="#/api/sap.m.Input/methods/getShowTableSuggestionValueHelp">showTableSuggestionValueHelp</a>.</p><p>For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.</p><p>NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showTableSuggestionValueHelp</code></p>
             */
            getShowTableSuggestionValueHelp(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueHelp" href="#/api/sap.m.Input/methods/getShowValueHelp">showValueHelp</a>.</p><p>If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showValueHelp</code></p>
             */
            getShowValueHelp(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.InputBase/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showValueStateMessage</code></p>
             */
            getShowValueStateMessage(): boolean;
            /**
             * <p>Getter for property <code>showValueStateMessage</code>. Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.</p><p>Default value is <code>true</code></p>
             * @returns boolean <p>the value of property <code>showValueStateMessage</code></p>
             */
            getShowValueStateMessage(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartSuggestion" href="#/api/sap.m.Input/methods/getStartSuggestion">startSuggestion</a>.</p><p>Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>startSuggestion</code></p>
             */
            getStartSuggestion(): number;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p><p>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".</p>
             * @returns sap.m.Column[] 
             */
            getSuggestionColumns(): sap.m.Column[];
            /**
             * <p>Gets the item with the given key from the aggregation <code>suggestionItems</code>. <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.</p>
             * @param {string} sKey <p>An item key that specifies the item to retrieve.</p>
             * @returns sap.ui.core.Item <p>Suggestion item.</p>
             */
            getSuggestionItemByKey(sKey: string): sap.ui.core.Item;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.Input/methods/getSuggestionItems">suggestionItems</a>.</p><p>Defines the items displayed in the suggestion popup. Changing this aggregation (by calling <code>addSuggestionItem</code>, <code>insertSuggestionItem</code>, <code>removeSuggestionItem</code>, <code>removeAllSuggestionItems</code>, or <code>destroySuggestionItems</code>) after <code>Input</code> is rendered opens/closes the suggestion popup.</p><p>To display suggestions with two text values, add <code>sap.ui.core.ListItem</code> as <code>SuggestionItems</code> (since 1.21.1). For the selected <code>ListItem</code>, only the first value is returned to the input field.</p><p><b>Note:</b> Only <code>text</code> and <code>additionalText</code> property values of the item are displayed. For example, if an <code>icon</code> is set, it is ignored. To display more information per item (including icons), you can use the <code>suggestionRows</code> aggregation.</p>
             * @returns sap.ui.core.Item[] 
             */
            getSuggestionItems(): sap.ui.core.Item[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRows" href="#/api/sap.m.Input/methods/getSuggestionRows">suggestionRows</a>.</p><p>The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells. The items of this aggregation are to be bound directly or to set in the suggest event method. Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.</p>
             * @returns any 
             */
            getSuggestionRows(): any | any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRowValidator" href="#/api/sap.m.Input/methods/getSuggestionRowValidator">suggestionRowValidator</a>.</p><p>Defines the validation callback function called when a suggestion row gets selected.</p><p>Default value is <code>empty string</code>.</p>
             * @returns any <p>Value of property <code>suggestionRowValidator</code></p>
             */
            getSuggestionRowValidator(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextFormatMode" href="#/api/sap.m.Input/methods/getTextFormatMode">textFormatMode</a>.</p><p>Defines the display text format mode.</p><p>Default value is <code>Value</code>.</p>
             * @returns sap.m.InputTextFormatMode <p>Value of property <code>textFormatMode</code></p>
             */
            getTextFormatMode(): sap.m.InputTextFormatMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextFormatter" href="#/api/sap.m.Input/methods/getTextFormatter">textFormatter</a>.</p><p>Defines the display text formatter function.</p><p>Default value is <code>empty string</code>.</p>
             * @returns any <p>Value of property <code>textFormatter</code></p>
             */
            getTextFormatter(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Input/methods/getType">type</a>.</p><p>HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone). The particular effect of this property differs depending on the browser and the current language settings, especially for the type Number.<br> This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br> Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats. <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML representations for numbers and dates.</p><p>Default value is <code>Text</code>.</p>
             * @returns sap.m.InputType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.InputType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets the input value.</p>
             * @returns sap.m.Input <p>Value of the input.</p>
             */
            getValue(): sap.m.Input;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueHelpOnly" href="#/api/sap.m.Input/methods/getValueHelpOnly">valueHelpOnly</a>.</p><p>If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>valueHelpOnly</code></p>
             */
            getValueHelpOnly(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueLiveUpdate" href="#/api/sap.m.Input/methods/getValueLiveUpdate">valueLiveUpdate</a>.</p><p>Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>valueLiveUpdate</code></p>
             */
            getValueLiveUpdate(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.InputBase/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</p>
             * @returns string <p>Value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Getter for property <code>valueStateText</code>. The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.</p><p>Default value is empty/<code>undefined</code></p>
             * @returns string <p>the value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.InputBase/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p><b>Note:</b> If the provided width is too small, the control gets stretched to its min width, which is needed in order for the control to be usable and well aligned.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Returns the width of the input.</p>
             * @returns string <p>The current width or 100% as default.</p>
             */
            getWidth(): string;
            /**
             * <p>Checks for the provided <code>sap.m.Column</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Column} oSuggestionColumn <p>The suggestionColumn whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSuggestionColumn(oSuggestionColumn: sap.m.Column): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.Input/methods/getSuggestionItems">suggestionItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oSuggestionItem <p>The suggestionItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSuggestionItem(oSuggestionItem: sap.ui.core.Item): number;
            /**
             * <p>Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRows" href="#/api/sap.m.Input/methods/getSuggestionRows">suggestionRows</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ColumnListItem | sap.m.GroupHeaderListItem} vSuggestionRow <p>The suggestionRow whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSuggestionRow(vSuggestionRow: sap.m.ColumnListItem | sap.m.GroupHeaderListItem): number;
            /**
             * <p>Inserts a suggestionColumn into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p>
             * @param {sap.m.Column} oSuggestionColumn <p>The suggestionColumn to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the suggestionColumn should be inserted at; for a negative value of <code>iIndex</code>, the suggestionColumn is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionColumn is inserted at the last position</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSuggestionColumn(oSuggestionColumn: sap.m.Column, iIndex: number): sap.m.Input;
            /**
             * <p>Inserts suggestion item.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion item.</p>
             * @param {number} iIndex <p>Index to be inserted.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            insertSuggestionItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.Input;
            /**
             * <p>Inserts suggestion row.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion row</p>
             * @param {number} iIndex <p>Row index.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            insertSuggestionRow(oItem: sap.ui.core.Item, iIndex: number): sap.m.Input;
            /**
             * <p>Invalidates the control.</p>
             */
            protected invalidate(): void;
            /**
             * <p>Overwrites the onAfterRendering.</p>
             */
            onAfterRendering(): void;
            /**
             * <p>Overwrites the onBeforeRendering.</p>
             */
            onBeforeRendering(): void;
            /**
             * <p>Event handler for the onFocusIn event.</p>
             * @param {any} oEvent <p>On focus in event.</p>
             */
            onfocusin(oEvent: any): void;
            /**
             * <p>Event handler for user input.</p>
             * @param {any} oEvent <p>User input.</p>
             */
            oninput(oEvent: any): void;
            /**
             * <p>Keyboard handler for the onMouseDown event.</p>
             * @param {any} oEvent <p>Keyboard event.</p>
             */
            onmousedown(oEvent: any): void;
            /**
             * <p>Keyboard handler for enter key.</p>
             * @param {any} oEvent <p>Keyboard event.</p>
             */
            onsapenter(oEvent: any): void;
            /**
             * <p>Keyboard handler for escape key.</p>
             * @param {any} oEvent <p>Keyboard event.</p>
             */
            onsapescape(oEvent: any): void;
            /**
             * <p>Keyboard handler for the onFocusLeave event.</p>
             * @param {any} oEvent <p>Keyboard event.</p>
             */
            onsapfocusleave(oEvent: any): void;
            /**
             * <p>Fire valueHelpRequest event on tap.</p>
             * @param {any} oEvent <p>Ontap event.</p>
             */
            ontap(oEvent: any): void;
            /**
             * <p>Hook method to prevent the change event from being fired when the text input field loses focus.</p>
             * @param {any} oEvent <p>The event object.</p>
             * @returns boolean <p>Whether or not the change event should be prevented.</p>
             */
            protected preventChangeOnFocusLeave(oEvent?: any): boolean;
            /**
             * <p>Hook method to prevent the change event from being fired when the text input field loses focus.</p>
             * @param {any} oEvent <p>The event object.</p>
             * @returns boolean <p>Whether or not the change event should be prevented.</p>
             */
            protected preventChangeOnFocusLeave(oEvent?: any): boolean;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Column[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSuggestionColumns(): sap.m.Column[];
            /**
             * <p>Removes all suggestion items.</p>
             * @returns boolean <p>Determines whether the suggestion items are removed.</p>
             */
            removeAllSuggestionItems(): boolean;
            /**
             * <p>Removes all suggestion rows.</p>
             * @returns boolean <p>Determines whether the suggestion rows are removed.</p>
             */
            removeAllSuggestionRows(): boolean;
            /**
             * <p>Removes a suggestionColumn from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a>.</p>
             * @param {number | string | sap.m.Column} vSuggestionColumn <p>The suggestionColumn to remove or its index or id</p>
             * @returns sap.m.Column <p>The removed suggestionColumn or <code>null</code></p>
             */
            removeSuggestionColumn(vSuggestionColumn: number | string | sap.m.Column): sap.m.Column;
            /**
             * <p>Removes suggestion item.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion item.</p>
             * @returns boolean <p>Determines whether the suggestion item has been removed.</p>
             */
            removeSuggestionItem(oItem: sap.ui.core.Item): boolean;
            /**
             * <p>Removes suggestion row.</p>
             * @param {sap.ui.core.Item} oItem <p>Suggestion row.</p>
             * @returns boolean <p>Determines whether the suggestion row is removed.</p>
             */
            removeSuggestionRow(oItem: sap.ui.core.Item): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutocomplete" href="#/api/sap.m.Input/methods/getAutocomplete">autocomplete</a>.</p><p>Specifies whether autocomplete is enabled. Works only if "showSuggestion" property is set to true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAutocomplete <p>New value for property <code>autocomplete</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutocomplete(bAutocomplete: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.Input/methods/getDescription">description</a>.</p><p>The description is a text after the input field, e.g. units of measurement, currencies.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.Input;
            /**
             * <p>Sets the inner input DOM value.</p>
             * @param {string} value <p>Dom value which will be set.</p>
             */
            protected setDOMValue(value: string): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableSuggestionsHighlighting" href="#/api/sap.m.Input/methods/getEnableSuggestionsHighlighting">enableSuggestionsHighlighting</a>.</p><p>Specifies whether the suggestions highlighting is enabled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnableSuggestionsHighlighting <p>New value for property <code>enableSuggestionsHighlighting</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableSuggestionsHighlighting(bEnableSuggestionsHighlighting: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldWidth" href="#/api/sap.m.Input/methods/getFieldWidth">fieldWidth</a>.</p><p>This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>50%</code>.</p>
             * @param {sap.ui.core.CSSSize} sFieldWidth <p>New value for property <code>fieldWidth</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFieldWidth(sFieldWidth: sap.ui.core.CSSSize): sap.m.Input;
            /**
             * <p>Sets a custom filter function for suggestions. The default is to check whether the first item text begins with the typed value. For one and two-value suggestions this callback function will operate on sap.ui.core.Item types, for tabular suggestions the function will operate on sap.m.ColumnListItem types.</p>
             * @param {Function} fnFilter <p>The filter function is called when displaying suggestion items and has two input parameters: the first one is the string that is currently typed in the input field and the second one is the item that is being filtered. Returning true will add this item to the popup, returning false will not display it.</p>
             * @returns sap.m.Input <p>this pointer for chaining</p>
             */
            setFilterFunction(fnFilter: Function): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSuggests" href="#/api/sap.m.Input/methods/getFilterSuggests">filterSuggests</a>.</p><p>Defines whether to filter the provided suggestions before showing them to the user.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bFilterSuggests <p>New value for property <code>filterSuggests</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFilterSuggests(bFilterSuggests: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.Input/methods/getMaxLength">maxLength</a>.</p><p>Maximum number of characters. Value '0' means the feature is switched off. This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>. If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iMaxLength <p>New value for property <code>maxLength</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLength(iMaxLength: number): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxSuggestionWidth" href="#/api/sap.m.Input/methods/getMaxSuggestionWidth">maxSuggestionWidth</a>.</p><p>If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field. Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sMaxSuggestionWidth <p>New value for property <code>maxSuggestionWidth</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxSuggestionWidth(sMaxSuggestionWidth: sap.ui.core.CSSSize): sap.m.Input;
            /**
             * <p>Sets a custom result filter function for tabular suggestions to select the text that is passed to the input field. Default is to check whether the first cell with a "text" property begins with the typed value. For one value and two-value suggestions this callback function is not called.</p>
             * @param {Function} fnFilter <p>The result function is called with one parameter: the sap.m.ColumnListItem that is selected. The function must return a result string that will be displayed as the input field's value.</p>
             * @returns sap.m.Input <p>this pointer for chaining</p>
             */
            setRowResultFunction(fnFilter: Function): sap.m.Input;
            /**
             * <p>Sets the <code>selectedItem</code> association.</p>
             * @param {sap.ui.core.Item} oItem <p>New value for the <code>selectedItem</code> association. Default value is <code>null</code>. If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association. Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear the selection.</p>
             * @returns sap.m.Input <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItem(oItem: sap.ui.core.Item): sap.m.Input;
            /**
             * <p>Sets the <code>selectedKey</code> property.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string} sKey <p>New value for property <code>selectedKey</code>. If the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>, the selection is cleared. If duplicate keys exist, the first item matching the key is selected.</p>
             * @returns sap.m.Input <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedKey(sKey: string): sap.m.Input;
            /**
             * <p>Sets the <code>selectedRow</code> association. Default value is <code>null</code>.</p>
             * @param {sap.m.ColumnListItem} oListItem <p>New value for the <code>selectedRow</code> association. If an ID of a <code>sap.m.ColumnListItem</code> is given, the item with this ID becomes the <code>selectedRow</code> association. Alternatively, a <code>sap.m.ColumnListItem</code> instance may be given or <code>null</code> to clear the selection.</p>
             * @returns sap.m.Input <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedRow(oListItem: sap.m.ColumnListItem): sap.m.Input;
            /**
             * <p>Shows suggestions.</p>
             * @param {boolean} bValue <p>Show suggestions.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            setShowSuggestion(bValue: boolean): sap.m.Input;
            /**
             * <p>Shows value help suggestions in table.</p>
             * @param {boolean} bValue <p>Show suggestions.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            setShowTableSuggestionValueHelp(bValue: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueHelp" href="#/api/sap.m.Input/methods/getShowValueHelp">showValueHelp</a>.</p><p>If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowValueHelp <p>New value for property <code>showValueHelp</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueHelp(bShowValueHelp: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.InputBase/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValueStateMessage <p>New value for property <code>showValueStateMessage</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.InputBase;
            /**
             * <p>Sets whether the value state message should be shown or not</p>
             * @param {boolean} bShow <p>The new value state text</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setShowValueStateMessage(bShow?: boolean): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartSuggestion" href="#/api/sap.m.Input/methods/getStartSuggestion">startSuggestion</a>.</p><p>Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iStartSuggestion <p>New value for property <code>startSuggestion</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStartSuggestion(iStartSuggestion: number): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRowValidator" href="#/api/sap.m.Input/methods/getSuggestionRowValidator">suggestionRowValidator</a>.</p><p>Defines the validation callback function called when a suggestion row gets selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {any} oSuggestionRowValidator <p>New value for property <code>suggestionRowValidator</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSuggestionRowValidator(oSuggestionRowValidator: any): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextFormatMode" href="#/api/sap.m.Input/methods/getTextFormatMode">textFormatMode</a>.</p><p>Defines the display text format mode.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Value</code>.</p>
             * @param {sap.m.InputTextFormatMode} sTextFormatMode <p>New value for property <code>textFormatMode</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextFormatMode(sTextFormatMode: sap.m.InputTextFormatMode): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextFormatter" href="#/api/sap.m.Input/methods/getTextFormatter">textFormatter</a>.</p><p>Defines the display text formatter function.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {any} oTextFormatter <p>New value for property <code>textFormatter</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextFormatter(oTextFormatter: any): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Input/methods/getType">type</a>.</p><p>HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone). The particular effect of this property differs depending on the browser and the current language settings, especially for the type Number.<br> This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br> Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats. <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML representations for numbers and dates.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Text</code>.</p>
             * @param {sap.m.InputType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.InputType): sap.m.Input;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.InputBase;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code>.</p>
             * @returns sap.m.Input <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueHelpOnly" href="#/api/sap.m.Input/methods/getValueHelpOnly">valueHelpOnly</a>.</p><p>If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bValueHelpOnly <p>New value for property <code>valueHelpOnly</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueHelpOnly(bValueHelpOnly: boolean): sap.m.Input;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueLiveUpdate" href="#/api/sap.m.Input/methods/getValueLiveUpdate">valueLiveUpdate</a>.</p><p>Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bValueLiveUpdate <p>New value for property <code>valueLiveUpdate</code></p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueLiveUpdate(bValueLiveUpdate: boolean): sap.m.Input;
            /**
             * <p>Setter for property <code>valueState</code>.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.InputBase;
            /**
             * <p>Sets the visualization of the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>The new value state</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setValueState(sValueState?: sap.ui.core.ValueState): sap.m.InputBase;
            /**
             * <p>Setter for property <code>valueStateText</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sText <p>New value for property <code>valueStateText</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining</p>
             */
            setValueStateText(sText: string): sap.m.InputBase;
            /**
             * <p>Sets the value state text</p>
             * @param {string} sValueStateText <p>The new value state text</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setValueStateText(sValueStateText?: string): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.InputBase/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p><b>Note:</b> If the provided width is too small, the control gets stretched to its min width, which is needed in order for the control to be usable and well aligned.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.InputBase;
            /**
             * <p>Defines the width of the input. Default value is 100%.</p>
             * @param {string} sWidth <p>The new width of the input.</p>
             * @returns undefined <p>Sets the width of the Input.</p>
             */
            setWidth(sWidth: string): undefined;
            /**
             * <p>Opens the <code>SuggestionsPopover</code> with the available items.</p>
             * @param {Function} fnFilter <p>Function to filter the items shown in the SuggestionsPopover</p>
             */
            showItems(fnFilter: Function): void;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionColumns" href="#/api/sap.m.Input/methods/getSuggestionColumns">suggestionColumns</a> from model data.</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindSuggestionColumns(): sap.m.Input;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionRows" href="#/api/sap.m.Input/methods/getSuggestionRows">suggestionRows</a> from model data.</p>
             * @returns sap.m.Input <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindSuggestionRows(): sap.m.Input;
            /**
             * <p>Updates the inner input field.</p>
             */
            protected updateInputField(): void;
            /**
             * <p>Update suggestion items.</p>
             * @returns sap.m.Input <p>this Input instance for chaining.</p>
             */
            updateSuggestionItems(): sap.m.Input;
        }
        /**
         * <p>The <code>sap.m.InputBase</code> control provides a basic functionality for input controls.</p>
         */
        export class InputBase extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>sap.m.InputBase</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Indicates whether the input field is in the rendering phase.</p>
             */
            protected bRenderingPhase: any;
            /**
             * <p>Use labels as placeholder configuration. It can be necessary for the subclasses to overwrite this when native placeholder usage causes undesired input events or when placeholder attribute is not supported for the specified type. https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary</p>
             */
            protected bShowLabelAsPlaceholder: any;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.InputBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.InputBase;
            /**
             * <p>Adds an icon to the beginning of the input<br><br>References: <ul><li>sap.ui.core.IconPool.createControlByURI</li></ul></p>
             * @param {any} oIconSettings <p>settings for creating an icon</p>
             * @returns null|sap.ui.core.Icon 
             */
            protected addBeginIcon(oIconSettings: any): null | sap.ui.core.Icon;
            /**
             * <p>Adds an icon to the end of the input<br><br>References: <ul><li>sap.ui.core.IconPool.createControlByURI</li></ul></p>
             * @param {any} oIconSettings <p>settings for creating an icon</p>
             * @returns null|sap.ui.core.Icon 
             */
            protected addEndIcon(oIconSettings: any): null | sap.ui.core.Icon;
            /**
             * <p>Applies the focus info. To be overwritten by subclasses.</p>
             * @param {any} oFocusInfo 
             */
            protected applyFocusInfo(oFocusInfo: any): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> event of this <code>sap.m.InputBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.InputBase</code> itself.</p><p>Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code> itself</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.InputBase;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindValue(oBindingInfo: any): sap.m.InputBase;
            /**
             * <p>Close value state message popup.</p>
             */
            protected closeValueStateMessage(): void;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> event of this <code>sap.m.InputBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.InputBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.InputBase;
            /**
             * <p>Fires the change event for the listeners</p>
             * @param {String} sValue <p>value of the input.</p>
             * @param {any} oParams <p>extra event parameters.</p>
             */
            protected fireChangeEvent(sValue: String, oParams?: any): void;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.InputBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets the DOM element reference where the message popup is attached.</p>
             * @returns HTMLElement <p>The DOM element reference where the message popup is attached</p>
             */
            protected getDomRefForValueStateMessage(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.InputBase/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.InputBase/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Returns an object representing the serialized focus information. To be overwritten by subclasses.</p>
             * @returns any <p>An object representing the serialized focus information.</p>
             */
            protected getFocusInfo(): any;
            /**
             * <p>Gets the labels referencing this control.</p>
             * @returns sap.m.Label[] <p>Array of objects which are the current targets of the <code>ariaLabelledBy</code> association and the labels referencing this control.</p>
             */
            protected getLabels(): sap.m.Label[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.InputBase/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.InputBase/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p>
             * @returns string <p>Value of property <code>placeholder</code></p>
             */
            getPlaceholder(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.InputBase/methods/getRequired">required</a>.</p><p>Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established (e.g. one label should label multiple fields).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>required</code></p>
             */
            getRequired(): boolean;
            /**
             * <p>Retrieves the selected text. Only supported for input control's type of Text, Url, Tel and Password.</p>
             * @returns string <p>The selected text.</p>
             */
            protected getSelectedText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.InputBase/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showValueStateMessage</code></p>
             */
            getShowValueStateMessage(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.InputBase/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is shown inside the input field.</p><p>Default value is <code>Initial</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.InputBase/methods/getTextDirection">textDirection</a>.</p><p>Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code></p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.InputBase/methods/getValueState">valueState</a>.</p><p>Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.InputBase/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.</p>
             * @returns string <p>Value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.InputBase/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p><b>Note:</b> If the provided width is too small, the control gets stretched to its min width, which is needed in order for the control to be usable and well aligned.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Handles the input event of the control</p>
             * @param {any} oEvent <p>The event object.</p>
             */
            protected handleInput(oEvent: any): void;
            /**
             * <p>indicating if a character is currently composing.</p>
             * @returns boolean <p>Whether or not a character is composing. True if after "compositionstart" event and before "compositionend" event.</p>
             */
            protected isComposingCharacter(): boolean;
            /**
             * <p>Handles the change event.</p>
             * @param {any} oEvent 
             * @param {any} mParameters <p>Additional event parameters to be passed in to the change event handler if the value has changed</p>
             * @param {string} sNewValue <p>Passed value on change</p>
             * @returns boolean|undefined <p>true when change event is fired</p>
             */
            protected onChange(oEvent: any, mParameters: any, sNewValue: string): boolean | undefined;
            /**
             * <p>Hook method that gets called when the input value is reverted with hitting escape. It may require to re-implement this method from sub classes for control specific behaviour.</p>
             * @param {String} sValue <p>Reverted value of the input.</p>
             */
            protected onValueRevertedByEscape(sValue: String): void;
            /**
             * <p>Open value state message popup.</p>
             */
            protected openValueStateMessage(): void;
            /**
             * <p>Hook method to prevent the change event from being fired when the text input field loses focus.</p>
             * @param {any} oEvent <p>The event object.</p>
             * @returns boolean <p>Whether or not the change event should be prevented.</p>
             */
            protected preventChangeOnFocusLeave(oEvent?: any): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.InputBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.InputBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Selects the text within the input field between the specified start and end positions. Only supported for input control's type of Text, Url, Tel and Password.</p>
             * @param {number} iSelectionStart <p>The index into the text at which the first selected character is located.</p>
             * @param {number} iSelectionEnd <p>The index into the text at which the last selected character is located.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            protected selectText(iSelectionStart: number, iSelectionEnd: number): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.InputBase/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.InputBase/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.InputBase/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.InputBase/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sPlaceholder <p>New value for property <code>placeholder</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholder(sPlaceholder: string): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.InputBase/methods/getRequired">required</a>.</p><p>Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established (e.g. one label should label multiple fields).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRequired <p>New value for property <code>required</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRequired(bRequired: boolean): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueStateMessage" href="#/api/sap.m.InputBase/methods/getShowValueStateMessage">showValueStateMessage</a>.</p><p>Indicates whether the value state message should be shown or not.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValueStateMessage <p>New value for property <code>showValueStateMessage</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueStateMessage(bShowValueStateMessage: boolean): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.InputBase/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is shown inside the input field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Initial</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.InputBase/methods/getTextDirection">textDirection</a>.</p><p>Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.InputBase;
            /**
             * <p>Setter for property <code>value</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValue(sValue: string): sap.m.InputBase;
            /**
             * <p>Setter for property <code>valueState</code>.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.InputBase;
            /**
             * <p>Setter for property <code>valueStateText</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sText <p>New value for property <code>valueStateText</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining</p>
             */
            setValueStateText(sText: string): sap.m.InputBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.InputBase/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p><b>Note:</b> If the provided width is too small, the control gets stretched to its min width, which is needed in order for the control to be usable and well aligned.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.InputBase;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.InputBase/methods/getValue">value</a> from model data.</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindValue(): sap.m.InputBase;
            /**
             * <p>Sets the DOM value of the input field and handles placeholder visibility.</p>
             * @param {string} sValue <p>value of the input field.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining.</p>
             */
            protected updateDomValue(sValue: string): sap.m.InputBase;
        }
        /**
         * <p>List item should be used for a label and an input field.</p>
         */
        export class InputListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new InputListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.InputListItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindContent(oBindingInfo: any): sap.m.InputListItem;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.InputListItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p><p>Content controls can be added</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.InputListItem/methods/getLabel">label</a>.</p><p>Label of the list item</p>
             * @returns string <p>Value of property <code>label</code></p>
             */
            getLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelTextDirection" href="#/api/sap.m.InputListItem/methods/getLabelTextDirection">labelTextDirection</a>.</p><p>This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>labelTextDirection</code></p>
             */
            getLabelTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.InputListItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.InputListItem/methods/getLabel">label</a>.</p><p>Label of the list item</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLabel <p>New value for property <code>label</code></p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabel(sLabel: string): sap.m.InputListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelTextDirection" href="#/api/sap.m.InputListItem/methods/getLabelTextDirection">labelTextDirection</a>.</p><p>This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sLabelTextDirection <p>New value for property <code>labelTextDirection</code></p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabelTextDirection(sLabelTextDirection: sap.ui.core.TextDirection): sap.m.InputListItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.InputListItem/methods/getContent">content</a> from model data.</p>
             * @returns sap.m.InputListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindContent(): sap.m.InputListItem;
        }
        /**
         * <p><p>Defines how the input display text should be formatted.</p></p>
         */
        export enum InputTextFormatMode {
            /**
             * <p>Key</p>
             */
            Key = "Key",
            /**
             * <p>A key-value pair formatted like "(key) text"</p>
             */
            KeyValue = "KeyValue",
            /**
             * <p>Text</p>
             */
            Value = "Value",
            /**
             * <p>A value-key pair formatted like "text (key)"</p>
             */
            ValueKey = "ValueKey",
        }
        /**
         * <p><p>A subset of input types that fits to a simple API returning one string.</p><p>Not available on purpose: button, checkbox, hidden, image, password, radio, range, reset, search, submit.</p></p>
         */
        export enum InputType {
            /**
             * <p>An input control for specifying a date value. The user can select a month, day of the month, and year.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. Please use dedicated <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a> to create date input.</span></p>
             */
            Date = "Date",
            /**
             * <p>An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. Please use dedicated <a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a> control to create date-time input.</span></p>
             */
            Datetime = "Datetime",
            /**
             * <p>An input control for specifying a date and time value where the format depends on the locale.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. Please use dedicated <a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a> control create date-time input.</span></p>
             */
            DatetimeLocale = "DatetimeLocale",
            /**
             * <p>A text field for specifying an email address. Brings up a keyboard optimized for email address entry.</p>
             */
            Email = "Email",
            /**
             * <p>An input control for selecting a month.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. There is no cross-platform support. Please do not use this Input type.</span></p>
             */
            Month = "Month",
            /**
             * <p>A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.</p>
             */
            Number = "Number",
            /**
             * <p>Password input where the user entry cannot be seen.</p>
             */
            Password = "Password",
            /**
             * <p>A text field for specifying a phone number. Brings up a phone pad keyboard.</p>
             */
            Tel = "Tel",
            /**
             * <p>default (text)</p>
             */
            Text = "Text",
            /**
             * <p>An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. Please use dedicated <a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a> control to create time input.</span></p>
             */
            Time = "Time",
            /**
             * <p>A text field for specifying a URL. Brings up a keyboard optimized for URL entry.</p>
             */
            Url = "Url",
            /**
             * <p>An input control for selecting a week.<span class="sapUiDeprecated"><br>Deprecated as of version 1.9.1. There is no cross-platform support. Please do not use this Input type.</span></p>
             */
            Week = "Week",
        }
        /**
         * <p><p>Interface for controls which can have special behavior inside <code>sap.m.OverflowToolbar</code>. Controls that implement this interface must provide a <code>getOverflowToolbarConfig</code> method that accepts no arguments and returns an object with the following fields: <ul> <li><code>canOverflow</code> - A boolean that tells whether the control can move to the overflow menu or not.</p><p><b>Note:</b> Even if <code>canOverflow</code> is set to <code>false</code>, the <code>propsUnrelatedToSize</code> field is taken into account, allowing to optimize the behavior of controls that do not need to overflow, but are used in an <code>sap.m.OverflowToolbar</code> regardless.</li></p><p><li><code>autoCloseEvents</code> - An array of strings, listing all of the control's events that should trigger the closing of the overflow menu, when fired.</li></p><p><li><code>invalidationEvents</code> - An array of strings, listing all of the control's events that should trigger the invalidation of the <code>sap.m.OverflowToolbar</code>, when fired.</li></p><p><li><code>propsUnrelatedToSize</code> - An array of strings, listing all of the control's properties that, when changed, should not cause the overflow toolbar to invalidate.</p><p><b>Note:</b> By default <code>sap.m.OverflowToolbar</code> invalidates whenever any property of a child control changes. This is to ensure that whenever the size of a child control changes, the overflow toolbar's layout is recalculated. Some properties however do not affect control size, making it unnecessary to invalidate the overflow toolbar when they change. You can list them here for optimization purposes.</li></p><p><li><code>onBeforeEnterOverflow(oControl)</code> - A callback function that will be invoked before moving the control into the overflow menu. The control instance will be passed as an argument.</p><p><b>Note:</b> The context of the function is not the control instance (use the <code>oControl</code> parameter for this purpose), but rather an internal helper object, associated with the current <code>sap.m.OverflowToolbar</code> instance. This object only needs to be manipulated in special cases (e.g. when you want to store state on it, rather than on the control instance).</li></p><p><li><code>onAfterExitOverflow(oControl)</code> - A callback function that will be invoked after taking the control out of the overflow menu (before moving it back to the toolbar itself). The control instance will be passed as an argument.</p><p><b>Note:</b> See: <code>onBeforeEnterOverflow</code> for details about the function's context.</li></p><p><li><code>getCustomImportance()</code> - A function that, if provided, will be called to determine the priority of the control. This function must return a value of type <code>sap.m.OverflowToolbarPriority</code>. The string "Medium" is also accepted and interpreted as priority between <code>Low</code> and <code>High</code>.</p><p><b>Note:</b> Normally priority in <code>sap.m.OverflowToolbar</code> is managed with the <code>priority</code> property of <code>sap.m.OverflowToolbarLayoutData</code>. However, some controls may have other means of defining priority, such as dedicated properties or other types of layout data for that purpose. In summary, implementing this function allows a control to override the default priority logic (<code>sap.m.OverflowToolbarLayoutData</code>) by providing its own.</li> </ul></p><p><b>Important:</b> In addition, the control can implement a CSS class, scoped with the <code>.sapMOverflowToolbarMenu-CTX</code> context selector, that will be applied whenever the control is inside the overflow menu. For example, to make your control take up the whole width of the overflow menu, you can add a context class to your control's base CSS file like this:</p><p><pre>
              .sapMOverflowToolbarMenu-CTX .sapMyControlClass {
                    width: 100%;
              }
          </pre></p></p>
         */
        export interface IOverflowToolbarContent {
        }
        /**
         * <p><p>Marker interface for flexible controls that have a special behavior inside <code>sap.m.OverflowToolbar</code>.</p></p>
         */
        export interface IOverflowToolbarFlexibleContent {
        }
        /**
         * <p><p>Interface for controls which are suitable as a Scale for the Slider/RangeSlider. Implementation of this interface should implement the following methods: <ul> <li><code>getTickmarksBetweenLabels</code></li> <li><code>calcNumberOfTickmarks</code></li> <li><code>handleResize</code></li> <li><code>getLabel</code></li> </ul></p></p>
         */
        export interface IScale {
        }
        /**
         * <p>Provides a textual label for other controls.</p><h3>Overview</h3><p> Labels are used as titles for single controls or groups of controls. Labels for required fields are marked with an asterisk.</p><p>Label appearance can be influenced by properties, such as <code>textAlign</code>, <code>design</code>, <code>displayOnly</code>, <code>wrapping</code> and <code>wrappingType</code>.</p><p>As of version 1.50, the default value of the <code>wrapping</code> property is set to <code>false</code>.</p><p>As of version 1.60, you can hyphenate the label's text with the use of the <code>wrappingType</code> property. For more information, see <a target="_self" href="#/topic/6322164936f047de941ec522b95d7b70">Text Controls Hyphenation</a>.</p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>It's recommended to use the <code>Label</code> in Form controls.</li> <li>Use title case for labels.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li> It is not recommended to use labels in Bold.</li> </ul></p>
         */
        export class Label extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Label.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Provides the current accessibility state of the control.<br><br>References: <ul><li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/getAccessibilityInfo">sap.ui.core.Control#getAccessibilityInfo</a>.</li></ul></p>
             * @returns any <p>AccessibilityInfo of the <code>sap.m.Label</code></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Label/methods/getDesign">design</a>.</p><p>Sets the design of a Label to either Standard or Bold.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.LabelDesign <p>Value of property <code>design</code></p>
             */
            getDesign(): sap.m.LabelDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.Label/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines if the label is in displayOnly mode.</p><p><b>Note:</b> This property should be used only in Form controls in preview mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>displayOnly</code></p>
             */
            getDisplayOnly(): boolean;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelFor" href="#/api/sap.m.Label/methods/getLabelFor">labelFor</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getLabelFor(): sap.ui.core.ID;
            /**
             * <p>Enables the <code>sap.m.Label</code> to move inside the sap.m.OverflowToolbar. Required by the <a target="_self" class="jsdoclink" href="#/api/sap.m.IOverflowToolbarContent">sap.m.IOverflowToolbarContent</a> interface.</p>
             * @returns any <p>Configuration information for the <code>sap.m.IOverflowToolbarContent</code> interface.</p>
             */
            getOverflowToolbarConfig(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.Label/methods/getRequired">required</a>.</p><p>Indicates that user input is required for input control labeled by the sap.m.Label. When the property is set to true and associated input field is empty an asterisk character is added to the label text.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>required</code></p>
             */
            getRequired(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Label/methods/getText">text</a>.</p><p>Determines the Label text to be displayed.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Label/methods/getTextAlign">textAlign</a>.</p><p>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Label/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.Label/methods/getVAlign">vAlign</a>.</p><p>Specifies the vertical alignment of the <code>Label</code> related to the tallest and lowest element on the line.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.VerticalAlign <p>Value of property <code>vAlign</code></p>
             */
            getVAlign(): sap.ui.core.VerticalAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Label/methods/getWidth">width</a>.</p><p>Determines the width of the label.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Label/methods/getWrapping">wrapping</a>.</p><p>Determines the wrapping of the text within the <code>Label</code>. If set to true the <code>Label</code> will wrap, when set to false the <code>Label</code> will be truncated and replaced with ellipsis which is the default behavior.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Label/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>Default value is <code>Normal</code>.</p>
             * @returns sap.m.WrappingType <p>Value of property <code>wrappingType</code></p>
             */
            getWrappingType(): sap.m.WrappingType;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Label/methods/getDesign">design</a>.</p><p>Sets the design of a Label to either Standard or Bold.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.m.LabelDesign} sDesign <p>New value for property <code>design</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDesign(sDesign: sap.m.LabelDesign): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.Label/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines if the label is in displayOnly mode.</p><p><b>Note:</b> This property should be used only in Form controls in preview mode.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisplayOnly <p>New value for property <code>displayOnly</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayOnly(bDisplayOnly: boolean): sap.m.Label;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelFor" href="#/api/sap.m.Label/methods/getLabelFor">labelFor</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oLabelFor <p>ID of an element which becomes the new target of this labelFor association; alternatively, an element instance may be given</p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabelFor(oLabelFor: sap.ui.core.ID | sap.ui.core.Control): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.Label/methods/getRequired">required</a>.</p><p>Indicates that user input is required for input control labeled by the sap.m.Label. When the property is set to true and associated input field is empty an asterisk character is added to the label text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRequired <p>New value for property <code>required</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRequired(bRequired: boolean): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Label/methods/getText">text</a>.</p><p>Determines the Label text to be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Label/methods/getTextAlign">textAlign</a>.</p><p>Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Label/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVAlign" href="#/api/sap.m.Label/methods/getVAlign">vAlign</a>.</p><p>Specifies the vertical alignment of the <code>Label</code> related to the tallest and lowest element on the line.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.VerticalAlign} sVAlign <p>New value for property <code>vAlign</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVAlign(sVAlign: sap.ui.core.VerticalAlign): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Label/methods/getWidth">width</a>.</p><p>Determines the width of the label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Label/methods/getWrapping">wrapping</a>.</p><p>Determines the wrapping of the text within the <code>Label</code>. If set to true the <code>Label</code> will wrap, when set to false the <code>Label</code> will be truncated and replaced with ellipsis which is the default behavior.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.Label;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Label/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Normal</code>.</p>
             * @param {sap.m.WrappingType} sWrappingType <p>New value for property <code>wrappingType</code></p>
             * @returns sap.m.Label <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrappingType(sWrappingType: sap.m.WrappingType): sap.m.Label;
        }
        /**
         * <p><p>Available label display modes.</p></p>
         */
        export enum LabelDesign {
            /**
             * <p>Displays the label in bold.</p>
             */
            Bold = "Bold",
            /**
             * <p>Displays the label in normal mode.</p>
             */
            Standard = "Standard",
        }
        /**
         * <p>Represents a popup containing an image and a footer.</p><h3>Overview</h3><p>The purpose of the control is to display an image in its original size as long as this is possible. On smaller screens images are scaled down to fit.</p><p><strong>Notes:</strong> <ul> <li>If the image doesn't load in 10 seconds, an error is displayed.</li> <li>Setting the <code>imageContent</code> aggregation of the control as well as the source of the image and the title of the image is <u>mandatory</u>. If the image source is not set, the control will not open.</li> </ul> </p><h3>Structure</h3><p>Each LightBox holds a <a target="_self" class="jsdoclink" href="#/api/sap.m.LightBoxItem">LightBoxItem</a> which keeps the properties of the image: <ul> <li> imageSrc - The source URI of the image </li> <li> title - The title of the image </li> <li> subtitle - The subtitle of the image </li> <li> alt - The alt text of the image </li> </ul> </p><h3>Usage</h3><p>The most common use case is to click on an image thumbnail to view it in bigger size. When the image that should be displayed in the control cannot be loaded, an error is displayed in the popup.</p><h3>Responsive Behavior</h3><p>On a mobile device, flipping the device to landscape will flip the lightbox and the image will be adjusted to fit the new dimensions.</p><h3>Additional Information</h3><p>Check out the <a href="/#docs/api/symbols/sap.m.LightBox.html" >API Reference</a>.</p>
         */
        export class LightBox extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new LightBox.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some imageContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p>
             * @param {sap.m.LightBoxItem} oImageContent <p>The imageContent to add; if empty, nothing is inserted</p>
             * @returns sap.m.LightBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addImageContent(oImageContent: sap.m.LightBoxItem): sap.m.LightBox;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.LightBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindImageContent(oBindingInfo: any): sap.m.LightBox;
            /**
             * <p>Closes the LightBox.</p>
             * @returns sap.m.LightBox <p>Pointer to the control instance for chaining.</p>
             */
            close(): sap.m.LightBox;
            /**
             * <p>Destroys all the imageContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p>
             * @returns sap.m.LightBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyImageContent(): sap.m.LightBox;
            /**
             * <p>Detaches all handlers and destroys the instance.</p>
             */
            exit(): void;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p><p>Aggregation which holds data about the image and its description. Although multiple LightBoxItems may be added to this aggregation only the first one in the list will be taken into account.</p>
             * @returns sap.m.LightBoxItem[] 
             */
            getImageContent(): sap.m.LightBoxItem[];
            /**
             * <p>Checks for the provided <code>sap.m.LightBoxItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.LightBoxItem} oImageContent <p>The imageContent whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfImageContent(oImageContent: sap.m.LightBoxItem): number;
            /**
             * <p>Sets up the initial values of the control.</p>
             */
            protected init(): void;
            /**
             * <p>Inserts a imageContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p>
             * @param {sap.m.LightBoxItem} oImageContent <p>The imageContent to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the imageContent should be inserted at; for a negative value of <code>iIndex</code>, the imageContent is inserted at position 0; for a value greater than the current size of the aggregation, the imageContent is inserted at the last position</p>
             * @returns sap.m.LightBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertImageContent(oImageContent: sap.m.LightBoxItem, iIndex: number): sap.m.LightBox;
            /**
             * <p>Returns if the LightBox is open.</p>
             * @returns boolean <p>Is the LightBox open</p>
             */
            isOpen(): boolean;
            /**
             * <p>Overwrites the onAfterRendering.</p>
             */
            onAfterRendering(): void;
            /**
             * <p>Overwrites the onBeforeRendering.</p>
             */
            onBeforeRendering(): void;
            /**
             * <p>Opens the LightBox.</p>
             * @returns sap.m.LightBox <p>Pointer to the control instance for chaining.</p>
             */
            open(): sap.m.LightBox;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.LightBoxItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllImageContent(): sap.m.LightBoxItem[];
            /**
             * <p>Removes a imageContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a>.</p>
             * @param {number | string | sap.m.LightBoxItem} vImageContent <p>The imageContent to remove or its index or id</p>
             * @returns sap.m.LightBoxItem <p>The removed imageContent or <code>null</code></p>
             */
            removeImageContent(vImageContent: number | string | sap.m.LightBoxItem): sap.m.LightBoxItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageContent" href="#/api/sap.m.LightBox/methods/getImageContent">imageContent</a> from model data.</p>
             * @returns sap.m.LightBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindImageContent(): sap.m.LightBox;
        }
        /**
         * <p>Represents an item which is displayed within an sap.m.LightBox. This item holds all properties of the image as well as the title and subtitle.</p>
         */
        export class LightBoxItem extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new LightBoxItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlt" href="#/api/sap.m.LightBoxItem/methods/getAlt">alt</a>.</p><p>Alt value for the image</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>alt</code></p>
             */
            getAlt(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageSrc" href="#/api/sap.m.LightBoxItem/methods/getImageSrc">imageSrc</a>.</p><p>Source for the image. This property is mandatory. If not set the popup will not open</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>imageSrc</code></p>
             */
            getImageSrc(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubtitle" href="#/api/sap.m.LightBoxItem/methods/getSubtitle">subtitle</a>.</p><p>Subtitle text for the image</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>subtitle</code></p>
             */
            getSubtitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.LightBoxItem/methods/getTitle">title</a>.</p><p>Title text for the image. This property is mandatory.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Sets the alt text of the image.</p>
             * @param {string} alt <p>The alt text</p>
             * @returns sap.m.LightBoxItem <p>Pointer to the control instance for chaining.</p>
             */
            setAlt(alt: string): sap.m.LightBoxItem;
            /**
             * <p>Sets the source of the image.</p>
             * @param {sap.ui.core.URI} sImageSrc <p>The image URI</p>
             * @returns sap.m.LightBoxItem <p>Pointer to the control instance for chaining.</p>
             */
            setImageSrc(sImageSrc: sap.ui.core.URI): sap.m.LightBoxItem;
            /**
             * <p>Sets the subtitle of the image.</p>
             * @param {string} subtitleText <p>The image subtitle</p>
             * @returns sap.m.LightBoxItem <p>Pointer to the control instance for chaining.</p>
             */
            setSubtitle(subtitleText: string): sap.m.LightBoxItem;
            /**
             * <p>Sets the title of the image.</p>
             * @param {string} title <p>The image title</p>
             * @returns sap.m.LightBoxItem <p>Pointer to the control instance for chaining.</p>
             */
            setTitle(title: string): sap.m.LightBoxItem;
        }
        /**
         * <p><p>Types of LightBox loading stages.</p></p>
         */
        export enum LightBoxLoadingStates {
            /**
             * <p>The LightBox image could not load.</p>
             */
            Error = "Error",
            /**
             * <p>The LightBox image has loaded.</p>
             */
            Loaded = "Loaded",
            /**
             * <p>The LightBox image is still loading.</p>
             */
            Loading = "Loading",
            /**
             * <p>The LightBox image has timed out, could not load.</p>
             */
            TimeOutError = "TimeOutError",
        }
        /**
         * <p>A hyperlink control used to navigate to other apps and web pages or to trigger actions.</p><h3>Overview</h3><p>The <code>Link</code> control is a clickable text element visualized in such a way that it stands out from the standard text. On hover, it changes its style to underlined text to provide additional feedback to the user.</p><h3>Usage</h3><p>You can set the <code>Link</code> to be enabled or disabled.</p><p>To create a visual hierarchy in large lists of links, you can set the less important links as <code>subtle</code> or the more important ones as <code>emphasized</code>.</p><p>To specify where the linked content is opened, you can use the <code>target</code> property.</p><h3>Responsive behavior</h3><p>If there is not enough space, the text of the <code>Link</code> becomes truncated. If the <code>wrapping</code> property is set to <code>true</code>, the text will be displayed on several lines, instead of being truncated.</p>
         */
        export class Link extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>Link</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Link/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Link;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Link/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Link;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Link/events/press">press</a> event of this <code>sap.m.Link</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Link</code> itself.</p><p>Event is fired when the user triggers the link control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Link</code> itself</p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Link;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Link/events/press">press</a> event of this <code>sap.m.Link</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Link;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Link/events/press">press</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected firePress(mParameters?: any): boolean;
            /**
             * <p>Returns the <code>sap.m.Link</code> accessibility information.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.Link</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Link/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Link/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.m.Link/methods/getEmphasized">emphasized</a>.</p><p>Emphasized links look visually more important than regular links.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>emphasized</code></p>
             */
            getEmphasized(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Link/methods/getEnabled">enabled</a>.</p><p>Determines whether the link can be triggered by the user.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHref" href="#/api/sap.m.Link/methods/getHref">href</a>.</p><p>Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the <code>press</code> event should be registered.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>href</code></p>
             */
            getHref(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubtle" href="#/api/sap.m.Link/methods/getSubtle">subtle</a>.</p><p>Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>subtle</code></p>
             */
            getSubtle(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.Link/methods/getTarget">target</a>.</p><p>Specifies a target where the linked content will open.</p><p>Options are the standard values for window.open() supported by browsers: <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered. This property is only used when the <code>href</code> property is set.</p>
             * @returns string <p>Value of property <code>target</code></p>
             */
            getTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Link/methods/getText">text</a>.</p><p>Defines the displayed link text.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Link/methods/getTextAlign">textAlign</a>.</p><p>Determines the horizontal alignment of the text.</p><p>Default value is <code>Initial</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Link/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidateUrl" href="#/api/sap.m.Link/methods/getValidateUrl">validateUrl</a>.</p><p>Defines whether the link target URI should be validated.</p><p>If validation fails, the value of the <code>href</code> property will still be set, but will not be applied to the DOM.</p><p><b>Note:</b> Additional whitelisting of URLs is allowed through <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Fsecurity%2FURLWhitelist">URLWhitelist</a>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>validateUrl</code></p>
             */
            getValidateUrl(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Link/methods/getWidth">width</a>.</p><p>Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Link/methods/getWrapping">wrapping</a>.</p><p>Determines whether the link text is allowed to wrap when there is no sufficient space.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Link/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Link/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Link/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Link/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.m.Link/methods/getEmphasized">emphasized</a>.</p><p>Emphasized links look visually more important than regular links.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEmphasized <p>New value for property <code>emphasized</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEmphasized(bEmphasized: boolean): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Link/methods/getEnabled">enabled</a>.</p><p>Determines whether the link can be triggered by the user.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHref" href="#/api/sap.m.Link/methods/getHref">href</a>.</p><p>Defines the link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the <code>press</code> event should be registered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sHref <p>New value for property <code>href</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHref(sHref: sap.ui.core.URI): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubtle" href="#/api/sap.m.Link/methods/getSubtle">subtle</a>.</p><p>Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSubtle <p>New value for property <code>subtle</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubtle(bSubtle: boolean): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.Link/methods/getTarget">target</a>.</p><p>Specifies a target where the linked content will open.</p><p>Options are the standard values for window.open() supported by browsers: <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered. This property is only used when the <code>href</code> property is set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTarget <p>New value for property <code>target</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTarget(sTarget: string): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Link/methods/getText">text</a>.</p><p>Defines the displayed link text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Link/methods/getTextAlign">textAlign</a>.</p><p>Determines the horizontal alignment of the text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Initial</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Link/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidateUrl" href="#/api/sap.m.Link/methods/getValidateUrl">validateUrl</a>.</p><p>Defines whether the link target URI should be validated.</p><p>If validation fails, the value of the <code>href</code> property will still be set, but will not be applied to the DOM.</p><p><b>Note:</b> Additional whitelisting of URLs is allowed through <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Fsecurity%2FURLWhitelist">URLWhitelist</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bValidateUrl <p>New value for property <code>validateUrl</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidateUrl(bValidateUrl: boolean): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Link/methods/getWidth">width</a>.</p><p>Determines the width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Link;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Link/methods/getWrapping">wrapping</a>.</p><p>Determines whether the link text is allowed to wrap when there is no sufficient space.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.Link <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.Link;
        }
        /**
         * <p><p>Enumeration for possible link-to-anchor conversion strategy.</p></p>
         */
        export enum LinkConversion {
            /**
             * <p>Valid links with protocols, such as http, https, ftp and those starting with the string "www".</p>
             */
            All = "All",
            /**
             * <p>Default mode (no conversion).</p>
             */
            None = "None",
            /**
             * <p>Valid links with protocols, such as http, https, ftp.</p>
             */
            ProtocolOnly = "ProtocolOnly",
        }
        /**
         * <p>The List control provides a container for all types of list items. For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..</p><p>See section "<a target="_self" href="#/topic/1da158152f644ba1ad408a3e982fd3df">Lists</a>" in the documentation for an introduction to <code>sap.m.List</code> control.</p>
         */
        export class List extends sap.m.ListBase {
            /**
             * <p>Constructor for a new List.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.List/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.</p><p>Default value is <code>Solid</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.List/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Solid</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.List <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.List;
        }
        /**
         * <p>The <code>sap.m.ListBase</code> control provides a base functionality of the <code>sap.m.List</code> and <code>sap.m.Table</code> controls. Selection, deletion, unread states and inset style are also maintained in <code>sap.m.ListBase</code>.</p><p>See section "<a target="_self" href="#/topic/295e44b2d0144318bcb7bdd56bfa5189">List, List Item, and Table</a>" in the documentation for an introduction to subclasses of <code>sap.m.ListBase</code> control.</p><p><b>Note:</b> The ListBase including all contained items may be completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists that contain many items. As such the usage of a list is not recommended for these use cases.</p>
         */
        export class ListBase extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ListBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ListBase;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.ListItemBase): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fired when the context menu is opened. When the context menu is opened, the binding context of the item is set to the given <code>contextMenu</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpenContextMenu(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.ListBase/events/delete">delete</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires when delete icon is pressed by user.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDelete(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.ListBase/events/itemPress">itemPress</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ListBase/events/selectionChange">selectionChange</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires when selection is changed via user interaction inside the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="swipe" href="#/api/sap.m.ListBase/events/swipe">swipe</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires after user's swipe action and before the <code>swipeContent</code> is shown. On the <code>swipe</code> event handler, <code>swipeContent</code> can be changed according to the swiped item. Calling the <code>preventDefault</code> method of the event cancels the swipe action.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSwipe(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFinished" href="#/api/sap.m.ListBase/events/updateFinished">updateFinished</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires after <code>items</code> binding is updated and processed by the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUpdateFinished(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateStarted" href="#/api/sap.m.ListBase/events/updateStarted">updateStarted</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fires before <code>items</code> binding is updated (e.g. sorting, filtering)</p><p><b>Note:</b> Event handler should not invalidate the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUpdateStarted(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.ListBase;
            /**
             * <p>Destroys the contextMenu in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContextMenu" href="#/api/sap.m.ListBase/methods/getContextMenu">contextMenu</a>.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContextMenu(): sap.m.ListBase;
            /**
             * <p>Destroys the headerToolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.ListBase/methods/getHeaderToolbar">headerToolbar</a>.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderToolbar(): sap.m.ListBase;
            /**
             * <p>Destroys the infoToolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.ListBase/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyInfoToolbar(): sap.m.ListBase;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.ListBase;
            /**
             * <p>Destroys the swipeContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSwipeContent" href="#/api/sap.m.ListBase/methods/getSwipeContent">swipeContent</a>.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySwipeContent(): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpenContextMenu(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.ListBase/events/delete">delete</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDelete(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.ListBase/events/itemPress">itemPress</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemPress(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ListBase/events/selectionChange">selectionChange</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="swipe" href="#/api/sap.m.ListBase/events/swipe">swipe</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSwipe(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFinished" href="#/api/sap.m.ListBase/events/updateFinished">updateFinished</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUpdateFinished(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateStarted" href="#/api/sap.m.ListBase/events/updateStarted">updateStarted</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUpdateStarted(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireBeforeOpenContextMenu(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.ListBase/events/delete">delete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDelete(mParameters?: any): sap.m.ListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.ListBase/events/itemPress">itemPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemPress(mParameters?: any): sap.m.ListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.ListBase/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.ListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="swipe" href="#/api/sap.m.ListBase/events/swipe">swipe</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireSwipe(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFinished" href="#/api/sap.m.ListBase/events/updateFinished">updateFinished</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUpdateFinished(mParameters?: any): sap.m.ListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateStarted" href="#/api/sap.m.ListBase/events/updateStarted">updateStarted</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUpdateStarted(mParameters?: any): sap.m.ListBase;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContextMenu" href="#/api/sap.m.ListBase/methods/getContextMenu">contextMenu</a>.</p><p>Defines the context menu of the items.</p>
             * @returns sap.ui.core.IContextMenu 
             */
            getContextMenu(): sap.ui.core.IContextMenu;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableBusyIndicator" href="#/api/sap.m.ListBase/methods/getEnableBusyIndicator">enableBusyIndicator</a>.</p><p>When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished. By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enableBusyIndicator</code></p>
             */
            getEnableBusyIndicator(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterText" href="#/api/sap.m.ListBase/methods/getFooterText">footerText</a>.</p><p>Defines the footer text that appears in the control.</p>
             * @returns string <p>Value of property <code>footerText</code></p>
             */
            getFooterText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.ListBase/methods/getGrowing">growing</a>.</p><p>If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model. <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>growing</code></p>
             */
            getGrowing(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingDirection" href="#/api/sap.m.ListBase/methods/getGrowingDirection">growingDirection</a>.</p><p>Defines the direction of the growing feature. If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom. If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.</p><p>Default value is <code>Downwards</code>.</p>
             * @returns sap.m.ListGrowingDirection <p>Value of property <code>growingDirection</code></p>
             */
            getGrowingDirection(): sap.m.ListGrowingDirection;
            /**
             * <p>Returns growing information as object with "actual" and "total" keys. Note: This function returns "null" if "growing" feature is disabled.</p>
             * @returns any 
             */
            getGrowingInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingScrollToLoad" href="#/api/sap.m.ListBase/methods/getGrowingScrollToLoad">growingScrollToLoad</a>.</p><p>If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control. <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>growingScrollToLoad</code></p>
             */
            getGrowingScrollToLoad(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingThreshold" href="#/api/sap.m.ListBase/methods/getGrowingThreshold">growingThreshold</a>.</p><p>Defines the number of items to be requested from the model for each grow. This property can only be used if the <code>growing</code> property is set to <code>true</code>.</p><p>Default value is <code>20</code>.</p>
             * @returns number <p>Value of property <code>growingThreshold</code></p>
             */
            getGrowingThreshold(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingTriggerText" href="#/api/sap.m.ListBase/methods/getGrowingTriggerText">growingTriggerText</a>.</p><p>Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle. This property can only be used if the <code>growing</code> property is set to <code>true</code>.</p>
             * @returns string <p>Value of property <code>growingTriggerText</code></p>
             */
            getGrowingTriggerText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderText" href="#/api/sap.m.ListBase/methods/getHeaderText">headerText</a>.</p><p>Defines the header text that appears in the control. <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.</p>
             * @returns string <p>Value of property <code>headerText</code></p>
             */
            getHeaderText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.ListBase/methods/getHeaderToolbar">headerToolbar</a>.</p><p>The header area can be used as a toolbar to add extra controls for user interactions. <b>Note:</b> When set, this overwrites the <code>headerText</code> property.</p>
             * @returns sap.m.Toolbar 
             */
            getHeaderToolbar(): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncludeItemInSelection" href="#/api/sap.m.ListBase/methods/getIncludeItemInSelection">includeItemInSelection</a>.</p><p>Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first. <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>includeItemInSelection</code></p>
             */
            getIncludeItemInSelection(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.ListBase/methods/getInfoToolbar">infoToolbar</a>.</p><p>A toolbar that is placed below the header to show extra information to the user.</p>
             * @returns sap.m.Toolbar 
             */
            getInfoToolbar(): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInset" href="#/api/sap.m.ListBase/methods/getInset">inset</a>.</p><p>Defines the indentation of the container. Setting it to <code>true</code> indents the list.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>inset</code></p>
             */
            getInset(): boolean;
            /**
             * <p>Returns ItemNavigation for controls uses List</p>
             * @returns sap.ui.core.delegate.ItemNavigation|undefined 
             */
            protected getItemNavigation(): sap.ui.core.delegate.ItemNavigation | undefined;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p><p>Defines the items contained within this control.</p>
             * @returns sap.m.ListItemBase[] 
             */
            getItems(): sap.m.ListItemBase[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeyboardMode" href="#/api/sap.m.ListBase/methods/getKeyboardMode">keyboardMode</a>.</p><p>Defines keyboard handling behavior of the control.</p><p>Default value is <code>Navigation</code>.</p>
             * @returns sap.m.ListKeyboardMode <p>Value of property <code>keyboardMode</code></p>
             */
            getKeyboardMode(): sap.m.ListKeyboardMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.ListBase/methods/getMode">mode</a>.</p><p>Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.ListMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.ListMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModeAnimationOn" href="#/api/sap.m.ListBase/methods/getModeAnimationOn">modeAnimationOn</a>.</p><p>Defines if animations will be shown while switching between modes.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>modeAnimationOn</code></p>
             */
            getModeAnimationOn(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.ListBase/methods/getNoDataText">noDataText</a>.</p><p>This text is displayed when the control contains no items.</p>
             * @returns string <p>Value of property <code>noDataText</code></p>
             */
            getNoDataText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.ListBase/methods/getRememberSelections">rememberSelections</a>.</p><p>If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering). <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>rememberSelections</code></p>
             */
            getRememberSelections(): boolean;
            /**
             * <p>Returns the binding contexts of the selected items. Note: This method returns an empty array if no databinding is used.</p>
             * @param {boolean} bAll <p>Set true to include even invisible selected items(e.g. the selections from the previous filters). Note: In single selection modes, only the last selected item's binding context is returned in array.</p>
             * @returns object[] 
             */
            getSelectedContexts(bAll: boolean): object[];
            /**
             * <p>Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.</p>
             * @returns sap.m.ListItemBase 
             */
            getSelectedItem(): sap.m.ListItemBase;
            /**
             * <p>Returns an array containing the selected list items. If no items are selected, an empty array is returned.</p>
             * @returns sap.m.ListItemBase[] 
             */
            getSelectedItems(): sap.m.ListItemBase[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNoData" href="#/api/sap.m.ListBase/methods/getShowNoData">showNoData</a>.</p><p>Defines whether or not the text specified in the <code>noDataText</code> property is displayed.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showNoData</code></p>
             */
            getShowNoData(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSeparators" href="#/api/sap.m.ListBase/methods/getShowSeparators">showSeparators</a>.</p><p>Defines which item separator style will be used.</p><p>Default value is <code>All</code>.</p>
             * @returns sap.m.ListSeparators <p>Value of property <code>showSeparators</code></p>
             */
            getShowSeparators(): sap.m.ListSeparators;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowUnread" href="#/api/sap.m.ListBase/methods/getShowUnread">showUnread</a>.</p><p>Activates the unread indicator for all items, if set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showUnread</code></p>
             */
            getShowUnread(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSticky" href="#/api/sap.m.ListBase/methods/getSticky">sticky</a>.</p><p>Defines the section of the control that remains fixed at the top of the page during vertical scrolling as long as the control is in the viewport.</p><p><b>Note:</b> Enabling sticky column headers in List controls will not have any effect.</p><p>There is limited browser support. Browsers that do not support this feature are listed below: <ul> <li>IE</li> <li>Edge lower than version 41 (EdgeHTML 16)</li> <li>Firefox lower than version 59</li> </ul></p><p>There are also some known limitations. A few are given below: <ul> <li>If the control is placed in layout containers that have the <code>overflow: hidden</code> or <code>overflow: auto</code> style definition, this can prevent the sticky elements of the control from becoming fixed at the top of the viewport.</li> <li>If sticky column headers are enabled in the <code>sap.m.Table</code> control, setting focus on the column headers will let the table scroll to the top.</li> <li>A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get an intransparent background color.</li> <li>This feature supports only the default height of the toolbar control.<li> </ul></p>
             * @returns sap.m.Sticky[] <p>Value of property <code>sticky</code></p>
             */
            getSticky(): sap.m.Sticky[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSwipeContent" href="#/api/sap.m.ListBase/methods/getSwipeContent">swipeContent</a>.</p><p>User can swipe to bring in this control on the right hand side of an item. <b>Note:</b> For non-touch devices, this functionality is ignored.</p>
             * @returns sap.ui.core.Control 
             */
            getSwipeContent(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSwipeDirection" href="#/api/sap.m.ListBase/methods/getSwipeDirection">swipeDirection</a>.</p><p>Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.</p><p>Default value is <code>Both</code>.</p>
             * @returns sap.m.SwipeDirection <p>Value of property <code>swipeDirection</code></p>
             */
            getSwipeDirection(): sap.m.SwipeDirection;
            /**
             * <p>Returns swiped list item. When no item is swiped, "null" is returned.</p>
             * @returns sap.m.ListItemBase 
             */
            getSwipedItem(): sap.m.ListItemBase;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ListBase/methods/getWidth">width</a>.</p><p>Sets the width of the control.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.ListItemBase): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.ListItemBase, iIndex: number): sap.m.ListBase;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ListItemBase[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.ListItemBase[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.ListItemBase} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.ListItemBase <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.ListItemBase): sap.m.ListItemBase;
            /**
             * <p>Removes visible selections of the current selection mode.</p>
             * @param {boolean} bAll <p>Since version 1.16.3. This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.</p>
             * @returns sap.m.ListBase 
             */
            removeSelections(bAll: boolean): sap.m.ListBase;
            /**
             * <p>Select all items in "MultiSelection" mode.</p>
             * @returns sap.m.ListBase 
             */
            selectAll(): sap.m.ListBase;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContextMenu" href="#/api/sap.m.ListBase/methods/getContextMenu">contextMenu</a>.</p>
             * @param {sap.ui.core.IContextMenu} oContextMenu <p>The contextMenu to set</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContextMenu(oContextMenu: sap.ui.core.IContextMenu): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableBusyIndicator" href="#/api/sap.m.ListBase/methods/getEnableBusyIndicator">enableBusyIndicator</a>.</p><p>When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished. By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnableBusyIndicator <p>New value for property <code>enableBusyIndicator</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableBusyIndicator(bEnableBusyIndicator: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterText" href="#/api/sap.m.ListBase/methods/getFooterText">footerText</a>.</p><p>Defines the footer text that appears in the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sFooterText <p>New value for property <code>footerText</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooterText(sFooterText: string): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.ListBase/methods/getGrowing">growing</a>.</p><p>If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model. <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGrowing <p>New value for property <code>growing</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowing(bGrowing: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingDirection" href="#/api/sap.m.ListBase/methods/getGrowingDirection">growingDirection</a>.</p><p>Defines the direction of the growing feature. If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom. If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Downwards</code>.</p>
             * @param {sap.m.ListGrowingDirection} sGrowingDirection <p>New value for property <code>growingDirection</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingDirection(sGrowingDirection: sap.m.ListGrowingDirection): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingScrollToLoad" href="#/api/sap.m.ListBase/methods/getGrowingScrollToLoad">growingScrollToLoad</a>.</p><p>If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control. <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGrowingScrollToLoad <p>New value for property <code>growingScrollToLoad</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingScrollToLoad(bGrowingScrollToLoad: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingThreshold" href="#/api/sap.m.ListBase/methods/getGrowingThreshold">growingThreshold</a>.</p><p>Defines the number of items to be requested from the model for each grow. This property can only be used if the <code>growing</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>20</code>.</p>
             * @param {number} iGrowingThreshold <p>New value for property <code>growingThreshold</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingThreshold(iGrowingThreshold: number): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingTriggerText" href="#/api/sap.m.ListBase/methods/getGrowingTriggerText">growingTriggerText</a>.</p><p>Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle. This property can only be used if the <code>growing</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sGrowingTriggerText <p>New value for property <code>growingTriggerText</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingTriggerText(sGrowingTriggerText: string): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderText" href="#/api/sap.m.ListBase/methods/getHeaderText">headerText</a>.</p><p>Defines the header text that appears in the control. <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sHeaderText <p>New value for property <code>headerText</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderText(sHeaderText: string): sap.m.ListBase;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.ListBase/methods/getHeaderToolbar">headerToolbar</a>.</p>
             * @param {sap.m.Toolbar} oHeaderToolbar <p>The headerToolbar to set</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderToolbar(oHeaderToolbar: sap.m.Toolbar): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncludeItemInSelection" href="#/api/sap.m.ListBase/methods/getIncludeItemInSelection">includeItemInSelection</a>.</p><p>Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first. <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bIncludeItemInSelection <p>New value for property <code>includeItemInSelection</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIncludeItemInSelection(bIncludeItemInSelection: boolean): sap.m.ListBase;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.ListBase/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @param {sap.m.Toolbar} oInfoToolbar <p>The infoToolbar to set</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoToolbar(oInfoToolbar: sap.m.Toolbar): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInset" href="#/api/sap.m.ListBase/methods/getInset">inset</a>.</p><p>Defines the indentation of the container. Setting it to <code>true</code> indents the list.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bInset <p>New value for property <code>inset</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInset(bInset: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeyboardMode" href="#/api/sap.m.ListBase/methods/getKeyboardMode">keyboardMode</a>.</p><p>Defines keyboard handling behavior of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Navigation</code>.</p>
             * @param {sap.m.ListKeyboardMode} sKeyboardMode <p>New value for property <code>keyboardMode</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKeyboardMode(sKeyboardMode: sap.m.ListKeyboardMode): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.ListBase/methods/getMode">mode</a>.</p><p>Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.ListMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.ListMode): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModeAnimationOn" href="#/api/sap.m.ListBase/methods/getModeAnimationOn">modeAnimationOn</a>.</p><p>Defines if animations will be shown while switching between modes.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bModeAnimationOn <p>New value for property <code>modeAnimationOn</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setModeAnimationOn(bModeAnimationOn: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.ListBase/methods/getNoDataText">noDataText</a>.</p><p>This text is displayed when the control contains no items.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNoDataText <p>New value for property <code>noDataText</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNoDataText(sNoDataText: string): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.ListBase/methods/getRememberSelections">rememberSelections</a>.</p><p>If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering). <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bRememberSelections <p>New value for property <code>rememberSelections</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRememberSelections(bRememberSelections: boolean): sap.m.ListBase;
            /**
             * <p>Selects or deselects the given list item.</p>
             * @param {sap.m.ListItemBase} oListItem <p>The list item whose selection to be changed. This parameter is mandatory.</p>
             * @param {boolean} bSelect <p>Sets selected status of the list item. Default value is true.</p>
             * @returns sap.m.ListBase 
             */
            setSelectedItem(oListItem: sap.m.ListItemBase, bSelect: boolean): sap.m.ListBase;
            /**
             * <p>Sets a list item to be selected by id. In single mode the method removes the previous selection.</p>
             * @param {string} sId <p>The id of the list item whose selection to be changed.</p>
             * @param {boolean} bSelect <p>Sets selected status of the list item. Default value is true.</p>
             * @returns sap.m.ListBase 
             */
            setSelectedItemById(sId: string, bSelect: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNoData" href="#/api/sap.m.ListBase/methods/getShowNoData">showNoData</a>.</p><p>Defines whether or not the text specified in the <code>noDataText</code> property is displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowNoData <p>New value for property <code>showNoData</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowNoData(bShowNoData: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSeparators" href="#/api/sap.m.ListBase/methods/getShowSeparators">showSeparators</a>.</p><p>Defines which item separator style will be used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>All</code>.</p>
             * @param {sap.m.ListSeparators} sShowSeparators <p>New value for property <code>showSeparators</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSeparators(sShowSeparators: sap.m.ListSeparators): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowUnread" href="#/api/sap.m.ListBase/methods/getShowUnread">showUnread</a>.</p><p>Activates the unread indicator for all items, if set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowUnread <p>New value for property <code>showUnread</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowUnread(bShowUnread: boolean): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSticky" href="#/api/sap.m.ListBase/methods/getSticky">sticky</a>.</p><p>Defines the section of the control that remains fixed at the top of the page during vertical scrolling as long as the control is in the viewport.</p><p><b>Note:</b> Enabling sticky column headers in List controls will not have any effect.</p><p>There is limited browser support. Browsers that do not support this feature are listed below: <ul> <li>IE</li> <li>Edge lower than version 41 (EdgeHTML 16)</li> <li>Firefox lower than version 59</li> </ul></p><p>There are also some known limitations. A few are given below: <ul> <li>If the control is placed in layout containers that have the <code>overflow: hidden</code> or <code>overflow: auto</code> style definition, this can prevent the sticky elements of the control from becoming fixed at the top of the viewport.</li> <li>If sticky column headers are enabled in the <code>sap.m.Table</code> control, setting focus on the column headers will let the table scroll to the top.</li> <li>A transparent toolbar design is not supported for sticky bars. The toolbar will automatically get an intransparent background color.</li> <li>This feature supports only the default height of the toolbar control.<li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.m.Sticky[]} sSticky <p>New value for property <code>sticky</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSticky(sSticky: sap.m.Sticky[]): sap.m.ListBase;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSwipeContent" href="#/api/sap.m.ListBase/methods/getSwipeContent">swipeContent</a>.</p>
             * @param {sap.ui.core.Control} oSwipeContent <p>The swipeContent to set</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSwipeContent(oSwipeContent: sap.ui.core.Control): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSwipeDirection" href="#/api/sap.m.ListBase/methods/getSwipeDirection">swipeDirection</a>.</p><p>Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Both</code>.</p>
             * @param {sap.m.SwipeDirection} sSwipeDirection <p>New value for property <code>swipeDirection</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSwipeDirection(sSwipeDirection: sap.m.SwipeDirection): sap.m.ListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ListBase/methods/getWidth">width</a>.</p><p>Sets the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.ListBase;
            /**
             * <p>After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen. Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.</p>
             * @param {any} oCallback <p>This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.</p>
             * @returns sap.m.ListBase 
             */
            swipeOut(oCallback: any): sap.m.ListBase;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ListBase/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.ListBase;
        }
        /**
         * <p><p>Defines the growing direction of the <code>sap.m.List</code> or <code>sap.m.Table</code>.</p></p>
         */
        export enum ListGrowingDirection {
            /**
             * <p>User has to scroll down to load more items or the growing button is displayed at the bottom.</p>
             */
            Downwards = "Downwards",
            /**
             * <p>User has to scroll up to load more items or the growing button is displayed at the top.</p><p><b>Note:</b> If this option is active, there should not be any other control than <code>sap.m.List</code> inside its <code>ScollContainer</code>.</p>
             */
            Upwards = "Upwards",
        }
        /**
         * <p><p>Defines the different header styles.</p></p>
         */
        export enum ListHeaderDesign {
            /**
             * <p>Plain header style</p>
             */
            Plain = "Plain",
            /**
             * <p>Standard header style</p>
             */
            Standard = "Standard",
        }
        /**
         * <p>ListItemBase contains the base features of all specific list items. <b>Note:</b> If not mentioned otherwise in the individual subclasses, list items must only be used in the <code>items</code> aggregation of <code>sap.m.ListBase</code> controls.</p>
         */
        export class ListItemBase extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ListItemBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Returns the state of the item selection as a boolean<span class="sapUiDeprecated"><br>Deprecated as of version 1.10.2. API Change makes this method unnecessary. Use getSelected method instead.</span></p>
             */
            isSelected: any;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListItemBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ListItemBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailPress" href="#/api/sap.m.ListItemBase/events/detailPress">detailPress</a> event of this <code>sap.m.ListItemBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.</p><p>Fires when the user clicks on the detail button of the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDetailPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ListItemBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ListItemBase/events/press">press</a> event of this <code>sap.m.ListItemBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.</p><p>Fires when the user clicks on the control. <b>Note:</b> This event is not fired when the parent <code>mode</code> is <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to <code>true</code>. If there is an interactive element that handles its own <code>press</code> event then the list item's <code>press</code> event is not fired. Also see <a target="_self" class="jsdoclink" href="#/api/sap.m.ListBase/methods/attachItemPress">sap.m.ListBase#attachItemPress</a>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ListItemBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailPress" href="#/api/sap.m.ListItemBase/events/detailPress">detailPress</a> event of this <code>sap.m.ListItemBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDetailPress(fnFunction: Function, oListener?: any): sap.m.ListItemBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ListItemBase/events/press">press</a> event of this <code>sap.m.ListItemBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.ListItemBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailPress" href="#/api/sap.m.ListItemBase/events/detailPress">detailPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDetailPress(mParameters?: any): sap.m.ListItemBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ListItemBase/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.ListItemBase;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListItemBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Returns the accessibility announcement for the content.</p><p>Hook for the subclasses.</p>
             * @returns string 
             */
            protected getContentAnnouncement(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCounter" href="#/api/sap.m.ListItemBase/methods/getCounter">counter</a>.</p><p>Defines the counter value of the list items.</p>
             * @returns number <p>Value of property <code>counter</code></p>
             */
            getCounter(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHighlight" href="#/api/sap.m.ListItemBase/methods/getHighlight">highlight</a>.</p><p>Defines the highlight state of the list items.</p><p>Valid values for the <code>highlight</code> property are values of the enumerations <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IndicationColor">sap.ui.core.IndicationColor</a>.</p><p>Accessibility support is provided through the associated <a target="_self" class="jsdoclink" href="#/api/sap.m.ListItemBase/methods/setHighlightText">highlightText</a> property. If the <code>highlight</code> property is set to a value of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a>, the <code>highlightText</code> property does not need to be set because a default text is used. However, the default text can be overridden by setting the <code>highlightText</code> property. In all other cases the <code>highlightText</code> property must be set.</p><p>Default value is <code>None</code>.</p>
             * @returns string <p>Value of property <code>highlight</code></p>
             */
            getHighlight(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHighlightText" href="#/api/sap.m.ListItemBase/methods/getHighlightText">highlightText</a>.</p><p>Defines the semantics of the <a target="_self" class="jsdoclink" href="#/api/sap.m.ListItemBase/methods/setHighlight">highlight</a> property for accessibility purposes.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>highlightText</code></p>
             */
            getHighlightText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.ListItemBase/methods/getSelected">selected</a>.</p><p>Defines the selected state of the list items. <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Returns the tabbable DOM elements as a jQuery collection</p>
             * @returns any <p>jQuery object</p>
             */
            protected getTabbables(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.ListItemBase/methods/getType">type</a>.</p><p>Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.</p><p>Default value is <code>Inactive</code>.</p>
             * @returns sap.m.ListType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.ListType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnread" href="#/api/sap.m.ListItemBase/methods/getUnread">unread</a>.</p><p>Activates the unread indicator for the list item, if set to <code>true</code>. <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>unread</code></p>
             */
            getUnread(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.ListItemBase/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListItemBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ListItemBase/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCounter" href="#/api/sap.m.ListItemBase/methods/getCounter">counter</a>.</p><p>Defines the counter value of the list items.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iCounter <p>New value for property <code>counter</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCounter(iCounter: number): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHighlight" href="#/api/sap.m.ListItemBase/methods/getHighlight">highlight</a>.</p><p>Defines the highlight state of the list items.</p><p>Valid values for the <code>highlight</code> property are values of the enumerations <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IndicationColor">sap.ui.core.IndicationColor</a>.</p><p>Accessibility support is provided through the associated <a target="_self" class="jsdoclink" href="#/api/sap.m.ListItemBase/methods/setHighlightText">highlightText</a> property. If the <code>highlight</code> property is set to a value of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a>, the <code>highlightText</code> property does not need to be set because a default text is used. However, the default text can be overridden by setting the <code>highlightText</code> property. In all other cases the <code>highlightText</code> property must be set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {string} sHighlight <p>New value for property <code>highlight</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHighlight(sHighlight: string): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHighlightText" href="#/api/sap.m.ListItemBase/methods/getHighlightText">highlightText</a>.</p><p>Defines the semantics of the <a target="_self" class="jsdoclink" href="#/api/sap.m.ListItemBase/methods/setHighlight">highlight</a> property for accessibility purposes.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sHighlightText <p>New value for property <code>highlightText</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHighlightText(sHighlightText: string): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.ListItemBase/methods/getSelected">selected</a>.</p><p>Defines the selected state of the list items. <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.ListItemBase/methods/getType">type</a>.</p><p>Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inactive</code>.</p>
             * @param {sap.m.ListType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ListType): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnread" href="#/api/sap.m.ListItemBase/methods/getUnread">unread</a>.</p><p>Activates the unread indicator for the list item, if set to <code>true</code>. <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUnread <p>New value for property <code>unread</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUnread(bUnread: boolean): sap.m.ListItemBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.ListItemBase/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.ListItemBase;
        }
        /**
         * <p><p>Defines the keyboard handling behavior of the <code>sap.m.List</code> or <code>sap.m.Table</code>.</p></p>
         */
        export enum ListKeyboardMode {
            /**
             * <p>This mode is suitable if the number of items is limited and if there are editable fields within the item.</p><p>While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the item </code>.</p>
             */
            Edit = "Edit",
            /**
             * <p>This default mode is suitable if the number of items is unlimited or if there is no editable field within the item.</p><p>While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the <code>sap.m.List</code> or <code>sap.m.Table</code>.</p>
             */
            Navigation = "Navigation",
        }
        /**
         * <p><p>Defines the mode of the list.</p></p>
         */
        export enum ListMode {
            /**
             * <p>Delete mode (only one list item can be deleted via provided delete button)</p>
             */
            Delete = "Delete",
            /**
             * <p>Multi selection mode (more than one list item can be selected).</p>
             */
            MultiSelect = "MultiSelect",
            /**
             * <p>Default mode (no selection).</p>
             */
            None = "None",
            /**
             * <p>Right-positioned single selection mode (only one list item can be selected).</p>
             */
            SingleSelect = "SingleSelect",
            /**
             * <p>Left-positioned single selection mode (only one list item can be selected).</p>
             */
            SingleSelectLeft = "SingleSelectLeft",
            /**
             * <p>Selected item is highlighted but no selection control is visible (only one list item can be selected).</p>
             */
            SingleSelectMaster = "SingleSelectMaster",
        }
        /**
         * <p><p>Defines which separator style will be applied for the items.</p></p>
         */
        export enum ListSeparators {
            /**
             * <p>Separators between the items including the last and the first one.</p>
             */
            All = "All",
            /**
             * <p>Separators between the items. <b>Note:</b> This enumeration depends on the theme.</p>
             */
            Inner = "Inner",
            /**
             * <p>No item separators.</p>
             */
            None = "None",
        }
        /**
         * <p><p>Defines the visual indication and behaviour of the list items.</p></p>
         */
        export enum ListType {
            /**
             * <p>Indicates that the item is clickable via active feedback when item is pressed.</p>
             */
            Active = "Active",
            /**
             * <p>Enables detail button of the list item that fires <code>detailPress</code> event. Also see <a target="_self" class="jsdoclink" href="#/api/sap.m.ListItemBase/methods/attachDetailPress">sap.m.ListItemBase#attachDetailPress</a>.</p>
             */
            Detail = "Detail",
            /**
             * <p>Enables <a target="_self" class="jsdoclink" href="#/api/sap.m.ListType.Detail">sap.m.ListType.Detail</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.ListType.Active">sap.m.ListType.Active</a> enumerations together.</p>
             */
            DetailAndActive = "DetailAndActive",
            /**
             * <p>Indicates the list item does not have any active feedback when item is pressed. <b>Note:</b> <code>Inactive</code> type cannot be used to disable list items.</p>
             */
            Inactive = "Inactive",
            /**
             * <p>Indicates the list item is navigable to show extra information about the item.</p>
             */
            Navigation = "Navigation",
        }
        /**
         * <p><p>Enumeration of possible load statuses.</p></p>
         */
        export enum LoadState {
            /**
             * <p>The control is disabled.</p>
             */
            Disabled = "Disabled",
            /**
             * <p>The control failed to load.</p>
             */
            Failed = "Failed",
            /**
             * <p>The control has loaded.</p>
             */
            Loaded = "Loaded",
            /**
             * <p>The control is loading.</p>
             */
            Loading = "Loading",
        }
        /**
         * <p>The <code>sap.m.MaskInput</code> control allows users to easily enter data in a certain format and in a fixed-width input (for example: date, time, phone number, credit card number, currency, IP address, MAC address, and others).</p>
         */
        export class MaskInput extends sap.m.InputBase {
            /**
             * <p>Constructor for a new MaskInput.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some rule to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule to add; if empty, nothing is inserted</p>
             * @returns sap.m.MaskInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addRule(oRule: sap.m.MaskInputRule): sap.m.MaskInput;
            /**
             * <p>Destroys all the rules in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p>
             * @returns sap.m.MaskInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyRules(): sap.m.MaskInput;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMask" href="#/api/sap.m.MaskInput/methods/getMask">mask</a>.</p><p>Mask defined by its characters type (respectively, by its length). You should consider the following important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique char). Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior. 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable one.</p>
             * @returns string <p>Value of property <code>mask</code></p>
             */
            getMask(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholderSymbol" href="#/api/sap.m.MaskInput/methods/getPlaceholderSymbol">placeholderSymbol</a>.</p><p>Defines a placeholder symbol. Shown at the position where there is no user input yet.</p><p>Default value is <code>_</code>.</p>
             * @returns string <p>Value of property <code>placeholderSymbol</code></p>
             */
            getPlaceholderSymbol(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p><p>A list of validation rules (one rule per mask character).</p>
             * @returns sap.m.MaskInputRule[] 
             */
            getRules(): sap.m.MaskInputRule[];
            /**
             * <p>Checks for the provided <code>sap.m.MaskInputRule</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfRule(oRule: sap.m.MaskInputRule): number;
            /**
             * <p>Inserts a rule into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the rule should be inserted at; for a negative value of <code>iIndex</code>, the rule is inserted at position 0; for a value greater than the current size of the aggregation, the rule is inserted at the last position</p>
             * @returns sap.m.MaskInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertRule(oRule: sap.m.MaskInputRule, iIndex: number): sap.m.MaskInput;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.MaskInputRule[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllRules(): sap.m.MaskInputRule[];
            /**
             * <p>Removes a rule from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.MaskInput/methods/getRules">rules</a>.</p>
             * @param {number | string | sap.m.MaskInputRule} vRule <p>The rule to remove or its index or id</p>
             * @returns sap.m.MaskInputRule <p>The removed rule or <code>null</code></p>
             */
            removeRule(vRule: number | string | sap.m.MaskInputRule): sap.m.MaskInputRule;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMask" href="#/api/sap.m.MaskInput/methods/getMask">mask</a>.</p><p>Mask defined by its characters type (respectively, by its length). You should consider the following important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique char). Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior. 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable one.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMask <p>New value for property <code>mask</code></p>
             * @returns sap.m.MaskInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMask(sMask: string): sap.m.MaskInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholderSymbol" href="#/api/sap.m.MaskInput/methods/getPlaceholderSymbol">placeholderSymbol</a>.</p><p>Defines a placeholder symbol. Shown at the position where there is no user input yet.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>_</code>.</p>
             * @param {string} sPlaceholderSymbol <p>New value for property <code>placeholderSymbol</code></p>
             * @returns sap.m.MaskInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholderSymbol(sPlaceholderSymbol: string): sap.m.MaskInput;
        }
        /**
         * <p>The <code>sap.m.MaskInputRule</code> control holds the mapping of a single <code>maskFormatSymbol</code> to the regular expression <code>regex</code> that defines the allowed characters for the rule.</p>
         */
        export class MaskInputRule extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new MaskInputRule.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaskFormatSymbol" href="#/api/sap.m.MaskInputRule/methods/getMaskFormatSymbol">maskFormatSymbol</a>.</p><p>Defines the symbol used in the mask format which will accept a certain range of characters.</p><p>Default value is <code>*</code>.</p>
             * @returns string <p>Value of property <code>maskFormatSymbol</code></p>
             */
            getMaskFormatSymbol(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRegex" href="#/api/sap.m.MaskInputRule/methods/getRegex">regex</a>.</p><p>Defines the allowed characters as a regular expression.</p><p>Default value is <code>[a-zA-Z0-9]</code>.</p>
             * @returns string <p>Value of property <code>regex</code></p>
             */
            getRegex(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaskFormatSymbol" href="#/api/sap.m.MaskInputRule/methods/getMaskFormatSymbol">maskFormatSymbol</a>.</p><p>Defines the symbol used in the mask format which will accept a certain range of characters.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>*</code>.</p>
             * @param {string} sMaskFormatSymbol <p>New value for property <code>maskFormatSymbol</code></p>
             * @returns sap.m.MaskInputRule <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaskFormatSymbol(sMaskFormatSymbol: string): sap.m.MaskInputRule;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRegex" href="#/api/sap.m.MaskInputRule/methods/getRegex">regex</a>.</p><p>Defines the allowed characters as a regular expression.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>[a-zA-Z0-9]</code>.</p>
             * @param {string} sRegex <p>New value for property <code>regex</code></p>
             * @returns sap.m.MaskInputRule <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRegex(sRegex: string): sap.m.MaskInputRule;
        }
        /**
         * <p>The <code>sap.m.Menu</code> control represents a hierarchical menu. When opened on mobile devices it occupies the whole screen.</p>
         */
        export class Menu extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Menu.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p>
             * @param {sap.m.MenuItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.MenuItem): sap.m.Menu;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.m.Menu/events/closed">closed</a> event of this <code>sap.m.Menu</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Menu</code> itself.</p><p>Fired when the menu is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachClosed(oData: any, fnFunction: Function, oListener?: any): sap.m.Menu;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelected" href="#/api/sap.m.Menu/events/itemSelected">itemSelected</a> event of this <code>sap.m.Menu</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Menu</code> itself.</p><p>Fired when a <code>MenuItem</code> is selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemSelected(oData: any, fnFunction: Function, oListener?: any): sap.m.Menu;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.Menu;
            /**
             * <p>Closes the <code>Menu</code>.</p>
             */
            close(): void;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.Menu;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.m.Menu/events/closed">closed</a> event of this <code>sap.m.Menu</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachClosed(fnFunction: Function, oListener?: any): sap.m.Menu;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelected" href="#/api/sap.m.Menu/events/itemSelected">itemSelected</a> event of this <code>sap.m.Menu</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemSelected(fnFunction: Function, oListener?: any): sap.m.Menu;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.m.Menu/events/closed">closed</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireClosed(mParameters?: any): sap.m.Menu;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelected" href="#/api/sap.m.Menu/events/itemSelected">itemSelected</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemSelected(mParameters?: any): sap.m.Menu;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p><p>Defines the items contained within this control.</p>
             * @returns sap.m.MenuItem[] 
             */
            getItems(): sap.m.MenuItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Menu/methods/getTitle">title</a>.</p><p>Defines the <code>Menu</code> title.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MenuItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.MenuItem): number;
            /**
             * <p>Initializes the control.</p>
             */
            init(): void;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p>
             * @param {sap.m.MenuItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.MenuItem, iIndex: number): sap.m.Menu;
            /**
             * <p>Opens the menu as a context menu.</p>
             * @param {any | any} oEvent <p>The event object or an object containing offsetX, offsetY values and left, top values of the element's position</p>
             * @param {any} oOpenerRef <p>The reference of the opener</p>
             */
            openAsContextMenu(oEvent: any | any, oOpenerRef: any): void;
            /**
             * <p>Opens the <code>Menu</code> next to the given control.</p>
             * @param {any} oControl <p>The control that defines the position for the menu</p>
             * @param {boolean} bWithKeyboard <p>Whether the menu is opened with a shortcut or not</p>
             * @param {sap.ui.core.Dock} sDockMy <p>The reference docking location of the <code>Menu</code> for positioning the menu on the screen</p>
             * @param {sap.ui.core.Dock} sDockAt <p>The <code>oControl</code> reference docking location for positioning the menu on the screen</p>
             * @param {string} sOffset <p>The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" is RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.</p>
             */
            openBy(oControl: any, bWithKeyboard: boolean, sDockMy?: sap.ui.core.Dock, sDockAt?: sap.ui.core.Dock, sOffset?: string): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.MenuItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.MenuItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.MenuItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.MenuItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.MenuItem): sap.m.MenuItem;
            /**
             * <p>Sets the title of the <code>Menu</code>.</p>
             * @param {String} sTitle <p>The new title of the <code>Menu</code></p>
             * @returns sap.m.Menu <p><code>this</code> to allow method chaining</p>
             */
            setTitle(sTitle: String): sap.m.Menu;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Menu/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.Menu <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.Menu;
        }
        /**
         * <p>The <code>sap.m.MenuButton</code> control enables the user to show a hierarchical menu.</p>
         */
        export class MenuButton extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new MenuButton.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MenuButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.MenuButton;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MenuButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.MenuButton;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="defaultAction" href="#/api/sap.m.MenuButton/events/defaultAction">defaultAction</a> event of this <code>sap.m.MenuButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MenuButton</code> itself.</p><p>Fired when the <code>buttonMode</code> is set to <code>Split</code> and the user presses the main button unless <code>useDefaultActionOnly</code> is set to <code>false</code> and another action from the menu has been selected previously.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MenuButton</code> itself</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDefaultAction(oData: any, fnFunction: Function, oListener?: any): sap.m.MenuButton;
            /**
             * <p>Destroys the menu in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMenu" href="#/api/sap.m.MenuButton/methods/getMenu">menu</a>.</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyMenu(): sap.m.MenuButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="defaultAction" href="#/api/sap.m.MenuButton/events/defaultAction">defaultAction</a> event of this <code>sap.m.MenuButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDefaultAction(fnFunction: Function, oListener?: any): sap.m.MenuButton;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="defaultAction" href="#/api/sap.m.MenuButton/events/defaultAction">defaultAction</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDefaultAction(mParameters?: any): sap.m.MenuButton;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.MenuButton/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (pressed) state of the button. Both active and default icon properties should be defined and of the same type - image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MenuButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MenuButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtonMode" href="#/api/sap.m.MenuButton/methods/getButtonMode">buttonMode</a>.</p><p>Defines whether the <code>MenuButton</code> is set to <code>Regular</code> or <code>Split</code> mode.</p><p>Default value is <code>Regular</code>.</p>
             * @returns sap.m.MenuButtonMode <p>Value of property <code>buttonMode</code></p>
             */
            getButtonMode(): sap.m.MenuButtonMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.MenuButton/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is <code>true</code>). <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MenuButton/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as a graphical element within the button. It can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.MenuButton/methods/getIconDensityAware">iconDensityAware</a>.</p><p>When set to <code>true</code> (default), one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server. If only one version of image is provided, set this value to <code>false</code> to avoid the attempt of fetching density perfect image.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Returns the DOMNode Id to be used for the "labelFor" attribute of the label.</p><p>By default, this is the Id of the control itself.</p>
             * @returns string <p>Id to be used for the <code>labelFor</code></p>
             */
            getIdForLabel(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMenu" href="#/api/sap.m.MenuButton/methods/getMenu">menu</a>.</p><p>Defines the menu that opens for this button.</p>
             * @returns sap.m.Menu 
             */
            getMenu(): sap.m.Menu;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMenuPosition" href="#/api/sap.m.MenuButton/methods/getMenuPosition">menuPosition</a>.</p><p>Specifies the position of the popup menu with enumerated options. By default, the control opens the menu at its bottom left side.</p><p><b>Note:</b> In the case that the menu has no space to show itself in the view port of the current window it tries to open itself to the inverted direction.</p><p>Default value is <code>BeginBottom</code>.</p>
             * @returns sap.ui.core.Popup.Dock <p>Value of property <code>menuPosition</code></p>
             */
            getMenuPosition(): sap.ui.core.Popup.Dock;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.MenuButton/methods/getText">text</a>.</p><p>Defines the text of the <code>MenuButton</code>. <br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with <code>useDefaultActionOnly</code> set to <code>false</code>, the text is changed to display the last selected item's text, while in <code>Regular</code> <code>buttonMode</code> the text stays unchanged.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.MenuButton/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.MenuButton/methods/getType">type</a>.</p><p>Defines the type of the <code>MenuButton</code> (for example, Default, Accept, Reject, Back, etc.)</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.m.ButtonType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.ButtonType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseDefaultActionOnly" href="#/api/sap.m.MenuButton/methods/getUseDefaultActionOnly">useDefaultActionOnly</a>.</p><p>Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected. Usable only if <code>buttonMode</code> is set to <code>Split</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>useDefaultActionOnly</code></p>
             */
            getUseDefaultActionOnly(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.MenuButton/methods/getWidth">width</a>.</p><p>Defines the width of the <code>MenuButton</code>. <br/><b>Note:</b>As per visual design this width can be maximum of 12rem (192px).</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Initializes the control.</p>
             */
            init(): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MenuButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MenuButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MenuButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MenuButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.MenuButton/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (pressed) state of the button. Both active and default icon properties should be defined and of the same type - image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.MenuButton;
            /**
             * <p>Sets the <code>buttonMode</code> of the control.</p>
             * @param {sap.m.MenuButtonMode} sMode <p>The new button mode</p>
             * @returns sap.m.MenuButton <p>This instance</p>
             */
            setButtonMode(sMode: sap.m.MenuButtonMode): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.MenuButton/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is <code>true</code>). <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MenuButton/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as a graphical element within the button. It can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.MenuButton/methods/getIconDensityAware">iconDensityAware</a>.</p><p>When set to <code>true</code> (default), one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server. If only one version of image is provided, set this value to <code>false</code> to avoid the attempt of fetching density perfect image.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.MenuButton;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMenu" href="#/api/sap.m.MenuButton/methods/getMenu">menu</a>.</p>
             * @param {sap.m.Menu} oMenu <p>The menu to set</p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMenu(oMenu: sap.m.Menu): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMenuPosition" href="#/api/sap.m.MenuButton/methods/getMenuPosition">menuPosition</a>.</p><p>Specifies the position of the popup menu with enumerated options. By default, the control opens the menu at its bottom left side.</p><p><b>Note:</b> In the case that the menu has no space to show itself in the view port of the current window it tries to open itself to the inverted direction.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>BeginBottom</code>.</p>
             * @param {sap.ui.core.Popup.Dock} sMenuPosition <p>New value for property <code>menuPosition</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMenuPosition(sMenuPosition: sap.ui.core.Popup.Dock): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.MenuButton/methods/getText">text</a>.</p><p>Defines the text of the <code>MenuButton</code>. <br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with <code>useDefaultActionOnly</code> set to <code>false</code>, the text is changed to display the last selected item's text, while in <code>Regular</code> <code>buttonMode</code> the text stays unchanged.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.MenuButton/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.MenuButton;
            /**
             * <p>Sets the tooltip for the <code>MenuButton</code>. Can either be an instance of a TooltipBase subclass or a simple string.</p>
             * @param {sap.ui.core.TooltipBase} vTooltip <p>The tooltip that should be shown.</p>
             * @returns any <p>this instance</p>
             */
            setTooltip(vTooltip: sap.ui.core.TooltipBase): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.MenuButton/methods/getType">type</a>.</p><p>Defines the type of the <code>MenuButton</code> (for example, Default, Accept, Reject, Back, etc.)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.m.ButtonType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ButtonType): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseDefaultActionOnly" href="#/api/sap.m.MenuButton/methods/getUseDefaultActionOnly">useDefaultActionOnly</a>.</p><p>Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected. Usable only if <code>buttonMode</code> is set to <code>Split</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUseDefaultActionOnly <p>New value for property <code>useDefaultActionOnly</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUseDefaultActionOnly(bUseDefaultActionOnly: boolean): sap.m.MenuButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.MenuButton/methods/getWidth">width</a>.</p><p>Defines the width of the <code>MenuButton</code>. <br/><b>Note:</b>As per visual design this width can be maximum of 12rem (192px).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.MenuButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.MenuButton;
        }
        /**
         * <p><p>Different modes for a MenuButton (predefined types).</p></p>
         */
        export enum MenuButtonMode {
            /**
             * <p>Default regular type (Menu button appears as a regular button, pressing opens a menu)</p>
             */
            Regular = "Regular",
            /**
             * <p>Split type (Menu button appears as a split button, pressing fires the default action a menu, pressing the arrow part opens a menu)</p>
             */
            Split = "Split",
        }
        /**
         * <p>The <code>MenuItem</code> control is used for creating items for the <code>sap.m.Menu</code>. It is derived from a core <code>sap.ui.core.Item</code>.</p>
         */
        export class MenuItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new <code>MenuItem</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p>
             * @param {sap.m.MenuItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.MenuItem): sap.m.MenuItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="aggregationChanged" href="#/api/sap.m.MenuItem/events/aggregationChanged">aggregationChanged</a> event of this <code>sap.m.MenuItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.</p><p>Fired when aggregation of the item changes.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAggregationChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.MenuItem/events/press">press</a> event of this <code>sap.m.MenuItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.</p><p>Fired after the item has been pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="propertyChanged" href="#/api/sap.m.MenuItem/events/propertyChanged">propertyChanged</a> event of this <code>sap.m.MenuItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.</p><p>Fired when a property of the item changes.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPropertyChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.MenuItem;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.MenuItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="aggregationChanged" href="#/api/sap.m.MenuItem/events/aggregationChanged">aggregationChanged</a> event of this <code>sap.m.MenuItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAggregationChanged(fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.MenuItem/events/press">press</a> event of this <code>sap.m.MenuItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="propertyChanged" href="#/api/sap.m.MenuItem/events/propertyChanged">propertyChanged</a> event of this <code>sap.m.MenuItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPropertyChanged(fnFunction: Function, oListener?: any): sap.m.MenuItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="aggregationChanged" href="#/api/sap.m.MenuItem/events/aggregationChanged">aggregationChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAggregationChanged(mParameters?: any): sap.m.MenuItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.MenuItem/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.MenuItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="propertyChanged" href="#/api/sap.m.MenuItem/events/propertyChanged">propertyChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePropertyChanged(mParameters?: any): sap.m.MenuItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MenuItem/methods/getIcon">icon</a>.</p><p>Defines the icon, which belongs to the item. This can be a URI to an image or an icon font URI.</p>
             * @returns string <p>Value of property <code>icon</code></p>
             */
            getIcon(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p><p>Defines the sub-items contained within this element.</p>
             * @returns sap.m.MenuItem[] 
             */
            getItems(): sap.m.MenuItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartsSection" href="#/api/sap.m.MenuItem/methods/getStartsSection">startsSection</a>.</p><p>Defines whether a visual separator should be rendered before the item. <b>Note:</b> If an item is invisible its separator is also not displayed.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>startsSection</code></p>
             */
            getStartsSection(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.MenuItem/methods/getVisible">visible</a>.</p><p>Defines whether the item should be visible on the screen. If set to <code>false</code>, a placeholder is rendered instead of the real item.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MenuItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.MenuItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p>
             * @param {sap.m.MenuItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.MenuItem, iIndex: number): sap.m.MenuItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.MenuItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.MenuItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.MenuItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.MenuItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.MenuItem): sap.m.MenuItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MenuItem/methods/getIcon">icon</a>.</p><p>Defines the icon, which belongs to the item. This can be a URI to an image or an icon font URI.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: string): sap.m.MenuItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartsSection" href="#/api/sap.m.MenuItem/methods/getStartsSection">startsSection</a>.</p><p>Defines whether a visual separator should be rendered before the item. <b>Note:</b> If an item is invisible its separator is also not displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bStartsSection <p>New value for property <code>startsSection</code></p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStartsSection(bStartsSection: boolean): sap.m.MenuItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.MenuItem/methods/getVisible">visible</a>.</p><p>Defines whether the item should be visible on the screen. If set to <code>false</code>, a placeholder is rendered instead of the real item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.MenuItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MenuItem/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.MenuItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.MenuItem;
        }
        /**
         * <p>A wrapper control used to hold different types of system messages. </p><h3>Structure</h3><p> The message item holds the basic set of properties for a system message: <ul> <li> Type, title, subtitle and description </li> <li> If the description contains markup, the <code>markupDescription</code> needs to be set to true, to ensure it is interpreted correctly. </li> <li> If the long text description can be specified by a URL by setting, the <code>longtextUrl</code> property. </li> <li> The message item can have a single <a target="_self" class="jsdoclink" href="#/api/sap.m.Link">sap.m.Link</a> after the description. It is stored in the <code>link</code> aggregation. </li> </p><h3>Usage</h3><p> <b>Note:</b> The MessageItem control replaces <a target="_self" class="jsdoclink" href="#/api/sap.m.MessagePopoverItem">sap.m.MessagePopoverItem</a> as a more generic wrapper for messages.</p>
         */
        export class MessageItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new MessageItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Destroys the link in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageItem/methods/getLink">link</a>.</p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLink(): sap.m.MessageItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveTitle" href="#/api/sap.m.MessageItem/methods/getActiveTitle">activeTitle</a>.</p><p>Defines whether the title of the item will be interactive.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>activeTitle</code></p>
             */
            getActiveTitle(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCounter" href="#/api/sap.m.MessageItem/methods/getCounter">counter</a>.</p><p>Defines the number of messages for a given message.</p>
             * @returns number <p>Value of property <code>counter</code></p>
             */
            getCounter(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.MessageItem/methods/getDescription">description</a>.</p><p>Specifies detailed description of the message</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupName" href="#/api/sap.m.MessageItem/methods/getGroupName">groupName</a>.</p><p>Name of a message group the current item belongs to.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>groupName</code></p>
             */
            getGroupName(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageItem/methods/getLink">link</a>.</p><p>Adds an sap.m.Link control which will be displayed at the end of the description of a message.</p>
             * @returns sap.m.Link 
             */
            getLink(): sap.m.Link;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLongtextUrl" href="#/api/sap.m.MessageItem/methods/getLongtextUrl">longtextUrl</a>.</p><p>Specifies long text description location URL</p>
             * @returns sap.ui.core.URI <p>Value of property <code>longtextUrl</code></p>
             */
            getLongtextUrl(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkupDescription" href="#/api/sap.m.MessageItem/methods/getMarkupDescription">markupDescription</a>.</p><p>Specifies if description should be interpreted as markup</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>markupDescription</code></p>
             */
            getMarkupDescription(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubtitle" href="#/api/sap.m.MessageItem/methods/getSubtitle">subtitle</a>.</p><p>Specifies the subtitle of the message <b>Note:</b> This is only visible when the <code>title</code> property is not empty.</p>
             * @returns string <p>Value of property <code>subtitle</code></p>
             */
            getSubtitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.MessageItem/methods/getTitle">title</a>.</p><p>Specifies the title of the message</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.MessageItem/methods/getType">type</a>.</p><p>Specifies the type of the message</p><p>Default value is <code>Error</code>.</p>
             * @returns sap.ui.core.MessageType <p>Value of property <code>type</code></p>
             */
            getType(): sap.ui.core.MessageType;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveTitle" href="#/api/sap.m.MessageItem/methods/getActiveTitle">activeTitle</a>.</p><p>Defines whether the title of the item will be interactive.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bActiveTitle <p>New value for property <code>activeTitle</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveTitle(bActiveTitle: boolean): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCounter" href="#/api/sap.m.MessageItem/methods/getCounter">counter</a>.</p><p>Defines the number of messages for a given message.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iCounter <p>New value for property <code>counter</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCounter(iCounter: number): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.MessageItem/methods/getDescription">description</a>.</p><p>Specifies detailed description of the message</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupName" href="#/api/sap.m.MessageItem/methods/getGroupName">groupName</a>.</p><p>Name of a message group the current item belongs to.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sGroupName <p>New value for property <code>groupName</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGroupName(sGroupName: string): sap.m.MessageItem;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageItem/methods/getLink">link</a>.</p>
             * @param {sap.m.Link} oLink <p>The link to set</p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLink(oLink: sap.m.Link): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLongtextUrl" href="#/api/sap.m.MessageItem/methods/getLongtextUrl">longtextUrl</a>.</p><p>Specifies long text description location URL</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sLongtextUrl <p>New value for property <code>longtextUrl</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLongtextUrl(sLongtextUrl: sap.ui.core.URI): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkupDescription" href="#/api/sap.m.MessageItem/methods/getMarkupDescription">markupDescription</a>.</p><p>Specifies if description should be interpreted as markup</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bMarkupDescription <p>New value for property <code>markupDescription</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMarkupDescription(bMarkupDescription: boolean): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubtitle" href="#/api/sap.m.MessageItem/methods/getSubtitle">subtitle</a>.</p><p>Specifies the subtitle of the message <b>Note:</b> This is only visible when the <code>title</code> property is not empty.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSubtitle <p>New value for property <code>subtitle</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubtitle(sSubtitle: string): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.MessageItem/methods/getTitle">title</a>.</p><p>Specifies the title of the message</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.MessageItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.MessageItem;
            /**
             * <p>Sets type of the MessageItem. <b>Note:</b> if you set the type to None it will be handled and rendered as Information.</p>
             * @param {sap.ui.core.MessageType} sType <p>Type of Message</p>
             * @returns sap.m.MessageItem <p>The MessageItem</p>
             */
            setType(sType: sap.ui.core.MessageType): sap.m.MessageItem;
        }
        /**
         * <p>Displays an empty page with an icon and a header when certain conditions are met. </p><h3>Overview</h3><p> MessagePage is displayed when there is no data or matching content. There are different use cases where a MessagePage might be visualized, for example: <ul> <li>The search query returned no results</li> <li>The app contains no items</li> <li>There are too many items</li> <li>The application is loading</li> </ul> The layout is unchanged but the text and icon vary depending on the use case. </p><h3>Usage</h3><p> <b>Note:</b> The <code>MessagePage</code> is not intended to be used as a top-level control, but rather used within controls such as <code>NavContainer</code>, <code>App</code>, <code>Shell</code> or other container controls.</p>
         */
        export class MessagePage extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new MessagePage.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MessagePage/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.MessagePage;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MessagePage/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.MessagePage;
            /**
             * <p>Adds some button to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to add; if empty, nothing is inserted</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addButton(oButton: sap.m.Button): sap.m.MessagePage;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.MessagePage/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.MessagePage</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePage</code> itself.</p><p>This event is fired when Nav Button is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePage</code> itself</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavButtonPress(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePage;
            /**
             * <p>Destroys all the buttons in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyButtons(): sap.m.MessagePage;
            /**
             * <p>Destroys the customDescription in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomDescription" href="#/api/sap.m.MessagePage/methods/getCustomDescription">customDescription</a>.</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomDescription(): sap.m.MessagePage;
            /**
             * <p>Destroys the customText in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomText" href="#/api/sap.m.MessagePage/methods/getCustomText">customText</a>.</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomText(): sap.m.MessagePage;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.MessagePage/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.MessagePage</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavButtonPress(fnFunction: Function, oListener?: any): sap.m.MessagePage;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.MessagePage/events/navButtonPress">navButtonPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireNavButtonPress(mParameters?: any): sap.m.MessagePage;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MessagePage/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MessagePage/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p><p>The buttons displayed under the description text.</p><p><b>Note:</b> Buttons added to this aggregation are both vertically and horizontally centered. Depending on the available space, they may be rendered on several lines.</p>
             * @returns sap.m.Button[] 
             */
            getButtons(): sap.m.Button[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomDescription" href="#/api/sap.m.MessagePage/methods/getCustomDescription">customDescription</a>.</p><p>The (optional) custom description control of this page. Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with an sap.m.Link control. "description" and "textDirection" setters can be used for this aggregation.</p>
             * @returns sap.m.Link 
             */
            getCustomDescription(): sap.m.Link;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomText" href="#/api/sap.m.MessagePage/methods/getCustomText">customText</a>.</p><p>The (optional) custom Text control of this page. Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with an sap.m.Link control. "text" and "textDirection" setters can be used for this aggregation.</p>
             * @returns sap.m.Link 
             */
            getCustomText(): sap.m.Link;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.MessagePage/methods/getDescription">description</a>.</p><p>Determines the detailed description that shows additional information on the MessagePage.</p><p>Default value is <code>Check the filter settings.</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableFormattedText" href="#/api/sap.m.MessagePage/methods/getEnableFormattedText">enableFormattedText</a>.</p><p>Defines whether the value set in the <code>description</code> property is displayed as formatted text in HTML format.</p><p>For details regarding supported HTML tags, see <a target="_self" class="jsdoclink" href="#/api/sap.m.FormattedText">sap.m.FormattedText</a></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableFormattedText</code></p>
             */
            getEnableFormattedText(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MessagePage/methods/getIcon">icon</a>.</p><p>Determines the icon displayed on the MessagePage.</p><p>Default value is <code>sap-icon://documents</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconAlt" href="#/api/sap.m.MessagePage/methods/getIconAlt">iconAlt</a>.</p><p>Defines the alt attribute of the icon displayed on the <code>MessagePage</code>.</p>
             * @returns string <p>Value of property <code>iconAlt</code></p>
             */
            getIconAlt(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.MessagePage/methods/getShowHeader">showHeader</a>.</p><p>Determines the visibility of the MessagePage header. Can be used to hide the header of the MessagePage when it's embedded in another page.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHeader</code></p>
             */
            getShowHeader(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.MessagePage/methods/getShowNavButton">showNavButton</a>.</p><p>Determines the visibility of the navigation button in MessagePage header.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showNavButton</code></p>
             */
            getShowNavButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.MessagePage/methods/getText">text</a>.</p><p>Determines the main text displayed on the MessagePage.</p><p>Default value is <code>No matching items found.</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.MessagePage/methods/getTextDirection">textDirection</a>.</p><p>Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.MessagePage/methods/getTitle">title</a>.</p><p>Determines the title in the header of MessagePage.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Button} oButton <p>The button whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfButton(oButton: sap.m.Button): number;
            /**
             * <p>Inserts a button into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the button should be inserted at; for a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted at the last position</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertButton(oButton: sap.m.Button, iIndex: number): sap.m.MessagePage;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MessagePage/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MessagePage/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllButtons(): sap.m.Button[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.MessagePage/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MessagePage/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a button from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.MessagePage/methods/getButtons">buttons</a>.</p>
             * @param {number | string | sap.m.Button} vButton <p>The button to remove or its index or id</p>
             * @returns sap.m.Button <p>The removed button or <code>null</code></p>
             */
            removeButton(vButton: number | string | sap.m.Button): sap.m.Button;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomDescription" href="#/api/sap.m.MessagePage/methods/getCustomDescription">customDescription</a>.</p>
             * @param {sap.m.Link} oCustomDescription <p>The customDescription to set</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomDescription(oCustomDescription: sap.m.Link): sap.m.MessagePage;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomText" href="#/api/sap.m.MessagePage/methods/getCustomText">customText</a>.</p>
             * @param {sap.m.Link} oCustomText <p>The customText to set</p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomText(oCustomText: sap.m.Link): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.MessagePage/methods/getDescription">description</a>.</p><p>Determines the detailed description that shows additional information on the MessagePage.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Check the filter settings.</code>.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableFormattedText" href="#/api/sap.m.MessagePage/methods/getEnableFormattedText">enableFormattedText</a>.</p><p>Defines whether the value set in the <code>description</code> property is displayed as formatted text in HTML format.</p><p>For details regarding supported HTML tags, see <a target="_self" class="jsdoclink" href="#/api/sap.m.FormattedText">sap.m.FormattedText</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableFormattedText <p>New value for property <code>enableFormattedText</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableFormattedText(bEnableFormattedText: boolean): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.MessagePage/methods/getIcon">icon</a>.</p><p>Determines the icon displayed on the MessagePage.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>sap-icon://documents</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconAlt" href="#/api/sap.m.MessagePage/methods/getIconAlt">iconAlt</a>.</p><p>Defines the alt attribute of the icon displayed on the <code>MessagePage</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIconAlt <p>New value for property <code>iconAlt</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconAlt(sIconAlt: string): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.MessagePage/methods/getShowHeader">showHeader</a>.</p><p>Determines the visibility of the MessagePage header. Can be used to hide the header of the MessagePage when it's embedded in another page.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHeader <p>New value for property <code>showHeader</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHeader(bShowHeader: boolean): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.MessagePage/methods/getShowNavButton">showNavButton</a>.</p><p>Determines the visibility of the navigation button in MessagePage header.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowNavButton <p>New value for property <code>showNavButton</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowNavButton(bShowNavButton: boolean): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.MessagePage/methods/getText">text</a>.</p><p>Determines the main text displayed on the MessagePage.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>No matching items found.</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.MessagePage/methods/getTextDirection">textDirection</a>.</p><p>Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.MessagePage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.MessagePage/methods/getTitle">title</a>.</p><p>Determines the title in the header of MessagePage.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.MessagePage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.MessagePage;
        }
        /**
         * <h3>Overview</h3><p> A <code>MessagePopover</code> is used to display a summarized list of different types of messages (error, warning, success, and information messages). It provides a handy and systemized way to navigate and explore details for every message. It is adaptive and responsive. It renders as a dialog with a Close button in the header on phones, and as a popover on tablets and higher resolution devices. It also exposes an event <a target="_self" class="jsdoclink" href="#/api/sap.m.MessagePopover/events/activeTitlePress">sap.m.MessagePopover#event:activeTitlePress</a>, which can be used for navigation from a message to the source of the issue. </p><h3>Notes:</h3><p> <ul> <li> Messages can have descriptions pre-formatted with HTML markup. In this case, the <code>markupDescription</code> has to be set to <code>true</code>.</li> <li> If the message cannot be fully displayed or includes a long description, the message popover provides navigation to the detailed description.</li> </ul> </p><h3>Structure</h3><p> The message popover stores all messages in an aggregation of type <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageItem">sap.m.MessageItem</a> named <code>items</code>.</p><p>A set of properties determines how the items are rendered: <ul> <li> counter - An integer that is used to indicate the number of errors for each type </li> <li> type - The type of message </li> <li> title/subtitle - The title and subtitle of the message</li> <li> description - The long text description of the message</li> <li> activeTitle - Determines whether the title of the item is interactive</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>When you want to make sure that all content is visible on any device.</li> <li>When you want a way to centrally manage messages and show them to the user without additional work for the developer. The message popover is triggered from a messaging button in the footer toolbar. If an error has occurred at any validation point, the total number of messages should be incremented, but the user's work shouldn't be interrupted. Navigation between the message item and the source of the error can be created, if needed by the application. This can be done by setting the <code>activeTitle</code> property to true and providing a handler for the <code>activeTitlePress</code> event. In addition, you can achieve the same functionality inside a different container using the <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageView">sap.m.MessageView</a> control.</li> </ul> </p><h3>Responsive Behavior</h3><p> On mobile phones, the message popover is automatically shown in full screen mode.<br> On desktop and tablet, the message popover opens in a popover.<br> On desktop the opened popover is resizable if it is placed in a <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.Bar">sap.m.Bar</a> or used in <a target="_self" class="jsdoclink" href="#/api/sap.f.semantic.SemanticPage">sap.f.semantic.SemanticPage</a></p>
         */
        export class MessagePopover extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new MessagePopover.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p>
             * @param {sap.m.MessageItem | sap.m.MessagePopoverItem} vItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(vItem: sap.m.MessageItem | sap.m.MessagePopoverItem): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessagePopover/events/activeTitlePress">activeTitlePress</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired when an active title of a MessageItem is clicked</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachActiveTitlePress(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.MessagePopover/events/afterClose">afterClose</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired after the popover is closed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessagePopover/events/afterOpen">afterOpen</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired after the popover is opened</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.MessagePopover/events/beforeClose">beforeClose</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired before the popover is closed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.MessagePopover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired before the popover is opened</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessagePopover/events/itemSelect">itemSelect</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired when description is shown</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessagePopover/events/listSelect">listSelect</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired when one of the lists is shown when (not) filtered by type</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachListSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessagePopover/events/longtextLoaded">longtextLoaded</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired when the long text description data from a remote URL is loaded</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLongtextLoaded(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessagePopover/events/urlValidated">urlValidated</a> event of this <code>sap.m.MessagePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.</p><p>This event will be fired when a validation of a URL from long text description is ready</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUrlValidated(oData: any, fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Closes the MessagePopover</p>
             * @returns sap.m.MessagePopover <p>Reference to the 'this' for chaining purposes</p>
             */
            close(): sap.m.MessagePopover;
            /**
             * <p>Destroys the headerButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessagePopover/methods/getHeaderButton">headerButton</a>.</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderButton(): sap.m.MessagePopover;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessagePopover/events/activeTitlePress">activeTitlePress</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachActiveTitlePress(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.MessagePopover/events/afterClose">afterClose</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessagePopover/events/afterOpen">afterOpen</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.MessagePopover/events/beforeClose">beforeClose</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.MessagePopover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessagePopover/events/itemSelect">itemSelect</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemSelect(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessagePopover/events/listSelect">listSelect</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachListSelect(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessagePopover/events/longtextLoaded">longtextLoaded</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLongtextLoaded(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessagePopover/events/urlValidated">urlValidated</a> event of this <code>sap.m.MessagePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUrlValidated(fnFunction: Function, oListener?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessagePopover/events/activeTitlePress">activeTitlePress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireActiveTitlePress(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.MessagePopover/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessagePopover/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.MessagePopover/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.MessagePopover/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessagePopover/events/itemSelect">itemSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemSelect(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessagePopover/events/listSelect">listSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireListSelect(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessagePopover/events/longtextLoaded">longtextLoaded</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLongtextLoaded(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessagePopover/events/urlValidated">urlValidated</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUrlValidated(mParameters?: any): sap.m.MessagePopover;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncDescriptionHandler" href="#/api/sap.m.MessagePopover/methods/getAsyncDescriptionHandler">asyncDescriptionHandler</a>.</p><p>Callback function for resolving a promise after description has been asynchronously loaded inside this function</p>
             * @returns any <p>Value of property <code>asyncDescriptionHandler</code></p>
             */
            getAsyncDescriptionHandler(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncURLHandler" href="#/api/sap.m.MessagePopover/methods/getAsyncURLHandler">asyncURLHandler</a>.</p><p>Callback function for resolving a promise after a link has been asynchronously validated inside this function</p>
             * @returns any <p>Value of property <code>asyncURLHandler</code></p>
             */
            getAsyncURLHandler(): any;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessagePopover/methods/getHeaderButton">headerButton</a>.</p><p>A custom header button</p>
             * @returns sap.m.Button 
             */
            getHeaderButton(): sap.m.Button;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitiallyExpanded" href="#/api/sap.m.MessagePopover/methods/getInitiallyExpanded">initiallyExpanded</a>.</p><p>Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded. Note: If there is only one message in the control, this state will be ignored and the details page of the message will be shown.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>initiallyExpanded</code></p>
             */
            getInitiallyExpanded(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p><p>A list with message items</p>
             * @returns any 
             */
            getItems(): any | any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.MessagePopover/methods/getPlacement">placement</a>.</p><p>Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical. The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.</p><p>Default value is <code>Vertical</code>.</p>
             * @returns sap.m.VerticalPlacementType <p>Value of property <code>placement</code></p>
             */
            getPlacement(): sap.m.VerticalPlacementType;
            /**
             * <p>Checks for the provided <code>sap.m.MessageItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MessageItem | sap.m.MessagePopoverItem} vItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(vItem: sap.m.MessageItem | sap.m.MessagePopoverItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p>
             * @param {sap.m.MessageItem | sap.m.MessagePopoverItem} vItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(vItem: sap.m.MessageItem | sap.m.MessagePopoverItem, iIndex: number): sap.m.MessagePopover;
            /**
             * <p>The method checks if the MessagePopover is open. It returns true when the MessagePopover is currently open (this includes opening and closing animations), otherwise it returns false</p>
             * @returns boolean <p>Whether the MessagePopover is open</p>
             */
            isOpen(): boolean;
            /**
             * <p>Opens the MessagePopover</p>
             * @param {sap.ui.core.Control} oControl <p>Control which opens the MessagePopover</p>
             * @returns sap.m.MessagePopover <p>Reference to the 'this' for chaining purposes</p>
             */
            openBy(oControl: sap.ui.core.Control): sap.m.MessagePopover;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns any <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): any | any;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessagePopover/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.MessageItem | sap.m.MessagePopoverItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.MessageItem|sap.m.MessagePopoverItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.MessageItem | sap.m.MessagePopoverItem): sap.m.MessageItem | sap.m.MessagePopoverItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncDescriptionHandler" href="#/api/sap.m.MessagePopover/methods/getAsyncDescriptionHandler">asyncDescriptionHandler</a>.</p><p>Callback function for resolving a promise after description has been asynchronously loaded inside this function</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oAsyncDescriptionHandler <p>New value for property <code>asyncDescriptionHandler</code></p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAsyncDescriptionHandler(oAsyncDescriptionHandler: any): sap.m.MessagePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncURLHandler" href="#/api/sap.m.MessagePopover/methods/getAsyncURLHandler">asyncURLHandler</a>.</p><p>Callback function for resolving a promise after a link has been asynchronously validated inside this function</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oAsyncURLHandler <p>New value for property <code>asyncURLHandler</code></p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAsyncURLHandler(oAsyncURLHandler: any): sap.m.MessagePopover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessagePopover/methods/getHeaderButton">headerButton</a>.</p>
             * @param {sap.m.Button} oHeaderButton <p>The headerButton to set</p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderButton(oHeaderButton: sap.m.Button): sap.m.MessagePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitiallyExpanded" href="#/api/sap.m.MessagePopover/methods/getInitiallyExpanded">initiallyExpanded</a>.</p><p>Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded. Note: If there is only one message in the control, this state will be ignored and the details page of the message will be shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bInitiallyExpanded <p>New value for property <code>initiallyExpanded</code></p>
             * @returns sap.m.MessagePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitiallyExpanded(bInitiallyExpanded: boolean): sap.m.MessagePopover;
            /**
             * <p>The method sets the placement position of the MessagePopover. Only accepted Values are: sap.m.PlacementType.Top, sap.m.PlacementType.Bottom and sap.m.PlacementType.Vertical</p>
             * @param {sap.m.PlacementType} sPlacement <p>Placement type</p>
             * @returns sap.m.MessagePopover <p>Reference to the 'this' for chaining purposes</p>
             */
            setPlacement(sPlacement: sap.m.PlacementType): sap.m.MessagePopover;
            /**
             * <p>This method toggles between open and closed state of the MessagePopover instance. oControl parameter is mandatory in the same way as in 'openBy' method</p>
             * @param {sap.ui.core.Control} oControl <p>Control which opens the MessagePopover</p>
             * @returns sap.m.MessagePopover <p>Reference to the 'this' for chaining purposes</p>
             */
            toggle(oControl: sap.ui.core.Control): sap.m.MessagePopover;
        }
        /**
         * <p>Items provide information about Error Messages in the page.</p>
         */
        export class MessagePopoverItem extends sap.m.MessageItem {
            /**
             * <p>Constructor for a new MessagePopoverItem.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>MessageStrip is a control that enables the embedding of application-related messages in the application. </p><h3>Overview</h3><p> The message strip displays 4 types of messages, each with a corresponding semantic color and icon: Information, Success, Warning and Error.</p><p>Each message can have a close button, so that it can be removed from the UI if needed.</p><p>With version 1.50 you can use a limited set of formatting tags for the message text by setting <code>enableFormattedText</code>. The allowed tags are: <ul> <li>&lt;a&gt;</li> <li>&lt;em&gt;</li> <li>&lt;strong&gt;</li> <li>&lt;u&gt;</li> </ul> </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>You want to provide information or status update within the detail area of an object</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>You want to display information within the object page header, within a control, in the master list, or above the page header.</li> </ul></p>
         */
        export class MessageStrip extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new MessageStrip.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.MessageStrip/events/close">close</a> event of this <code>sap.m.MessageStrip</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageStrip</code> itself.</p><p>This event will be fired after the container is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageStrip</code> itself</p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachClose(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageStrip;
            /**
             * <p>Closes the MessageStrip. This method sets the visible property of the MessageStrip to false. The MessageStrip can be shown again by setting the visible property to true.</p>
             */
            close(): void;
            /**
             * <p>Destroys the link in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageStrip/methods/getLink">link</a>.</p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLink(): sap.m.MessageStrip;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.MessageStrip/events/close">close</a> event of this <code>sap.m.MessageStrip</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachClose(fnFunction: Function, oListener?: any): sap.m.MessageStrip;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.MessageStrip/events/close">close</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireClose(mParameters?: any): sap.m.MessageStrip;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.MessageStrip/methods/getCustomIcon">customIcon</a>.</p><p>Determines a custom icon which is displayed. If none is set, the default icon for this message type is used.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>customIcon</code></p>
             */
            getCustomIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableFormattedText" href="#/api/sap.m.MessageStrip/methods/getEnableFormattedText">enableFormattedText</a>.</p><p>Determines the limited collection of HTML elements passed to the <code>text</code> property should be evaluated.</p><p><b>Note:</b> If this property is set to true the string passed to <code>text</code> property can evaluate the following list of limited HTML elements. All other HTML elements and their nested content will not be rendered by the control: <ul> <li><code>a</code></li> <li><code>em</code></li> <li><code>strong</code></li> <li><code>u</code></li> </ul></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableFormattedText</code></p>
             */
            getEnableFormattedText(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageStrip/methods/getLink">link</a>.</p><p>Adds an sap.m.Link control which will be displayed at the end of the message.</p>
             * @returns sap.m.Link 
             */
            getLink(): sap.m.Link;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCloseButton" href="#/api/sap.m.MessageStrip/methods/getShowCloseButton">showCloseButton</a>.</p><p>Determines if the message has a close button in the upper right corner.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showCloseButton</code></p>
             */
            getShowCloseButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.MessageStrip/methods/getShowIcon">showIcon</a>.</p><p>Determines if an icon is displayed for the message.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showIcon</code></p>
             */
            getShowIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.MessageStrip/methods/getText">text</a>.</p><p>Determines the text of the message.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.MessageStrip/methods/getType">type</a>.</p><p>Determines the type of messages that are displayed in the MessageStrip. Possible values are: Information (default), Success, Warning, Error. If None is passed, the value is set to Information and a warning is displayed in the console.</p><p>Default value is <code>Information</code>.</p>
             * @returns sap.ui.core.MessageType <p>Value of property <code>type</code></p>
             */
            getType(): sap.ui.core.MessageType;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.MessageStrip/methods/getCustomIcon">customIcon</a>.</p><p>Determines a custom icon which is displayed. If none is set, the default icon for this message type is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sCustomIcon <p>New value for property <code>customIcon</code></p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIcon(sCustomIcon: sap.ui.core.URI): sap.m.MessageStrip;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableFormattedText" href="#/api/sap.m.MessageStrip/methods/getEnableFormattedText">enableFormattedText</a>.</p><p>Determines the limited collection of HTML elements passed to the <code>text</code> property should be evaluated.</p><p><b>Note:</b> If this property is set to true the string passed to <code>text</code> property can evaluate the following list of limited HTML elements. All other HTML elements and their nested content will not be rendered by the control: <ul> <li><code>a</code></li> <li><code>em</code></li> <li><code>strong</code></li> <li><code>u</code></li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableFormattedText <p>New value for property <code>enableFormattedText</code></p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableFormattedText(bEnableFormattedText: boolean): sap.m.MessageStrip;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLink" href="#/api/sap.m.MessageStrip/methods/getLink">link</a>.</p>
             * @param {sap.m.Link} oLink <p>The link to set</p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLink(oLink: sap.m.Link): sap.m.MessageStrip;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCloseButton" href="#/api/sap.m.MessageStrip/methods/getShowCloseButton">showCloseButton</a>.</p><p>Determines if the message has a close button in the upper right corner.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowCloseButton <p>New value for property <code>showCloseButton</code></p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowCloseButton(bShowCloseButton: boolean): sap.m.MessageStrip;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.MessageStrip/methods/getShowIcon">showIcon</a>.</p><p>Determines if an icon is displayed for the message.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowIcon <p>New value for property <code>showIcon</code></p>
             * @returns sap.m.MessageStrip <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIcon(bShowIcon: boolean): sap.m.MessageStrip;
            /**
             * <p>Setter for property text. Default value is empty/undefined</p>
             * @param {string} sText <p>new value for property text</p>
             * @returns sap.m.MessageStrip <p>this to allow method chaining</p>
             */
            setText(sText: string): sap.m.MessageStrip;
            /**
             * <p>Setter for property type. Default value is sap.ui.core.MessageType.Information</p>
             * @param {sap.ui.core.MessageType} sType <p>The Message type</p>
             * @returns sap.m.MessageStrip <p>this to allow method chaining</p>
             */
            setType(sType: sap.ui.core.MessageType): sap.m.MessageStrip;
        }
        /**
         * <h3>Overview</h3><p> A <code>MessageView</code> is used to display a summarized list of different types of messages (error, warning, success, and information messages). It is meant to be embedded into container controls (such as <a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">sap.m.Popover</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.ResponsivePopover">sap.m.ResponsivePopover</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a>). It provides a handy and systemized way to navigate and explore details for every message. If the MessageView contains only one item, which has either description, markupDescription or longTextUrl, its details page will be displayed initially. It also exposes an event <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageView/events/activeTitlePress">sap.m.MessageView#event:activeTitlePress</a>, which can be used for navigation from a message to its source. </p><h3>Notes:</h3><p> <ul> <li>If your application changes its model between two interactions with the MessageView, this could lead to outdated messages being shown. To avoid this, you need to call <code>navigateBack</code> on the MessageView BEFORE opening its container.</li> <li> Messages can have descriptions pre-formatted with HTML markup. In this case, the <code>markupDescription</code> has to be set to <code>true</code>. </li> <li> If the message cannot be fully displayed or includes a long description, the MessageView provides navigation to the detailed description. </li> </ul> </p><h3>Structure</h3><p> The MessageView stores all messages in an association of type <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageItem">sap.m.MessageItem</a> named <code>items</code>. <br> A set of properties determines how the items are rendered: <ul> <li> counter - An integer that is used to indicate the number of errors for each type </li> <li> type - The type of message </li> <li> title/subtitle - The title and subtitle of the message</li> <li> description - The long text description of the message</li> <li> activeTitle - Determines whether the title of the item is interactive</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>When you want a way to centrally manage messages and show them to the user without additional work for the developer. Navigation between the message item and the source of the error can be created, if needed by the application. This can be done by setting the <code>activeTitle</code> property to true and providing a handler for the <code>activeTitlePress</code> event.</li> </ul></p>
         */
        export class MessageView extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new MessageView</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p>
             * @param {sap.m.MessageItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.MessageItem): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessageView/events/activeTitlePress">activeTitlePress</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired when an active title of a MessageItem is pressed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachActiveTitlePress(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessageView/events/afterOpen">afterOpen</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired after the popover is opened</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessageView/events/itemSelect">itemSelect</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired when description is shown</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessageView/events/listSelect">listSelect</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired when one of the lists is shown when (not) filtered by type</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachListSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessageView/events/longtextLoaded">longtextLoaded</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired when the long text description data from a remote URL is loaded</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLongtextLoaded(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessageView/events/urlValidated">urlValidated</a> event of this <code>sap.m.MessageView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MessageView</code> itself.</p><p>This event will be fired when a validation of a URL from long text description is ready</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUrlValidated(oData: any, fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Destroys the headerButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessageView/methods/getHeaderButton">headerButton</a>.</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderButton(): sap.m.MessageView;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessageView/events/activeTitlePress">activeTitlePress</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachActiveTitlePress(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessageView/events/afterOpen">afterOpen</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessageView/events/itemSelect">itemSelect</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemSelect(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessageView/events/listSelect">listSelect</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachListSelect(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessageView/events/longtextLoaded">longtextLoaded</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLongtextLoaded(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessageView/events/urlValidated">urlValidated</a> event of this <code>sap.m.MessageView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUrlValidated(fnFunction: Function, oListener?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activeTitlePress" href="#/api/sap.m.MessageView/events/activeTitlePress">activeTitlePress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireActiveTitlePress(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.MessageView/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.MessageView/events/itemSelect">itemSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemSelect(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="listSelect" href="#/api/sap.m.MessageView/events/listSelect">listSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireListSelect(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="longtextLoaded" href="#/api/sap.m.MessageView/events/longtextLoaded">longtextLoaded</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLongtextLoaded(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="urlValidated" href="#/api/sap.m.MessageView/events/urlValidated">urlValidated</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUrlValidated(mParameters?: any): sap.m.MessageView;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncDescriptionHandler" href="#/api/sap.m.MessageView/methods/getAsyncDescriptionHandler">asyncDescriptionHandler</a>.</p><p>Callback function for resolving a promise after description has been asynchronously loaded inside this function</p>
             * @returns any <p>Value of property <code>asyncDescriptionHandler</code></p>
             */
            getAsyncDescriptionHandler(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncURLHandler" href="#/api/sap.m.MessageView/methods/getAsyncURLHandler">asyncURLHandler</a>.</p><p>Callback function for resolving a promise after a link has been asynchronously validated inside this function</p>
             * @returns any <p>Value of property <code>asyncURLHandler</code></p>
             */
            getAsyncURLHandler(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.MessageView/methods/getGroupItems">groupItems</a>.</p><p>Defines whether the MessageItems are grouped or not</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>groupItems</code></p>
             */
            getGroupItems(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessageView/methods/getHeaderButton">headerButton</a>.</p><p>A custom header button</p>
             * @returns sap.m.Button 
             */
            getHeaderButton(): sap.m.Button;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p><p>A list with message items. If only one item is provided, the initial page will be the details page for the item.</p>
             * @returns sap.m.MessageItem[] 
             */
            getItems(): sap.m.MessageItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDetailsPageHeader" href="#/api/sap.m.MessageView/methods/getShowDetailsPageHeader">showDetailsPageHeader</a>.</p><p>Defines whether the header of details page will be shown</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showDetailsPageHeader</code></p>
             */
            getShowDetailsPageHeader(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.MessageItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MessageItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.MessageItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p>
             * @param {sap.m.MessageItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.MessageItem, iIndex: number): sap.m.MessageView;
            /**
             * <p>Navigates back to the list page</p>
             */
            navigateBack(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.MessageItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.MessageItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MessageView/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.MessageItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.MessageItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.MessageItem): sap.m.MessageItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncDescriptionHandler" href="#/api/sap.m.MessageView/methods/getAsyncDescriptionHandler">asyncDescriptionHandler</a>.</p><p>Callback function for resolving a promise after description has been asynchronously loaded inside this function</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oAsyncDescriptionHandler <p>New value for property <code>asyncDescriptionHandler</code></p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAsyncDescriptionHandler(oAsyncDescriptionHandler: any): sap.m.MessageView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncURLHandler" href="#/api/sap.m.MessageView/methods/getAsyncURLHandler">asyncURLHandler</a>.</p><p>Callback function for resolving a promise after a link has been asynchronously validated inside this function</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oAsyncURLHandler <p>New value for property <code>asyncURLHandler</code></p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAsyncURLHandler(oAsyncURLHandler: any): sap.m.MessageView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.MessageView/methods/getGroupItems">groupItems</a>.</p><p>Defines whether the MessageItems are grouped or not</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGroupItems <p>New value for property <code>groupItems</code></p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGroupItems(bGroupItems: boolean): sap.m.MessageView;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderButton" href="#/api/sap.m.MessageView/methods/getHeaderButton">headerButton</a>.</p>
             * @param {sap.m.Button} oHeaderButton <p>The headerButton to set</p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderButton(oHeaderButton: sap.m.Button): sap.m.MessageView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDetailsPageHeader" href="#/api/sap.m.MessageView/methods/getShowDetailsPageHeader">showDetailsPageHeader</a>.</p><p>Defines whether the header of details page will be shown</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowDetailsPageHeader <p>New value for property <code>showDetailsPageHeader</code></p>
             * @returns sap.m.MessageView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowDetailsPageHeader(bShowDetailsPageHeader: boolean): sap.m.MessageView;
        }
        /**
         * <p>The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.</p><p>A drop-down list for selecting and filtering values. </p><h3>Overview</h3><p> The MultiComboBox control is commonly used to enable users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow of available options. The select options in the list have checkboxes that permit multi-selection. Entered values are displayed as <a target="_self" class="jsdoclink" href="#/api/sap.m.Token">tokens</a>. </p><h3>Structure</h3><p> The MultiComboBox consists of the following elements: <ul> <li> Input field - displays the selected option/s as token/s. Users can type to filter the list. <li> Drop-down arrow - expands\collapses the option list.</li> <li> Option list - the list of available options.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>The user needs to select one or more options from a long list of options (maximum of approximately 200).</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>The user needs to choose between two options such as ON or OFF and YES or NO. In this case, consider using a <a target="_self" class="jsdoclink" href="#/api/sap.m.Switch">switch</a> control instead</li> <li>You need to display more that one attribute. In this case, consider using the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectDialog">select dialog</a> or value help dialog instead.</li> <li>The user needs to search on multiple attributes. In this case, consider using the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectDialog">select dialog</a> or value help dialog instead.</li> <li>Your use case requires all available options to be displayed right away, without any user interaction. In this case, consider using the <a target="_self" class="jsdoclink" href="#/api/sap.m.CheckBox">checkboxes</a> instead.</li> </ul> </p><h3>Responsive Behavior</h3><p> If there are many tokens, the control shows only the last selected tokens that fit and for the others a label N-more is provided. In case the length of the last selected token is exceeding the width of the control, only a label N-Items is shown. In both cases, pressing on the label will show the tokens in a popup. <u>On Phones:</u> <ul> <li>A new full-screen dialog opens where all items from the option list are shown.</li> <li>You can select and deselect items from the option list.</li> <li>With the help of a toggle button you can switch between showing all tokens and only selected ones.</li> <li>You can filter the option list by entering a value in the input.</li> </ul> <u>On Tablets:</u> <ul> <li>The auto-complete suggestions appear below or above the input field.</li> <li>You can review the tokens by swiping them to left or right.</li> </ul> <u>On Desktop:</u> <ul> <li>The auto-complete suggestions appear below or above the input field.</li> <li>You can review the tokens by pressing the right or left arrows on the keyboard.</li> <li>You can select single tokens or a range of tokens and you can copy/cut/delete them.</li> </ul></p>
         */
        export class MultiComboBox extends sap.m.ComboBoxBase {
            /**
             * <p>Constructor for a new MultiComboBox.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item <code>oItem</code> to the association named <code>selectedItems</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The selected item to add; if empty, nothing is added.</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            addSelectedItem(oItem: sap.ui.core.Item): sap.m.MultiComboBox;
            /**
             * <p>Adds selected items. Only items with valid keys are added as selected.</p>
             * @param {string[]} aKeys <p>An array of item keys that identifies the items to be added as selected</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            addSelectedKeys(aKeys: string[]): sap.m.MultiComboBox;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.MultiComboBox/events/selectionChange">selectionChange</a> event of this <code>sap.m.MultiComboBox</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.</p><p>Event is fired when selection of an item is changed. Note: please do not use the "change" event inherited from sap.m.InputBase</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.MultiComboBox;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionFinish" href="#/api/sap.m.MultiComboBox/events/selectionFinish">selectionFinish</a> event of this <code>sap.m.MultiComboBox</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.</p><p>Event is fired when user has finished a selection of items in a list box and list box has been closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionFinish(oData: any, fnFunction: Function, oListener?: any): sap.m.MultiComboBox;
            /**
             * <p>Clears the selection. To be overwritten by subclasses.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Clear the selection.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Clones the <code>sap.m.MultiComboBox</code> control.</p>
             * @param {string} sIdSuffix <p>Suffix to be added to the ids of the new control and its internal objects.</p>
             * @returns sap.m.ComboBox <p>The cloned <code>sap.m.MultiComboBox</code> control.</p>
             */
            protected clone(sIdSuffix: string): sap.m.ComboBox;
            /**
             * <p>Base method for picker configuration</p>
             * @param {sap.m.Popover | sap.m.Dialog} oPicker <p>Picker instance</p>
             */
            protected configPicker(oPicker: sap.m.Popover | sap.m.Dialog): void;
            /**
             * <p><code>MultiComboBox</code> picker configuration</p>
             * @param {sap.m.Popover | sap.m.Dialog} oPicker <p>Picker instance</p>
             */
            protected configPicker(oPicker: sap.m.Popover | sap.m.Dialog): void;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ComboBoxBase/methods/getItems">items</a>.</p>
             * @returns sap.m.ComboBoxBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.ComboBoxBase;
            /**
             * <p>Destroys all the items in the aggregation named <code>items</code>.</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            destroyItems(): sap.m.MultiComboBox;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.MultiComboBox/events/selectionChange">selectionChange</a> event of this <code>sap.m.MultiComboBox</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.MultiComboBox;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionFinish" href="#/api/sap.m.MultiComboBox/events/selectionFinish">selectionFinish</a> event of this <code>sap.m.MultiComboBox</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionFinish(fnFunction: Function, oListener?: any): sap.m.MultiComboBox;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.MultiComboBox/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.MultiComboBox;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionFinish" href="#/api/sap.m.MultiComboBox/events/selectionFinish">selectionFinish</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MultiComboBox <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionFinish(mParameters?: any): sap.m.MultiComboBox;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets the accessibility info for the control<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns string <p>The accessibility text</p>
             */
            protected getAccessibilityInfo(): string;
            /**
             * <p>Retrieves the selected item objects from the association named <code>selectedItems</code>.</p>
             * @returns sap.ui.core.Item[] <p>Array of sap.ui.core.Item instances. The current target of the <code>selectedItems</code> association.</p>
             */
            getSelectedItems(): sap.ui.core.Item[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKeys" href="#/api/sap.m.MultiComboBox/methods/getSelectedKeys">selectedKeys</a>.</p><p>Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.</p><p>Default value is <code>[]</code>.</p>
             * @returns string[] <p>Value of property <code>selectedKeys</code></p>
             */
            getSelectedKeys(): string[];
            /**
             * <p>Inserts an item into the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to be inserted; if empty, nothing is inserted.</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.ComboBoxBase;
            /**
             * <p>Inserts an item into the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to insert; if empty, nothing is inserted.</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position.</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.MultiComboBox;
            /**
             * <p>Checks whether an item is selected.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to check.</p>
             * @returns boolean <p>True if the item is selected.</p>
             */
            isItemSelected(oItem: sap.ui.core.Item): boolean;
            /**
             * <p>This hook method is called after the MultiComboBox's Pop-up is rendered.</p>
             */
            protected onAfterRenderingPicker(): void;
            /**
             * <p>This hook method is called before the MultiComboBox is rendered.</p>
             */
            protected onBeforeRendering(): void;
            /**
             * <p>This hook method is called before the MultiComboBox's Pop-up is rendered.</p>
             */
            protected onBeforeRenderingPicker(): void;
            /**
             * <p>Opens the control's picker popup.</p>
             * @returns sap.m.ComboBoxBase <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.ComboBoxBase;
            /**
             * <p>Opens the control's picker popup.</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.MultiComboBox;
            /**
             * <p>Removes all the controls in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea and clears the selection.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes all the items in the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item[] <p>An array of sap.ui.core.Item of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls in the association named selectedItems.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSelectedItems(): sap.ui.core.ID[];
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or ID.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} oItem <p>The item to remove or its index or id.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(oItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes an selectedItem from the association named <code>selectedItems</code>.</p>
             * @param {sap.ui.core.Item | sap.ui.core.ID | string} oItem <p>The item to be removed</p>
             * @returns sap.ui.core.ID|null <p>The removed selectedItem or null</p>
             */
            removeSelectedItem(oItem: sap.ui.core.Item | sap.ui.core.ID | string): sap.ui.core.ID | null;
            /**
             * <p>Removes selected items. Only items with valid keys are removed.</p>
             * @param {string[]} aKeys <p>An array of item keys that identifies the items to be removed</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            removeSelectedKeys(aKeys: string[]): sap.m.MultiComboBox;
            /**
             * <p>Setter for association <code>selectedItems</code>.</p>
             * @param {string[] | sap.ui.core.Item[] | null} aItems <p>new values for association <code>selectedItems</code>. Array of sap.ui.core.Item Id which becomes the new target of this <code>selectedItems</code> association. Alternatively, an array of sap.ui.core.Item instance may be given or null.</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItems(aItems: string[] | sap.ui.core.Item[] | null): sap.m.MultiComboBox;
            /**
             * <p>Sets a new value for property <code>selectedKeys</code>. Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used. When called with a value of null or undefined, the default value of the property will be restored. Default value is [].</p>
             * @param {string[]} aKeys <p>Keys of items to be set as selected</p>
             * @returns sap.m.MultiComboBox <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedKeys(aKeys: string[]): sap.m.MultiComboBox;
            /**
             * <p>Setter for property <code>valueStateText</code>.</p><p>Default value is empty/<code>undefined</code>.</p>
             * @param {string} sText <p>New value for property <code>valueStateText</code>.</p>
             * @returns sap.m.InputBase <p><code>this</code> to allow method chaining</p>
             */
            setValueStateText(sText: string): sap.m.InputBase;
            /**
             * <p>Sets the value state text</p>
             * @param {string} sValueStateText <p>The new value state text</p>
             * @returns sap.m.InputBase <p>this for chaining</p>
             */
            setValueStateText(sValueStateText?: string): sap.m.InputBase;
            /**
             * <p>Sets the value state text</p>
             * @param {string} sValueStateText <p>The new value state text</p>
             * @returns sap.m.MultiComboBox <p>this for chaining</p>
             */
            setValueStateText(sValueStateText?: string): sap.m.MultiComboBox;
            /**
             * <p>Creates picker if doesn't exist yet and sync with Control items To be overwritten by subclasses.</p>
             */
            protected syncPickerContent(): void;
            /**
             * <p>Creates picker if doesn't exist yet and sync with Control items</p>
             * @param {boolean} bForceListSync <p>Force MultiComboBox to SuggestionPopover sync</p>
             * @returns sap.m.Dialog|sap.m.Popover 
             */
            protected syncPickerContent(bForceListSync: boolean): sap.m.Dialog | sap.m.Popover;
        }
        /**
         * <p>This control allows you to add items to a sap.m.Select instance. In addition, based on the property set, a set of pre-filled entries is added.</p>
         */
        export class MultiEditField extends sap.ui.core.XMLComposite {
            /**
             * <p>Constructor for MultiEditField</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MultiEditField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.MultiEditField;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.ui.core.Item): sap.m.MultiEditField;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.MultiEditField/events/change">change</a> event of this <code>sap.m.MultiEditField</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MultiEditField</code> itself.</p><p>This event is fired when the item of items aggregation in the selection field is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MultiEditField</code> itself</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.MultiEditField;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.MultiEditField;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.MultiEditField;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.MultiEditField/events/change">change</a> event of this <code>sap.m.MultiEditField</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.MultiEditField;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.MultiEditField/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.MultiEditField;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MultiEditField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>The field is not adjusted by the Form control to meet the cell's width</p>
             * @returns boolean <p>True this method always returns <code>true</code></p>
             */
            protected getFormDoNotAdjustWidth(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p><p>The items that should be displayed after the predefined special items in the selection field.</p>
             * @returns sap.ui.core.Item[] 
             */
            getItems(): sap.ui.core.Item[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNullable" href="#/api/sap.m.MultiEditField/methods/getNullable">nullable</a>.</p><p>Defines whether the 'Leave blank' item should be available in the selection field.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>nullable</code></p>
             */
            getNullable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.MultiEditField/methods/getRequired">required</a>.</p><p>Defines whether the 'Label' is required for the selection field.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>required</code></p>
             */
            getRequired(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.MultiEditField/methods/getSelectedItem">selectedItem</a>.</p><p>The selected item from <code>items</code> aggregation. This can be <code>null</code> if no valid item or special item is selected.</p>
             * @returns sap.ui.core.Item <p>Value of property <code>selectedItem</code></p>
             */
            getSelectedItem(): sap.ui.core.Item;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueHelp" href="#/api/sap.m.MultiEditField/methods/getShowValueHelp">showValueHelp</a>.</p><p>Defines whether the 'Select new value' item should be available in the selection field. Please note that upon selecting this item, the previously selected item is restored. As a consequence, the <code>selectedItem</code> property never contains this item.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showValueHelp</code></p>
             */
            getShowValueHelp(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.ui.core.Item): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.MultiEditField;
            /**
             * <p>Checks if the 'Leave blank' item is selected.</p>
             * @returns boolean <p>True if the 'Leave blank' item is selected.</p>
             */
            isBlankSelected(): boolean;
            /**
             * <p>Checks if the 'Keep existing value' item is selected.</p>
             * @returns boolean <p>True if the 'Keep existing value' item is selected.</p>
             */
            isKeepExistingSelected(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MultiEditField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.MultiEditField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Sets the previously selected item as the currently selected item of the internal select control.</p>
             */
            protected resetSelection(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNullable" href="#/api/sap.m.MultiEditField/methods/getNullable">nullable</a>.</p><p>Defines whether the 'Leave blank' item should be available in the selection field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bNullable <p>New value for property <code>nullable</code></p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNullable(bNullable: boolean): sap.m.MultiEditField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.MultiEditField/methods/getRequired">required</a>.</p><p>Defines whether the 'Label' is required for the selection field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRequired <p>New value for property <code>required</code></p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRequired(bRequired: boolean): sap.m.MultiEditField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.MultiEditField/methods/getSelectedItem">selectedItem</a>.</p><p>The selected item from <code>items</code> aggregation. This can be <code>null</code> if no valid item or special item is selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.Item} sSelectedItem <p>New value for property <code>selectedItem</code></p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelectedItem(sSelectedItem: sap.ui.core.Item): sap.m.MultiEditField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValueHelp" href="#/api/sap.m.MultiEditField/methods/getShowValueHelp">showValueHelp</a>.</p><p>Defines whether the 'Select new value' item should be available in the selection field. Please note that upon selecting this item, the previously selected item is restored. As a consequence, the <code>selectedItem</code> property never contains this item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValueHelp <p>New value for property <code>showValueHelp</code></p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValueHelp(bShowValueHelp: boolean): sap.m.MultiEditField;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.MultiEditField/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.MultiEditField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.MultiEditField;
        }
        /**
         * <h3>Overview</h3><p> A multi-input field allows the user to enter multiple values, which are displayed as <a target="_self" class="jsdoclink" href="#/api/sap.m.Token">tokens</a>. You can enable auto-complete suggestions or value help to help the user choose the correct entry. You can define validator functions to define what token values are accepted.</p><p><b>Notes:</b> <ul> <li> New valid tokens are created, when the user presses Enter, selects a value from the suggestions drop-down, or when the focus leaves the field.</li> <li> When multiple values are copied and pasted in the field, separate tokens are created for each of them.</li> <li> When a single value is copied and pasted in the field, it is shown as a text value, as further editing might be required before it is converted into a token.</li> <li> Provide meaningful labels for all input fields. Do not use the placeholder as a replacement for the label.</li> <li> The <code>showValueHelp</code> property is overwritten and after initialization of the control, its value becomes <code>truthy</code>.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li> You need to provide the value help option to help users select or search multiple business objects.</li> <li> The dataset to choose from is expected to increase over time (for example, to more than 200 values).</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li> When you need to select only one value.</li> <li> When you want the user to select from a predefined set of options. Use <a target="_self" class="jsdoclink" href="#/api/sap.m.MultiComboBox">sap.m.MultiComboBox</a> instead.</li> </ul> </p><h3>Responsive Behavior</h3><p> If there are many tokens, the control shows only the last selected tokens that fit and for the others a label <i>N-more</i> is provided. In case the length of the last selected token is exceeding the width of the control, only a label <i>N-Items</i> is shown. In both cases, pressing on the label will show the tokens in a popup. <u>On Phones:</u> <ul> <li> Only the last entered token is displayed.</li> <li> A new full-screen dialog opens where the auto-complete suggestions can be selected.</li> <li> You can review the tokens by tapping on the token or the input field.</li> </ul> <u> On Tablets:</u> <ul> <li> The auto-complete suggestions appear below or above the multi-input field.</li> <li> You can review the tokens by swiping them to the left or right.</li> </ul> <u>On Desktop:</u> <ul> <li> The auto-complete suggestions appear below or above the multi-input field.</li> <li> You can review the tokens by pressing the right or left arrows on the keyboard.</li> <li> You can select single tokens or a range of tokens and you can copy/cut/delete them.</li> </ul></p>
         */
        export class MultiInput extends sap.m.Input {
            /**
             * <p>Constructor for a new MultiInput.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some token to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p>
             * @param {sap.m.Token} oToken <p>The token to add; if empty, nothing is inserted</p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addToken(oToken: sap.m.Token): sap.m.MultiInput;
            /**
             * <p>Function adds a validation callback called before any new token gets added to the tokens aggregation</p>
             * @param {Function} fValidator <p>The validation callback whose parameter contains the following properties:</p>
             */
            addValidator(fValidator: Function): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.MultiInput/events/tokenUpdate">tokenUpdate</a> event of this <code>sap.m.MultiInput</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.MultiInput</code> itself.</p><p>Fired when the tokens aggregation changed due to a user interaction (add / remove token)</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.MultiInput</code> itself</p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTokenUpdate(oData: any, fnFunction: Function, oListener?: any): sap.m.MultiInput;
            /**
             * <p>Clones input.</p>
             * @returns sap.m.Input <p>Cloned input.</p>
             */
            clone(): sap.m.Input;
            /**
             * <p>Clones the <code>sap.m.MultiInput</code> control.</p>
             * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
             */
            clone(): sap.ui.core.Element;
            /**
             * <p>Destroys all the tokens in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyTokens(): sap.m.MultiInput;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.MultiInput/events/tokenUpdate">tokenUpdate</a> event of this <code>sap.m.MultiInput</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTokenUpdate(fnFunction: Function, oListener?: any): sap.m.MultiInput;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.MultiInput/events/tokenUpdate">tokenUpdate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireTokenUpdate(mParameters?: any): boolean;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets accessibility information for the input.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Accesibility information.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The accessibility object</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets the picker header title.</p>
             * @returns sap.m.Title|null <p>The title instance of the Picker</p>
             */
            protected getDialogTitle(): sap.m.Title | null;
            /**
             * <p>Gets the DOM element reference where the message popup is attached.</p>
             * @returns HTMLElement <p>The DOM element reference where the message popup is attached</p>
             */
            protected getDomRefForValueStateMessage(): HTMLElement;
            /**
             * <p>Get the reference element which the message popup should dock to</p>
             * @returns HTMLElement <p>DOM Element which the message popup should dock to</p>
             */
            protected getDomRefForValueStateMessage(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxTokens" href="#/api/sap.m.MultiInput/methods/getMaxTokens">maxTokens</a>.</p><p>The max number of tokens that is allowed in MultiInput.</p>
             * @returns number <p>Value of property <code>maxTokens</code></p>
             */
            getMaxTokens(): number;
            /**
             * <p>Function returns domref which acts as reference point for the opening suggestion menu</p>
             * @returns HTMLElement <p>The domref at which to open the suggestion menu</p>
             */
            getPopupAnchorDomRef(): HTMLElement;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p><p>The currently displayed tokens</p>
             * @returns sap.m.Token[] 
             */
            getTokens(): sap.m.Token[];
            /**
             * <p>Checks for the provided <code>sap.m.Token</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Token} oToken <p>The token whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfToken(oToken: sap.m.Token): number;
            /**
             * <p>Inserts a token into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p>
             * @param {sap.m.Token} oToken <p>The token to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the token should be inserted at; for a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value greater than the current size of the aggregation, the token is inserted at the last position</p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertToken(oToken: sap.m.Token, iIndex: number): sap.m.MultiInput;
            /**
             * <p>Event handler for the onFocusIn event.</p>
             * @param {any} oEvent <p>On focus in event.</p>
             */
            onfocusin(oEvent: any): void;
            /**
             * <p>Focus is on MultiInput</p>
             * @param {any} oEvent <p>The event object</p>
             */
            onfocusin(oEvent: any): void;
            /**
             * <p>Keyboard handler for escape key.</p>
             * @param {any} oEvent <p>Keyboard event.</p>
             */
            onsapescape(oEvent: any): void;
            /**
             * <p>When press ESC, deselect all tokens and all texts</p>
             * @param {any} oEvent <p>The event object</p>
             */
            onsapescape(oEvent: any): void;
            /**
             * <p>Fire valueHelpRequest event on tap.</p>
             * @param {any} oEvent <p>Ontap event.</p>
             */
            ontap(oEvent: any): void;
            /**
             * <p>When tap on text field, deselect all tokens</p>
             * @param {any} oEvent <p>The event object</p>
             */
            ontap(oEvent: any): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Token[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTokens(): sap.m.Token[];
            /**
             * <p>Function removes all validation callbacks</p>
             */
            removeAllValidators(): void;
            /**
             * <p>Removes a token from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.MultiInput/methods/getTokens">tokens</a>.</p>
             * @param {number | string | sap.m.Token} vToken <p>The token to remove or its index or id</p>
             * @returns sap.m.Token <p>The removed token or <code>null</code></p>
             */
            removeToken(vToken: number | string | sap.m.Token): sap.m.Token;
            /**
             * <p>Function removes a validation callback</p>
             * @param {Function} fValidator <p>The validation callback to be removed</p>
             */
            removeValidator(fValidator: Function): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxTokens" href="#/api/sap.m.MultiInput/methods/getMaxTokens">maxTokens</a>.</p><p>The max number of tokens that is allowed in MultiInput.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iMaxTokens <p>New value for property <code>maxTokens</code></p>
             * @returns sap.m.MultiInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxTokens(iMaxTokens: number): sap.m.MultiInput;
            /**
             * <p>Function sets an array of tokens, existing tokens will get overridden</p>
             * @param {sap.m.Token[]} aTokens <p>The new token set</p>
             * @returns sap.m.MultiInput <p>Pointer to the control instance for chaining</p>
             */
            setTokens(aTokens: sap.m.Token[]): sap.m.MultiInput;
            /**
             * <p>Updates the inner input field.</p>
             */
            protected updateInputField(): void;
            /**
             * <p>Updates the inner input field.</p>
             */
            protected updateInputField(): void;
        }
        /**
         * <p>Handles hierarchical navigation between Pages or other fullscreen controls.</p><p>All children of this control receive navigation events, such as <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild/events/beforeShow">beforeShow</a>, they are documented in the pseudo interface <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild">sap.m.NavContainerChild</a>.</p>
         */
        export class NavContainer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>NavContainer</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.</p><p>"to" and "back" are the transition functions for the forward and backward navigation. Both will be called with the following parameters: - oFromPage: the Control which is currently being displayed by the NavContainer - oToPage: the Control which should be displayed by the NavContainer after the transition - fCallback: a function which MUST be called when the transition has completed - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration</p><p>The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class. After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden". For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method: oFromPage.addStyleClass("sapMNavItemHidden"); When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!</p><p>Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a setTimeout(..., 0) block (delayed, but without waiting).</p><p>This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.</p><p>Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.</p>
             * @param {string} sName <p>The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.</p><p>Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.</p>
             * @param {any} fTo <p>The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.</p><p>See the documentation of NavContainer.addCustomTransitions for more details about this function.</p>
             * @param {any} fBack <p>The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.</p><p>See the documentation of NavContainer.addCustomTransitions for more details about this function.</p>
             * @returns sap.m.NavContainer <p>The <code>sap.m.NavContainer</code> instance</p>
             */
            addCustomTransition(sName: string, fTo: any, fBack: any): sap.m.NavContainer;
            /**
             * <p>Adds some page to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>.</p>
             * @param {sap.ui.core.Control} oPage <p>The page to add; if empty, nothing is inserted</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addPage(oPage: sap.ui.core.Control): sap.m.NavContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.NavContainer/events/afterNavigate">afterNavigate</a> event of this <code>sap.m.NavContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.</p><p>The event is fired when navigation between two pages has completed (once all events to the child controls have been fired). In case of animated transitions this event is fired with some delay after the "navigate" event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.NavContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.NavContainer/events/navigate">navigate</a> event of this <code>sap.m.NavContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.</p><p>The event is fired when navigation between two pages has been triggered (before any events to the child controls are fired). The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.NavContainer;
            /**
             * <p>Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.</p><p>Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.</p>
             * @param {any} backData <p>Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)</p><p>In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.</p><p>When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>Since version 1.7.1. This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.NavContainer <p>The <code>sap.m.NavContainer</code> instance</p>
             */
            back(backData?: any, oTransitionParameters?: any): sap.m.NavContainer;
            /**
             * <p>Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens. The transition effect which had been used to get to the current page is inverted and used for this navigation.</p><p>Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.</p>
             * @param {string} pageId <p>The ID of the screen to which back navigation should happen. The ID or the control itself can be given. The nearest such page among the previous pages in the history stack will be used.</p>
             * @param {any} backData <p>This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.</p><p>When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.NavContainer <p>The <code>sap.m.NavContainer</code> instance</p>
             */
            backToPage(pageId: string, backData?: any, oTransitionParameters?: any): sap.m.NavContainer;
            /**
             * <p>Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens. The transition effect which had been used to get to the current page is inverted and used for this navigation.</p><p>Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.</p>
             * @param {any} backData <p>This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.</p><p>When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.NavContainer 
             */
            backToTop(backData?: any, oTransitionParameters?: any): sap.m.NavContainer;
            /**
             * <p>Returns whether the current page is the top/initial page.</p><p><b>Note:</b> going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.</p>
             * @returns boolean <p>Whether the current page is a top page</p>
             */
            currentPageIsTopPage(): boolean;
            /**
             * <p>Destroys all the pages in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>.</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPages(): sap.m.NavContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.NavContainer/events/afterNavigate">afterNavigate</a> event of this <code>sap.m.NavContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterNavigate(fnFunction: Function, oListener?: any): sap.m.NavContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.NavContainer/events/navigate">navigate</a> event of this <code>sap.m.NavContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavigate(fnFunction: Function, oListener?: any): sap.m.NavContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.NavContainer/events/afterNavigate">afterNavigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterNavigate(mParameters?: any): sap.m.NavContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.NavContainer/events/navigate">navigate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireNavigate(mParameters?: any): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoFocus" href="#/api/sap.m.NavContainer/methods/getAutoFocus">autoFocus</a>.</p><p>Determines whether the initial focus is set automatically on first rendering and after navigating to a new page. This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field. If necessary, the <code>afterShow</code> event can be used to focus another element, only if <code>autoFocus</code> is set to <code>false</code>.</p><p><b>Note:</b> The following scenarios are possible, depending on where the focus was before navigation to a new page: <ul><li>If <code>autoFocus</code> is set to <code>true</code> and the focus was inside the current page, the focus will be moved automatically on the new page.</li> <li>If <code>autoFocus</code> is set to <code>false</code> and the focus was inside the current page, the focus will disappear. <li>If the focus was outside the current page, after the navigation it will remain unchanged regardless of what is set to the <code>autoFocus</code> property.</li> <li>If the <code>autoFocus</code> is set to <code>false</code> and at the same time another wrapping control has its own logic for focus restoring upon rerendering, the focus will still appear.</li></ul></p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>autoFocus</code></p>
             */
            getAutoFocus(): boolean;
            /**
             * <p>Returns the currently displayed page-level control.</p><p><b>Note:</b> Returns <code>undefined</code> if no page has been added yet, otherwise returns an instance of <code>sap.m.Page</code>, <code>sap.ui.core.View</code>, <code>sap.m.Carousel</code> or whatever is aggregated.</p>
             * @returns sap.ui.core.Control <p>The current page</p>
             */
            getCurrentPage(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionName" href="#/api/sap.m.NavContainer/methods/getDefaultTransitionName">defaultTransitionName</a>.</p><p>The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.</p><p>Default value is <code>slide</code>.</p>
             * @returns string <p>Value of property <code>defaultTransitionName</code></p>
             */
            getDefaultTransitionName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.NavContainer/methods/getHeight">height</a>.</p><p>The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialPage" href="#/api/sap.m.NavContainer/methods/getInitialPage">initialPage</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialPage(): sap.ui.core.ID;
            /**
             * <p>Returns the control with the given ID from the "pages" aggregation (if available).</p>
             * @param {string} pageId <p>The ID of the aggregated control to find</p>
             * @returns sap.ui.core.Control <p>The control with the given ID or null if it doesn`t exist</p>
             */
            getPage(pageId: string): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>.</p><p>The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.</p><p>These aggregated controls will receive navigation events like <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild/events/beforeShow">beforeShow</a>, they are documented in the pseudo interface <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild">sap.m.NavContainerChild</a></p>
             * @returns sap.ui.core.Control[] 
             */
            getPages(): sap.ui.core.Control[];
            /**
             * <p>Returns the previous page (the page from which the user drilled down to the current page with "to()").</p><p><b>Note:</b> this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation. If there is no previous page, <code>undefined</code> is returned.</p>
             * @returns sap.ui.core.Control <p>The previous page</p>
             */
            getPreviousPage(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.NavContainer/methods/getVisible">visible</a>.</p><p>Whether the NavContainer is visible.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.NavContainer/methods/getWidth">width</a>.</p><p>The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oPage <p>The page whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPage(oPage: sap.ui.core.Control): number;
            /**
             * <p>Inserts a page into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>.</p>
             * @param {sap.ui.core.Control} oPage <p>The page to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the page should be inserted at; for a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value greater than the current size of the aggregation, the page is inserted at the last position</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPage(oPage: sap.ui.core.Control, iIndex: number): sap.m.NavContainer;
            /**
             * <p>Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.</p><p>This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.</p>
             * @param {string} pageId <p>The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.</p>
             * @param {string} transitionName <p>The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).</p>
             * @param {any} data <p>This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.</p>
             * @returns sap.m.NavContainer <p>The <code>sap.m.NavContainer</code> instance</p>
             */
            insertPreviousPage(pageId: string, transitionName: string, data: any): sap.m.NavContainer;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.NavContainer/methods/getPages">pages</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPages(): sap.ui.core.Control[];
            /**
             * <p>Removes a page.</p>
             * @param {number | string | sap.ui.core.Control} vPage <p>the position or ID of the <code>Control</code> that should be removed or that <code>Control</code> itself; if <code>vPage</code> is invalid, a negative value or a value greater or equal than the current size of the aggregation, nothing is removed.</p>
             * @returns sap.ui.core.Control <p>the removed page or null</p>
             */
            protected removePage(vPage: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoFocus" href="#/api/sap.m.NavContainer/methods/getAutoFocus">autoFocus</a>.</p><p>Determines whether the initial focus is set automatically on first rendering and after navigating to a new page. This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field. If necessary, the <code>afterShow</code> event can be used to focus another element, only if <code>autoFocus</code> is set to <code>false</code>.</p><p><b>Note:</b> The following scenarios are possible, depending on where the focus was before navigation to a new page: <ul><li>If <code>autoFocus</code> is set to <code>true</code> and the focus was inside the current page, the focus will be moved automatically on the new page.</li> <li>If <code>autoFocus</code> is set to <code>false</code> and the focus was inside the current page, the focus will disappear. <li>If the focus was outside the current page, after the navigation it will remain unchanged regardless of what is set to the <code>autoFocus</code> property.</li> <li>If the <code>autoFocus</code> is set to <code>false</code> and at the same time another wrapping control has its own logic for focus restoring upon rerendering, the focus will still appear.</li></ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAutoFocus <p>New value for property <code>autoFocus</code></p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutoFocus(bAutoFocus: boolean): sap.m.NavContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionName" href="#/api/sap.m.NavContainer/methods/getDefaultTransitionName">defaultTransitionName</a>.</p><p>The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>slide</code>.</p>
             * @param {string} sDefaultTransitionName <p>New value for property <code>defaultTransitionName</code></p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDefaultTransitionName(sDefaultTransitionName: string): sap.m.NavContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.NavContainer/methods/getHeight">height</a>.</p><p>The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.NavContainer;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialPage" href="#/api/sap.m.NavContainer/methods/getInitialPage">initialPage</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialPage <p>ID of an element which becomes the new target of this initialPage association; alternatively, an element instance may be given</p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialPage(oInitialPage: sap.ui.core.ID | sap.ui.core.Control): sap.m.NavContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.NavContainer/methods/getVisible">visible</a>.</p><p>Whether the NavContainer is visible.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.NavContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.NavContainer/methods/getWidth">width</a>.</p><p>The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.NavContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.NavContainer;
            /**
             * <p>Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.</p><p>Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.</p><p>Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.</p><p>Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.</p>
             * @param {string} pageId <p>The screen to which drilldown should happen. The ID or the control itself can be given.</p>
             * @param {string} transitionName <p>The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right). Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.</p><p>None of the standard transitions is currently making use of any given transition parameters.</p>
             * @param {any} data <p>Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property. Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.</p><p>When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.</p><p>For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use any parameter.</p>
             * @returns sap.m.NavContainer <p>The <code>sap.m.NavContainer</code> instance</p>
             */
            to(pageId: string, transitionName?: string, data?: any, oTransitionParameters?: any): sap.m.NavContainer;
        }
        /**
         * <p><p>sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation of pseudo events triggered by sap.m.NavContainer on its child controls when navigation occurs and child controls are displayed/hidden.</p><p>Interested parties outside the child control can listen to one or more of these events by registering a Delegate: <pre>
        page1.addEventDelegate({
           onBeforeShow: function(evt) {
              // page1 is about to be shown; act accordingly - if required you can read event information from the evt object
           },
           onAfterHide: function(evt) {
              // ...
           }
        });
        </pre></p></p>
         */
        export interface NavContainerChild {
        }
        /**
         * <p>This control displays the news content text and subheader in a tile.</p>
         */
        export class NewsContent extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.NewsContent control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NewsContent/events/press">press</a> event of this <code>sap.m.NewsContent</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NewsContent</code> itself.</p><p>The event is triggered when the News Content is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NewsContent</code> itself</p>
             * @returns sap.m.NewsContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.NewsContent;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NewsContent/events/press">press</a> event of this <code>sap.m.NewsContent</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NewsContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.NewsContent;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NewsContent/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.NewsContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.NewsContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentText" href="#/api/sap.m.NewsContent/methods/getContentText">contentText</a>.</p><p>The content text.</p>
             * @returns string <p>Value of property <code>contentText</code></p>
             */
            getContentText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.NewsContent/methods/getSubheader">subheader</a>.</p><p>The subheader.</p>
             * @returns string <p>Value of property <code>subheader</code></p>
             */
            getSubheader(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentText" href="#/api/sap.m.NewsContent/methods/getContentText">contentText</a>.</p><p>The content text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sContentText <p>New value for property <code>contentText</code></p>
             * @returns sap.m.NewsContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentText(sContentText: string): sap.m.NewsContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubheader" href="#/api/sap.m.NewsContent/methods/getSubheader">subheader</a>.</p><p>The subheader.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSubheader <p>New value for property <code>subheader</code></p>
             * @returns sap.m.NewsContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubheader(sSubheader: string): sap.m.NewsContent;
        }
        /**
         * <p>The NotificationListBase is the abstract base class for <a target="_self" class="jsdoclink" href="#/api/sap.m.NotificationListItem">sap.m.NotificationListItem</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.NotificationListGroup">sap.m.NotificationListGroup</a>.</p><p>The NotificationList controls are designed for the SAP Fiori notification center. </p><h4>Overview</h4><p> NotificationListBase defines the general structure of a notification item. Most of the behavioral logic is defined for the single items or groups. </p><h4>Structure</h4><p> The base holds properties for the following elements: <ul> <li>Author name</li> <li>Author picture</li> <li>Time stamp</li> <li>Priority</li> <li>Title</li> </ul> Additionally, by setting these properties you can determine if buttons are shown: <ul> <li><code>showButtons</code> - action buttons visibility</li> <li><code>showCloseButton</code> - close button visibility</li> </ul></p>
         */
        export class NotificationListBase extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new NotificationListBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Returns the sap.m.Image or the sap.ui.core.Control used in the NotificationListBase's author picture.</p>
             * @returns sap.m.Image|sap.ui.core.Control <p>The notification author picture text.</p>
             */
            protected _getAuthorImage(): sap.m.Image | sap.ui.core.Control;
            /**
             * <p>Returns the sap.m.Text control used in the NotificationListBase's author name.</p>
             * @returns sap.m.Text <p>The notification author name text.</p>
             */
            protected _getAuthorName(): sap.m.Text;
            /**
             * <p>Returns the sap.m.Text control used in the NotificationListBase's header title.</p>
             * @returns sap.m.Text <p>The datetime control inside the NotificationListBase control.</p>
             */
            protected _getDateTimeText(): sap.m.Text;
            /**
             * <p>Returns the sap.m.Text control used in the NotificationListBase's header title.</p>
             * @returns sap.m.Text <p>The title control inside the NotificationListBase control.</p>
             */
            protected _getHeaderTitle(): sap.m.Text;
            /**
             * <p>Returns the sap.m.OverflowToolbar control used in the NotificationListBase.</p>
             * @returns sap.m.OverflowToolbar <p>The footer toolbar.</p>
             */
            protected _getToolbar(): sap.m.OverflowToolbar;
            /**
             * <p>Adds some button to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to add; if empty, nothing is inserted</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addButton(oButton: sap.m.Button): sap.m.NotificationListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.NotificationListBase/events/close">close</a> event of this <code>sap.m.NotificationListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NotificationListBase</code> itself.</p><p>Fired when the close button of the notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification automatically.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NotificationListBase</code> itself</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachClose(oData: any, fnFunction: Function, oListener?: any): sap.m.NotificationListBase;
            /**
             * <p>Closes the NotificationListBase.</p>
             */
            close(): void;
            /**
             * <p>Destroys all the buttons in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyButtons(): sap.m.NotificationListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.NotificationListBase/events/close">close</a> event of this <code>sap.m.NotificationListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachClose(fnFunction: Function, oListener?: any): sap.m.NotificationListBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="close" href="#/api/sap.m.NotificationListBase/events/close">close</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireClose(mParameters?: any): sap.m.NotificationListBase;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAuthorName" href="#/api/sap.m.NotificationListBase/methods/getAuthorName">authorName</a>.</p><p>Determines the notification group's author name.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>authorName</code></p>
             */
            getAuthorName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAuthorPicture" href="#/api/sap.m.NotificationListBase/methods/getAuthorPicture">authorPicture</a>.</p><p>Determines the URL of the notification group's author picture.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>authorPicture</code></p>
             */
            getAuthorPicture(): sap.ui.core.URI;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p><p>Action buttons.</p>
             * @returns sap.m.Button[] 
             */
            getButtons(): sap.m.Button[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDatetime" href="#/api/sap.m.NotificationListBase/methods/getDatetime">datetime</a>.</p><p>Determines the due date of the NotificationListItem.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>datetime</code></p>
             */
            getDatetime(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPriority" href="#/api/sap.m.NotificationListBase/methods/getPriority">priority</a>.</p><p>Determines the priority of the Notification.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.Priority <p>Value of property <code>priority</code></p>
             */
            getPriority(): sap.ui.core.Priority;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowButtons" href="#/api/sap.m.NotificationListBase/methods/getShowButtons">showButtons</a>.</p><p>Determines the action buttons visibility.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showButtons</code></p>
             */
            getShowButtons(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCloseButton" href="#/api/sap.m.NotificationListBase/methods/getShowCloseButton">showCloseButton</a>.</p><p>Determines the visibility of the close button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showCloseButton</code></p>
             */
            getShowCloseButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.NotificationListBase/methods/getTitle">title</a>.</p><p>Determines the title of the NotificationListBase item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Button} oButton <p>The button whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfButton(oButton: sap.m.Button): number;
            /**
             * <p>Sets initial values of the control.</p>
             */
            protected init(): void;
            /**
             * <p>Inserts a button into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p>
             * @param {sap.m.Button} oButton <p>The button to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the button should be inserted at; for a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value greater than the current size of the aggregation, the button is inserted at the last position</p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertButton(oButton: sap.m.Button, iIndex: number): sap.m.NotificationListBase;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllButtons(): sap.m.Button[];
            /**
             * <p>Removes a button from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.NotificationListBase/methods/getButtons">buttons</a>.</p>
             * @param {number | string | sap.m.Button} vButton <p>The button to remove or its index or id</p>
             * @returns sap.m.Button <p>The removed button or <code>null</code></p>
             */
            removeButton(vButton: number | string | sap.m.Button): sap.m.Button;
            /**
             * <p>Overwrites the authorName property.</p>
             * @param {string} authorName <p>The author name in string format.</p>
             * @returns string <p>The set author name.</p>
             */
            setAuthorName(authorName: string): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAuthorPicture" href="#/api/sap.m.NotificationListBase/methods/getAuthorPicture">authorPicture</a>.</p><p>Determines the URL of the notification group's author picture.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sAuthorPicture <p>New value for property <code>authorPicture</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAuthorPicture(sAuthorPicture: sap.ui.core.URI): sap.m.NotificationListBase;
            /**
             * <p>Overwrites the setter for the datetime property.</p>
             * @param {string} dateTime <p>The datetime in string format.</p>
             * @returns string <p>The set datetime value.</p>
             */
            setDatetime(dateTime: string): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPriority" href="#/api/sap.m.NotificationListBase/methods/getPriority">priority</a>.</p><p>Determines the priority of the Notification.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.Priority} sPriority <p>New value for property <code>priority</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPriority(sPriority: sap.ui.core.Priority): sap.m.NotificationListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowButtons" href="#/api/sap.m.NotificationListBase/methods/getShowButtons">showButtons</a>.</p><p>Determines the action buttons visibility.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowButtons <p>New value for property <code>showButtons</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowButtons(bShowButtons: boolean): sap.m.NotificationListBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCloseButton" href="#/api/sap.m.NotificationListBase/methods/getShowCloseButton">showCloseButton</a>.</p><p>Determines the visibility of the close button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowCloseButton <p>New value for property <code>showCloseButton</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowCloseButton(bShowCloseButton: boolean): sap.m.NotificationListBase;
            /**
             * <p>Overwrites the setter of the title property.</p>
             * @param {string} title <p>Title.</p>
             * @returns sap.m.NotificationListBase <p>NotificationListBase reference for chaining.</p>
             */
            setTitle(title: string): sap.m.NotificationListBase;
        }
        /**
         * <p>The NotificationListItemGroup control is used for grouping <a target="_self" class="jsdoclink" href="#/api/sap.m.NotificationListItem">notification items</a> of the same type. </p><h4>Behavior</h4><p> The group handles specific behavior for different usecases: <ul> <li><code>autoPriority</code> - sets the group priority to the highest priority of an item in the group.</li> <li><code>enableCollapseButtonWhenEmpty</code> - displays a collapse button for an empty group.</li> <li><code>showEmptyGroup</code> - determines if the header/footer of an empty group is displayed.</li> </ul></p>
         */
        export class NotificationListGroup extends sap.m.NotificationListBase {
            /**
             * <p>Constructor for a new NotificationListGroup.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p>
             * @param {sap.m.NotificationListItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.NotificationListItem): sap.m.NotificationListGroup;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="onCollapse" href="#/api/sap.m.NotificationListGroup/events/onCollapse">onCollapse</a> event of this <code>sap.m.NotificationListGroup</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NotificationListGroup</code> itself.</p><p>This event is called when collapse property value is changed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NotificationListGroup</code> itself</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachOnCollapse(oData: any, fnFunction: Function, oListener?: any): sap.m.NotificationListGroup;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.NotificationListGroup;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="onCollapse" href="#/api/sap.m.NotificationListGroup/events/onCollapse">onCollapse</a> event of this <code>sap.m.NotificationListGroup</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachOnCollapse(fnFunction: Function, oListener?: any): sap.m.NotificationListGroup;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="onCollapse" href="#/api/sap.m.NotificationListGroup/events/onCollapse">onCollapse</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireOnCollapse(mParameters?: any): sap.m.NotificationListGroup;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoPriority" href="#/api/sap.m.NotificationListGroup/methods/getAutoPriority">autoPriority</a>.</p><p>Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>autoPriority</code></p>
             */
            getAutoPriority(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCollapsed" href="#/api/sap.m.NotificationListGroup/methods/getCollapsed">collapsed</a>.</p><p>Determines if the group is collapsed or expanded.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>collapsed</code></p>
             */
            getCollapsed(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableCollapseButtonWhenEmpty" href="#/api/sap.m.NotificationListGroup/methods/getEnableCollapseButtonWhenEmpty">enableCollapseButtonWhenEmpty</a>.</p><p>Determines if the collapse/expand button should be enabled for an empty group.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableCollapseButtonWhenEmpty</code></p>
             */
            getEnableCollapseButtonWhenEmpty(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p><p>The NotificationListItems inside the group.</p>
             * @returns sap.m.NotificationListItem[] 
             */
            getItems(): sap.m.NotificationListItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowEmptyGroup" href="#/api/sap.m.NotificationListGroup/methods/getShowEmptyGroup">showEmptyGroup</a>.</p><p>Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showEmptyGroup</code></p>
             */
            getShowEmptyGroup(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.NotificationListItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.NotificationListItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.NotificationListItem): number;
            /**
             * <p>Sets initial values of the control.</p>
             */
            protected init(): void;
            /**
             * <p>Sets up the initial values of the control.</p>
             */
            protected init(): void;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p>
             * @param {sap.m.NotificationListItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.NotificationListItem, iIndex: number): sap.m.NotificationListGroup;
            /**
             * <p>Overwrites the onBeforeRendering.</p>
             */
            onBeforeRendering(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.NotificationListItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.NotificationListItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.NotificationListGroup/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.NotificationListItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.NotificationListItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.NotificationListItem): sap.m.NotificationListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoPriority" href="#/api/sap.m.NotificationListGroup/methods/getAutoPriority">autoPriority</a>.</p><p>Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAutoPriority <p>New value for property <code>autoPriority</code></p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutoPriority(bAutoPriority: boolean): sap.m.NotificationListGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="collapsed" href="#/api/sap.m.NotificationListGroup/methods/collapsed">#collapsed</a>. Determines if the group is collapsed or expanded.</p>
             * @param {boolean} bCollapsed <p>New value for property <code>collapsed</code>.</p>
             * @returns sap.m.NotificationListGroup <p>this NotificationListGroup reference for chaining.</p>
             */
            setCollapsed(bCollapsed: boolean): sap.m.NotificationListGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableCollapseButtonWhenEmpty" href="#/api/sap.m.NotificationListGroup/methods/getEnableCollapseButtonWhenEmpty">enableCollapseButtonWhenEmpty</a>.</p><p>Determines if the collapse/expand button should be enabled for an empty group.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableCollapseButtonWhenEmpty <p>New value for property <code>enableCollapseButtonWhenEmpty</code></p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableCollapseButtonWhenEmpty(bEnableCollapseButtonWhenEmpty: boolean): sap.m.NotificationListGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowEmptyGroup" href="#/api/sap.m.NotificationListGroup/methods/getShowEmptyGroup">showEmptyGroup</a>.</p><p>Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowEmptyGroup <p>New value for property <code>showEmptyGroup</code></p>
             * @returns sap.m.NotificationListGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowEmptyGroup(bShowEmptyGroup: boolean): sap.m.NotificationListGroup;
        }
        /**
         * <p>The NotificationListItem control shows notifications to the user. </p><h4>Structure</h4><p> The notification item holds properties for the following elements: <ul> <li><code>description</code> - additional detail text.</li> <li><code>hideShowMoreButton</code> - visibility of the "Show More" button.</li> <li><code>truncate</code> - determines if title and description are truncated to the first two lines (usually needed on mobile devices).</li> </ul> For each item you can set some additional status information about the item processing by adding a <a target="_self" class="jsdoclink" href="#/api/sap.m.MessageStrip">sap.m.MessageStrip</a> to the <code>processingMessage</code> aggregation.</p>
         */
        export class NotificationListItem extends sap.m.NotificationListBase {
            /**
             * <p>Constructor for a new NotificationListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Registers resize handler.</p>
             */
            _registerResize(): void;
            /**
             * <p>Destroys the processingMessage in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProcessingMessage" href="#/api/sap.m.NotificationListItem/methods/getProcessingMessage">processingMessage</a>.</p>
             * @returns sap.m.NotificationListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyProcessingMessage(): sap.m.NotificationListItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.NotificationListItem/methods/getDescription">description</a>.</p><p>Determines the description of the NotificationListItem.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHideShowMoreButton" href="#/api/sap.m.NotificationListItem/methods/getHideShowMoreButton">hideShowMoreButton</a>.</p><p>Determines if the "Show More" button should be hidden.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>hideShowMoreButton</code></p>
             */
            getHideShowMoreButton(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProcessingMessage" href="#/api/sap.m.NotificationListItem/methods/getProcessingMessage">processingMessage</a>.</p><p>The sap.m.MessageStrip control that holds the information about any error that may occur when pressing the notification buttons</p>
             * @returns sap.m.MessageStrip 
             */
            getProcessingMessage(): sap.m.MessageStrip;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncate" href="#/api/sap.m.NotificationListItem/methods/getTruncate">truncate</a>.</p><p>Determines if the text in the title and the description of the notification are truncated to the first two lines.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>truncate</code></p>
             */
            getTruncate(): boolean;
            /**
             * <p>Overwrites onAfterRendering</p>
             */
            onAfterRendering(): void;
            /**
             * <p>Overwrites onBeforeRendering</p>
             */
            onBeforeRendering(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAuthorPicture" href="#/api/sap.m.NotificationListBase/methods/getAuthorPicture">authorPicture</a>.</p><p>Determines the URL of the notification group's author picture.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sAuthorPicture <p>New value for property <code>authorPicture</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAuthorPicture(sAuthorPicture: sap.ui.core.URI): sap.m.NotificationListBase;
            /**
             * <p>Sets the author picture for list item.</p>
             * @param {string} authorPicture <p>Picture url in string format.</p>
             * @param {boolean} suppressInvalidation <p>Indication for suppressing invalidation.</p>
             * @returns sap.m.NotificationListItem <p>NotificationListItem reference for chaining.</p>
             */
            setAuthorPicture(authorPicture: string, suppressInvalidation: boolean): sap.m.NotificationListItem;
            /**
             * <p>Overwrites the setter for the datetime property.</p>
             * @param {string} dateTime <p>The datetime in string format.</p>
             * @returns string <p>The set datetime value.</p>
             */
            setDatetime(dateTime: string): string;
            /**
             * <p>Sets the DateTime.</p>
             * @param {any} dateTime <p>DateTime.</p>
             * @returns sap.m.NotificationListBase <p>NotificationListBase reference for chaining.</p>
             */
            setDatetime(dateTime: any): sap.m.NotificationListBase;
            /**
             * <p>Sets the description.</p>
             * @param {string} description <p>Description.</p>
             * @returns sap.m.NotificationListItem <p>NotificationListItem reference for chaining.</p>
             */
            setDescription(description: string): sap.m.NotificationListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHideShowMoreButton" href="#/api/sap.m.NotificationListItem/methods/getHideShowMoreButton">hideShowMoreButton</a>.</p><p>Determines if the "Show More" button should be hidden.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bHideShowMoreButton <p>New value for property <code>hideShowMoreButton</code></p>
             * @returns sap.m.NotificationListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHideShowMoreButton(bHideShowMoreButton: boolean): sap.m.NotificationListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPriority" href="#/api/sap.m.NotificationListBase/methods/getPriority">priority</a>.</p><p>Determines the priority of the Notification.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.Priority} sPriority <p>New value for property <code>priority</code></p>
             * @returns sap.m.NotificationListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPriority(sPriority: sap.ui.core.Priority): sap.m.NotificationListBase;
            /**
             * <p>Sets the priority of the list item.</p>
             * @param {string} priority <p>Priority of the list item.</p>
             * @param {boolean} suppressInvalidation <p>Indication for suppressing invalidation.</p>
             * @returns sap.m.NotificationListItem <p>NotificationListItem reference for chaining.</p>
             */
            setPriority(priority: string, suppressInvalidation: boolean): sap.m.NotificationListItem;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProcessingMessage" href="#/api/sap.m.NotificationListItem/methods/getProcessingMessage">processingMessage</a>.</p>
             * @param {sap.m.MessageStrip} oProcessingMessage <p>The processingMessage to set</p>
             * @returns sap.m.NotificationListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setProcessingMessage(oProcessingMessage: sap.m.MessageStrip): sap.m.NotificationListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncate" href="#/api/sap.m.NotificationListItem/methods/getTruncate">truncate</a>.</p><p>Determines if the text in the title and the description of the notification are truncated to the first two lines.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bTruncate <p>New value for property <code>truncate</code></p>
             * @returns sap.m.NotificationListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTruncate(bTruncate: boolean): sap.m.NotificationListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnread" href="#/api/sap.m.ListItemBase/methods/getUnread">unread</a>.</p><p>Activates the unread indicator for the list item, if set to <code>true</code>. <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUnread <p>New value for property <code>unread</code></p>
             * @returns sap.m.ListItemBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUnread(bUnread: boolean): sap.m.ListItemBase;
            /**
             * <p>Sets the unread text.</p>
             * @param {boolean} unread <p>Indication of unread list item.</p>
             * @returns sap.m.NotificationListItem <p>NotificationListItem reference for chaining.</p>
             */
            setUnread(unread: boolean): sap.m.NotificationListItem;
        }
        /**
         * <p>Shows numeric values used for example in tiles colored according to their meaning and displays deviations.</p>
         */
        export class NumericContent extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.GenericTile control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NumericContent/events/press">press</a> event of this <code>sap.m.NumericContent</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.NumericContent</code> itself.</p><p>The event is fired when the user chooses the numeric content.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.NumericContent</code> itself</p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.NumericContent;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NumericContent/events/press">press</a> event of this <code>sap.m.NumericContent</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.NumericContent;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.NumericContent/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.NumericContent;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAnimateTextChange" href="#/api/sap.m.NumericContent/methods/getAnimateTextChange">animateTextChange</a>.</p><p>If set to true, the change of the value will be animated.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>animateTextChange</code></p>
             */
            getAnimateTextChange(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFormatterValue" href="#/api/sap.m.NumericContent/methods/getFormatterValue">formatterValue</a>.</p><p>If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>formatterValue</code></p>
             */
            getFormatterValue(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.NumericContent/methods/getIcon">icon</a>.</p><p>The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDescription" href="#/api/sap.m.NumericContent/methods/getIconDescription">iconDescription</a>.</p><p>Description of an icon that is used in the tooltip.</p>
             * @returns string <p>Value of property <code>iconDescription</code></p>
             */
            getIconDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndicator" href="#/api/sap.m.NumericContent/methods/getIndicator">indicator</a>.</p><p>The indicator arrow that shows value deviation.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.DeviationIndicator <p>Value of property <code>indicator</code></p>
             */
            getIndicator(): sap.m.DeviationIndicator;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNullifyValue" href="#/api/sap.m.NumericContent/methods/getNullifyValue">nullifyValue</a>.</p><p>If set to true, the omitted value property is set to 0.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>nullifyValue</code></p>
             */
            getNullifyValue(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.NumericContent/methods/getScale">scale</a>.</p><p>The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.</p>
             * @returns string <p>Value of property <code>scale</code></p>
             */
            getScale(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.NumericContent/methods/getState">state</a>.</p><p>Indicates the load status.</p><p>Default value is <code>Loaded</code>.</p>
             * @returns sap.m.LoadState <p>Value of property <code>state</code></p>
             */
            getState(): sap.m.LoadState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncateValueTo" href="#/api/sap.m.NumericContent/methods/getTruncateValueTo">truncateValueTo</a>.</p><p>The number of characters of the <code>value</code> property to display.</p><p>Default value is <code>4</code>.</p>
             * @returns number <p>Value of property <code>truncateValueTo</code></p>
             */
            getTruncateValueTo(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.NumericContent/methods/getValue">value</a>.</p><p>The actual value.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueColor" href="#/api/sap.m.NumericContent/methods/getValueColor">valueColor</a>.</p><p>The semantic color of the value.</p><p>Default value is <code>Neutral</code>.</p>
             * @returns sap.m.ValueColor <p>Value of property <code>valueColor</code></p>
             */
            getValueColor(): sap.m.ValueColor;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.NumericContent/methods/getWidth">width</a>.</p><p>The width of the control. If it is not set, the size of the control is defined by the 'size' property.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWithMargin" href="#/api/sap.m.NumericContent/methods/getWithMargin">withMargin</a>.</p><p>If the value is set to false, the content is adjusted to the whole size of the control.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>withMargin</code></p>
             */
            getWithMargin(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAnimateTextChange" href="#/api/sap.m.NumericContent/methods/getAnimateTextChange">animateTextChange</a>.</p><p>If set to true, the change of the value will be animated.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAnimateTextChange <p>New value for property <code>animateTextChange</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAnimateTextChange(bAnimateTextChange: boolean): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFormatterValue" href="#/api/sap.m.NumericContent/methods/getFormatterValue">formatterValue</a>.</p><p>If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bFormatterValue <p>New value for property <code>formatterValue</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFormatterValue(bFormatterValue: boolean): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.NumericContent/methods/getIcon">icon</a>.</p><p>The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDescription" href="#/api/sap.m.NumericContent/methods/getIconDescription">iconDescription</a>.</p><p>Description of an icon that is used in the tooltip.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIconDescription <p>New value for property <code>iconDescription</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDescription(sIconDescription: string): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndicator" href="#/api/sap.m.NumericContent/methods/getIndicator">indicator</a>.</p><p>The indicator arrow that shows value deviation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.DeviationIndicator} sIndicator <p>New value for property <code>indicator</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIndicator(sIndicator: sap.m.DeviationIndicator): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNullifyValue" href="#/api/sap.m.NumericContent/methods/getNullifyValue">nullifyValue</a>.</p><p>If set to true, the omitted value property is set to 0.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bNullifyValue <p>New value for property <code>nullifyValue</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNullifyValue(bNullifyValue: boolean): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.NumericContent/methods/getScale">scale</a>.</p><p>The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sScale <p>New value for property <code>scale</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScale(sScale: string): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.NumericContent/methods/getState">state</a>.</p><p>Indicates the load status.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Loaded</code>.</p>
             * @param {sap.m.LoadState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.m.LoadState): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTruncateValueTo" href="#/api/sap.m.NumericContent/methods/getTruncateValueTo">truncateValueTo</a>.</p><p>The number of characters of the <code>value</code> property to display.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>4</code>.</p>
             * @param {number} iTruncateValueTo <p>New value for property <code>truncateValueTo</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTruncateValueTo(iTruncateValueTo: number): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.NumericContent/methods/getValue">value</a>.</p><p>The actual value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueColor" href="#/api/sap.m.NumericContent/methods/getValueColor">valueColor</a>.</p><p>The semantic color of the value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Neutral</code>.</p>
             * @param {sap.m.ValueColor} sValueColor <p>New value for property <code>valueColor</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueColor(sValueColor: sap.m.ValueColor): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.NumericContent/methods/getWidth">width</a>.</p><p>The width of the control. If it is not set, the size of the control is defined by the 'size' property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.NumericContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWithMargin" href="#/api/sap.m.NumericContent/methods/getWithMargin">withMargin</a>.</p><p>If the value is set to false, the content is adjusted to the whole size of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bWithMargin <p>New value for property <code>withMargin</code></p>
             * @returns sap.m.NumericContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWithMargin(bWithMargin: boolean): sap.m.NumericContent;
        }
        /**
         * <p>The <code>ObjectAttribute</code> control displays a text field that can be normal or active. The <code>ObjectAttribute</code> fires a <code>press</code> event when the user chooses the active text.</p><p><b>Note:</b> If property <code>active</code> is set to <code>true</code>, only the value of the <code>text</code> property is styled and acts as a link. In this case the <code>text</code> property must also be set, as otherwise there will be no link displayed for the user.</p>
         */
        export class ObjectAttribute extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ObjectAttribute</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectAttribute/events/press">press</a> event of this <code>sap.m.ObjectAttribute</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectAttribute</code> itself.</p><p>Fires when the user clicks on active text.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code> itself</p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectAttribute;
            /**
             * <p>Destroys the customContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomContent" href="#/api/sap.m.ObjectAttribute/methods/getCustomContent">customContent</a>.</p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomContent(): sap.m.ObjectAttribute;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectAttribute/events/press">press</a> event of this <code>sap.m.ObjectAttribute</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.ObjectAttribute;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectAttribute/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.ObjectAttribute;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.ObjectAttribute/methods/getActive">active</a>.</p><p>Indicates if the <code>ObjectAttribute</code> text is selectable for the user.</p><p><b>Note:</b> As of version 1.48, only the value of the <code>text</code> property becomes active (styled and acts like a link) as opposed to both the <code>title</code> and <code>text</code> in the previous versions. If you set this property to <code>true</code>, you have to also set the <code>text</code> property.</p>
             * @returns boolean <p>Value of property <code>active</code></p>
             */
            getActive(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomContent" href="#/api/sap.m.ObjectAttribute/methods/getCustomContent">customContent</a>.</p><p>When the aggregation is set, it replaces the text, active and textDirection properties. This also ignores the press event. The provided control is displayed as an active link in case it is a sap.m.Link. <b>Note:</b> It will only allow sap.m.Text and sap.m.Link controls.</p>
             * @returns sap.ui.core.Control 
             */
            getCustomContent(): sap.ui.core.Control;
            /**
             * <p>Defines to which DOM reference the Popup should be docked.</p>
             * @returns HTMLElement <p>The DOM reference that Popup should dock to</p>
             */
            protected getPopupAnchorDomRef(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ObjectAttribute/methods/getText">text</a>.</p><p>Defines the ObjectAttribute text.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectAttribute/methods/getTextDirection">textDirection</a>.</p><p>Determines the direction of the text, not including the title. Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectAttribute/methods/getTitle">title</a>.</p><p>Defines the ObjectAttribute title.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.ObjectAttribute/methods/getActive">active</a>.</p><p>Indicates if the <code>ObjectAttribute</code> text is selectable for the user.</p><p><b>Note:</b> As of version 1.48, only the value of the <code>text</code> property becomes active (styled and acts like a link) as opposed to both the <code>title</code> and <code>text</code> in the previous versions. If you set this property to <code>true</code>, you have to also set the <code>text</code> property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bActive <p>New value for property <code>active</code></p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActive(bActive: boolean): sap.m.ObjectAttribute;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomContent" href="#/api/sap.m.ObjectAttribute/methods/getCustomContent">customContent</a>.</p>
             * @param {sap.ui.core.Control} oCustomContent <p>The customContent to set</p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomContent(oCustomContent: sap.ui.core.Control): sap.m.ObjectAttribute;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ObjectAttribute/methods/getText">text</a>.</p><p>Defines the ObjectAttribute text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.ObjectAttribute;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectAttribute/methods/getTextDirection">textDirection</a>.</p><p>Determines the direction of the text, not including the title. Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectAttribute;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectAttribute/methods/getTitle">title</a>.</p><p>Defines the ObjectAttribute title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ObjectAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ObjectAttribute;
        }
        /**
         * <p><code>ObjectHeader</code> is a display control that enables the user to easily identify a specific object. The object header title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</p>
         */
        export class ObjectHeader extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new </code>ObjectHeader</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some additionalNumber to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p>
             * @param {sap.m.ObjectNumber} oAdditionalNumber <p>The additionalNumber to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber): sap.m.ObjectHeader;
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectHeader/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectHeader;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectHeader/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectHeader;
            /**
             * <p>Adds some attribute to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.ObjectHeader;
            /**
             * <p>Adds some marker to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addMarker(oMarker: sap.m.ObjectMarker): sap.m.ObjectHeader;
            /**
             * <p>Adds some status to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p>
             * @param {sap.ui.core.Control} oStatus <p>The status to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addStatus(oStatus: sap.ui.core.Control): sap.m.ObjectHeader;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.ObjectHeader/events/iconPress">iconPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.</p><p>Event is fired when the title icon is active and the user taps/clicks on it</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachIconPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="introPress" href="#/api/sap.m.ObjectHeader/events/introPress">introPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.</p><p>Event is fired when the intro is active and the user taps/clicks on it</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachIntroPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectHeader/events/titlePress">titlePress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.</p><p>Event is fired when the title is active and the user taps/clicks on it</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTitlePress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titleSelectorPress" href="#/api/sap.m.ObjectHeader/events/titleSelectorPress">titleSelectorPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.</p><p>Event is fired when the object header title selector (down-arrow) is pressed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTitleSelectorPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Destroys all the additionalNumbers in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAdditionalNumbers(): sap.m.ObjectHeader;
            /**
             * <p>Destroys all the attributes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAttributes(): sap.m.ObjectHeader;
            /**
             * <p>Destroys the headerContainer in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContainer" href="#/api/sap.m.ObjectHeader/methods/getHeaderContainer">headerContainer</a>.</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderContainer(): sap.m.ObjectHeader;
            /**
             * <p>Destroys all the markers in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyMarkers(): sap.m.ObjectHeader;
            /**
             * <p>Destroys all the statuses in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyStatuses(): sap.m.ObjectHeader;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.ObjectHeader/events/iconPress">iconPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachIconPress(fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="introPress" href="#/api/sap.m.ObjectHeader/events/introPress">introPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachIntroPress(fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectHeader/events/titlePress">titlePress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTitlePress(fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titleSelectorPress" href="#/api/sap.m.ObjectHeader/events/titleSelectorPress">titleSelectorPress</a> event of this <code>sap.m.ObjectHeader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTitleSelectorPress(fnFunction: Function, oListener?: any): sap.m.ObjectHeader;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="iconPress" href="#/api/sap.m.ObjectHeader/events/iconPress">iconPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireIconPress(mParameters?: any): sap.m.ObjectHeader;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="introPress" href="#/api/sap.m.ObjectHeader/events/introPress">introPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireIntroPress(mParameters?: any): sap.m.ObjectHeader;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectHeader/events/titlePress">titlePress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTitlePress(mParameters?: any): sap.m.ObjectHeader;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titleSelectorPress" href="#/api/sap.m.ObjectHeader/events/titleSelectorPress">titleSelectorPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTitleSelectorPress(mParameters?: any): sap.m.ObjectHeader;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p><p>NOTE: Only applied if you set "responsive=false". Additional object numbers and units are managed in this aggregation. The numbers are hidden on tablet and phone size screens. When only one number is provided, it is rendered with additional separator from the main ObjectHeader number.</p>
             * @returns sap.m.ObjectNumber[] 
             */
            getAdditionalNumbers(): sap.m.ObjectNumber[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectHeader/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectHeader/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p><p>The list of Object Attributes</p>
             * @returns sap.m.ObjectAttribute[] 
             */
            getAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.ObjectHeader/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the background color of the <code>ObjectHeader</code>.</p><p><b>Note:</b> The different types of <code>ObjectHeader</code> come with different default background: <ul> <li>non responsive - Transparent</li> <li>responsive - Translucent</li> <li>condensed - Solid</li> </ul></p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCondensed" href="#/api/sap.m.ObjectHeader/methods/getCondensed">condensed</a>.</p><p><code>ObjectHeader</code> with title, one attribute, number, and number unit.</p><p><b>Note:</b> Only applied if the <code>responsive</code> property is set to <code>false</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>condensed</code></p>
             */
            getCondensed(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFullScreenOptimized" href="#/api/sap.m.ObjectHeader/methods/getFullScreenOptimized">fullScreenOptimized</a>.</p><p>Optimizes the display of the elements of the <code>ObjectHeader</code>.</p><p>Set this property to <code>true</code> if your app uses a fullscreen layout (as opposed to a master-detail or other split-screen layout).</p><p><b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.</p><p>If set to <code>true</code>, the following situations apply: <ul> <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li> <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li> <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li> <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li> <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li> </ul> On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.</p><p>If set to <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number: <ul> <li>On desktop, 1-4 attributes/statuses - 2 columns</li> <li>On desktop, 5+ attributes/statuses - 3 columns</li> <li>On tablet, always in 2 columns</li> </ul></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>fullScreenOptimized</code></p>
             */
            getFullScreenOptimized(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContainer" href="#/api/sap.m.ObjectHeader/methods/getHeaderContainer">headerContainer</a>.</p><p>This aggregation takes only effect when you set "responsive" to true. It can either be filled with an sap.m.IconTabBar or an sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.</p>
             * @returns sap.m.ObjectHeaderContainer 
             */
            getHeaderContainer(): sap.m.ObjectHeaderContainer;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectHeader/methods/getIcon">icon</a>.</p><p>Defines the icon of the <code>ObjectHeader</code>.</p><p><b>Note:</b> Recursive resolution of binding expressions is not supported by the framework. It works only in ObjectHeader, since it is a composite control and creates an Image control internally.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconActive" href="#/api/sap.m.ObjectHeader/methods/getIconActive">iconActive</a>.</p><p>Determines whether the <code>ObjectHeader</code> icon is clickable.</p>
             * @returns boolean <p>Value of property <code>iconActive</code></p>
             */
            getIconActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconAlt" href="#/api/sap.m.ObjectHeader/methods/getIconAlt">iconAlt</a>.</p><p>Determines the alternative text of the <code>ObjectHeader</code> icon. The text is displayed if the image for the icon is not available, or cannot be displayed.</p>
             * @returns string <p>Value of property <code>iconAlt</code></p>
             */
            getIconAlt(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectHeader/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to <code>false</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconTooltip" href="#/api/sap.m.ObjectHeader/methods/getIconTooltip">iconTooltip</a>.</p><p>Determines the tooltip text of the <code>ObjectHeader</code> icon.</p>
             * @returns string <p>Value of property <code>iconTooltip</code></p>
             */
            getIconTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageShape" href="#/api/sap.m.ObjectHeader/methods/getImageShape">imageShape</a>.</p><p>Determines whether the picture should be displayed in a square or with a circle-shaped mask just like in <a target="_self" class="jsdoclink" href="#/api/sap.uxap.ObjectPageHeader">sap.uxap.ObjectPageHeader</a>.</p><p><b>Note:</b> This property takes effect only on Images and it is ignored for Icons.</p><p>Default value is <code>Square</code>.</p>
             * @returns sap.m.ObjectHeaderPictureShape <p>Value of property <code>imageShape</code></p>
             */
            getImageShape(): sap.m.ObjectHeaderPictureShape;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntro" href="#/api/sap.m.ObjectHeader/methods/getIntro">intro</a>.</p><p>Determines the introductory text for the <code>ObjectHeader</code>.</p>
             * @returns string <p>Value of property <code>intro</code></p>
             */
            getIntro(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroActive" href="#/api/sap.m.ObjectHeader/methods/getIntroActive">introActive</a>.</p><p>Determines whether the introductory text of the <code>ObjectHeader</code> is clickable.</p>
             * @returns boolean <p>Value of property <code>introActive</code></p>
             */
            getIntroActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroHref" href="#/api/sap.m.ObjectHeader/methods/getIntroHref">introHref</a>.</p><p>Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the <code>introPress</code> event should be registered.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>introHref</code></p>
             */
            getIntroHref(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTarget" href="#/api/sap.m.ObjectHeader/methods/getIntroTarget">introTarget</a>.</p><p>Determines the <code>target</code> attribute for the intro link. Options are <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered.</p>
             * @returns string <p>Value of property <code>introTarget</code></p>
             */
            getIntroTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTextDirection" href="#/api/sap.m.ObjectHeader/methods/getIntroTextDirection">introTextDirection</a>.</p><p>Specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>introTextDirection</code></p>
             */
            getIntroTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p><p>List of markers (icon and/or text) that can be displayed for the <code>ObjectHeader</code>, such as favorite and flagged.<br><br> <b>Note:</b> You should use either this aggregation or the already deprecated properties - <code>markFlagged</code> and <code>markFavorite</code>. Using both can lead to unexpected results.</p>
             * @returns sap.m.ObjectMarker[] 
             */
            getMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.ObjectHeader/methods/getNumber">number</a>.</p><p>Determines the displayed number of the <code>ObjectHeader</code> number field.</p>
             * @returns string <p>Value of property <code>number</code></p>
             */
            getNumber(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberState" href="#/api/sap.m.ObjectHeader/methods/getNumberState">numberState</a>.</p><p>Determines the value state of the <code>number</code> and <code>numberUnit</code> properties.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>numberState</code></p>
             */
            getNumberState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberTextDirection" href="#/api/sap.m.ObjectHeader/methods/getNumberTextDirection">numberTextDirection</a>.</p><p>Specifies the number and unit text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>numberTextDirection</code></p>
             */
            getNumberTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberUnit" href="#/api/sap.m.ObjectHeader/methods/getNumberUnit">numberUnit</a>.</p><p>Determines the units qualifier of the <code>ObjectHeader</code> number.</p><p><b>Note:</b> The value of the <code>numberUnit</code> is not displayed if the number property is set to <code>null</code>.</p>
             * @returns string <p>Value of property <code>numberUnit</code></p>
             */
            getNumberUnit(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResponsive" href="#/api/sap.m.ObjectHeader/methods/getResponsive">responsive</a>.</p><p>Determines whether the <code>ObjectHeader</code> is rendered with a different design that reacts responsively to the screen sizes.</p><p>When the <code>responsive</code> property is set to <code>true</code>, the following behavior specifics for the control exist: <ul> <li>If an image (or an icon font) is set to the <code>icon</code> property, it is hidden in portrait mode on phone.</li> <li>The title is truncated to 80 characters if longer. For portrait mode on phone, the title is truncated to 50 characters.</li> </ul></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>responsive</code></p>
             */
            getResponsive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowTitleSelector" href="#/api/sap.m.ObjectHeader/methods/getShowTitleSelector">showTitleSelector</a>.</p><p>Determines whether the selector arrow icon/image is displayed and can be pressed.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showTitleSelector</code></p>
             */
            getShowTitleSelector(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p><p>The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.</p>
             * @returns sap.ui.core.Control[] 
             */
            getStatuses(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectHeader/methods/getTitle">title</a>.</p><p>Determines the title of the <code>ObjectHeader</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleActive" href="#/api/sap.m.ObjectHeader/methods/getTitleActive">titleActive</a>.</p><p>Determines whether the title of the <code>ObjectHeader</code> is clickable and is set only if a title is provided.</p>
             * @returns boolean <p>Value of property <code>titleActive</code></p>
             */
            getTitleActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleHref" href="#/api/sap.m.ObjectHeader/methods/getTitleHref">titleHref</a>.</p><p>Defines the title link target URI. Supports standard hyperlink behavior.</p><p><b>Note:</b> If an action should be triggered, this property should not be set, but instead an event handler for the <code>titlePress</code> event should be registered.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>titleHref</code></p>
             */
            getTitleHref(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.ObjectHeader/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title.</p><p>This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation. Depending on this setting an HTML h1-h6 element is used.</p><p>Default value is <code>H1</code>.</p>
             * @returns sap.ui.core.TitleLevel <p>Value of property <code>titleLevel</code></p>
             */
            getTitleLevel(): sap.ui.core.TitleLevel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleSelectorTooltip" href="#/api/sap.m.ObjectHeader/methods/getTitleSelectorTooltip">titleSelectorTooltip</a>.</p><p>Determines a custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.</p><p>Default value is <code>Options</code>.</p>
             * @returns string <p>Value of property <code>titleSelectorTooltip</code></p>
             */
            getTitleSelectorTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTarget" href="#/api/sap.m.ObjectHeader/methods/getTitleTarget">titleTarget</a>.</p><p>Determines the <code>target</code> attribute for the title link. Options are <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered.</p>
             * @returns string <p>Value of property <code>titleTarget</code></p>
             */
            getTitleTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.ObjectHeader/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>titleTextDirection</code></p>
             */
            getTitleTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectNumber</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectNumber} oAdditionalNumber <p>The additionalNumber whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber): number;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfMarker(oMarker: sap.m.ObjectMarker): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oStatus <p>The status whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfStatus(oStatus: sap.ui.core.Control): number;
            /**
             * <p>Inserts a additionalNumber into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p>
             * @param {sap.m.ObjectNumber} oAdditionalNumber <p>The additionalNumber to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the additionalNumber should be inserted at; for a negative value of <code>iIndex</code>, the additionalNumber is inserted at position 0; for a value greater than the current size of the aggregation, the additionalNumber is inserted at the last position</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAdditionalNumber(oAdditionalNumber: sap.m.ObjectNumber, iIndex: number): sap.m.ObjectHeader;
            /**
             * <p>Inserts a attribute into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the attribute should be inserted at; for a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.ObjectHeader;
            /**
             * <p>Inserts a marker into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the marker should be inserted at; for a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted at the last position</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertMarker(oMarker: sap.m.ObjectMarker, iIndex: number): sap.m.ObjectHeader;
            /**
             * <p>Inserts a status into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p>
             * @param {sap.ui.core.Control} oStatus <p>The status to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the status should be inserted at; for a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted at the last position</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertStatus(oStatus: sap.ui.core.Control, iIndex: number): sap.m.ObjectHeader;
            /**
             * <p>Removes a additionalNumber from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p>
             * @param {number | string | sap.m.ObjectNumber} vAdditionalNumber <p>The additionalNumber to remove or its index or id</p>
             * @returns sap.m.ObjectNumber <p>The removed additionalNumber or <code>null</code></p>
             */
            removeAdditionalNumber(vAdditionalNumber: number | string | sap.m.ObjectNumber): sap.m.ObjectNumber;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalNumbers" href="#/api/sap.m.ObjectHeader/methods/getAdditionalNumbers">additionalNumbers</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectNumber[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAdditionalNumbers(): sap.m.ObjectNumber[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectHeader/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectHeader/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectAttribute[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectMarker[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllStatuses(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectHeader/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectHeader/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a attribute from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectHeader/methods/getAttributes">attributes</a>.</p>
             * @param {number | string | sap.m.ObjectAttribute} vAttribute <p>The attribute to remove or its index or id</p>
             * @returns sap.m.ObjectAttribute <p>The removed attribute or <code>null</code></p>
             */
            removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;
            /**
             * <p>Removes a marker from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectHeader/methods/getMarkers">markers</a>.</p>
             * @param {number | string | sap.m.ObjectMarker} vMarker <p>The marker to remove or its index or id</p>
             * @returns sap.m.ObjectMarker <p>The removed marker or <code>null</code></p>
             */
            removeMarker(vMarker: number | string | sap.m.ObjectMarker): sap.m.ObjectMarker;
            /**
             * <p>Removes a status from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.ObjectHeader/methods/getStatuses">statuses</a>.</p>
             * @param {number | string | sap.ui.core.Control} vStatus <p>The status to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed status or <code>null</code></p>
             */
            removeStatus(vStatus: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.ObjectHeader/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the background color of the <code>ObjectHeader</code>.</p><p><b>Note:</b> The different types of <code>ObjectHeader</code> come with different default background: <ul> <li>non responsive - Transparent</li> <li>responsive - Translucent</li> <li>condensed - Solid</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.ObjectHeader;
            /**
             * <p>Set the condensed flag</p>
             * @param {boolean} bCondensed <p>the new value</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setCondensed(bCondensed: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFullScreenOptimized" href="#/api/sap.m.ObjectHeader/methods/getFullScreenOptimized">fullScreenOptimized</a>.</p><p>Optimizes the display of the elements of the <code>ObjectHeader</code>.</p><p>Set this property to <code>true</code> if your app uses a fullscreen layout (as opposed to a master-detail or other split-screen layout).</p><p><b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.</p><p>If set to <code>true</code>, the following situations apply: <ul> <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li> <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li> <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li> <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li> <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li> </ul> On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.</p><p>If set to <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number: <ul> <li>On desktop, 1-4 attributes/statuses - 2 columns</li> <li>On desktop, 5+ attributes/statuses - 3 columns</li> <li>On tablet, always in 2 columns</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bFullScreenOptimized <p>New value for property <code>fullScreenOptimized</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFullScreenOptimized(bFullScreenOptimized: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContainer" href="#/api/sap.m.ObjectHeader/methods/getHeaderContainer">headerContainer</a>.</p>
             * @param {sap.m.ObjectHeaderContainer} oHeaderContainer <p>The headerContainer to set</p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderContainer(oHeaderContainer: sap.m.ObjectHeaderContainer): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectHeader/methods/getIcon">icon</a>.</p><p>Defines the icon of the <code>ObjectHeader</code>.</p><p><b>Note:</b> Recursive resolution of binding expressions is not supported by the framework. It works only in ObjectHeader, since it is a composite control and creates an Image control internally.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconActive" href="#/api/sap.m.ObjectHeader/methods/getIconActive">iconActive</a>.</p><p>Determines whether the <code>ObjectHeader</code> icon is clickable.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bIconActive <p>New value for property <code>iconActive</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconActive(bIconActive: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconAlt" href="#/api/sap.m.ObjectHeader/methods/getIconAlt">iconAlt</a>.</p><p>Determines the alternative text of the <code>ObjectHeader</code> icon. The text is displayed if the image for the icon is not available, or cannot be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIconAlt <p>New value for property <code>iconAlt</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconAlt(sIconAlt: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectHeader/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to <code>false</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconTooltip" href="#/api/sap.m.ObjectHeader/methods/getIconTooltip">iconTooltip</a>.</p><p>Determines the tooltip text of the <code>ObjectHeader</code> icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIconTooltip <p>New value for property <code>iconTooltip</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconTooltip(sIconTooltip: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getImageShape" href="#/api/sap.m.ObjectHeader/methods/getImageShape">imageShape</a>.</p><p>Determines whether the picture should be displayed in a square or with a circle-shaped mask just like in <a target="_self" class="jsdoclink" href="#/api/sap.uxap.ObjectPageHeader">sap.uxap.ObjectPageHeader</a>.</p><p><b>Note:</b> This property takes effect only on Images and it is ignored for Icons.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Square</code>.</p>
             * @param {sap.m.ObjectHeaderPictureShape} sImageShape <p>New value for property <code>imageShape</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setImageShape(sImageShape: sap.m.ObjectHeaderPictureShape): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntro" href="#/api/sap.m.ObjectHeader/methods/getIntro">intro</a>.</p><p>Determines the introductory text for the <code>ObjectHeader</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIntro <p>New value for property <code>intro</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntro(sIntro: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroActive" href="#/api/sap.m.ObjectHeader/methods/getIntroActive">introActive</a>.</p><p>Determines whether the introductory text of the <code>ObjectHeader</code> is clickable.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bIntroActive <p>New value for property <code>introActive</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntroActive(bIntroActive: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroHref" href="#/api/sap.m.ObjectHeader/methods/getIntroHref">introHref</a>.</p><p>Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the <code>introPress</code> event should be registered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIntroHref <p>New value for property <code>introHref</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntroHref(sIntroHref: sap.ui.core.URI): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTarget" href="#/api/sap.m.ObjectHeader/methods/getIntroTarget">introTarget</a>.</p><p>Determines the <code>target</code> attribute for the intro link. Options are <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIntroTarget <p>New value for property <code>introTarget</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntroTarget(sIntroTarget: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTextDirection" href="#/api/sap.m.ObjectHeader/methods/getIntroTextDirection">introTextDirection</a>.</p><p>Specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sIntroTextDirection <p>New value for property <code>introTextDirection</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;
            /**
             * <p>Sets the visibility value of the Favorite marker.</p>
             * @param {boolean} bMarked <p>visibility of the marker</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setMarkFavorite(bMarked: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets the visibility value of the Flagged marker.</p>
             * @param {boolean} bMarked <p>visibility of the marker</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setMarkFlagged(bMarked: boolean): sap.m.ObjectHeader;
            /**
             * <p>Set the number value to the internal aggregation</p>
             * @param {string} sNumber <p>the new value</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setNumber(sNumber: string): sap.m.ObjectHeader;
            /**
             * <p>Set the number state to the internal aggregation</p>
             * @param {sap.ui.core.ValueState} sState <p>the new value</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setNumberState(sState: sap.ui.core.ValueState): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberTextDirection" href="#/api/sap.m.ObjectHeader/methods/getNumberTextDirection">numberTextDirection</a>.</p><p>Specifies the number and unit text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sNumberTextDirection <p>New value for property <code>numberTextDirection</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;
            /**
             * <p>Set the number unit to the internal aggregation</p>
             * @param {string} sUnit <p>the new value</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setNumberUnit(sUnit: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResponsive" href="#/api/sap.m.ObjectHeader/methods/getResponsive">responsive</a>.</p><p>Determines whether the <code>ObjectHeader</code> is rendered with a different design that reacts responsively to the screen sizes.</p><p>When the <code>responsive</code> property is set to <code>true</code>, the following behavior specifics for the control exist: <ul> <li>If an image (or an icon font) is set to the <code>icon</code> property, it is hidden in portrait mode on phone.</li> <li>The title is truncated to 80 characters if longer. For portrait mode on phone, the title is truncated to 50 characters.</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bResponsive <p>New value for property <code>responsive</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setResponsive(bResponsive: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets the visibility value of the Flagged and Favorite markers.</p>
             * @param {boolean} bMarked <p>visibility of all markers</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setShowMarkers(bMarked: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowTitleSelector" href="#/api/sap.m.ObjectHeader/methods/getShowTitleSelector">showTitleSelector</a>.</p><p>Determines whether the selector arrow icon/image is displayed and can be pressed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowTitleSelector <p>New value for property <code>showTitleSelector</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowTitleSelector(bShowTitleSelector: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectHeader/methods/getTitle">title</a>.</p><p>Determines the title of the <code>ObjectHeader</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleActive" href="#/api/sap.m.ObjectHeader/methods/getTitleActive">titleActive</a>.</p><p>Determines whether the title of the <code>ObjectHeader</code> is clickable and is set only if a title is provided.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bTitleActive <p>New value for property <code>titleActive</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleActive(bTitleActive: boolean): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleHref" href="#/api/sap.m.ObjectHeader/methods/getTitleHref">titleHref</a>.</p><p>Defines the title link target URI. Supports standard hyperlink behavior.</p><p><b>Note:</b> If an action should be triggered, this property should not be set, but instead an event handler for the <code>titlePress</code> event should be registered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sTitleHref <p>New value for property <code>titleHref</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleHref(sTitleHref: sap.ui.core.URI): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.ObjectHeader/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title.</p><p>This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation. Depending on this setting an HTML h1-h6 element is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>H1</code>.</p>
             * @param {sap.ui.core.TitleLevel} sTitleLevel <p>New value for property <code>titleLevel</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.ObjectHeader;
            /**
             * <p>Sets the new text for the tooltip of the select title arrow to the internal aggregation</p>
             * @param {string} sTooltip <p>the tooltip of the title selector</p>
             * @returns sap.m.ObjectHeader <p>this pointer for chaining</p>
             */
            setTitleSelectorTooltip(sTooltip: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTarget" href="#/api/sap.m.ObjectHeader/methods/getTitleTarget">titleTarget</a>.</p><p>Determines the <code>target</code> attribute for the title link. Options are <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively, a frame name can be entered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitleTarget <p>New value for property <code>titleTarget</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleTarget(sTitleTarget: string): sap.m.ObjectHeader;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.ObjectHeader/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTitleTextDirection <p>New value for property <code>titleTextDirection</code></p>
             * @returns sap.m.ObjectHeader <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.ObjectHeader;
        }
        /**
         * <p><p>Marker interface for controls which are suitable as items for the ObjectHeader.</p></p>
         */
        export interface ObjectHeaderContainer {
        }
        /**
         * <p><p>Used by the <code>ObjectHeader</code> control to define which shape to use for the image.</p></p>
         */
        export enum ObjectHeaderPictureShape {
            /**
             * <p>Circle shape for the images in the <code>ObjectHeader</code>.</p>
             */
            Circle = "Circle",
            /**
             * <p>Square shape for the images in the <code>ObjectHeader</code>.</p>
             */
            Square = "Square",
        }
        /**
         * <p>The ObjectIdentifier is a display control that enables the user to easily identify a specific object. The ObjectIdentifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.</p><p><b>Note:</b> This control should not be used with <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a> or in Forms along with <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a>.</p>
         */
        export class ObjectIdentifier extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ObjectIdentifier.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectIdentifier/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectIdentifier;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectIdentifier/events/titlePress">titlePress</a> event of this <code>sap.m.ObjectIdentifier</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectIdentifier</code> itself.</p><p>Fires when the title is active and the user taps/clicks on it.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectIdentifier</code> itself</p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTitlePress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectIdentifier;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectIdentifier/events/titlePress">titlePress</a> event of this <code>sap.m.ObjectIdentifier</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTitlePress(fnFunction: Function, oListener?: any): sap.m.ObjectIdentifier;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="titlePress" href="#/api/sap.m.ObjectIdentifier/events/titlePress">titlePress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTitlePress(mParameters?: any): sap.m.ObjectIdentifier;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectIdentifier/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ObjectIdentifier/methods/getText">text</a>.</p><p>Defines the object text.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectIdentifier/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectIdentifier/methods/getTitle">title</a>.</p><p>Defines the object title.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleActive" href="#/api/sap.m.ObjectIdentifier/methods/getTitleActive">titleActive</a>.</p><p>Indicates if the ObjectIdentifier's title is clickable.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>titleActive</code></p>
             */
            getTitleActive(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.ObjectIdentifier/methods/getVisible">visible</a>.</p><p>Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectIdentifier/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectIdentifier/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets text. Default value is empty/undefined.</p>
             * @param {string} sText <p>New value for property text</p>
             * @returns sap.m.ObjectIdentifier <p>this to allow method chaining</p>
             */
            setText(sText: string): sap.m.ObjectIdentifier;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectIdentifier/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectIdentifier;
            /**
             * <p>Sets the title. Default value is empty/undefined.</p>
             * @param {string} sTitle <p>New value for property title</p>
             * @returns sap.m.ObjectIdentifier <p>this to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ObjectIdentifier;
            /**
             * <p>Sets property titleActive. Default value is false.</p>
             * @param {boolean} bValue <p>new value for property titleActive</p>
             * @returns sap.m.ObjectIdentifier <p>this to allow method chaining</p>
             */
            setTitleActive(bValue: boolean): sap.m.ObjectIdentifier;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.ObjectIdentifier/methods/getVisible">visible</a>.</p><p>Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.ObjectIdentifier <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.ObjectIdentifier;
        }
        /**
         * <p>ObjectListItem is a display control that provides summary information about an object as a list item. The ObjectListItem title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.</p><p><b>Note:</b> The control must only be used in the context of a list.</p>
         */
        export class ObjectListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new ObjectListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some attribute to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.ObjectListItem;
            /**
             * <p>Adds some marker to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addMarker(oMarker: sap.m.ObjectMarker): sap.m.ObjectListItem;
            /**
             * <p>Destroys all the attributes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAttributes(): sap.m.ObjectListItem;
            /**
             * <p>Destroys the firstStatus in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFirstStatus" href="#/api/sap.m.ObjectListItem/methods/getFirstStatus">firstStatus</a>.</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFirstStatus(): sap.m.ObjectListItem;
            /**
             * <p>Destroys all the markers in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyMarkers(): sap.m.ObjectListItem;
            /**
             * <p>Destroys the secondStatus in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondStatus" href="#/api/sap.m.ObjectListItem/methods/getSecondStatus">secondStatus</a>.</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySecondStatus(): sap.m.ObjectListItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.ObjectListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Icon displayed when the ObjectListItem is active.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p><p>List of attributes displayed below the title to the left of the status fields.</p>
             * @returns sap.m.ObjectAttribute[] 
             */
            getAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFirstStatus" href="#/api/sap.m.ObjectListItem/methods/getFirstStatus">firstStatus</a>.</p><p>First status text field displayed on the right side of the attributes.</p>
             * @returns sap.m.ObjectStatus 
             */
            getFirstStatus(): sap.m.ObjectStatus;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectListItem/methods/getIcon">icon</a>.</p><p>ObjectListItem icon displayed to the left of the title.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image doesn't exist on the server).</p><p>If bandwidth is key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntro" href="#/api/sap.m.ObjectListItem/methods/getIntro">intro</a>.</p><p>Defines the introductory text for the ObjectListItem.</p>
             * @returns string <p>Value of property <code>intro</code></p>
             */
            getIntro(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTextDirection" href="#/api/sap.m.ObjectListItem/methods/getIntroTextDirection">introTextDirection</a>.</p><p>Determines the text direction of the item intro. Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left). By default the item intro inherits the text direction from its parent.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>introTextDirection</code></p>
             */
            getIntroTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p><p>List of markers (icon and/or text) that can be displayed for the <code>ObjectListItems</code>, such as favorite and flagged.<br><br> <b>Note:</b> You should use either this aggregation or the already deprecated properties - <code>markFlagged</code>, <code>markFavorite</code>, and <code>markLocked</code>. Using both can lead to unexpected results.</p>
             * @returns sap.m.ObjectMarker[] 
             */
            getMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.ObjectListItem/methods/getNumber">number</a>.</p><p>Defines the ObjectListItem number.</p>
             * @returns string <p>Value of property <code>number</code></p>
             */
            getNumber(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberState" href="#/api/sap.m.ObjectListItem/methods/getNumberState">numberState</a>.</p><p>Defines the ObjectListItem number and numberUnit value state.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>numberState</code></p>
             */
            getNumberState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberTextDirection" href="#/api/sap.m.ObjectListItem/methods/getNumberTextDirection">numberTextDirection</a>.</p><p>Determines the text direction of the item number. Available options for the number direction are LTR (left-to-right) and RTL (right-to-left). By default the item number inherits the text direction from its parent.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>numberTextDirection</code></p>
             */
            getNumberTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberUnit" href="#/api/sap.m.ObjectListItem/methods/getNumberUnit">numberUnit</a>.</p><p>Defines the number units qualifier of the ObjectListItem.</p>
             * @returns string <p>Value of property <code>numberUnit</code></p>
             */
            getNumberUnit(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondStatus" href="#/api/sap.m.ObjectListItem/methods/getSecondStatus">secondStatus</a>.</p><p>Second status text field displayed on the right side of the attributes.</p>
             * @returns sap.m.ObjectStatus 
             */
            getSecondStatus(): sap.m.ObjectStatus;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectListItem/methods/getTitle">title</a>.</p><p>Defines the ObjectListItem title.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.ObjectListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Determines the text direction of the item title. Available options for the title direction are LTR (left-to-right) and RTL (right-to-left). By default the item title inherits the text direction from its parent.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>titleTextDirection</code></p>
             */
            getTitleTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfMarker(oMarker: sap.m.ObjectMarker): number;
            /**
             * <p>Inserts a attribute into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the attribute should be inserted at; for a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.ObjectListItem;
            /**
             * <p>Inserts a marker into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the marker should be inserted at; for a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted at the last position</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertMarker(oMarker: sap.m.ObjectMarker, iIndex: number): sap.m.ObjectListItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectAttribute[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectMarker[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Removes a attribute from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.ObjectListItem/methods/getAttributes">attributes</a>.</p>
             * @param {number | string | sap.m.ObjectAttribute} vAttribute <p>The attribute to remove or its index or id</p>
             * @returns sap.m.ObjectAttribute <p>The removed attribute or <code>null</code></p>
             */
            removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;
            /**
             * <p>Removes a marker from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.ObjectListItem/methods/getMarkers">markers</a>.</p>
             * @param {number | string | sap.m.ObjectMarker} vMarker <p>The marker to remove or its index or id</p>
             * @returns sap.m.ObjectMarker <p>The removed marker or <code>null</code></p>
             */
            removeMarker(vMarker: number | string | sap.m.ObjectMarker): sap.m.ObjectMarker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.ObjectListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Icon displayed when the ObjectListItem is active.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.ObjectListItem;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFirstStatus" href="#/api/sap.m.ObjectListItem/methods/getFirstStatus">firstStatus</a>.</p>
             * @param {sap.m.ObjectStatus} oFirstStatus <p>The firstStatus to set</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFirstStatus(oFirstStatus: sap.m.ObjectStatus): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectListItem/methods/getIcon">icon</a>.</p><p>ObjectListItem icon displayed to the left of the title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image doesn't exist on the server).</p><p>If bandwidth is key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntro" href="#/api/sap.m.ObjectListItem/methods/getIntro">intro</a>.</p><p>Defines the introductory text for the ObjectListItem.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIntro <p>New value for property <code>intro</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntro(sIntro: string): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntroTextDirection" href="#/api/sap.m.ObjectListItem/methods/getIntroTextDirection">introTextDirection</a>.</p><p>Determines the text direction of the item intro. Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left). By default the item intro inherits the text direction from its parent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sIntroTextDirection <p>New value for property <code>introTextDirection</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;
            /**
             * <p>Sets the visibility value of the Favorite marker.</p>
             * @param {boolean} bMarked <p>the new value</p>
             * @returns sap.m.ObjectListItem <p>this pointer for chaining</p>
             */
            setMarkFavorite(bMarked: boolean): sap.m.ObjectListItem;
            /**
             * <p>Sets the visibility value of the Flagged marker.</p>
             * @param {boolean} bMarked <p>the new value</p>
             * @returns sap.m.ObjectListItem <p>this pointer for chaining</p>
             */
            setMarkFlagged(bMarked: boolean): sap.m.ObjectListItem;
            /**
             * <p>Sets the visibility value of the Favorite marker.</p>
             * @param {boolean} bMarked <p>the new value</p>
             * @returns sap.m.ObjectListItem <p>this pointer for chaining</p>
             */
            setMarkLocked(bMarked: boolean): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.ObjectListItem/methods/getNumber">number</a>.</p><p>Defines the ObjectListItem number.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumber <p>New value for property <code>number</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumber(sNumber: string): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberState" href="#/api/sap.m.ObjectListItem/methods/getNumberState">numberState</a>.</p><p>Defines the ObjectListItem number and numberUnit value state.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sNumberState <p>New value for property <code>numberState</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberState(sNumberState: sap.ui.core.ValueState): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberTextDirection" href="#/api/sap.m.ObjectListItem/methods/getNumberTextDirection">numberTextDirection</a>.</p><p>Determines the text direction of the item number. Available options for the number direction are LTR (left-to-right) and RTL (right-to-left). By default the item number inherits the text direction from its parent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sNumberTextDirection <p>New value for property <code>numberTextDirection</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberUnit" href="#/api/sap.m.ObjectListItem/methods/getNumberUnit">numberUnit</a>.</p><p>Defines the number units qualifier of the ObjectListItem.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumberUnit <p>New value for property <code>numberUnit</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberUnit(sNumberUnit: string): sap.m.ObjectListItem;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondStatus" href="#/api/sap.m.ObjectListItem/methods/getSecondStatus">secondStatus</a>.</p>
             * @param {sap.m.ObjectStatus} oSecondStatus <p>The secondStatus to set</p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSecondStatus(oSecondStatus: sap.m.ObjectStatus): sap.m.ObjectListItem;
            /**
             * <p>Sets the visibility value of the Flagged and Favorite markers.</p>
             * @param {boolean} bMarked <p>the new value</p>
             * @returns sap.m.ObjectListItem <p>this pointer for chaining</p>
             */
            setShowMarkers(bMarked: boolean): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectListItem/methods/getTitle">title</a>.</p><p>Defines the ObjectListItem title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ObjectListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.ObjectListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Determines the text direction of the item title. Available options for the title direction are LTR (left-to-right) and RTL (right-to-left). By default the item title inherits the text direction from its parent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTitleTextDirection <p>New value for property <code>titleTextDirection</code></p>
             * @returns sap.m.ObjectListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.ObjectListItem;
        }
        /**
         * <p>The <code>sap.m.ObjectMarker</code> control represents one of the following predefined types: <ul> <li><code>Flagged</code> <li><code>Favorite</code> <li><code>Draft</code> <li><code>Locked</code> <li><code>LockedBy</code> <li><code>Unsaved</code> <li><code>UnsavedBy</code> </ul> <b>Note</b>: Use the <code>LockedBy/UnsavedBy</code> type along with the <code>additionalInfo</code> property to display the name of the user who locked/changed the object. If <code>additionalInfo</code> property is not set when using <code>LockedBy/UnsavedBy</code> types, the string "Locked by another user"/"Unsaved changes by another user" will be displayed. If you don't want to display name of the user, simply use the <code>Locked/Unsaved</code> types.</p>
         */
        export class ObjectMarker extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ObjectMarker.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectMarker/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectMarker;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectMarker/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectMarker;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectMarker/events/press">press</a> event of this <code>sap.m.ObjectMarker</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectMarker</code> itself.</p><p>Event is fired when the <code>ObjectMarker</code> is interactive and the user taps/clicks on it.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectMarker</code> itself</p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectMarker;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectMarker/events/press">press</a> event of this <code>sap.m.ObjectMarker</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.ObjectMarker;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectMarker/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.ObjectMarker;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalInfo" href="#/api/sap.m.ObjectMarker/methods/getAdditionalInfo">additionalInfo</a>.</p><p>Sets additional information to the displayed <code>type</code>.</p><p><b>Note:</b> If no type is set, the additional information will not be displayed.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>additionalInfo</code></p>
             */
            getAdditionalInfo(): string;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectMarker/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectMarker/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.ObjectMarker/methods/getType">type</a>.</p><p>Sets one of the predefined types.</p><p><b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows: <ul> <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li> <li>For <code>Draft</code> the text is visible and the icon is not displayed</li> <li>For <code>Locked</code>, <code>LockedBy</code>, <code>Unsaved</code> and <code>UnsavedBy</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li></p><p></ul></p>
             * @returns sap.m.ObjectMarkerType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.ObjectMarkerType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibility" href="#/api/sap.m.ObjectMarker/methods/getVisibility">visibility</a>.</p><p>Sets one of the visibility states. Visibility states are as follows: <ul> <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li> <li><code>TextOnly</code> - displays only text, regardless of the screen size</li> <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li> </ul></p>
             * @returns sap.m.ObjectMarkerVisibility <p>Value of property <code>visibility</code></p>
             */
            getVisibility(): sap.m.ObjectMarkerVisibility;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectMarker/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectMarker/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectMarker/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ObjectMarker/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalInfo" href="#/api/sap.m.ObjectMarker/methods/getAdditionalInfo">additionalInfo</a>.</p><p>Sets additional information to the displayed <code>type</code>.</p><p><b>Note:</b> If no type is set, the additional information will not be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sAdditionalInfo <p>New value for property <code>additionalInfo</code></p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAdditionalInfo(sAdditionalInfo: string): sap.m.ObjectMarker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.ObjectMarker/methods/getType">type</a>.</p><p>Sets one of the predefined types.</p><p><b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows: <ul> <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li> <li>For <code>Draft</code> the text is visible and the icon is not displayed</li> <li>For <code>Locked</code>, <code>LockedBy</code>, <code>Unsaved</code> and <code>UnsavedBy</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li></p><p></ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.m.ObjectMarkerType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ObjectMarkerType): sap.m.ObjectMarker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibility" href="#/api/sap.m.ObjectMarker/methods/getVisibility">visibility</a>.</p><p>Sets one of the visibility states. Visibility states are as follows: <ul> <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li> <li><code>TextOnly</code> - displays only text, regardless of the screen size</li> <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.m.ObjectMarkerVisibility} sVisibility <p>New value for property <code>visibility</code></p>
             * @returns sap.m.ObjectMarker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisibility(sVisibility: sap.m.ObjectMarkerVisibility): sap.m.ObjectMarker;
        }
        /**
         * <p><p>Predefined types for ObjectMarker.</p></p>
         */
        export enum ObjectMarkerType {
            /**
             * <p>Draft type</p>
             */
            Draft = "Draft",
            /**
             * <p>Favorite type</p>
             */
            Favorite = "Favorite",
            /**
             * <p>Flagged type</p>
             */
            Flagged = "Flagged",
            /**
             * <p>Locked type</p>
             */
            Locked = "Locked",
            /**
             * <p>LockedBy type Use when you need to display the name of the user who locked the object.</p>
             */
            LockedBy = "LockedBy",
            /**
             * <p>Unsaved type</p>
             */
            Unsaved = "Unsaved",
            /**
             * <p>UnsavedBy type Use when you need to display the name of the user whose changes were unsaved.</p>
             */
            UnsavedBy = "UnsavedBy",
        }
        /**
         * <p><p>Predefined visibility for ObjectMarker.</p></p>
         */
        export enum ObjectMarkerVisibility {
            /**
             * <p>Shows icon and text</p>
             */
            IconAndText = "IconAndText",
            /**
             * <p>Shows only icon</p>
             */
            IconOnly = "IconOnly",
            /**
             * <p>Shows only text</p>
             */
            TextOnly = "TextOnly",
        }
        /**
         * <p>The ObjectNumber control displays number and number unit properties for an object. The number can be displayed using semantic colors to provide additional meaning about the object to the user.</p><p>With 1.63, large design of the control is supported by setting <code>sapMObjectNumberLarge</code> CSS class to the <code>ObjectNumber</code>.</p><p><b>Note:</b> To fulfill the design guidelines when you are using <code>sapMObjectNumberLarge</code> CSS class set the <code>emphasized</code> property to <code>false</code>.</p>
         */
        export class ObjectNumber extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ObjectNumber.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectNumber/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectNumber;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectNumber/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.m.ObjectNumber/methods/getEmphasized">emphasized</a>.</p><p>Indicates if the object number should appear emphasized.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>emphasized</code></p>
             */
            getEmphasized(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.ObjectNumber/methods/getNumber">number</a>.</p><p>Defines the number field.</p>
             * @returns string <p>Value of property <code>number</code></p>
             */
            getNumber(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.ObjectNumber/methods/getState">state</a>.</p><p>Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>state</code></p>
             */
            getState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.ObjectNumber/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the number and unit.</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectNumber/methods/getTextDirection">textDirection</a>.</p><p>Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.ObjectNumber/methods/getUnit">unit</a>.</p><p>Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.</p>
             * @returns string <p>Value of property <code>unit</code></p>
             */
            getUnit(): string;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectNumber/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectNumber/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.m.ObjectNumber/methods/getEmphasized">emphasized</a>.</p><p>Indicates if the object number should appear emphasized.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEmphasized <p>New value for property <code>emphasized</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEmphasized(bEmphasized: boolean): sap.m.ObjectNumber;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.ObjectNumber/methods/getNumber">number</a>.</p><p>Defines the number field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumber <p>New value for property <code>number</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumber(sNumber: string): sap.m.ObjectNumber;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.ObjectNumber/methods/getState">state</a>.</p><p>Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.ui.core.ValueState): sap.m.ObjectNumber;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.ObjectNumber/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the number and unit.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.ObjectNumber;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectNumber/methods/getTextDirection">textDirection</a>.</p><p>Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectNumber;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.ObjectNumber/methods/getUnit">unit</a>.</p><p>Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sUnit <p>New value for property <code>unit</code></p>
             * @returns sap.m.ObjectNumber <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUnit(sUnit: string): sap.m.ObjectNumber;
        }
        /**
         * <p>Status information that can be either text with a value state, or an icon.</p><p>With 1.63, large design of the control is supported by setting <code>sapMObjectStatusLarge</code> CSS class to the <code>ObjectStatus</code>.</p>
         */
        export class ObjectStatus extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ObjectStatus.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectStatus/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ObjectStatus;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectStatus/events/press">press</a> event of this <code>sap.m.ObjectStatus</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ObjectStatus</code> itself.</p><p>Fires when the user clicks/taps on active text.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ObjectStatus</code> itself</p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.ObjectStatus;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectStatus/events/press">press</a> event of this <code>sap.m.ObjectStatus</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.ObjectStatus;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.ObjectStatus/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.ObjectStatus;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.ObjectStatus/methods/getActive">active</a>.</p><p>Indicates if the <code>ObjectStatus</code> text and icon can be clicked/tapped by the user.</p><p><b>Note:</b> If you set this property to <code>true</code>, you have to also set the <code>text</code> or <code>icon</code> property.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>active</code></p>
             */
            getActive(): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectStatus/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectStatus/methods/getIcon">icon</a>.</p><p>Icon URI. This may be either an icon font or image path.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectStatus/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInverted" href="#/api/sap.m.ObjectStatus/methods/getInverted">inverted</a>.</p><p>Determines whether the background color reflects the set <code>state</code> instead of the control's text.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>inverted</code></p>
             */
            getInverted(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.ObjectStatus/methods/getState">state</a>.</p><p>Defines the text value state.</p><p>Default value is <code>sap.ui.core.ValueState.None</code>.</p>
             * @returns string <p>Value of property <code>state</code></p>
             */
            getState(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ObjectStatus/methods/getText">text</a>.</p><p>Defines the ObjectStatus text.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectStatus/methods/getTextDirection">textDirection</a>.</p><p>Determines the direction of the text, not including the title. Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectStatus/methods/getTitle">title</a>.</p><p>Defines the ObjectStatus title.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectStatus/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ObjectStatus/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.ObjectStatus/methods/getActive">active</a>.</p><p>Indicates if the <code>ObjectStatus</code> text and icon can be clicked/tapped by the user.</p><p><b>Note:</b> If you set this property to <code>true</code>, you have to also set the <code>text</code> or <code>icon</code> property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bActive <p>New value for property <code>active</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActive(bActive: boolean): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ObjectStatus/methods/getIcon">icon</a>.</p><p>Icon URI. This may be either an icon font or image path.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.ObjectStatus/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInverted" href="#/api/sap.m.ObjectStatus/methods/getInverted">inverted</a>.</p><p>Determines whether the background color reflects the set <code>state</code> instead of the control's text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bInverted <p>New value for property <code>inverted</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInverted(bInverted: boolean): sap.m.ObjectStatus;
            /**
             * <p>Sets value for the <code>state</code> property. The default value is <code>ValueState.None</code>.</p>
             * @param {string} sValue <p>New value for property state. It should be valid value of enumeration <code>sap.ui.core.ValueState</code> or <code>sap.ui.core.IndicationColor</code></p>
             * @returns sap.m.ObjectStatus <p>this to allow method chaining</p>
             */
            setState(sValue: string): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.ObjectStatus/methods/getText">text</a>.</p><p>Defines the ObjectStatus text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ObjectStatus/methods/getTextDirection">textDirection</a>.</p><p>Determines the direction of the text, not including the title. Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ObjectStatus/methods/getTitle">title</a>.</p><p>Defines the ObjectStatus title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ObjectStatus <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ObjectStatus;
        }
        /**
         * <p>A container control based on <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a>, that provides overflow when its content does not fit in the visible area.</p><h3>Overview</h3><p>The content of the <code>OverflowToolbar</code> moves into the overflow area from right to left when the available space is not enough in the visible area of the container. It can be accessed by the user through the overflow button that opens it in a popover.</p><p><b>Note:</b> It is recommended that you use <code>OverflowToolbar</code> over <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a>, unless you want to avoid overflow in favor of shrinking.</p><h3>Usage</h3><p>Different behavior and priorities can be set for each control inside the <code>OverflowToolbar</code>, such as certain controls to appear only in the overflow area or to never move there. For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbarLayoutData">sap.m.OverflowToolbarLayoutData</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbarPriority">sap.m.OverflowToolbarPriority</a>.</p><h3>Overflow Behavior</h3><p> By default, only the following controls can move to the overflow area:</p><p><ul><li><a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.CheckBox">sap.m.CheckBox</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.ComboBox">sap.m.ComboBox</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimeInput">sap.m.DateTimeInput</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.GenericTag">sap.m.GenericTag</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.Input">sap.m.Input</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.MenuButton">sap.m.MenuButton</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbarButton">sap.m.OverflowToolbarButton</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbarToggleButton">sap.m.OverflowToolbarToggleButton</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.SearchField">sap.m.SearchField</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.SegmentedButton">sap.m.SegmentedButton</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.ToggleButton">sap.m.ToggleButton</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarSeparator">sap.m.ToolbarSeparator</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.comp.smartfield.SmartField">sap.ui.comp.smartfield.SmartField</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.comp.smartfield.SmartLabel">sap.ui.comp.smartfield.SmartLabel</a></li></ul></p><p>Additionally, any control that implements the <a target="_self" class="jsdoclink" href="#/api/sap.m.IOverflowToolbarContent">sap.m.IOverflowToolbarContent</a> interface may define its behavior (most importantly overflow behavior) when placed inside <code>OverflowToolbar</code>.</p><p><b>Note:</b> The <code>OverflowToolbar</code> is an adaptive container that checks the available width and hides the part of its content that doesn't fit. It is intended that simple controls, such as <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a> are used as content. Embedding other adaptive container controls, such as <a target="_self" class="jsdoclink" href="#/api/sap.m.Breadcrumbs">sap.m.Breadcrumbs</a>, results in competition for the available space - both controls calculate the available space based on the other one's size and both change their width at the same time, leading to incorrectly distributed space.</p><h3>Responsive behavior</h3><p>The height of the toolbar changes on desktop, tablet, and smartphones.</p>
         */
        export class OverflowToolbar extends sap.m.Toolbar {
            /**
             * <p>Constructor for a new <code>OverflowToolbar</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Moves each control in the suitable collection - Popover only, movable controls and toolbar only</p>
             * @param {undefined} oControl 
             * @param {undefined} sPriority 
             */
            _moveControlInSuitableCollection(oControl: undefined, sPriority: undefined): void;
            /**
             * <p>Removes Control from collections</p>
             * @param {undefined} oControl 
             */
            _removeContentFromControlsCollections(oControl: undefined): void;
            /**
             * <p>Closes the overflow area. Useful to manually close the overflow after having suppressed automatic closing with "closeOverflowOnInteraction=false".</p>
             */
            closeOverflow(): void;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsyncMode" href="#/api/sap.m.OverflowToolbar/methods/getAsyncMode">asyncMode</a>.</p><p>Defines whether the <code>OverflowToolbar</code> works in async mode.</p><p><b>Note:</b> When this property is set to <code>true</code>, the <code>OverflowToolbar</code> makes its layout recalculations asynchronously. This way it is not blocking the thread immediately after re-rendering or resizing.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>asyncMode</code></p>
             */
            getAsyncMode(): boolean;
            /**
             * <p>Sets the <code>asyncMode</code> property.</p>
             * @param {boolean} bValue 
             * @returns sap.m.OverflowToolbar <p><code>this</code> pointer for chaining</p>
             */
            setAsyncMode(bValue: boolean): sap.m.OverflowToolbar;
        }
        /**
         * <p>Represents an <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> that shows its text only when in the overflow area of an <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a>.</p><p><b>Note:</b> This control is intended to be used exclusively in the context of the <code>OverflowToolbar</code>, whenever it is required to have buttons that show only an icon in the toolbar, but icon and text in the overflow menu.</p>
         */
        export class OverflowToolbarButton extends sap.m.Button {
            /**
             * <p>Constructor for a new <code>OverflowToolbarButton</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Holds layout data for the <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a> items.</p>
         */
        export class OverflowToolbarLayoutData extends sap.m.ToolbarLayoutData {
            /**
             * <p>Constructor for a new <code>OverflowToolbarLayoutData</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseOverflowOnInteraction" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getCloseOverflowOnInteraction">closeOverflowOnInteraction</a>.</p><p>Defines whether the overflow area is automatically closed when interacting with a control in it</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>closeOverflowOnInteraction</code></p>
             */
            getCloseOverflowOnInteraction(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroup" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getGroup">group</a>.</p><p>Defines OverflowToolbar items group number. Default value is 0, which means that the control does not belong to any group. Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority. Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>group</code></p>
             */
            getGroup(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPriority" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getPriority">priority</a>.</p><p>Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow</p><p>Default value is <code>High</code>.</p>
             * @returns sap.m.OverflowToolbarPriority <p>Value of property <code>priority</code></p>
             */
            getPriority(): sap.m.OverflowToolbarPriority;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseOverflowOnInteraction" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getCloseOverflowOnInteraction">closeOverflowOnInteraction</a>.</p><p>Defines whether the overflow area is automatically closed when interacting with a control in it</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bCloseOverflowOnInteraction <p>New value for property <code>closeOverflowOnInteraction</code></p>
             * @returns sap.m.OverflowToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCloseOverflowOnInteraction(bCloseOverflowOnInteraction: boolean): sap.m.OverflowToolbarLayoutData;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroup" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getGroup">group</a>.</p><p>Defines OverflowToolbar items group number. Default value is 0, which means that the control does not belong to any group. Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority. Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iGroup <p>New value for property <code>group</code></p>
             * @returns sap.m.OverflowToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGroup(iGroup: number): sap.m.OverflowToolbarLayoutData;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPriority" href="#/api/sap.m.OverflowToolbarLayoutData/methods/getPriority">priority</a>.</p><p>Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>High</code>.</p>
             * @param {sap.m.OverflowToolbarPriority} sPriority <p>New value for property <code>priority</code></p>
             * @returns sap.m.OverflowToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPriority(sPriority: sap.m.OverflowToolbarPriority): sap.m.OverflowToolbarLayoutData;
        }
        /**
         * <p><p>Defines the priorities of the controls within <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a>.</p></p>
         */
        export enum OverflowToolbarPriority {
            /**
             * <p>Deprecated - Use <code>sap.m.OverflowToolbarPriority.AlwaysOverflow</code> instead<span class="sapUiDeprecated"><br>Deprecated as of version 1.48</span></p>
             */
            Always = "Always",
            /**
             * <p>Forces <code>OverflowToolbar</code> items to remain always in the overflow area.</p>
             */
            AlwaysOverflow = "AlwaysOverflow",
            /**
             * <p>Items with priority <code>Disappear</code> overflow before the items with higher priority, such as <code>Low</code> and <code>High</code>, and remain hidden in the overflow area.</p>
             */
            Disappear = "Disappear",
            /**
             * <p>Items with priority <code>High</code> overflow after the items with lower priority.</p>
             */
            High = "High",
            /**
             * <p>Items with priority <code>Low</code> overflow before the items with higher priority, such as <code>High</code> priority items.</p>
             */
            Low = "Low",
            /**
             * <p>Deprecated - Use <code>sap.m.OverflowToolbarPriority.NeverOverflow</code> instead.<span class="sapUiDeprecated"><br>Deprecated as of version 1.48</span></p>
             */
            Never = "Never",
            /**
             * <p>Forces <code>OverflowToolbar</code> items to remain always in the toolbar.</p>
             */
            NeverOverflow = "NeverOverflow",
        }
        /**
         * <p>Represents an <a target="_self" class="jsdoclink" href="#/api/sap.m.ToggleButton">sap.m.ToggleButton</a> that shows its text only when in the overflow area of an <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a>.</p><p><b>Note:</b> This control is intended to be used exclusively in the context of the <code>OverflowToolbar</code>, whenever it is required to have buttons that show only an icon in the toolbar, but icon and text in the overflow menu.</p>
         */
        export class OverflowToolbarToggleButton extends sap.m.ToggleButton {
            /**
             * <p>Constructor for a new <code>OverflowToolbarToggleButton</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Type for <code>columnsItems</code> aggregation in <code>P13nColumnsPanel</code> control.</p>
         */
        export class P13nColumnsItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new P13nColumnsItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nColumnsItem/methods/getColumnKey">columnKey</a>.</p><p>This property contains the unique table column key</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndex" href="#/api/sap.m.P13nColumnsItem/methods/getIndex">index</a>.</p><p>This property contains the index of a table column</p>
             * @returns number <p>Value of property <code>index</code></p>
             */
            getIndex(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTotal" href="#/api/sap.m.P13nColumnsItem/methods/getTotal">total</a>.</p><p>This property contains the total flag of a table column.</p>
             * @returns boolean <p>Value of property <code>total</code></p>
             */
            getTotal(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nColumnsItem/methods/getVisible">visible</a>.</p><p>This property decides whether a <code>P13nColumnsItem</code> is visible</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.P13nColumnsItem/methods/getWidth">width</a>.</p><p>This property contains the with of a table column.</p>
             * @returns string <p>Value of property <code>width</code></p>
             */
            getWidth(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nColumnsItem/methods/getColumnKey">columnKey</a>.</p><p>This property contains the unique table column key</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nColumnsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nColumnsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndex" href="#/api/sap.m.P13nColumnsItem/methods/getIndex">index</a>.</p><p>This property contains the index of a table column</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iIndex <p>New value for property <code>index</code></p>
             * @returns sap.m.P13nColumnsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIndex(iIndex: number): sap.m.P13nColumnsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTotal" href="#/api/sap.m.P13nColumnsItem/methods/getTotal">total</a>.</p><p>This property contains the total flag of a table column.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bTotal <p>New value for property <code>total</code></p>
             * @returns sap.m.P13nColumnsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTotal(bTotal: boolean): sap.m.P13nColumnsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nColumnsItem/methods/getVisible">visible</a>.</p><p>This property decides whether a <code>P13nColumnsItem</code> is visible</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.P13nColumnsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.P13nColumnsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.P13nColumnsItem/methods/getWidth">width</a>.</p><p>This property contains the with of a table column.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.P13nColumnsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: string): sap.m.P13nColumnsItem;
        }
        /**
         * <p>The <code>P13nColumnsPanel</code> control is used to define column-specific settings for table personalization.</p>
         */
        export class P13nColumnsPanel extends sap.m.P13nPanel {
            /**
             * <p>Constructor for a new P13nColumnsPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some columnsItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p>
             * @param {sap.m.P13nColumnsItem} oColumnsItem <p>The columnsItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addColumnsItem(oColumnsItem: sap.m.P13nColumnsItem): sap.m.P13nColumnsPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeColumnsItems" href="#/api/sap.m.P13nColumnsPanel/events/changeColumnsItems">changeColumnsItems</a> event of this <code>sap.m.P13nColumnsPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.</p><p>Event raised if <code>columnsItems</code> is changed or new one needs to be created in the model.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChangeColumnsItems(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nColumnsPanel;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindColumnsItems(oBindingInfo: any): sap.m.P13nColumnsPanel;
            /**
             * <p>Destroys all the columnsItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyColumnsItems(): sap.m.P13nColumnsPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeColumnsItems" href="#/api/sap.m.P13nColumnsPanel/events/changeColumnsItems">changeColumnsItems</a> event of this <code>sap.m.P13nColumnsPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChangeColumnsItems(fnFunction: Function, oListener?: any): sap.m.P13nColumnsPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeColumnsItems" href="#/api/sap.m.P13nColumnsPanel/events/changeColumnsItems">changeColumnsItems</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChangeColumnsItems(mParameters?: any): sap.m.P13nColumnsPanel;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p><p>List of columns that has been changed.</p>
             * @returns sap.m.P13nColumnsItem[] 
             */
            getColumnsItems(): sap.m.P13nColumnsItem[];
            /**
             * <p>Delivers a payload for columnsPanel that can be used at consumer side</p>
             * @returns any <p>oPayload, which contains useful information</p>
             */
            getOkPayload(): any;
            /**
             * <p>This method can be overwritten by subclass in order to return a payload for Reset action</p>
             */
            getResetPayload(): any;
            /**
             * <p>Delivers a payload for columnsPanel that can be used at consumer side</p>
             * @returns any <p>oPayload, which contains useful information</p>
             */
            getResetPayload(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleItemsThreshold" href="#/api/sap.m.P13nColumnsPanel/methods/getVisibleItemsThreshold">visibleItemsThreshold</a>.</p><p>Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down. When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The property needs to be activated and set to the required value by the consuming application to ensure that the warning message is shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are selected:</p><p><pre>
            customData&gt;
            core:CustomData key=&quot;p13nDialogSettings&quot;
            value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
            /customData&gt;
            </pre></p><p>Default value is <code>-1</code>.</p>
             * @returns number <p>Value of property <code>visibleItemsThreshold</code></p>
             */
            getVisibleItemsThreshold(): number;
            /**
             * <p>Checks for the provided <code>sap.m.P13nColumnsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nColumnsItem} oColumnsItem <p>The columnsItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfColumnsItem(oColumnsItem: sap.m.P13nColumnsItem): number;
            /**
             * <p>Inserts a columnsItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p>
             * @param {sap.m.P13nColumnsItem} oColumnsItem <p>The columnsItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the columnsItem should be inserted at; for a negative value of <code>iIndex</code>, the columnsItem is inserted at position 0; for a value greater than the current size of the aggregation, the columnsItem is inserted at the last position</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertColumnsItem(oColumnsItem: sap.m.P13nColumnsItem, iIndex: number): sap.m.P13nColumnsPanel;
            /**
             * <p>This method does a re-initialization of the panel</p>
             */
            reInitialize(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nColumnsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllColumnsItems(): sap.m.P13nColumnsItem[];
            /**
             * <p>Removes a columnsItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a>.</p>
             * @param {number | string | sap.m.P13nColumnsItem} vColumnsItem <p>The columnsItem to remove or its index or id</p>
             * @returns sap.m.P13nColumnsItem <p>The removed columnsItem or <code>null</code></p>
             */
            removeColumnsItem(vColumnsItem: number | string | sap.m.P13nColumnsItem): sap.m.P13nColumnsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleItemsThreshold" href="#/api/sap.m.P13nColumnsPanel/methods/getVisibleItemsThreshold">visibleItemsThreshold</a>.</p><p>Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down. When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The property needs to be activated and set to the required value by the consuming application to ensure that the warning message is shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are selected:</p><p><pre>
            customData&gt;
            core:CustomData key=&quot;p13nDialogSettings&quot;
            value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
            /customData&gt;
            </pre></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {number} iVisibleItemsThreshold <p>New value for property <code>visibleItemsThreshold</code></p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisibleItemsThreshold(iVisibleItemsThreshold: number): sap.m.P13nColumnsPanel;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnsItems" href="#/api/sap.m.P13nColumnsPanel/methods/getColumnsItems">columnsItems</a> from model data.</p>
             * @returns sap.m.P13nColumnsPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindColumnsItems(): sap.m.P13nColumnsPanel;
        }
        /**
         * <p>The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of the new Personalization dialog.</p>
         */
        export class P13nConditionPanel extends sap.ui.core.Control {
            /**
             * <p>creates and returns a formatted text for the specified condition</p>
             * @param {string} sOperation <p>the operation type sap.m.P13nConditionOperation</p>
             * @param {string} sValue1 <p>value of the first range field</p>
             * @param {string} sValue2 <p>value of the second range field</p>
             * @param {boolean} bExclude <p>indicates if the range is an Exclude range</p>
             * @returns string <p>the range token text. An empty string when no operation matches or the values for the operation are wrong</p>
             */
            static getFormatedConditionText(sOperation: string, sValue1: string, sValue2: string, bExclude: boolean): string;
            /**
             * <p>Constructor for a new P13nConditionPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>add a single condition.</p>
             * @param {any} oCondition <p>the new condition of type <code>{ "key": "007", "operation": any.Ascending, "keyField": "keyFieldKey", "value1": "", "value2": ""};</code></p>
             */
            addCondition(oCondition: any): void;
            /**
             * <p>add a single KeyField</p>
             * @param {any} oKeyField <p>{key: "CompanyCode", text: "ID"}</p>
             */
            addKeyField(oKeyField: any): void;
            /**
             * <p>add a single operation</p>
             * @param {sap.m.P13nConditionOperation} oOperation 
             * @param {string} sType <p>defines the type for which this operations will be used.</p>
             */
            addOperation(oOperation: any, sType: string): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dataChange" href="#/api/sap.m.P13nConditionPanel/events/dataChange">dataChange</a> event of this <code>sap.m.P13nConditionPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nConditionPanel</code> itself.</p><p>Workaround for updating the binding</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nConditionPanel</code> itself</p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDataChange(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nConditionPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dataChange" href="#/api/sap.m.P13nConditionPanel/events/dataChange">dataChange</a> event of this <code>sap.m.P13nConditionPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDataChange(fnFunction: Function, oListener?: any): sap.m.P13nConditionPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dataChange" href="#/api/sap.m.P13nConditionPanel/events/dataChange">dataChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDataChange(mParameters?: any): sap.m.P13nConditionPanel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlwaysShowAddIcon" href="#/api/sap.m.P13nConditionPanel/methods/getAlwaysShowAddIcon">alwaysShowAddIcon</a>.</p><p>makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a new condition.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>alwaysShowAddIcon</code></p>
             */
            getAlwaysShowAddIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoAddNewRow" href="#/api/sap.m.P13nConditionPanel/methods/getAutoAddNewRow">autoAddNewRow</a>.</p><p>adds initial a new empty condition row</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>autoAddNewRow</code></p>
             */
            getAutoAddNewRow(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoReduceKeyFieldItems" href="#/api/sap.m.P13nConditionPanel/methods/getAutoReduceKeyFieldItems">autoReduceKeyFieldItems</a>.</p><p>KeyField value can only be selected once. When you set the property to <code>true</code> the ConditionPanel will automatically offers on the KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are listed.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>autoReduceKeyFieldItems</code></p>
             */
            getAutoReduceKeyFieldItems(): boolean;
            /**
             * <p>returns array of all defined conditions.</p>
             * @returns object[] <p>array of Conditions</p>
             */
            getConditions(): object[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nConditionPanel/methods/getContainerQuery">containerQuery</a>.</p><p>defines if the mediaQuery or a ContainerResize will be used for layout update. When the <code>P13nConditionPanel</code> is used on a dialog the property should be set to <code>true</code>!</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>containerQuery</code></p>
             */
            getContainerQuery(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisableFirstRemoveIcon" href="#/api/sap.m.P13nConditionPanel/methods/getDisableFirstRemoveIcon">disableFirstRemoveIcon</a>.</p><p>makes the remove icon on the first condition row disabled when only one condition exist.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>disableFirstRemoveIcon</code></p>
             */
            getDisableFirstRemoveIcon(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.P13nConditionPanel/methods/getDisplayFormat">displayFormat</a>.</p><p>This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be converted to upperCase.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExclude" href="#/api/sap.m.P13nConditionPanel/methods/getExclude">exclude</a>.</p><p>exclude options for filter</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>exclude</code></p>
             */
            getExclude(): boolean;
            /**
             * <p>getter for KeyFields array</p>
             * @returns object[] <p>array of KeyFields <code>[{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]</code></p>
             */
            getKeyFields(): object[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nConditionPanel/methods/getLayoutMode">layoutMode</a>.</p><p>can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or "Phone" you can set a fixed layout.</p>
             * @returns string <p>Value of property <code>layoutMode</code></p>
             */
            getLayoutMode(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxConditions" href="#/api/sap.m.P13nConditionPanel/methods/getMaxConditions">maxConditions</a>.</p><p>defines the max number of conditions on the ConditionPanel</p><p>Default value is <code>-1</code>.</p>
             * @returns string <p>Value of property <code>maxConditions</code></p>
             */
            getMaxConditions(): string;
            /**
             * <p>returns the default array of operations</p>
             * @param {string} sType <p>defines the type for which the operations should be returned.</p>
             * @returns sap.m.P13nConditionOperation[] <p>array of operations</p>
             */
            getOperations(sType: string): any[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowLabel" href="#/api/sap.m.P13nConditionPanel/methods/getShowLabel">showLabel</a>.</p><p>show additional labels in the condition</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showLabel</code></p>
             */
            getShowLabel(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUsePrevConditionSetting" href="#/api/sap.m.P13nConditionPanel/methods/getUsePrevConditionSetting">usePrevConditionSetting</a>.</p><p>new added condition use the settings from the previous condition as default.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>usePrevConditionSetting</code></p>
             */
            getUsePrevConditionSetting(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nConditionPanel/methods/getValidationExecutor">validationExecutor</a>.</p><p>Calls the validation listener tbd...</p>
             * @returns any <p>Value of property <code>validationExecutor</code></p>
             */
            getValidationExecutor(): any;
            /**
             * <p>insert a single condition.</p>
             * @param {any} oCondition <p>the new condition of type <code>{ "key": "007", "operation": any.Ascending, "keyField": "keyFieldKey", "value1": "", "value2": ""};</code></p>
             * @param {number} index <p>of the new condition</p>
             */
            insertCondition(oCondition: any, index: number): void;
            /**
             * <p>remove all conditions.</p>
             */
            removeAllConditions(): void;
            /**
             * <p>removes all KeyFields</p>
             */
            removeAllKeyFields(): void;
            /**
             * <p>remove all operations</p>
             * @param {string} sType <p>defines the type for which all operations should be removed</p>
             */
            removeAllOperations(sType: string): void;
            /**
             * <p>remove a single condition.</p>
             * @param {any} vCondition <p>is the condition which should be removed. can be either a string with the key of the condition of the condition object itself.</p>
             */
            removeCondition(vCondition: any): void;
            /**
             * <p>removes all invalid conditions.</p>
             */
            removeInvalidConditions(): void;
            /**
             * <p>removes all errors/warning states from the value1/2 fields of all conditions.</p>
             */
            removeValidationErrors(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoAddNewRow" href="#/api/sap.m.P13nConditionPanel/methods/getAutoAddNewRow">autoAddNewRow</a>.</p><p>adds initial a new empty condition row</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bAutoAddNewRow <p>New value for property <code>autoAddNewRow</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutoAddNewRow(bAutoAddNewRow: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoReduceKeyFieldItems" href="#/api/sap.m.P13nConditionPanel/methods/getAutoReduceKeyFieldItems">autoReduceKeyFieldItems</a>.</p><p>KeyField value can only be selected once. When you set the property to <code>true</code> the ConditionPanel will automatically offers on the KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are listed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bAutoReduceKeyFieldItems <p>New value for property <code>autoReduceKeyFieldItems</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutoReduceKeyFieldItems(bAutoReduceKeyFieldItems: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>This method must be used to assign a list of conditions.</p>
             * @param {object[]} aConditions <p>array of Conditions.</p>
             */
            setConditions(aConditions: object[]): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisableFirstRemoveIcon" href="#/api/sap.m.P13nConditionPanel/methods/getDisableFirstRemoveIcon">disableFirstRemoveIcon</a>.</p><p>makes the remove icon on the first condition row disabled when only one condition exist.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisableFirstRemoveIcon <p>New value for property <code>disableFirstRemoveIcon</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisableFirstRemoveIcon(bDisableFirstRemoveIcon: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.P13nConditionPanel/methods/getDisplayFormat">displayFormat</a>.</p><p>This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be converted to upperCase.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDisplayFormat <p>New value for property <code>displayFormat</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayFormat(sDisplayFormat: string): sap.m.P13nConditionPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExclude" href="#/api/sap.m.P13nConditionPanel/methods/getExclude">exclude</a>.</p><p>exclude options for filter</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bExclude <p>New value for property <code>exclude</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setExclude(bExclude: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>This method allows you to specify the KeyFields for the conditions. You can set an array of object with Key and Text properties to define the keyfields.</p>
             * @param {any[]} aKeyFields <p>array of KeyFields <code>[{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]</code></p>
             */
            setKeyFields(aKeyFields: any[]): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxConditions" href="#/api/sap.m.P13nConditionPanel/methods/getMaxConditions">maxConditions</a>.</p><p>defines the max number of conditions on the ConditionPanel</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {string} sMaxConditions <p>New value for property <code>maxConditions</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxConditions(sMaxConditions: string): sap.m.P13nConditionPanel;
            /**
             * <p>setter for the supported operations which we show per condition row. This array of "default" operations will only be used when we do not have on the keyfield itself some specific operations and a keyfield is of not of type date or numeric.</p>
             * @param {sap.m.P13nConditionOperation[]} aOperations <p>array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code></p>
             * @param {string} sType <p>defines the type for which this operations will be used. is <code>sType</code> is not defined the operations will be used as default operations.</p>
             */
            setOperations(aOperations: any[], sType: string): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowLabel" href="#/api/sap.m.P13nConditionPanel/methods/getShowLabel">showLabel</a>.</p><p>show additional labels in the condition</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowLabel <p>New value for property <code>showLabel</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowLabel(bShowLabel: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUsePrevConditionSetting" href="#/api/sap.m.P13nConditionPanel/methods/getUsePrevConditionSetting">usePrevConditionSetting</a>.</p><p>new added condition use the settings from the previous condition as default.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bUsePrevConditionSetting <p>New value for property <code>usePrevConditionSetting</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUsePrevConditionSetting(bUsePrevConditionSetting: boolean): sap.m.P13nConditionPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nConditionPanel/methods/getValidationExecutor">validationExecutor</a>.</p><p>Calls the validation listener tbd...</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oValidationExecutor <p>New value for property <code>validationExecutor</code></p>
             * @returns sap.m.P13nConditionPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidationExecutor(oValidationExecutor: any): sap.m.P13nConditionPanel;
        }
        /**
         * <p>The P13nDialog control provides a dialog that contains one or more panels. On each of the panels, one or more changes with regards to a table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter tables.</p>
         */
        export class P13nDialog extends sap.m.Dialog {
            /**
             * <p>Constructor for a new P13nDialog.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some panel to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p>
             * @param {sap.m.P13nPanel} oPanel <p>The panel to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addPanel(oPanel: sap.m.P13nPanel): sap.m.P13nDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.P13nDialog/events/cancel">cancel</a> event of this <code>sap.m.P13nDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.</p><p>Event fired if the 'cancel' button in <code>P13nDialog</code> is clicked.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancel(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="ok" href="#/api/sap.m.P13nDialog/events/ok">ok</a> event of this <code>sap.m.P13nDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.</p><p>Event fired if the 'ok' button in <code>P13nDialog</code> is clicked.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachOk(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.P13nDialog/events/reset">reset</a> event of this <code>sap.m.P13nDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.</p><p>Event fired if the 'reset' button in <code>P13nDialog</code> is clicked.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachReset(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindPanels(oBindingInfo: any): sap.m.P13nDialog;
            /**
             * <p>Destroys all the panels in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPanels(): sap.m.P13nDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.P13nDialog/events/cancel">cancel</a> event of this <code>sap.m.P13nDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancel(fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="ok" href="#/api/sap.m.P13nDialog/events/ok">ok</a> event of this <code>sap.m.P13nDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachOk(fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.P13nDialog/events/reset">reset</a> event of this <code>sap.m.P13nDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachReset(fnFunction: Function, oListener?: any): sap.m.P13nDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.P13nDialog/events/cancel">cancel</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancel(mParameters?: any): sap.m.P13nDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="ok" href="#/api/sap.m.P13nDialog/events/ok">ok</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireOk(mParameters?: any): sap.m.P13nDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="reset" href="#/api/sap.m.P13nDialog/events/reset">reset</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireReset(mParameters?: any): sap.m.P13nDialog;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialVisiblePanelType" href="#/api/sap.m.P13nDialog/methods/getInitialVisiblePanelType">initialVisiblePanelType</a>.</p><p>This property determines which panel is initially shown when dialog is opened. If not defined then the first visible panel of <code>panels</code> aggregation is taken. Setting value after the dialog is opened has no effect anymore. Due to extensibility reason the type should be <code>string</code>. So it is feasible to add a custom panel without expanding the type.</p>
             * @returns string <p>Value of property <code>initialVisiblePanelType</code></p>
             */
            getInitialVisiblePanelType(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p><p>The dialog panels displayed in the dialog.</p>
             * @returns sap.m.P13nPanel[] 
             */
            getPanels(): sap.m.P13nPanel[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowReset" href="#/api/sap.m.P13nDialog/methods/getShowReset">showReset</a>.</p><p>This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showReset</code></p>
             */
            getShowReset(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowResetEnabled" href="#/api/sap.m.P13nDialog/methods/getShowResetEnabled">showResetEnabled</a>.</p><p>This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showResetEnabled</code></p>
             */
            getShowResetEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nDialog/methods/getValidationExecutor">validationExecutor</a>.</p><p>Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order to perform cross-model validation checks.</p>
             * @returns any <p>Value of property <code>validationExecutor</code></p>
             */
            getValidationExecutor(): any;
            /**
             * <p>Returns visible panel.</p>
             * @returns sap.m.P13nPanel|null <p>panel</p>
             */
            getVisiblePanel(): sap.m.P13nPanel | null;
            /**
             * <p>Checks for the provided <code>sap.m.P13nPanel</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nPanel} oPanel <p>The panel whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPanel(oPanel: sap.m.P13nPanel): number;
            /**
             * <p>Inserts a panel into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p>
             * @param {sap.m.P13nPanel} oPanel <p>The panel to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the panel should be inserted at; for a negative value of <code>iIndex</code>, the panel is inserted at position 0; for a value greater than the current size of the aggregation, the panel is inserted at the last position</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPanel(oPanel: sap.m.P13nPanel, iIndex: number): sap.m.P13nDialog;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nPanel[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPanels(): sap.m.P13nPanel[];
            /**
             * <p>Removes a panel from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a>.</p>
             * @param {number | string | sap.m.P13nPanel} vPanel <p>The panel to remove or its index or id</p>
             * @returns sap.m.P13nPanel <p>The removed panel or <code>null</code></p>
             */
            removePanel(vPanel: number | string | sap.m.P13nPanel): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialVisiblePanelType" href="#/api/sap.m.P13nDialog/methods/getInitialVisiblePanelType">initialVisiblePanelType</a>.</p><p>This property determines which panel is initially shown when dialog is opened. If not defined then the first visible panel of <code>panels</code> aggregation is taken. Setting value after the dialog is opened has no effect anymore. Due to extensibility reason the type should be <code>string</code>. So it is feasible to add a custom panel without expanding the type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sInitialVisiblePanelType <p>New value for property <code>initialVisiblePanelType</code></p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialVisiblePanelType(sInitialVisiblePanelType: string): sap.m.P13nDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowReset" href="#/api/sap.m.P13nDialog/methods/getShowReset">showReset</a>.</p><p>This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowReset <p>New value for property <code>showReset</code></p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowReset(bShowReset: boolean): sap.m.P13nDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowResetEnabled" href="#/api/sap.m.P13nDialog/methods/getShowResetEnabled">showResetEnabled</a>.</p><p>This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowResetEnabled <p>New value for property <code>showResetEnabled</code></p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowResetEnabled(bShowResetEnabled: boolean): sap.m.P13nDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nDialog/methods/getValidationExecutor">validationExecutor</a>.</p><p>Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order to perform cross-model validation checks.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oValidationExecutor <p>New value for property <code>validationExecutor</code></p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidationExecutor(oValidationExecutor: any): sap.m.P13nDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPanels" href="#/api/sap.m.P13nDialog/methods/getPanels">panels</a> from model data.</p>
             * @returns sap.m.P13nDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindPanels(): sap.m.P13nDialog;
        }
        /**
         * <p>Type for <code>columnsItems</code> aggregation in <code>P13nDimMeasurePanel</code> control.</p>
         */
        export class P13nDimMeasureItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new P13nDimMeasureItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nDimMeasureItem/methods/getColumnKey">columnKey</a>.</p><p>Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndex" href="#/api/sap.m.P13nDimMeasureItem/methods/getIndex">index</a>.</p><p>Specifies the order of visible dimensions or measures of a chart.</p><p>Default value is <code>-1</code>.</p>
             * @returns number <p>Value of property <code>index</code></p>
             */
            getIndex(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRole" href="#/api/sap.m.P13nDimMeasureItem/methods/getRole">role</a>.</p><p>Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.</p>
             * @returns string <p>Value of property <code>role</code></p>
             */
            getRole(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nDimMeasureItem/methods/getVisible">visible</a>.</p><p>Specifies the visibility of dimensions or measures.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nDimMeasureItem/methods/getColumnKey">columnKey</a>.</p><p>Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nDimMeasureItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nDimMeasureItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIndex" href="#/api/sap.m.P13nDimMeasureItem/methods/getIndex">index</a>.</p><p>Specifies the order of visible dimensions or measures of a chart.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {number} iIndex <p>New value for property <code>index</code></p>
             * @returns sap.m.P13nDimMeasureItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIndex(iIndex: number): sap.m.P13nDimMeasureItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRole" href="#/api/sap.m.P13nDimMeasureItem/methods/getRole">role</a>.</p><p>Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sRole <p>New value for property <code>role</code></p>
             * @returns sap.m.P13nDimMeasureItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRole(sRole: string): sap.m.P13nDimMeasureItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nDimMeasureItem/methods/getVisible">visible</a>.</p><p>Specifies the visibility of dimensions or measures.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.P13nDimMeasureItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.P13nDimMeasureItem;
        }
        /**
         * <p>The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the visibility, the order and roles of dimensions and measures for table personalization.</p>
         */
        export class P13nDimMeasurePanel extends sap.m.P13nPanel {
            /**
             * <p>Constructor for a new P13nDimMeasurePanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some availableChartType to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p>
             * @param {sap.ui.core.Item} oAvailableChartType <p>The availableChartType to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAvailableChartType(oAvailableChartType: sap.ui.core.Item): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Adds some dimMeasureItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p>
             * @param {sap.m.P13nDimMeasureItem} oDimMeasureItem <p>The dimMeasureItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeChartType" href="#/api/sap.m.P13nDimMeasurePanel/events/changeChartType">changeChartType</a> event of this <code>sap.m.P13nDimMeasurePanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nDimMeasurePanel</code> itself.</p><p>Event raised when a <code>ChartType</code> has been updated.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nDimMeasurePanel</code> itself</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChangeChartType(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/events/changeDimMeasureItems">changeDimMeasureItems</a> event of this <code>sap.m.P13nDimMeasurePanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nDimMeasurePanel</code> itself.</p><p>Event raised when one or more <code>DimMeasureItems</code> has been updated. Aggregation <code>DimMeasureItems</code> should be updated outside...</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nDimMeasurePanel</code> itself</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChangeDimMeasureItems(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindDimMeasureItems(oBindingInfo: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Destroys all the availableChartTypes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAvailableChartTypes(): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Destroys all the dimMeasureItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyDimMeasureItems(): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeChartType" href="#/api/sap.m.P13nDimMeasurePanel/events/changeChartType">changeChartType</a> event of this <code>sap.m.P13nDimMeasurePanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChangeChartType(fnFunction: Function, oListener?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/events/changeDimMeasureItems">changeDimMeasureItems</a> event of this <code>sap.m.P13nDimMeasurePanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChangeDimMeasureItems(fnFunction: Function, oListener?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeChartType" href="#/api/sap.m.P13nDimMeasurePanel/events/changeChartType">changeChartType</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChangeChartType(mParameters?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="changeDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/events/changeDimMeasureItems">changeDimMeasureItems</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChangeDimMeasureItems(mParameters?: any): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p><p>Specifies available chart types.</p>
             * @returns sap.ui.core.Item[] 
             */
            getAvailableChartTypes(): sap.ui.core.Item[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChartTypeKey" href="#/api/sap.m.P13nDimMeasurePanel/methods/getChartTypeKey">chartTypeKey</a>.</p><p>Specifies a chart type key.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>chartTypeKey</code></p>
             */
            getChartTypeKey(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p><p>List of columns that has been changed.</p>
             * @returns sap.m.P13nDimMeasureItem[] 
             */
            getDimMeasureItems(): sap.m.P13nDimMeasureItem[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oAvailableChartType <p>The availableChartType whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAvailableChartType(oAvailableChartType: sap.ui.core.Item): number;
            /**
             * <p>Checks for the provided <code>sap.m.P13nDimMeasureItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nDimMeasureItem} oDimMeasureItem <p>The dimMeasureItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem): number;
            /**
             * <p>Inserts a availableChartType into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p>
             * @param {sap.ui.core.Item} oAvailableChartType <p>The availableChartType to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the availableChartType should be inserted at; for a negative value of <code>iIndex</code>, the availableChartType is inserted at position 0; for a value greater than the current size of the aggregation, the availableChartType is inserted at the last position</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAvailableChartType(oAvailableChartType: sap.ui.core.Item, iIndex: number): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Inserts a dimMeasureItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p>
             * @param {sap.m.P13nDimMeasureItem} oDimMeasureItem <p>The dimMeasureItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the dimMeasureItem should be inserted at; for a negative value of <code>iIndex</code>, the dimMeasureItem is inserted at position 0; for a value greater than the current size of the aggregation, the dimMeasureItem is inserted at the last position</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertDimMeasureItem(oDimMeasureItem: sap.m.P13nDimMeasureItem, iIndex: number): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAvailableChartTypes(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nDimMeasureItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllDimMeasureItems(): sap.m.P13nDimMeasureItem[];
            /**
             * <p>Removes a availableChartType from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAvailableChartTypes" href="#/api/sap.m.P13nDimMeasurePanel/methods/getAvailableChartTypes">availableChartTypes</a>.</p>
             * @param {number | string | sap.ui.core.Item} vAvailableChartType <p>The availableChartType to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed availableChartType or <code>null</code></p>
             */
            removeAvailableChartType(vAvailableChartType: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes a dimMeasureItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a>.</p>
             * @param {number | string | sap.m.P13nDimMeasureItem} vDimMeasureItem <p>The dimMeasureItem to remove or its index or id</p>
             * @returns sap.m.P13nDimMeasureItem <p>The removed dimMeasureItem or <code>null</code></p>
             */
            removeDimMeasureItem(vDimMeasureItem: number | string | sap.m.P13nDimMeasureItem): sap.m.P13nDimMeasureItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChartTypeKey" href="#/api/sap.m.P13nDimMeasurePanel/methods/getChartTypeKey">chartTypeKey</a>.</p><p>Specifies a chart type key.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sChartTypeKey <p>New value for property <code>chartTypeKey</code></p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setChartTypeKey(sChartTypeKey: string): sap.m.P13nDimMeasurePanel;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDimMeasureItems" href="#/api/sap.m.P13nDimMeasurePanel/methods/getDimMeasureItems">dimMeasureItems</a> from model data.</p>
             * @returns sap.m.P13nDimMeasurePanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindDimMeasureItems(): sap.m.P13nDimMeasurePanel;
        }
        /**
         * <p>Type for <code>filterItems</code> aggregation in P13nFilterPanel control.</p>
         */
        export class P13nFilterItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new P13nFilterItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nFilterItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExclude" href="#/api/sap.m.P13nFilterItem/methods/getExclude">exclude</a>.</p><p>defines if the filter is an include or exclude filter item</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>exclude</code></p>
             */
            getExclude(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nFilterItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p>
             * @returns string <p>Value of property <code>operation</code></p>
             */
            getOperation(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue1" href="#/api/sap.m.P13nFilterItem/methods/getValue1">value1</a>.</p><p>value of the filter</p>
             * @returns string <p>Value of property <code>value1</code></p>
             */
            getValue1(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue2" href="#/api/sap.m.P13nFilterItem/methods/getValue2">value2</a>.</p><p>to value of the between filter</p>
             * @returns string <p>Value of property <code>value2</code></p>
             */
            getValue2(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nFilterItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nFilterItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExclude" href="#/api/sap.m.P13nFilterItem/methods/getExclude">exclude</a>.</p><p>defines if the filter is an include or exclude filter item</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bExclude <p>New value for property <code>exclude</code></p>
             * @returns sap.m.P13nFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setExclude(bExclude: boolean): sap.m.P13nFilterItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nFilterItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sOperation <p>New value for property <code>operation</code></p>
             * @returns sap.m.P13nFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOperation(sOperation: string): sap.m.P13nFilterItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue1" href="#/api/sap.m.P13nFilterItem/methods/getValue1">value1</a>.</p><p>value of the filter</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue1 <p>New value for property <code>value1</code></p>
             * @returns sap.m.P13nFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue1(sValue1: string): sap.m.P13nFilterItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue2" href="#/api/sap.m.P13nFilterItem/methods/getValue2">value2</a>.</p><p>to value of the between filter</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue2 <p>New value for property <code>value2</code></p>
             * @returns sap.m.P13nFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue2(sValue2: string): sap.m.P13nFilterItem;
        }
        /**
         * <p>The P13nFilterPanel control is used to define filter-specific settings for table personalization.</p>
         */
        export class P13nFilterPanel extends sap.m.P13nPanel {
            /**
             * <p>Constructor for a new P13nFilterPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some filterItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p>
             * @param {sap.m.P13nFilterItem} oFilterItem <p>The filterItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addFilterItem(oFilterItem: sap.m.P13nFilterItem): sap.m.P13nFilterPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addFilterItem" href="#/api/sap.m.P13nFilterPanel/events/addFilterItem">addFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.</p><p>Event raised if a filter item has been added.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAddFilterItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterItemChanged" href="#/api/sap.m.P13nFilterPanel/events/filterItemChanged">filterItemChanged</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.</p><p>Event raised if a filter item has been changed. reason can be added, updated or removed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFilterItemChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeFilterItem" href="#/api/sap.m.P13nFilterPanel/events/removeFilterItem">removeFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.</p><p>Event raised if a filter item has been removed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRemoveFilterItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFilterItem" href="#/api/sap.m.P13nFilterPanel/events/updateFilterItem">updateFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.</p><p>Event raised if a filter item has been updated.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUpdateFilterItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindFilterItems(oBindingInfo: any): sap.m.P13nFilterPanel;
            /**
             * <p>Destroys all the filterItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFilterItems(): sap.m.P13nFilterPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addFilterItem" href="#/api/sap.m.P13nFilterPanel/events/addFilterItem">addFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAddFilterItem(fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterItemChanged" href="#/api/sap.m.P13nFilterPanel/events/filterItemChanged">filterItemChanged</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFilterItemChanged(fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeFilterItem" href="#/api/sap.m.P13nFilterPanel/events/removeFilterItem">removeFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRemoveFilterItem(fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFilterItem" href="#/api/sap.m.P13nFilterPanel/events/updateFilterItem">updateFilterItem</a> event of this <code>sap.m.P13nFilterPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUpdateFilterItem(fnFunction: Function, oListener?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addFilterItem" href="#/api/sap.m.P13nFilterPanel/events/addFilterItem">addFilterItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAddFilterItem(mParameters?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterItemChanged" href="#/api/sap.m.P13nFilterPanel/events/filterItemChanged">filterItemChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFilterItemChanged(mParameters?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeFilterItem" href="#/api/sap.m.P13nFilterPanel/events/removeFilterItem">removeFilterItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRemoveFilterItem(mParameters?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateFilterItem" href="#/api/sap.m.P13nFilterPanel/events/updateFilterItem">updateFilterItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUpdateFilterItem(mParameters?: any): sap.m.P13nFilterPanel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nFilterPanel/methods/getContainerQuery">containerQuery</a>.</p><p>Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>containerQuery</code></p>
             */
            getContainerQuery(): boolean;
            /**
             * <p>Getter for the exclude operations.</p>
             * @param {string} sType <p>the type for which the operations are defined</p>
             * @returns sap.m.P13nConditionOperation[] <p>array of operations [<code>sap.m.P13nConditionOperation.BT</code>, <code>sap.m.P13nConditionOperation.EQ</code>]</p>
             */
            getExcludeOperations(sType: string): any[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p><p>Defines filter items.</p>
             * @returns sap.m.P13nFilterItem[] 
             */
            getFilterItems(): sap.m.P13nFilterItem[];
            /**
             * <p>Getter for the include operations.</p>
             * @param {string} sType <p>for which the operations are defined</p>
             * @returns sap.m.P13nConditionOperation <p>array of operations [<code>sap.m.P13nConditionOperation.BT</code>, <code>sap.m.P13nConditionOperation.EQ</code>]</p>
             */
            getIncludeOperations(sType: string): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nFilterPanel/methods/getLayoutMode">layoutMode</a>.</p><p>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</p>
             * @returns string <p>Value of property <code>layoutMode</code></p>
             */
            getLayoutMode(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxExcludes" href="#/api/sap.m.P13nFilterPanel/methods/getMaxExcludes">maxExcludes</a>.</p><p>Defines the maximum number of exclude filters.</p><p>Default value is <code>-1</code>.</p>
             * @returns string <p>Value of property <code>maxExcludes</code></p>
             */
            getMaxExcludes(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxIncludes" href="#/api/sap.m.P13nFilterPanel/methods/getMaxIncludes">maxIncludes</a>.</p><p>Defines the maximum number of include filters.</p><p>Default value is <code>-1</code>.</p>
             * @returns string <p>Value of property <code>maxIncludes</code></p>
             */
            getMaxIncludes(): string;
            /**
             * <p>Checks for the provided <code>sap.m.P13nFilterItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nFilterItem} oFilterItem <p>The filterItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfFilterItem(oFilterItem: sap.m.P13nFilterItem): number;
            /**
             * <p>Inserts a filterItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p>
             * @param {sap.m.P13nFilterItem} oFilterItem <p>The filterItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the filterItem should be inserted at; for a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value greater than the current size of the aggregation, the filterItem is inserted at the last position</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertFilterItem(oFilterItem: sap.m.P13nFilterItem, iIndex: number): sap.m.P13nFilterPanel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nFilterItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllFilterItems(): sap.m.P13nFilterItem[];
            /**
             * <p>Removes a filterItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a>.</p>
             * @param {number | string | sap.m.P13nFilterItem} vFilterItem <p>The filterItem to remove or its index or id</p>
             * @returns sap.m.P13nFilterItem <p>The removed filterItem or <code>null</code></p>
             */
            removeFilterItem(vFilterItem: number | string | sap.m.P13nFilterItem): sap.m.P13nFilterItem;
            /**
             * <p>Removes all invalid conditions.</p>
             */
            removeInvalidConditions(): void;
            /**
             * <p>Removes all errors and warnings states from of all filter conditions.</p>
             */
            removeValidationErrors(): void;
            /**
             * <p>Sets the array of conditions.</p>
             * @param {object[]} aConditions <p>the complete list of conditions</p>
             * @returns sap.m.P13nFilterPanel <p>this for chaining</p>
             */
            setConditions(aConditions: object[]): sap.m.P13nFilterPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nFilterPanel/methods/getContainerQuery">containerQuery</a>.</p><p>Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bContainerQuery <p>New value for property <code>containerQuery</code></p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContainerQuery(bContainerQuery: boolean): sap.m.P13nFilterPanel;
            /**
             * <p>Setter for the supported exclude operations array.</p>
             * @param {sap.m.P13nConditionOperation[]} aOperation <p>array of operations [<code>sap.m.P13nConditionOperation.BT</code>, <code>sap.m.P13nConditionOperation.EQ</code>]</p>
             * @param {string} sType <p>the type for which the operations are defined</p>
             */
            setExcludeOperations(aOperation: any[], sType: string): void;
            /**
             * <p>Setter for the supported Include operations array.</p>
             * @param {sap.m.P13nConditionOperation[]} aOperation <p>array of operations [<code>sap.m.P13nConditionOperation.BT</code>, <code>sap.m.P13nConditionOperation.EQ</code>]</p>
             * @param {string} sType <p>the type for which the operations are defined</p>
             */
            setIncludeOperations(aOperation: any[], sType: string): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nFilterPanel/methods/getLayoutMode">layoutMode</a>.</p><p>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or"Phone" you can set a fixed layout.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLayoutMode <p>New value for property <code>layoutMode</code></p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLayoutMode(sLayoutMode: string): sap.m.P13nFilterPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxExcludes" href="#/api/sap.m.P13nFilterPanel/methods/getMaxExcludes">maxExcludes</a>.</p><p>Defines the maximum number of exclude filters.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {string} sMaxExcludes <p>New value for property <code>maxExcludes</code></p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxExcludes(sMaxExcludes: string): sap.m.P13nFilterPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxIncludes" href="#/api/sap.m.P13nFilterPanel/methods/getMaxIncludes">maxIncludes</a>.</p><p>Defines the maximum number of include filters.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {string} sMaxIncludes <p>New value for property <code>maxIncludes</code></p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxIncludes(sMaxIncludes: string): sap.m.P13nFilterPanel;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.P13nFilterPanel/methods/getFilterItems">filterItems</a> from model data.</p>
             * @returns sap.m.P13nFilterPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindFilterItems(): sap.m.P13nFilterPanel;
            /**
             * <p>Checks if the entered and modified conditions are correct, marks invalid fields in yellow (warning).</p>
             * @returns boolean <p><code>True</code> if all conditions are valid, <code>false</code> otherwise.</p>
             */
            validateConditions(): boolean;
        }
        /**
         * <p>Type for <code>groupItems</code> aggregation in P13nGroupPanel control.</p>
         */
        export class P13nGroupItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new P13nGroupItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nGroupItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nGroupItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p>
             * @returns string <p>Value of property <code>operation</code></p>
             */
            getOperation(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIfGrouped" href="#/api/sap.m.P13nGroupItem/methods/getShowIfGrouped">showIfGrouped</a>.</p><p>make the grouped column as normalcolumn visible</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showIfGrouped</code></p>
             */
            getShowIfGrouped(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nGroupItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nGroupItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nGroupItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nGroupItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sOperation <p>New value for property <code>operation</code></p>
             * @returns sap.m.P13nGroupItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOperation(sOperation: string): sap.m.P13nGroupItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIfGrouped" href="#/api/sap.m.P13nGroupItem/methods/getShowIfGrouped">showIfGrouped</a>.</p><p>make the grouped column as normalcolumn visible</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowIfGrouped <p>New value for property <code>showIfGrouped</code></p>
             * @returns sap.m.P13nGroupItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIfGrouped(bShowIfGrouped: boolean): sap.m.P13nGroupItem;
        }
        /**
         * <p>The P13nGroupPanel control is used to define group-specific settings for table personalization.</p>
         */
        export class P13nGroupPanel extends sap.m.P13nPanel {
            /**
             * <p>Constructor for a new P13nGroupPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some groupItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p>
             * @param {sap.m.P13nGroupItem} oGroupItem <p>The groupItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addGroupItem(oGroupItem: sap.m.P13nGroupItem): sap.m.P13nGroupPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addGroupItem" href="#/api/sap.m.P13nGroupPanel/events/addGroupItem">addGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.</p><p>Event raised if a <code>GroupItem</code> has been added.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAddGroupItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeGroupItem" href="#/api/sap.m.P13nGroupPanel/events/removeGroupItem">removeGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.</p><p>Event raised if a <code>GroupItem</code> has been removed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRemoveGroupItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateGroupItem" href="#/api/sap.m.P13nGroupPanel/events/updateGroupItem">updateGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.</p><p>Event raised if a <code>GroupItem</code> has been updated.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUpdateGroupItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindGroupItems(oBindingInfo: any): sap.m.P13nGroupPanel;
            /**
             * <p>Destroys all the groupItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyGroupItems(): sap.m.P13nGroupPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addGroupItem" href="#/api/sap.m.P13nGroupPanel/events/addGroupItem">addGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAddGroupItem(fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeGroupItem" href="#/api/sap.m.P13nGroupPanel/events/removeGroupItem">removeGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRemoveGroupItem(fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateGroupItem" href="#/api/sap.m.P13nGroupPanel/events/updateGroupItem">updateGroupItem</a> event of this <code>sap.m.P13nGroupPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUpdateGroupItem(fnFunction: Function, oListener?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addGroupItem" href="#/api/sap.m.P13nGroupPanel/events/addGroupItem">addGroupItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAddGroupItem(mParameters?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeGroupItem" href="#/api/sap.m.P13nGroupPanel/events/removeGroupItem">removeGroupItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRemoveGroupItem(mParameters?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateGroupItem" href="#/api/sap.m.P13nGroupPanel/events/updateGroupItem">updateGroupItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUpdateGroupItem(mParameters?: any): sap.m.P13nGroupPanel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nGroupPanel/methods/getContainerQuery">containerQuery</a>.</p><p>Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code> is used in a dialog, the property must be set to true.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>containerQuery</code></p>
             */
            getContainerQuery(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p><p>Defined group items.</p>
             * @returns sap.m.P13nGroupItem[] 
             */
            getGroupItems(): sap.m.P13nGroupItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nGroupPanel/methods/getLayoutMode">layoutMode</a>.</p><p>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or "Phone" you can set a fixed layout.</p>
             * @returns string <p>Value of property <code>layoutMode</code></p>
             */
            getLayoutMode(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxGroups" href="#/api/sap.m.P13nGroupPanel/methods/getMaxGroups">maxGroups</a>.</p><p>Defines the maximum number of groups.</p><p>Default value is <code>-1</code>.</p>
             * @returns string <p>Value of property <code>maxGroups</code></p>
             */
            getMaxGroups(): string;
            /**
             * <p>Checks for the provided <code>sap.m.P13nGroupItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nGroupItem} oGroupItem <p>The groupItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfGroupItem(oGroupItem: sap.m.P13nGroupItem): number;
            /**
             * <p>Inserts a groupItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p>
             * @param {sap.m.P13nGroupItem} oGroupItem <p>The groupItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the groupItem should be inserted at; for a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value greater than the current size of the aggregation, the groupItem is inserted at the last position</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertGroupItem(oGroupItem: sap.m.P13nGroupItem, iIndex: number): sap.m.P13nGroupPanel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nGroupItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllGroupItems(): sap.m.P13nGroupItem[];
            /**
             * <p>Removes a groupItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a>.</p>
             * @param {number | string | sap.m.P13nGroupItem} vGroupItem <p>The groupItem to remove or its index or id</p>
             * @returns sap.m.P13nGroupItem <p>The removed groupItem or <code>null</code></p>
             */
            removeGroupItem(vGroupItem: number | string | sap.m.P13nGroupItem): sap.m.P13nGroupItem;
            /**
             * <p>Removes all invalid group conditions.</p>
             */
            removeInvalidConditions(): void;
            /**
             * <p>Removes all errors/warning states from of all group conditions.</p>
             */
            removeValidationErrors(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nGroupPanel/methods/getContainerQuery">containerQuery</a>.</p><p>Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code> is used in a dialog, the property must be set to true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bContainerQuery <p>New value for property <code>containerQuery</code></p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContainerQuery(bContainerQuery: boolean): sap.m.P13nGroupPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nGroupPanel/methods/getLayoutMode">layoutMode</a>.</p><p>Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or "Phone" you can set a fixed layout.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLayoutMode <p>New value for property <code>layoutMode</code></p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLayoutMode(sLayoutMode: string): sap.m.P13nGroupPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxGroups" href="#/api/sap.m.P13nGroupPanel/methods/getMaxGroups">maxGroups</a>.</p><p>Defines the maximum number of groups.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>-1</code>.</p>
             * @param {string} sMaxGroups <p>New value for property <code>maxGroups</code></p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxGroups(sMaxGroups: string): sap.m.P13nGroupPanel;
            /**
             * <p>Setter for the supported operations array.</p>
             * @param {any[]} aOperations <p>array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code></p>
             */
            setOperations(aOperations: any[]): void;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.P13nGroupPanel/methods/getGroupItems">groupItems</a> from model data.</p>
             * @returns sap.m.P13nGroupPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindGroupItems(): sap.m.P13nGroupPanel;
            /**
             * <p>Checks if the entered or modified conditions are correct, marks invalid fields yellow (Warning) and opens a popup message dialog to let the user know that some values are not correct or missing.</p>
             * @returns boolean <p><code>True</code> if all conditions are valid, <code>false</code> otherwise.</p>
             */
            validateConditions(): boolean;
        }
        /**
         * <p>Base type for <code>items</code> aggregation in <code>P13nPanel</code> control.</p>
         */
        export class P13nItem extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new P13nItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAggregationRole" href="#/api/sap.m.P13nItem/methods/getAggregationRole">aggregationRole</a>.</p><p>Defines aggregation role</p>
             * @returns string <p>Value of property <code>aggregationRole</code></p>
             */
            getAggregationRole(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nItem/methods/getColumnKey">columnKey</a>.</p><p>Can be used as input for subsequent actions.</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.P13nItem/methods/getDescription">description</a>.</p><p>Defines additional information of the link.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFormatSettings" href="#/api/sap.m.P13nItem/methods/getFormatSettings">formatSettings</a>.</p><p>A JSON object containing the formatSettings which will be used to pass additional type/format settings for the entered value. if type==time or date or datetime the object will be used for the DateFormatter, TimeFormatter or DateTimeFormatter</p><p><i>Below you can find a brief example</i></p><p><pre><code>
            {
                    UTC: false,
                    style: "medium" //"short" or "long"
            }
            </code></pre></p>
             * @returns any <p>Value of property <code>formatSettings</code></p>
             */
            getFormatSettings(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHref" href="#/api/sap.m.P13nItem/methods/getHref">href</a>.</p><p>Defines href of a link.</p>
             * @returns string <p>Value of property <code>href</code></p>
             */
            getHref(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIsDefault" href="#/api/sap.m.P13nItem/methods/getIsDefault">isDefault</a>.</p><p>the column with isDefault==true will be used as the selected column item on the conditionPanel</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>isDefault</code></p>
             */
            getIsDefault(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.P13nItem/methods/getMaxLength">maxLength</a>.</p><p>specifies the number of characters which can be entered in the value fields of the condition panel</p>
             * @returns string <p>Value of property <code>maxLength</code></p>
             */
            getMaxLength(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrecision" href="#/api/sap.m.P13nItem/methods/getPrecision">precision</a>.</p><p>if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)</p>
             * @returns string <p>Value of property <code>precision</code></p>
             */
            getPrecision(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPress" href="#/api/sap.m.P13nItem/methods/getPress">press</a>.</p><p>Defines press handler of a link.</p>
             * @returns any <p>Value of property <code>press</code></p>
             */
            getPress(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRole" href="#/api/sap.m.P13nItem/methods/getRole">role</a>.</p><p>Defines role. The role is reflected in the manner how the dimension will influence the chart layout.</p>
             * @returns string <p>Value of property <code>role</code></p>
             */
            getRole(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.P13nItem/methods/getScale">scale</a>.</p><p>if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)</p>
             * @returns string <p>Value of property <code>scale</code></p>
             */
            getScale(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.P13nItem/methods/getTarget">target</a>.</p><p>Defines target of a link.</p>
             * @returns string <p>Value of property <code>target</code></p>
             */
            getTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.P13nItem/methods/getText">text</a>.</p><p>The text to be displayed for the item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.P13nItem/methods/getType">type</a>.</p><p>data type of the column (text, numeric or date is supported)</p><p>Default value is <code>text</code>.</p>
             * @returns string <p>Value of property <code>type</code></p>
             */
            getType(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTypeInstance" href="#/api/sap.m.P13nItem/methods/getTypeInstance">typeInstance</a>.</p><p>data type instance of the column. Can be used instead of the type, precision, scale and formatSettings properties</p>
             * @returns any <p>Value of property <code>typeInstance</code></p>
             */
            getTypeInstance(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValues" href="#/api/sap.m.P13nItem/methods/getValues">values</a>.</p><p>the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value represent the false value, last entry the true value.</p>
             * @returns string[] <p>Value of property <code>values</code></p>
             */
            getValues(): string[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nItem/methods/getVisible">visible</a>.</p><p>Defines visibility of column</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.P13nItem/methods/getWidth">width</a>.</p><p>Defines column width</p>
             * @returns string <p>Value of property <code>width</code></p>
             */
            getWidth(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAggregationRole" href="#/api/sap.m.P13nItem/methods/getAggregationRole">aggregationRole</a>.</p><p>Defines aggregation role</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sAggregationRole <p>New value for property <code>aggregationRole</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAggregationRole(sAggregationRole: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nItem/methods/getColumnKey">columnKey</a>.</p><p>Can be used as input for subsequent actions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.P13nItem/methods/getDescription">description</a>.</p><p>Defines additional information of the link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFormatSettings" href="#/api/sap.m.P13nItem/methods/getFormatSettings">formatSettings</a>.</p><p>A JSON object containing the formatSettings which will be used to pass additional type/format settings for the entered value. if type==time or date or datetime the object will be used for the DateFormatter, TimeFormatter or DateTimeFormatter</p><p><i>Below you can find a brief example</i></p><p><pre><code>
            {
                    UTC: false,
                    style: "medium" //"short" or "long"
            }
            </code></pre></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oFormatSettings <p>New value for property <code>formatSettings</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFormatSettings(oFormatSettings: any): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHref" href="#/api/sap.m.P13nItem/methods/getHref">href</a>.</p><p>Defines href of a link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sHref <p>New value for property <code>href</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHref(sHref: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIsDefault" href="#/api/sap.m.P13nItem/methods/getIsDefault">isDefault</a>.</p><p>the column with isDefault==true will be used as the selected column item on the conditionPanel</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bIsDefault <p>New value for property <code>isDefault</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIsDefault(bIsDefault: boolean): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.P13nItem/methods/getMaxLength">maxLength</a>.</p><p>specifies the number of characters which can be entered in the value fields of the condition panel</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMaxLength <p>New value for property <code>maxLength</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLength(sMaxLength: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrecision" href="#/api/sap.m.P13nItem/methods/getPrecision">precision</a>.</p><p>if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sPrecision <p>New value for property <code>precision</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPrecision(sPrecision: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPress" href="#/api/sap.m.P13nItem/methods/getPress">press</a>.</p><p>Defines press handler of a link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oPress <p>New value for property <code>press</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPress(oPress: any): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRole" href="#/api/sap.m.P13nItem/methods/getRole">role</a>.</p><p>Defines role. The role is reflected in the manner how the dimension will influence the chart layout.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sRole <p>New value for property <code>role</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRole(sRole: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.P13nItem/methods/getScale">scale</a>.</p><p>if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sScale <p>New value for property <code>scale</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScale(sScale: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.P13nItem/methods/getTarget">target</a>.</p><p>Defines target of a link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTarget <p>New value for property <code>target</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTarget(sTarget: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.P13nItem/methods/getText">text</a>.</p><p>The text to be displayed for the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.P13nItem/methods/getType">type</a>.</p><p>data type of the column (text, numeric or date is supported)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>text</code>.</p>
             * @param {string} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: string): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTypeInstance" href="#/api/sap.m.P13nItem/methods/getTypeInstance">typeInstance</a>.</p><p>data type instance of the column. Can be used instead of the type, precision, scale and formatSettings properties</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oTypeInstance <p>New value for property <code>typeInstance</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTypeInstance(oTypeInstance: any): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValues" href="#/api/sap.m.P13nItem/methods/getValues">values</a>.</p><p>the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value represent the false value, last entry the true value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string[]} sValues <p>New value for property <code>values</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValues(sValues: string[]): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.P13nItem/methods/getVisible">visible</a>.</p><p>Defines visibility of column</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.P13nItem/methods/getWidth">width</a>.</p><p>Defines column width</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.P13nItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: string): sap.m.P13nItem;
        }
        /**
         * <p>An abstract base type for <code>panels</code> aggregation in <code>P13nDialog</code> control.</p>
         */
        export abstract class P13nPanel extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new P13nPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p>
             * @param {sap.m.P13nItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.P13nItem): sap.m.P13nPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeNavigationTo" href="#/api/sap.m.P13nPanel/events/beforeNavigationTo">beforeNavigationTo</a> event of this <code>sap.m.P13nPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nPanel</code> itself.</p><p>Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nPanel</code> itself</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeNavigationTo(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nPanel;
            /**
             * <p>This method defines the point in time before the panel becomes active.</p>
             */
            beforeNavigationTo(): void;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.P13nPanel;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.P13nPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeNavigationTo" href="#/api/sap.m.P13nPanel/events/beforeNavigationTo">beforeNavigationTo</a> event of this <code>sap.m.P13nPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeNavigationTo(fnFunction: Function, oListener?: any): sap.m.P13nPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeNavigationTo" href="#/api/sap.m.P13nPanel/events/beforeNavigationTo">beforeNavigationTo</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeNavigationTo(mParameters?: any): sap.m.P13nPanel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChangeNotifier" href="#/api/sap.m.P13nPanel/methods/getChangeNotifier">changeNotifier</a>.</p><p>Callback which notifies a change on this panel.</p>
             * @returns any <p>Value of property <code>changeNotifier</code></p>
             */
            getChangeNotifier(): any;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p><p>Defines personalization items (e.g. columns in the <code>P13nColumnsPanel</code>).</p>
             * @returns sap.m.P13nItem[] 
             */
            getItems(): sap.m.P13nItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.P13nPanel/methods/getTitle">title</a>.</p><p>Title text appears in the panel.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLarge" href="#/api/sap.m.P13nPanel/methods/getTitleLarge">titleLarge</a>.</p><p>Large title text appears e.g. in dialog header in case that only one panel is shown.</p>
             * @returns string <p>Value of property <code>titleLarge</code></p>
             */
            getTitleLarge(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.P13nPanel/methods/getType">type</a>.</p><p>Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>. So it is feasible to add a custom panel without expanding the type.</p>
             * @returns string <p>Value of property <code>type</code></p>
             */
            getType(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nPanel/methods/getValidationExecutor">validationExecutor</a>.</p><p>Callback method which is called in order to validate end user entry.</p>
             * @returns any <p>Value of property <code>validationExecutor</code></p>
             */
            getValidationExecutor(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationListener" href="#/api/sap.m.P13nPanel/methods/getValidationListener">validationListener</a>.</p><p>Callback method which is called in order to register for validation result.</p>
             * @returns any <p>Value of property <code>validationListener</code></p>
             */
            getValidationListener(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.P13nPanel/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>Enables the vertical Scrolling on the <code>P13nDialog</code> when the panel is shown.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>verticalScrolling</code></p>
             */
            getVerticalScrolling(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.P13nItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.P13nItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p>
             * @param {sap.m.P13nItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.P13nItem, iIndex: number): sap.m.P13nPanel;
            /**
             * <p>This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove invalid content on the panel.</p>
             */
            onAfterNavigationFrom(): void;
            /**
             * <p>This method can be overwritten by subclass in order to prevent navigation to another panel. This could be the case if some content on the panel is considered 'invalid'.</p>
             * @returns boolean <p>true if it is allowed to navigate away from this panel, false if it is not allowed</p>
             */
            onBeforeNavigationFrom(): boolean;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.P13nItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.P13nItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.P13nItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.P13nItem): sap.m.P13nItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChangeNotifier" href="#/api/sap.m.P13nPanel/methods/getChangeNotifier">changeNotifier</a>.</p><p>Callback which notifies a change on this panel.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oChangeNotifier <p>New value for property <code>changeNotifier</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setChangeNotifier(oChangeNotifier: any): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.P13nPanel/methods/getTitle">title</a>.</p><p>Title text appears in the panel.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLarge" href="#/api/sap.m.P13nPanel/methods/getTitleLarge">titleLarge</a>.</p><p>Large title text appears e.g. in dialog header in case that only one panel is shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitleLarge <p>New value for property <code>titleLarge</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleLarge(sTitleLarge: string): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.P13nPanel/methods/getType">type</a>.</p><p>Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>. So it is feasible to add a custom panel without expanding the type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: string): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationExecutor" href="#/api/sap.m.P13nPanel/methods/getValidationExecutor">validationExecutor</a>.</p><p>Callback method which is called in order to validate end user entry.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oValidationExecutor <p>New value for property <code>validationExecutor</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidationExecutor(oValidationExecutor: any): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationListener" href="#/api/sap.m.P13nPanel/methods/getValidationListener">validationListener</a>.</p><p>Callback method which is called in order to register for validation result.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oValidationListener <p>New value for property <code>validationListener</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidationListener(oValidationListener: any): sap.m.P13nPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.P13nPanel/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>Enables the vertical Scrolling on the <code>P13nDialog</code> when the panel is shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVerticalScrolling <p>New value for property <code>verticalScrolling</code></p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVerticalScrolling(bVerticalScrolling: boolean): sap.m.P13nPanel;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.P13nPanel/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.P13nPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.P13nPanel;
        }
        /**
         * <p><p>Type of panels used in the personalization dialog.</p></p>
         */
        export enum P13nPanelType {
            /**
             * <p>Panel type for column settings.</p>
             */
            columns = "columns",
            /**
             * <p>Panel type for dimension and measure settings.</p>
             */
            dimeasure = "dimeasure",
            /**
             * <p>Panel type for filtering.</p>
             */
            filter = "filter",
            /**
             * <p>Panel type for grouping.</p>
             */
            group = "group",
            /**
             * <p>Panel type for sorting.</p>
             */
            sort = "sort",
        }
        /**
         * <p>Type for <code>sortItems</code> aggregation in P13nSortPanel control.</p>
         */
        export class P13nSortItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new P13nSortItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nSortItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p>
             * @returns string <p>Value of property <code>columnKey</code></p>
             */
            getColumnKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nSortItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p>
             * @returns string <p>Value of property <code>operation</code></p>
             */
            getOperation(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnKey" href="#/api/sap.m.P13nSortItem/methods/getColumnKey">columnKey</a>.</p><p>key of the column</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sColumnKey <p>New value for property <code>columnKey</code></p>
             * @returns sap.m.P13nSortItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnKey(sColumnKey: string): sap.m.P13nSortItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOperation" href="#/api/sap.m.P13nSortItem/methods/getOperation">operation</a>.</p><p>sap.m.P13nConditionOperation</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sOperation <p>New value for property <code>operation</code></p>
             * @returns sap.m.P13nSortItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOperation(sOperation: string): sap.m.P13nSortItem;
        }
        /**
         * <p>The P13nSortPanel control is used to define settings for sorting in table personalization.</p>
         */
        export class P13nSortPanel extends sap.m.P13nPanel {
            /**
             * <p>Constructor for a new P13nSortPanel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some sortItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p>
             * @param {sap.m.P13nSortItem} oSortItem <p>The sortItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSortItem(oSortItem: sap.m.P13nSortItem): sap.m.P13nSortPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addSortItem" href="#/api/sap.m.P13nSortPanel/events/addSortItem">addSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.</p><p>event raised when a SortItem was added</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAddSortItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeSortItem" href="#/api/sap.m.P13nSortPanel/events/removeSortItem">removeSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.</p><p>event raised when a SortItem was removed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRemoveSortItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateSortItem" href="#/api/sap.m.P13nSortPanel/events/updateSortItem">updateSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.</p><p>event raised when a SortItem was updated</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUpdateSortItem(oData: any, fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindSortItems(oBindingInfo: any): sap.m.P13nSortPanel;
            /**
             * <p>Destroys all the sortItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySortItems(): sap.m.P13nSortPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addSortItem" href="#/api/sap.m.P13nSortPanel/events/addSortItem">addSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAddSortItem(fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeSortItem" href="#/api/sap.m.P13nSortPanel/events/removeSortItem">removeSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRemoveSortItem(fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateSortItem" href="#/api/sap.m.P13nSortPanel/events/updateSortItem">updateSortItem</a> event of this <code>sap.m.P13nSortPanel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUpdateSortItem(fnFunction: Function, oListener?: any): sap.m.P13nSortPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addSortItem" href="#/api/sap.m.P13nSortPanel/events/addSortItem">addSortItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAddSortItem(mParameters?: any): sap.m.P13nSortPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removeSortItem" href="#/api/sap.m.P13nSortPanel/events/removeSortItem">removeSortItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRemoveSortItem(mParameters?: any): sap.m.P13nSortPanel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="updateSortItem" href="#/api/sap.m.P13nSortPanel/events/updateSortItem">updateSortItem</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUpdateSortItem(mParameters?: any): sap.m.P13nSortPanel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nSortPanel/methods/getContainerQuery">containerQuery</a>.</p><p>defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the property should be set to true!</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>containerQuery</code></p>
             */
            getContainerQuery(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nSortPanel/methods/getLayoutMode">layoutMode</a>.</p><p>can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or "Phone" you can set a fixed layout.</p>
             * @returns string <p>Value of property <code>layoutMode</code></p>
             */
            getLayoutMode(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p><p>defined Sort Items</p>
             * @returns sap.m.P13nSortItem[] 
             */
            getSortItems(): sap.m.P13nSortItem[];
            /**
             * <p>Checks for the provided <code>sap.m.P13nSortItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.P13nSortItem} oSortItem <p>The sortItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSortItem(oSortItem: sap.m.P13nSortItem): number;
            /**
             * <p>Inserts a sortItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p>
             * @param {sap.m.P13nSortItem} oSortItem <p>The sortItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the sortItem should be inserted at; for a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value greater than the current size of the aggregation, the sortItem is inserted at the last position</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSortItem(oSortItem: sap.m.P13nSortItem, iIndex: number): sap.m.P13nSortPanel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.P13nSortItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSortItems(): sap.m.P13nSortItem[];
            /**
             * <p>removes all invalid sort conditions.</p>
             */
            removeInvalidConditions(): void;
            /**
             * <p>Removes a sortItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a>.</p>
             * @param {number | string | sap.m.P13nSortItem} vSortItem <p>The sortItem to remove or its index or id</p>
             * @returns sap.m.P13nSortItem <p>The removed sortItem or <code>null</code></p>
             */
            removeSortItem(vSortItem: number | string | sap.m.P13nSortItem): sap.m.P13nSortItem;
            /**
             * <p>removes all errors/warning states from of all sort conditions.</p>
             */
            removeValidationErrors(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContainerQuery" href="#/api/sap.m.P13nSortPanel/methods/getContainerQuery">containerQuery</a>.</p><p>defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the property should be set to true!</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bContainerQuery <p>New value for property <code>containerQuery</code></p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContainerQuery(bContainerQuery: boolean): sap.m.P13nSortPanel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutMode" href="#/api/sap.m.P13nSortPanel/methods/getLayoutMode">layoutMode</a>.</p><p>can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table" or "Phone" you can set a fixed layout.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLayoutMode <p>New value for property <code>layoutMode</code></p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLayoutMode(sLayoutMode: string): sap.m.P13nSortPanel;
            /**
             * <p>setter for the supported operations array</p>
             * @param {any[]} aOperations <p>array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code></p>
             * @returns sap.m.P13nSortPanel <p>this for chaining</p>
             */
            setOperations(aOperations: any[]): sap.m.P13nSortPanel;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.P13nSortPanel/methods/getSortItems">sortItems</a> from model data.</p>
             * @returns sap.m.P13nSortPanel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindSortItems(): sap.m.P13nSortPanel;
            /**
             * <p>check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the user the feedback that some values are wrong or missing.</p>
             * @returns boolean <p><code>True</code> if all conditions are valid, <code>false</code> otherwise.</p>
             */
            validateConditions(): boolean;
        }
        /**
         * <p>A container control that holds one whole screen of an application.</p><h3>Overview</h3><p> The sap.m.Page is a container control that holds one whole screen of an application. The page has three distinct areas that can hold content - a header, content area and a footer. </p><h3>Structure</h3><h4>Header</h4><p> The top most area of the page is occupied by the header. The standard header includes a navigation button and a title. Alternatively, you can create your own custom header, which is defined in the <code>customHeader</code> aggregation. </p><h4>Content</h4><p> The content occupies the main part of the page. Only the content area is scrollable by default. This can be prevented by setting <code>enableScrolling</code> to <code>false</code>. </p><h4>Footer</h4><p> The footer is optional and occupies the fixed bottom part of the page. Alternatively, the footer can be floating above the bottom part of the content. This is enabled with the <code>floatingFooter</code> property.</p><p><b>Note:</b> All accessibility information for the different areas and their corresponding ARIA roles is set in the aggregation <code>landmarkInfo</code> of type <a target="_self" class="jsdoclink" href="#/api/sap.m.PageAccessibleLandmarkInfo">sap.m.PageAccessibleLandmarkInfo</a></p>
         */
        export class Page extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Page.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.Page;
            /**
             * <p>Adds some headerContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent to add; if empty, nothing is inserted</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addHeaderContent(oHeaderContent: sap.ui.core.Control): sap.m.Page;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.Page/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.Page</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Page</code> itself.</p><p>this event is fired when Nav Button is pressed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Page</code> itself</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavButtonPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Page;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.Page;
            /**
             * <p>Destroys the customHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Page/methods/getCustomHeader">customHeader</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomHeader(): sap.m.Page;
            /**
             * <p>Destroys the footer in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Page/methods/getFooter">footer</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFooter(): sap.m.Page;
            /**
             * <p>Destroys all the headerContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderContent(): sap.m.Page;
            /**
             * <p>Destroys the landmarkInfo in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.Page/methods/getLandmarkInfo">landmarkInfo</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLandmarkInfo(): sap.m.Page;
            /**
             * <p>Destroys the subHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Page/methods/getSubHeader">subHeader</a>.</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySubHeader(): sap.m.Page;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.Page/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.Page</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavButtonPress(fnFunction: Function, oListener?: any): sap.m.Page;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.Page/events/navButtonPress">navButtonPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireNavButtonPress(mParameters?: any): sap.m.Page;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Page/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the default background color, is used if not specified.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.PageBackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.PageBackgroundDesign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p><p>The content of this page</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentOnlyBusy" href="#/api/sap.m.Page/methods/getContentOnlyBusy">contentOnlyBusy</a>.</p><p>Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>contentOnlyBusy</code></p>
             */
            getContentOnlyBusy(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Page/methods/getCustomHeader">customHeader</a>.</p><p>The (optional) custom header of this page. Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient. If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.</p>
             * @returns sap.m.IBar 
             */
            getCustomHeader(): sap.m.IBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableScrolling" href="#/api/sap.m.Page/methods/getEnableScrolling">enableScrolling</a>.</p><p>Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll. If set to false, there will be no vertical scrolling at all.</p><p>The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enableScrolling</code></p>
             */
            getEnableScrolling(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFloatingFooter" href="#/api/sap.m.Page/methods/getFloatingFooter">floatingFooter</a>.</p><p>Decides whether the footer can float. When set to true, the footer is not fixed below the content area anymore, but rather floats over it with a slight offset from the bottom.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>floatingFooter</code></p>
             */
            getFloatingFooter(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Page/methods/getFooter">footer</a>.</p><p>The (optional) footer of this page. It is always located at the bottom of the page</p>
             * @returns sap.m.IBar 
             */
            getFooter(): sap.m.IBar;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p><p>Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient. When a customHeader is used, this aggregation will be ignored.</p>
             * @returns sap.ui.core.Control[] 
             */
            getHeaderContent(): sap.ui.core.Control[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.Page/methods/getLandmarkInfo">landmarkInfo</a>.</p><p>Accessible landmark settings to be applied on the containers of the <code>sap.m.Page</code> control.</p><p>If not set, no landmarks will be written.</p>
             * @returns sap.m.PageAccessibleLandmarkInfo 
             */
            getLandmarkInfo(): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNavButtonTooltip" href="#/api/sap.m.Page/methods/getNavButtonTooltip">navButtonTooltip</a>.</p><p>The tooltip of the nav button</p><p>Since version 1.34</p>
             * @returns string <p>Value of property <code>navButtonTooltip</code></p>
             */
            getNavButtonTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowFooter" href="#/api/sap.m.Page/methods/getShowFooter">showFooter</a>.</p><p>Whether this page shall have a footer</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showFooter</code></p>
             */
            getShowFooter(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Page/methods/getShowHeader">showHeader</a>.</p><p>Whether this page shall have a header. If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHeader</code></p>
             */
            getShowHeader(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.Page/methods/getShowNavButton">showNavButton</a>.</p><p>A nav button will be rendered on the left area of header bar if this property is set to true.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showNavButton</code></p>
             */
            getShowNavButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubHeader" href="#/api/sap.m.Page/methods/getShowSubHeader">showSubHeader</a>.</p><p>Whether this page shall show the subheader.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showSubHeader</code></p>
             */
            getShowSubHeader(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Page/methods/getSubHeader">subHeader</a>.</p><p>a subHeader will be rendered directly under the header</p>
             * @returns sap.m.IBar 
             */
            getSubHeader(): sap.m.IBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Page/methods/getTitle">title</a>.</p><p>The title text appearing in the page header bar.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.Page/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title. Using "Auto" no explicit level information is written. Used for accessibility purposes only.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.ui.core.TitleLevel <p>Value of property <code>titleLevel</code></p>
             */
            getTitleLevel(): sap.ui.core.TitleLevel;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfHeaderContent(oHeaderContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Page;
            /**
             * <p>Inserts a headerContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the headerContent should be inserted at; for a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value greater than the current size of the aggregation, the headerContent is inserted at the last position</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertHeaderContent(oHeaderContent: sap.ui.core.Control, iIndex: number): sap.m.Page;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllHeaderContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Page/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a headerContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.Page/methods/getHeaderContent">headerContent</a>.</p>
             * @param {number | string | sap.ui.core.Control} vHeaderContent <p>The headerContent to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed headerContent or <code>null</code></p>
             */
            removeHeaderContent(vHeaderContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Scrolls to the given position. Only available if enableScrolling is set to "true".</p>
             * @param {number} y <p>The vertical pixel position to scroll to. Scrolling down happens with positive values.</p>
             * @param {number} time <p>The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.</p>
             * @returns sap.m.Page <p><code>this</code> to facilitate method chaining.</p>
             */
            scrollTo(y: number, time: number): sap.m.Page;
            /**
             * <p>Scrolls to an element (DOM or sap.ui.core.Element) within the page if the element is rendered.</p>
             * @param {HTMLElement | sap.ui.core.Element} oElement <p>The element to which should be scrolled.</p>
             * @param {number} iTime <p>The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.</p>
             * @param {number[]} aOffset <p>Specifies an additional left and top offset of the target scroll position, relative to the upper left corner of the DOM element</p>
             * @returns sap.m.Page <p><code>this</code> to facilitate method chaining.</p>
             */
            scrollToElement(oElement: HTMLElement | sap.ui.core.Element, iTime?: number, aOffset?: number[]): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Page/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the default background color, is used if not specified.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.m.PageBackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.PageBackgroundDesign): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentOnlyBusy" href="#/api/sap.m.Page/methods/getContentOnlyBusy">contentOnlyBusy</a>.</p><p>Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bContentOnlyBusy <p>New value for property <code>contentOnlyBusy</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentOnlyBusy(bContentOnlyBusy: boolean): sap.m.Page;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Page/methods/getCustomHeader">customHeader</a>.</p>
             * @param {sap.m.IBar} oCustomHeader <p>The customHeader to set</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomHeader(oCustomHeader: sap.m.IBar): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableScrolling" href="#/api/sap.m.Page/methods/getEnableScrolling">enableScrolling</a>.</p><p>Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll. If set to false, there will be no vertical scrolling at all.</p><p>The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnableScrolling <p>New value for property <code>enableScrolling</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableScrolling(bEnableScrolling: boolean): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFloatingFooter" href="#/api/sap.m.Page/methods/getFloatingFooter">floatingFooter</a>.</p><p>Decides whether the footer can float. When set to true, the footer is not fixed below the content area anymore, but rather floats over it with a slight offset from the bottom.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bFloatingFooter <p>New value for property <code>floatingFooter</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFloatingFooter(bFloatingFooter: boolean): sap.m.Page;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Page/methods/getFooter">footer</a>.</p>
             * @param {sap.m.IBar} oFooter <p>The footer to set</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooter(oFooter: sap.m.IBar): sap.m.Page;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.Page/methods/getLandmarkInfo">landmarkInfo</a>.</p>
             * @param {sap.m.PageAccessibleLandmarkInfo} oLandmarkInfo <p>The landmarkInfo to set</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLandmarkInfo(oLandmarkInfo: sap.m.PageAccessibleLandmarkInfo): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNavButtonTooltip" href="#/api/sap.m.Page/methods/getNavButtonTooltip">navButtonTooltip</a>.</p><p>The tooltip of the nav button</p><p>Since version 1.34</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNavButtonTooltip <p>New value for property <code>navButtonTooltip</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNavButtonTooltip(sNavButtonTooltip: string): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowFooter" href="#/api/sap.m.Page/methods/getShowFooter">showFooter</a>.</p><p>Whether this page shall have a footer</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowFooter <p>New value for property <code>showFooter</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowFooter(bShowFooter: boolean): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Page/methods/getShowHeader">showHeader</a>.</p><p>Whether this page shall have a header. If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHeader <p>New value for property <code>showHeader</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHeader(bShowHeader: boolean): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.Page/methods/getShowNavButton">showNavButton</a>.</p><p>A nav button will be rendered on the left area of header bar if this property is set to true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowNavButton <p>New value for property <code>showNavButton</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowNavButton(bShowNavButton: boolean): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubHeader" href="#/api/sap.m.Page/methods/getShowSubHeader">showSubHeader</a>.</p><p>Whether this page shall show the subheader.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowSubHeader <p>New value for property <code>showSubHeader</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSubHeader(bShowSubHeader: boolean): sap.m.Page;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Page/methods/getSubHeader">subHeader</a>.</p>
             * @param {sap.m.IBar} oSubHeader <p>The subHeader to set</p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeader(oSubHeader: sap.m.IBar): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Page/methods/getTitle">title</a>.</p><p>The title text appearing in the page header bar.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.Page;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.Page/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title. Using "Auto" no explicit level information is written. Used for accessibility purposes only.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.ui.core.TitleLevel} sTitleLevel <p>New value for property <code>titleLevel</code></p>
             * @returns sap.m.Page <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.Page;
        }
        /**
         * <p>Settings for accessible landmarks which can be applied to the container elements of a <code>sap.m.Page</code> control. These landmarks are e.g. used by assistive technologies (like screenreaders) to provide a meaningful page overview.</p>
         */
        export class PageAccessibleLandmarkInfo extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>sap.m.PageAccessibleLandmarkInfo</code> element.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new element</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getContentLabel">contentLabel</a>.</p><p>Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p>
             * @returns string <p>Value of property <code>contentLabel</code></p>
             */
            getContentLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getContentRole">contentRole</a>.</p><p>Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>Default value is <code>Main</code>.</p>
             * @returns sap.ui.core.AccessibleLandmarkRole <p>Value of property <code>contentRole</code></p>
             */
            getContentRole(): sap.ui.core.AccessibleLandmarkRole;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getFooterLabel">footerLabel</a>.</p><p>Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p>
             * @returns string <p>Value of property <code>footerLabel</code></p>
             */
            getFooterLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getFooterRole">footerRole</a>.</p><p>Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>Default value is <code>Region</code>.</p>
             * @returns sap.ui.core.AccessibleLandmarkRole <p>Value of property <code>footerRole</code></p>
             */
            getFooterRole(): sap.ui.core.AccessibleLandmarkRole;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getHeaderLabel">headerLabel</a>.</p><p>Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p>
             * @returns string <p>Value of property <code>headerLabel</code></p>
             */
            getHeaderLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getHeaderRole">headerRole</a>.</p><p>Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>Default value is <code>Region</code>.</p>
             * @returns sap.ui.core.AccessibleLandmarkRole <p>Value of property <code>headerRole</code></p>
             */
            getHeaderRole(): sap.ui.core.AccessibleLandmarkRole;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getRootLabel">rootLabel</a>.</p><p>Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p>
             * @returns string <p>Value of property <code>rootLabel</code></p>
             */
            getRootLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getRootRole">rootRole</a>.</p><p>Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>Default value is <code>Region</code>.</p>
             * @returns sap.ui.core.AccessibleLandmarkRole <p>Value of property <code>rootRole</code></p>
             */
            getRootRole(): sap.ui.core.AccessibleLandmarkRole;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeaderLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getSubHeaderLabel">subHeaderLabel</a>.</p><p>Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p>
             * @returns string <p>Value of property <code>subHeaderLabel</code></p>
             */
            getSubHeaderLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeaderRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getSubHeaderRole">subHeaderRole</a>.</p><p>Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.AccessibleLandmarkRole <p>Value of property <code>subHeaderRole</code></p>
             */
            getSubHeaderRole(): sap.ui.core.AccessibleLandmarkRole;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getContentLabel">contentLabel</a>.</p><p>Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sContentLabel <p>New value for property <code>contentLabel</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentLabel(sContentLabel: string): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getContentRole">contentRole</a>.</p><p>Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Main</code>.</p>
             * @param {sap.ui.core.AccessibleLandmarkRole} sContentRole <p>New value for property <code>contentRole</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentRole(sContentRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getFooterLabel">footerLabel</a>.</p><p>Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sFooterLabel <p>New value for property <code>footerLabel</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooterLabel(sFooterLabel: string): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getFooterRole">footerRole</a>.</p><p>Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Region</code>.</p>
             * @param {sap.ui.core.AccessibleLandmarkRole} sFooterRole <p>New value for property <code>footerRole</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooterRole(sFooterRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getHeaderLabel">headerLabel</a>.</p><p>Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sHeaderLabel <p>New value for property <code>headerLabel</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderLabel(sHeaderLabel: string): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getHeaderRole">headerRole</a>.</p><p>Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Region</code>.</p>
             * @param {sap.ui.core.AccessibleLandmarkRole} sHeaderRole <p>New value for property <code>headerRole</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderRole(sHeaderRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getRootLabel">rootLabel</a>.</p><p>Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sRootLabel <p>New value for property <code>rootLabel</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRootLabel(sRootLabel: string): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getRootRole">rootRole</a>.</p><p>Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Region</code>.</p>
             * @param {sap.ui.core.AccessibleLandmarkRole} sRootRole <p>New value for property <code>rootRole</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRootRole(sRootRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeaderLabel" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getSubHeaderLabel">subHeaderLabel</a>.</p><p>Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.</p><p>If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sSubHeaderLabel <p>New value for property <code>subHeaderLabel</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeaderLabel(sSubHeaderLabel: string): sap.m.PageAccessibleLandmarkInfo;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeaderRole" href="#/api/sap.m.PageAccessibleLandmarkInfo/methods/getSubHeaderRole">subHeaderRole</a>.</p><p>Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.</p><p>If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.AccessibleLandmarkRole} sSubHeaderRole <p>New value for property <code>subHeaderRole</code></p>
             * @returns sap.m.PageAccessibleLandmarkInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeaderRole(sSubHeaderRole: sap.ui.core.AccessibleLandmarkRole): sap.m.PageAccessibleLandmarkInfo;
        }
        /**
         * <p><p>Available Page Background Design.</p></p>
         */
        export enum PageBackgroundDesign {
            /**
             * <p>Page background color when a List is set as the Page content.</p>
             */
            List = "List",
            /**
             * <p>A solid background color dependent on the theme.</p>
             */
            Solid = "Solid",
            /**
             * <p>Standard Page background color.</p>
             */
            Standard = "Standard",
            /**
             * <p>Transparent background for the page.</p>
             */
            Transparent = "Transparent",
        }
        /**
         * <p>Enables users to navigate between items/entities.</p>
         */
        export class PagingButton extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new PagingButton.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="positionChange" href="#/api/sap.m.PagingButton/events/positionChange">positionChange</a> event of this <code>sap.m.PagingButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PagingButton</code> itself.</p><p>Fired when the current position is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PagingButton</code> itself</p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPositionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.PagingButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="positionChange" href="#/api/sap.m.PagingButton/events/positionChange">positionChange</a> event of this <code>sap.m.PagingButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPositionChange(fnFunction: Function, oListener?: any): sap.m.PagingButton;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="positionChange" href="#/api/sap.m.PagingButton/events/positionChange">positionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePositionChange(mParameters?: any): sap.m.PagingButton;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.PagingButton/methods/getCount">count</a>.</p><p>Determines the total count of items/entities that the control navigates through. The minimum number of items/entities is 1.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>count</code></p>
             */
            getCount(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNextButtonTooltip" href="#/api/sap.m.PagingButton/methods/getNextButtonTooltip">nextButtonTooltip</a>.</p><p>Determines the tooltip of the next button.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>nextButtonTooltip</code></p>
             */
            getNextButtonTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPosition" href="#/api/sap.m.PagingButton/methods/getPosition">position</a>.</p><p>Determines the current position in the items/entities that the control navigates through. Starting (minimum) number is 1.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>position</code></p>
             */
            getPosition(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPreviousButtonTooltip" href="#/api/sap.m.PagingButton/methods/getPreviousButtonTooltip">previousButtonTooltip</a>.</p><p>Determines the tooltip of the previous button.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>previousButtonTooltip</code></p>
             */
            getPreviousButtonTooltip(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCount" href="#/api/sap.m.PagingButton/methods/getCount">count</a>.</p><p>Determines the total count of items/entities that the control navigates through. The minimum number of items/entities is 1.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iCount <p>New value for property <code>count</code></p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCount(iCount: number): sap.m.PagingButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNextButtonTooltip" href="#/api/sap.m.PagingButton/methods/getNextButtonTooltip">nextButtonTooltip</a>.</p><p>Determines the tooltip of the next button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sNextButtonTooltip <p>New value for property <code>nextButtonTooltip</code></p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNextButtonTooltip(sNextButtonTooltip: string): sap.m.PagingButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPosition" href="#/api/sap.m.PagingButton/methods/getPosition">position</a>.</p><p>Determines the current position in the items/entities that the control navigates through. Starting (minimum) number is 1.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iPosition <p>New value for property <code>position</code></p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPosition(iPosition: number): sap.m.PagingButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPreviousButtonTooltip" href="#/api/sap.m.PagingButton/methods/getPreviousButtonTooltip">previousButtonTooltip</a>.</p><p>Determines the tooltip of the previous button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sPreviousButtonTooltip <p>New value for property <code>previousButtonTooltip</code></p>
             * @returns sap.m.PagingButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPreviousButtonTooltip(sPreviousButtonTooltip: string): sap.m.PagingButton;
        }
        /**
         * <p>A container control which has a header and content. </p><h3>Overview</h3><p> The panel is a container for grouping and displaying information. It can be collapsed to save space on the screen. </p><h4>Guidelines:</h4><p> <ul> <li>Nesting two or more panels is not recommended.</li> <li>Do not stack too many panels on one page.</li> </ul> </p><h3>Structure</h3><p> A panel consists of a title bar with a header text or header toolbar, an info toolbar (optional), and a content area. Using the <code>headerToolbar</code> aggregation, you can add a toolbar with any toolbar content (i.e. custom buttons, spacers, titles) inside the title bar.</p><p>There are two types of panels: fixed and expandable. Expendable panels are enabled by the <code>expandable</code> property. Furthermore you can define an expand animation with the property <code>expandAnimation</code>. </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You need to group or display information and want to give users the option of hiding this information.</li> <li>You want to show additional information on demand (for example, a panel could show optional input fields for an advanced search).</li> <li>You want to create a panel with controls that do not require user interaction and are not part of a form. Depending on the usage, change the <code>accessibleRole</code> property from the default <code><a target="_self" class="jsdoclink" href="#/api/sap.m.PanelAccessibleRole">Form</a></code> to <code><a target="_self" class="jsdoclink" href="#/api/sap.m.PanelAccessibleRole">Region</a></code> or <code><a target="_self" class="jsdoclink" href="#/api/sap.m.PanelAccessibleRole">Complementary</a></code>.</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>If the width of the panel is set to 100% (default), the panel and its children are resized responsively, depending on its parent container.</li> <li>If the panel has a fixed defined height, it will take up the space, even if the panel is collapsed.</li> <li>When the panel is expandable, an arrow icon (pointing to the right) appears in front of the header.</li> <li>When the animation is activated, expand/collapse uses a smooth animation to open or close the content area.</li> <li>When the panel expands/collapses, the arrow icon rotates 90 degrees clockwise/counter-clockwise.</li> <li>When the height uses the default property <code>auto</code>, the height of the content area is automatically adjusted to match the height of its content.</li> <li>When the height of the panel is set to a fixed size, the content area can be scrolled through.</li> </ul></p>
         */
        export class Panel extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Panel.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.Panel;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.Panel/events/expand">expand</a> event of this <code>sap.m.Panel</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Panel</code> itself.</p><p>Indicates that the panel will expand or collapse.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Panel</code> itself</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachExpand(oData: any, fnFunction: Function, oListener?: any): sap.m.Panel;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.Panel;
            /**
             * <p>Destroys the headerToolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.Panel/methods/getHeaderToolbar">headerToolbar</a>.</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderToolbar(): sap.m.Panel;
            /**
             * <p>Destroys the infoToolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.Panel/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyInfoToolbar(): sap.m.Panel;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.Panel/events/expand">expand</a> event of this <code>sap.m.Panel</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachExpand(fnFunction: Function, oListener?: any): sap.m.Panel;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="expand" href="#/api/sap.m.Panel/events/expand">expand</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireExpand(mParameters?: any): sap.m.Panel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAccessibleRole" href="#/api/sap.m.Panel/methods/getAccessibleRole">accessibleRole</a>.</p><p>This property is used to set the accessible aria role of the Panel. Depending on the usage you can change the role from the default <code>Form</code> to <code>Region</code> or <code>Complementary</code>.</p><p>Default value is <code>Form</code>.</p>
             * @returns sap.m.PanelAccessibleRole <p>Value of property <code>accessibleRole</code></p>
             */
            getAccessibleRole(): sap.m.PanelAccessibleRole;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Panel/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>This property is used to set the background color of the Panel. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".</p><p>Default value is <code>Translucent</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p><p>Determines the content of the Panel. The content will be visible only when the Panel is expanded.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpandable" href="#/api/sap.m.Panel/methods/getExpandable">expandable</a>.</p><p>Specifies whether the control is expandable. This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel. Note: If expandable is set to false, the Panel will always be rendered expanded.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>expandable</code></p>
             */
            getExpandable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpandAnimation" href="#/api/sap.m.Panel/methods/getExpandAnimation">expandAnimation</a>.</p><p>Indicates whether the transition between the expanded and the collapsed state of the control is animated. By default the animation is enabled.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>expandAnimation</code></p>
             */
            getExpandAnimation(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpanded" href="#/api/sap.m.Panel/methods/getExpanded">expanded</a>.</p><p>Indicates whether the Panel is expanded or not. If expanded is set to true, then both the infoToolbar (if available) and the content are rendered. If expanded is set to false, then only the headerText or headerToolbar is rendered.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>expanded</code></p>
             */
            getExpanded(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderText" href="#/api/sap.m.Panel/methods/getHeaderText">headerText</a>.</p><p>This property is used to set the header text of the Panel. The "headerText" is visible in both expanded and collapsed state. Note: This property is overwritten by the "headerToolbar" aggregation.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>headerText</code></p>
             */
            getHeaderText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.Panel/methods/getHeaderToolbar">headerToolbar</a>.</p><p>This aggregation allows the use of a custom Toolbar as header for the Panel. The "headerToolbar" is visible in both expanded and collapsed state. Use it when you want to add extra controls for user interactions in the header. Note: This aggregation overwrites "headerText" property.</p>
             * @returns sap.m.Toolbar 
             */
            getHeaderToolbar(): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Panel/methods/getHeight">height</a>.</p><p>Determines the Panel height.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.Panel/methods/getInfoToolbar">infoToolbar</a>.</p><p>This aggregation allows the use of a custom Toolbar as information bar for the Panel. The "infoToolbar" is placed below the header and is visible only in expanded state. Use it when you want to show extra information to the user.</p>
             * @returns sap.m.Toolbar 
             */
            getInfoToolbar(): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Panel/methods/getWidth">width</a>.</p><p>Determines the Panel width.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Panel;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Panel/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets the accessibleRole property of the control.</p>
             * @param {sap.m.PanelAccessibleRole} sRole <p>Defines the aria role of the control.</p>
             * @returns sap.m.Panel <p>Pointer to the control instance to allow method chaining.</p>
             */
            setAccessibleRole(sRole: sap.m.PanelAccessibleRole): sap.m.Panel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Panel/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>This property is used to set the background color of the Panel. Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Translucent</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.Panel;
            /**
             * <p>Sets the expandable property of the control.</p>
             * @param {boolean} bExpandable <p>Defines whether the control is expandable or not.</p>
             * @returns sap.m.Panel <p>Pointer to the control instance to allow method chaining.</p>
             */
            setExpandable(bExpandable: boolean): sap.m.Panel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExpandAnimation" href="#/api/sap.m.Panel/methods/getExpandAnimation">expandAnimation</a>.</p><p>Indicates whether the transition between the expanded and the collapsed state of the control is animated. By default the animation is enabled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bExpandAnimation <p>New value for property <code>expandAnimation</code></p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setExpandAnimation(bExpandAnimation: boolean): sap.m.Panel;
            /**
             * <p>Sets the expanded property of the control.</p>
             * @param {boolean} bExpanded <p>Defines whether control is expanded or not.</p>
             * @returns sap.m.Panel <p>Pointer to the control instance to allow method chaining.</p>
             */
            setExpanded(bExpanded: boolean): sap.m.Panel;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderText" href="#/api/sap.m.Panel/methods/getHeaderText">headerText</a>.</p><p>This property is used to set the header text of the Panel. The "headerText" is visible in both expanded and collapsed state. Note: This property is overwritten by the "headerToolbar" aggregation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sHeaderText <p>New value for property <code>headerText</code></p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderText(sHeaderText: string): sap.m.Panel;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderToolbar" href="#/api/sap.m.Panel/methods/getHeaderToolbar">headerToolbar</a>.</p>
             * @param {sap.m.Toolbar} oHeaderToolbar <p>The headerToolbar to set</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderToolbar(oHeaderToolbar: sap.m.Toolbar): sap.m.Panel;
            /**
             * <p>Sets the height of the panel.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>The height of the panel as CSS size.</p>
             * @returns sap.m.Panel <p>Pointer to the control instance to allow method chaining.</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.Panel;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.Panel/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @param {sap.m.Toolbar} oInfoToolbar <p>The infoToolbar to set</p>
             * @returns sap.m.Panel <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoToolbar(oInfoToolbar: sap.m.Toolbar): sap.m.Panel;
            /**
             * <p>Sets the width of the panel.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>The width of the Panel as CSS size.</p>
             * @returns sap.m.Panel <p>Pointer to the control instance to allow method chaining.</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Panel;
        }
        /**
         * <p><p>Available Panel Accessible Landmark Roles.</p></p>
         */
        export enum PanelAccessibleRole {
            /**
             * <p>Represents the ARIA role <code>complementary</code>. A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.</p>
             */
            Complementary = "Complementary",
            /**
             * <p>Represents the ARIA role <code>Form</code>. A landmark region that contains a collection of items and objects that, as a whole, create a form.</p>
             */
            Form = "Form",
            /**
             * <p>Represents the ARIA role <code>Region</code>. A section of a page, that is important enough to be included in a page summary or table of contents.</p>
             */
            Region = "Region",
        }
        /**
         * <p><p>This control enables you to display PDF documents within your app. It can be embedded in your user interface layout, or you can set it to open in a popup dialog.</p> <p>Please note that the PDF Viewer control can be fully displayed on desktop devices only. On mobile devices, only the toolbar with a download button is visible.</p></p>
         */
        export class PDFViewer extends sap.ui.core.Control {
            /**
             * <p>Definition of PDFViewer control</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some popupButton to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p>
             * @param {sap.m.Button} oPopupButton <p>The popupButton to add; if empty, nothing is inserted</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addPopupButton(oPopupButton: sap.m.Button): sap.m.PDFViewer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.PDFViewer/events/error">error</a> event of this <code>sap.m.PDFViewer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.</p><p>This event is fired when there is an error loading the PDF file.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachError(oData: any, fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loaded" href="#/api/sap.m.PDFViewer/events/loaded">loaded</a> event of this <code>sap.m.PDFViewer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.</p><p>This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks, this event is fired as often as defined by the browser's plugin. This may happen after a couple chunks are processed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLoaded(oData: any, fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="sourceValidationFailed" href="#/api/sap.m.PDFViewer/events/sourceValidationFailed">sourceValidationFailed</a> event of this <code>sap.m.PDFViewer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.</p><p>This event is fired when the PDF viewer control cannot check the loaded content. For example, the default configuration of the Mozilla Firefox browser may not allow checking the loaded content. This may also happen when the source PDF file is stored in a different domain. If you want no error message to be displayed when this event is fired, call the preventDefault() method inside the event handler.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSourceValidationFailed(oData: any, fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Destroys the errorPlaceholder in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getErrorPlaceholder" href="#/api/sap.m.PDFViewer/methods/getErrorPlaceholder">errorPlaceholder</a>.</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyErrorPlaceholder(): sap.m.PDFViewer;
            /**
             * <p>Destroys all the popupButtons in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPopupButtons(): sap.m.PDFViewer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.PDFViewer/events/error">error</a> event of this <code>sap.m.PDFViewer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachError(fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loaded" href="#/api/sap.m.PDFViewer/events/loaded">loaded</a> event of this <code>sap.m.PDFViewer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLoaded(fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="sourceValidationFailed" href="#/api/sap.m.PDFViewer/events/sourceValidationFailed">sourceValidationFailed</a> event of this <code>sap.m.PDFViewer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSourceValidationFailed(fnFunction: Function, oListener?: any): sap.m.PDFViewer;
            /**
             * <p>Downloads the PDF file.</p>
             */
            downloadPDF(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.m.PDFViewer/events/error">error</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireError(mParameters?: any): sap.m.PDFViewer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="loaded" href="#/api/sap.m.PDFViewer/events/loaded">loaded</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLoaded(mParameters?: any): sap.m.PDFViewer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="sourceValidationFailed" href="#/api/sap.m.PDFViewer/events/sourceValidationFailed">sourceValidationFailed</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSourceValidationFailed(mParameters?: any): sap.m.PDFViewer;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayType" href="#/api/sap.m.PDFViewer/methods/getDisplayType">displayType</a>.</p><p>Defines how the PDF viewer should be displayed. <ul> <li>If set to <code>Link</code>, the PDF viewer appears as a toolbar with a download button that can be used to download the PDF file.<br> When the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="open" href="#/api/sap.m.PDFViewer/methods/open">#open</a> method is called, the user can either open the PDF file in a new tab or download it.</li> <li>If set to <code>Embedded</code>, the PDF viewer appears embedded in the parent container and displays either the PDF document or the message defined by the <code>errorPlaceholderMessage</code> property.</li> <li>If set to <code>Auto</code>, the appearance of the PDF viewer depends on the device being used: <ul> <li>On mobile devices (phones, tablets), the the PDF viewer appears as a toolbar with a download button.</li> <li>On desktop devices, the PDF viewer is embedded in its parent container.</li> </ul> </li> </ul></p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.m.PDFViewerDisplayType <p>Value of property <code>displayType</code></p>
             */
            getDisplayType(): sap.m.PDFViewerDisplayType;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getErrorPlaceholder" href="#/api/sap.m.PDFViewer/methods/getErrorPlaceholder">errorPlaceholder</a>.</p><p>A custom control that can be used instead of the error message specified by the errorPlaceholderMessage property.</p>
             * @returns sap.ui.core.Control 
             */
            getErrorPlaceholder(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getErrorPlaceholderMessage" href="#/api/sap.m.PDFViewer/methods/getErrorPlaceholderMessage">errorPlaceholderMessage</a>.</p><p>A custom text that is displayed instead of the PDF file content when the PDF file cannot be loaded.</p>
             * @returns string <p>Value of property <code>errorPlaceholderMessage</code></p>
             */
            getErrorPlaceholderMessage(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.PDFViewer/methods/getHeight">height</a>.</p><p>Defines the height of the PDF viewer control, respective to the height of the parent container. Can be set to a percent, pixel, or em value.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p><p>A multiple aggregation for buttons that can be added to the footer of the popup dialog. Works only if the PDF viewer is set to open in a popup dialog.</p>
             * @returns sap.m.Button[] 
             */
            getPopupButtons(): sap.m.Button[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDownloadButton" href="#/api/sap.m.PDFViewer/methods/getShowDownloadButton">showDownloadButton</a>.</p><p>Shows or hides the download button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showDownloadButton</code></p>
             */
            getShowDownloadButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSource" href="#/api/sap.m.PDFViewer/methods/getSource">source</a>.</p><p>Specifies the path to the PDF file to display. Can be set to a relative or an absolute path.<br> Optionally, this property can also be set to a data URI path or a blob URL in all major web browsers except Internet Explorer and Microsoft Edge, provided that this data URI or blob URL is whitelisted in advance. For more information about whitelisting, see <a target="_self" href="#/topic/91f3768f6f4d1014b6dd926db0e91070">URL Whitelist Filtering</a>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>source</code></p>
             */
            getSource(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.PDFViewer/methods/getTitle">title</a>.</p><p>A custom title for the PDF viewer.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.PDFViewer/methods/getWidth">width</a>.</p><p>Defines the width of the PDF viewer control, respective to the width of the parent container. Can be set to a percent, pixel, or em value.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Button} oPopupButton <p>The popupButton whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPopupButton(oPopupButton: sap.m.Button): number;
            /**
             * <p>Inserts a popupButton into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p>
             * @param {sap.m.Button} oPopupButton <p>The popupButton to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the popupButton should be inserted at; for a negative value of <code>iIndex</code>, the popupButton is inserted at position 0; for a value greater than the current size of the aggregation, the popupButton is inserted at the last position</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPopupButton(oPopupButton: sap.m.Button, iIndex: number): sap.m.PDFViewer;
            /**
             * <p>Triggers rerendering of this element and its children.</p>
             * @param {sap.ui.base.ManagedObject} oOrigin <p>Child control for which the method was called</p>
             */
            invalidate(oOrigin?: sap.ui.base.ManagedObject): void;
            /**
             * <p>Opens the PDF viewer in a popup dialog.</p>
             */
            open(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPopupButtons(): sap.m.Button[];
            /**
             * <p>Removes a popupButton from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopupButtons" href="#/api/sap.m.PDFViewer/methods/getPopupButtons">popupButtons</a>.</p>
             * @param {number | string | sap.m.Button} vPopupButton <p>The popupButton to remove or its index or id</p>
             * @returns sap.m.Button <p>The removed popupButton or <code>null</code></p>
             */
            removePopupButton(vPopupButton: number | string | sap.m.Button): sap.m.Button;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayType" href="#/api/sap.m.PDFViewer/methods/getDisplayType">displayType</a>.</p><p>Defines how the PDF viewer should be displayed. <ul> <li>If set to <code>Link</code>, the PDF viewer appears as a toolbar with a download button that can be used to download the PDF file.<br> When the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="open" href="#/api/sap.m.PDFViewer/methods/open">#open</a> method is called, the user can either open the PDF file in a new tab or download it.</li> <li>If set to <code>Embedded</code>, the PDF viewer appears embedded in the parent container and displays either the PDF document or the message defined by the <code>errorPlaceholderMessage</code> property.</li> <li>If set to <code>Auto</code>, the appearance of the PDF viewer depends on the device being used: <ul> <li>On mobile devices (phones, tablets), the the PDF viewer appears as a toolbar with a download button.</li> <li>On desktop devices, the PDF viewer is embedded in its parent container.</li> </ul> </li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.m.PDFViewerDisplayType} sDisplayType <p>New value for property <code>displayType</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayType(sDisplayType: sap.m.PDFViewerDisplayType): sap.m.PDFViewer;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getErrorPlaceholder" href="#/api/sap.m.PDFViewer/methods/getErrorPlaceholder">errorPlaceholder</a>.</p>
             * @param {sap.ui.core.Control} oErrorPlaceholder <p>The errorPlaceholder to set</p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setErrorPlaceholder(oErrorPlaceholder: sap.ui.core.Control): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getErrorPlaceholderMessage" href="#/api/sap.m.PDFViewer/methods/getErrorPlaceholderMessage">errorPlaceholderMessage</a>.</p><p>A custom text that is displayed instead of the PDF file content when the PDF file cannot be loaded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sErrorPlaceholderMessage <p>New value for property <code>errorPlaceholderMessage</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setErrorPlaceholderMessage(sErrorPlaceholderMessage: string): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.PDFViewer/methods/getHeight">height</a>.</p><p>Defines the height of the PDF viewer control, respective to the height of the parent container. Can be set to a percent, pixel, or em value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDownloadButton" href="#/api/sap.m.PDFViewer/methods/getShowDownloadButton">showDownloadButton</a>.</p><p>Shows or hides the download button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowDownloadButton <p>New value for property <code>showDownloadButton</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowDownloadButton(bShowDownloadButton: boolean): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSource" href="#/api/sap.m.PDFViewer/methods/getSource">source</a>.</p><p>Specifies the path to the PDF file to display. Can be set to a relative or an absolute path.<br> Optionally, this property can also be set to a data URI path or a blob URL in all major web browsers except Internet Explorer and Microsoft Edge, provided that this data URI or blob URL is whitelisted in advance. For more information about whitelisting, see <a target="_self" href="#/topic/91f3768f6f4d1014b6dd926db0e91070">URL Whitelist Filtering</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sSource <p>New value for property <code>source</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSource(sSource: sap.ui.core.URI): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.PDFViewer/methods/getTitle">title</a>.</p><p>A custom title for the PDF viewer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.PDFViewer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.PDFViewer/methods/getWidth">width</a>.</p><p>Defines the width of the PDF viewer control, respective to the width of the parent container. Can be set to a percent, pixel, or em value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.PDFViewer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.PDFViewer;
        }
        /**
         * <p><p>PDF viewer display types.</p></p>
         */
        export enum PDFViewerDisplayType {
            /**
             * <p>The PDF viewer switches between the <code>Link</code> display type and the <code>Embedded</code> display type, depending on the device being used.</p>
             */
            Auto = "Auto",
            /**
             * <p>The PDF viewer appears embedded in the parent container and displays the PDF file.</p>
             */
            Embedded = "Embedded",
            /**
             * <p>The PDF viewer appears as a toolbar with a download button that can be used to download the PDF file or open it in a new tab.</p>
             */
            Link = "Link",
        }
        /**
         * <p><p>Types for the placement of Popover control.</p></p>
         */
        export enum PlacementType {
            /**
             * <p>Popover will be placed automatically at the reference control.</p>
             */
            Auto = "Auto",
            /**
             * <p>Popover will be placed at the bottom of the reference control.</p>
             */
            Bottom = "Bottom",
            /**
             * <p>Popover will be placed at the right or left side of the reference control.</p>
             */
            Horizontal = "Horizontal",
            /**
             * <p>Deprecated - use <code>sap.m.PlacementType.HorizontalPreferredLeft</code> type.<span class="sapUiDeprecated"><br>Deprecated as of version 1.36. Instead, use <em>sap.m.PlacementType.HorizontalPreferredLeft</em> type.</span></p>
             */
            HorizontalPreferedLeft = "HorizontalPreferedLeft",
            /**
             * <p>Deprecated - use <code>sap.m.PlacementType.HorizontalPreferredRight</code> type.<span class="sapUiDeprecated"><br>Deprecated as of version 1.36. Instead, use <em>sap.m.PlacementType.HorizontalPreferredRight</em> type.</span></p>
             */
            HorizontalPreferedRight = "HorizontalPreferedRight",
            /**
             * <p>Popover will be placed at the right or left side of the reference control but will try to position on the left side if the space is greater than the Popover's width.</p>
             */
            HorizontalPreferredLeft = "HorizontalPreferredLeft",
            /**
             * <p>Popover will be placed at the right or left side of the reference control but will try to position on the right side if the space is greater than the Popover's width.</p>
             */
            HorizontalPreferredRight = "HorizontalPreferredRight",
            /**
             * <p>Popover will be placed at the left side of the reference control.</p>
             */
            Left = "Left",
            /**
             * <p>Popover will be placed to the bottom of the reference control. If the available space is less than the Popover's height, it will appear to the top of the same reference control bottom border.</p>
             */
            PreferredBottomOrFlip = "PreferredBottomOrFlip",
            /**
             * <p>Popover will be placed to the left of the reference control. If the available space is less than the Popover's width, it will appear to the right of the same reference control left border.</p>
             */
            PreferredLeftOrFlip = "PreferredLeftOrFlip",
            /**
             * <p>Popover will be placed to the right of the reference control. If the available space is less than the Popover's width, it will appear to the left of the same reference control right border.</p>
             */
            PreferredRightOrFlip = "PreferredRightOrFlip",
            /**
             * <p>Popover will be placed to the top of the reference control. If the available space is less than the Popover's height, it will appear to the bottom of the same reference control top border.</p>
             */
            PreferredTopOrFlip = "PreferredTopOrFlip",
            /**
             * <p>Popover will be placed at the right side of the reference control.</p>
             */
            Right = "Right",
            /**
             * <p>Popover will be placed at the top of the reference control.</p>
             */
            Top = "Top",
            /**
             * <p>Popover will be placed at the top or bottom of the reference control.</p>
             */
            Vertical = "Vertical",
            /**
             * <p>Deprecated - use <code>sap.m.PlacementType.VerticalPreferredBottom</code> type.<span class="sapUiDeprecated"><br>Deprecated as of version 1.36. Instead, use <em>sap.m.PlacementType.VerticalPreferredBottom</em> type.</span></p>
             */
            VerticalPreferedBottom = "VerticalPreferedBottom",
            /**
             * <p>Deprecated - use <code>sap.m.PlacementType.VerticalPreferredTop</code> type.<span class="sapUiDeprecated"><br>Deprecated as of version 1.36. Instead, use <em>sap.m.PlacementType.VerticalPreferredTop</em> type.</span></p>
             */
            VerticalPreferedTop = "VerticalPreferedTop",
            /**
             * <p>Popover will be placed at the top or bottom of the reference control but will try to position on the bottom side if the space is greater than the Popover's height.</p>
             */
            VerticalPreferredBottom = "VerticalPreferredBottom",
            /**
             * <p>Popover will be placed at the top or bottom of the reference control but will try to position on the top side if the space is greater than the Popover's height.</p>
             */
            VerticalPreferredTop = "VerticalPreferredTop",
        }
        /**
         * <p>Displays rows with appointments for different entities (such as persons or teams) for the selected time interval.</p><h3>Overview</h3><p>You can use the <code>PlanningCalendar</code> to represent a calendar containing multiple rows with appointments, where each row represents a different person.</p><p>You can configure different time-interval views that the user can switch between, such as hours or days, and even a whole week/month. The available navigation allows the user to select a specific interval using a picker, or move to the previous/next interval using arrows.</p><p><b>Note:</b> The <code>PlanningCalendar</code> uses parts of the <code>sap.ui.unified</code> library. This library will be loaded after the <code>PlanningCalendar</code>, if it wasn't loaded first. This could lead to a waiting time when a <code>PlanningCalendar</code> is used for the first time. To prevent this, apps that use the <code>PlanningCalendar</code> should also load the <code>sap.ui.unified</code> library.</p><h3>Usage</h3><p>The <code>PlanningCalendar</code> has the following structure from top to bottom:</p><p><ul> <li>A toolbar where you can add your own buttons or other controls using the <code>toolbarContent</code> aggregation.</li> <li>A header containing a drop-down menu for selecting the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">PlanningCalendarViews</a>, and navigation for moving through the intervals using arrows or selecting a specific interval with a picker. Custom views can be configured using the <code>views</code> aggregation. If not configured, the following set of default built-in views is available - Hours, Days, 1 Week, 1 Month, and Months. Setting a custom view(s) replaces the built-in ones.</li> <li>The rows of the <code>PlanningCalendar</code> that contain the assigned appointments. They can be configured with the <code>rows</code> aggregation, which is of type <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRow</a>.</li> </ul></p><p>Since 1.48 the empty space in the cell that is below an appointment can be removed by adding the <code>sapUiCalendarAppFitVertically</code> CSS class to the <code>PlanningCalendar</code>. Please note that it should be used only for a <code>PlanningCalendar</code> with one appointment per day for a row that doesn't have interval headers set.</p><p>Since 1.44 alternating row colors can be suppressed by adding the <code>sapMPlanCalSuppressAlternatingRowColors</code> CSS class to the <code>PlanningCalendar</code>.</p><h3>Responsive behavior</h3><p>You can define the number of displayed intervals based on the size of the <code>PlanningCalendar</code> using the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">PlanningCalendarView</a>'s properties.</p>
         */
        export class PlanningCalendar extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>PlanningCalendar</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sID <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sID?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.PlanningCalendar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.PlanningCalendar;
            /**
             * <p>Adds some row to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p>
             * @param {sap.m.PlanningCalendarRow} oRow <p>The row to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addRow(oRow: sap.m.PlanningCalendarRow): sap.m.PlanningCalendar;
            /**
             * <p>Adds some specialDate to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.PlanningCalendar;
            /**
             * <p>Adds some toolbarContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p>
             * @param {sap.ui.core.Control} oToolbarContent <p>The toolbarContent to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addToolbarContent(oToolbarContent: sap.ui.core.Control): sap.m.PlanningCalendar;
            /**
             * <p>Adds some view to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p>
             * @param {sap.m.PlanningCalendarView} oView <p>The view to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addView(oView: sap.m.PlanningCalendarView): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.PlanningCalendar/events/appointmentSelect">appointmentSelect</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p>Fired if an appointment is selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="intervalSelect" href="#/api/sap.m.PlanningCalendar/events/intervalSelect">intervalSelect</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p>Fired if an interval was selected in the calendar header or in the row.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachIntervalSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowHeaderClick" href="#/api/sap.m.PlanningCalendar/events/rowHeaderClick">rowHeaderClick</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p>Fires when a row header is clicked.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRowHeaderClick(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowSelectionChange" href="#/api/sap.m.PlanningCalendar/events/rowSelectionChange">rowSelectionChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p>Fires when row selection is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRowSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.PlanningCalendar/events/startDateChange">startDateChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p><code>startDate</code> was changed while navigating in the <code>PlanningCalendar</code>. The new value can be obtained using the <code>sap.m.PlanningCalendar#getStartDate()</code> method.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachStartDateChange(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.PlanningCalendar/events/viewChange">viewChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.</p><p><code>viewKey</code> was changed by user interaction.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachViewChange(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Destroys all the rows in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyRows(): sap.m.PlanningCalendar;
            /**
             * <p>Destroys all the specialDates in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySpecialDates(): sap.m.PlanningCalendar;
            /**
             * <p>Destroys all the toolbarContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyToolbarContent(): sap.m.PlanningCalendar;
            /**
             * <p>Destroys all the views in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyViews(): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.PlanningCalendar/events/appointmentSelect">appointmentSelect</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentSelect(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="intervalSelect" href="#/api/sap.m.PlanningCalendar/events/intervalSelect">intervalSelect</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachIntervalSelect(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowHeaderClick" href="#/api/sap.m.PlanningCalendar/events/rowHeaderClick">rowHeaderClick</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRowHeaderClick(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowSelectionChange" href="#/api/sap.m.PlanningCalendar/events/rowSelectionChange">rowSelectionChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRowSelectionChange(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.PlanningCalendar/events/startDateChange">startDateChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachStartDateChange(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.PlanningCalendar/events/viewChange">viewChange</a> event of this <code>sap.m.PlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachViewChange(fnFunction: Function, oListener?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.PlanningCalendar/events/appointmentSelect">appointmentSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentSelect(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="intervalSelect" href="#/api/sap.m.PlanningCalendar/events/intervalSelect">intervalSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireIntervalSelect(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowHeaderClick" href="#/api/sap.m.PlanningCalendar/events/rowHeaderClick">rowHeaderClick</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRowHeaderClick(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="rowSelectionChange" href="#/api/sap.m.PlanningCalendar/events/rowSelectionChange">rowSelectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRowSelectionChange(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.PlanningCalendar/events/startDateChange">startDateChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireStartDateChange(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.PlanningCalendar/events/viewChange">viewChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireViewChange(mParameters?: any): sap.m.PlanningCalendar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentsReducedHeight" href="#/api/sap.m.PlanningCalendar/methods/getAppointmentsReducedHeight">appointmentsReducedHeight</a>.</p><p>Determines whether the appointments that have only title without text are rendered with smaller height.</p><p><b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height to facilitate touching.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>appointmentsReducedHeight</code></p>
             */
            getAppointmentsReducedHeight(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentsVisualization" href="#/api/sap.m.PlanningCalendar/methods/getAppointmentsVisualization">appointmentsVisualization</a>.</p><p>Determines how the appointments are visualized depending on the used theme.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.ui.unified.CalendarAppointmentVisualization <p>Value of property <code>appointmentsVisualization</code></p>
             */
            getAppointmentsVisualization(): sap.ui.unified.CalendarAppointmentVisualization;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.PlanningCalendar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBuiltInViews" href="#/api/sap.m.PlanningCalendar/methods/getBuiltInViews">builtInViews</a>.</p><p>Defines the list of predefined views as an array. The views should be specified by their keys.</p><p>The default predefined views and their keys are available at <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarBuiltInView">sap.m.PlanningCalendarBuiltInView</a>.</p><p><b>Note:</b> If set, all specified views will be displayed along with any custom views (if available). If not set and no custom views are available, all default views will be displayed. If not set and there are any custom views available, only the custom views will be displayed.</p><p>Default value is <code>[]</code>.</p>
             * @returns string[] <p>Value of property <code>builtInViews</code></p>
             */
            getBuiltInViews(): string[];
            /**
             * <p>Getter for custom appointments sorter (if any).</p>
             * @returns Function 
             */
            getCustomAppointmentsSorterCallback(): Function;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupAppointmentsMode" href="#/api/sap.m.PlanningCalendar/methods/getGroupAppointmentsMode">groupAppointmentsMode</a>.</p><p>Defines the mode in which the overlapping appointments are displayed.</p><p><b>Note:</b> This property takes effect, only if the <code>intervalType</code> of the current calendar view is set to <code>sap.ui.unified.CalendarIntervalType.Month</code>. On phone devices this property is ignored, and the default value is applied.</p><p>Default value is <code>Collapsed</code>.</p>
             * @returns sap.ui.unified.GroupAppointmentsMode <p>Value of property <code>groupAppointmentsMode</code></p>
             */
            getGroupAppointmentsMode(): sap.ui.unified.GroupAppointmentsMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.PlanningCalendar/methods/getHeight">height</a>.</p><p>Specifies the height of the <code>PlanningCalendar</code>. <b>Note:</b> If the set height is less than the displayed content, it will not be applied</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLegend" href="#/api/sap.m.PlanningCalendar/methods/getLegend">legend</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getLegend(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxDate" href="#/api/sap.m.PlanningCalendar/methods/getMaxDate">maxDate</a>.</p><p>Defines the maximum date that can be displayed and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>maxDate</code> is set to be before the current <code>minDate</code>, the <code>minDate</code> is set to the first date of the month in which the <code>maxDate</code> belongs.</p>
             * @returns any <p>Value of property <code>maxDate</code></p>
             */
            getMaxDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDate" href="#/api/sap.m.PlanningCalendar/methods/getMinDate">minDate</a>.</p><p>Defines the minimum date that can be displayed and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>minDate</code> is set to be after the current <code>maxDate</code>, the <code>maxDate</code> is set to the last date of the month in which the <code>minDate</code> belongs.</p>
             * @returns any <p>Value of property <code>minDate</code></p>
             */
            getMinDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.PlanningCalendar/methods/getNoDataText">noDataText</a>.</p><p>Defines the text that is displayed when no <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRows</a> are assigned.</p>
             * @returns string <p>Value of property <code>noDataText</code></p>
             */
            getNoDataText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p><p>Rows of the <code>PlanningCalendar</code>.</p>
             * @returns sap.m.PlanningCalendarRow[] 
             */
            getRows(): sap.m.PlanningCalendarRow[];
            /**
             * <p>Holds the selected appointments. If no appointments are selected, an empty array is returned.</p>
             * @returns sap.ui.unified.CalendarAppointment[] <p>Array of IDs of selected appointments</p>
             */
            getSelectedAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Returns an array containing the selected rows. If no row is selected, an empty array is returned.</p>
             * @returns sap.m.PlanningCalendarRow[] <p>selected rows</p>
             */
            getSelectedRows(): sap.m.PlanningCalendarRow[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDayNamesLine" href="#/api/sap.m.PlanningCalendar/methods/getShowDayNamesLine">showDayNamesLine</a>.</p><p>Determines whether the day names are displayed in a separate line or inside the single days.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showDayNamesLine</code></p>
             */
            getShowDayNamesLine(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowEmptyIntervalHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowEmptyIntervalHeaders">showEmptyIntervalHeaders</a>.</p><p>Determines whether the space (at the top of the intervals), where the assigned interval headers appear, should remain visible even when no interval headers are present in the visible time frame. If set to <code>false</code>, this space would collapse/disappear when no interval headers are assigned.</p><p><b>Note:</b> This property takes effect, only if <code>showIntervalHeaders</code> is also set to <code>true</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showEmptyIntervalHeaders</code></p>
             */
            getShowEmptyIntervalHeaders(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIntervalHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowIntervalHeaders">showIntervalHeaders</a>.</p><p>Determines whether the assigned interval headers are displayed. You can assign them using the <code>intervalHeaders</code> aggregation of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRow</a>.</p><p><b>Note:</b> If you set both <code>showIntervalHeaders</code> and <code>showEmptyIntervalHeaders</code> properties to <code>true</code>, the space (at the top of the intervals) where the assigned interval headers appear, will remain visible even if no interval headers are assigned.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showIntervalHeaders</code></p>
             */
            getShowIntervalHeaders(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRowHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowRowHeaders">showRowHeaders</a>.</p><p>Determines whether the column containing the headers of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRows</a> is displayed.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showRowHeaders</code></p>
             */
            getShowRowHeaders(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowWeekNumbers" href="#/api/sap.m.PlanningCalendar/methods/getShowWeekNumbers">showWeekNumbers</a>.</p><p>Determines if the week numbers are displayed.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showWeekNumbers</code></p>
             */
            getShowWeekNumbers(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSingleSelection" href="#/api/sap.m.PlanningCalendar/methods/getSingleSelection">singleSelection</a>.</p><p>Determines whether only a single row can be selected.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>singleSelection</code></p>
             */
            getSingleSelection(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p><p>Special days in the header calendar visualized as date range with a type.</p><p><b>Note:</b> If one day is assigned to more than one type, only the first type will be used.</p>
             * @returns sap.ui.unified.DateTypeRange[] 
             */
            getSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartDate" href="#/api/sap.m.PlanningCalendar/methods/getStartDate">startDate</a>.</p><p>Determines the start date of the row, as a JavaScript date object. The current date is used as default.</p>
             * @returns any <p>Value of property <code>startDate</code></p>
             */
            getStartDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStickyHeader" href="#/api/sap.m.PlanningCalendar/methods/getStickyHeader">stickyHeader</a>.</p><p>Determines whether the header area will remain visible (fixed on top) when the rest of the content is scrolled out of view.</p><p>The sticky header behavior is automatically disabled on phones in landscape mode for better visibility of the content.</p><p><b>Note:</b> There is limited browser support, hence the API is in experimental state. Browsers that currently support this feature are Chrome (desktop and mobile), Safari (desktop and mobile) and Edge 41.</p><p>There are also some known issues with respect to the scrolling behavior and focus handling. A few are given below:</p><p>When the PlanningCalendar is placed in certain layout containers, for example the <code>GridLayout</code> control, the column headers do not fix at the top of the viewport. Similar behavior is also observed with the <code>ObjectPage</code> control.</p><p>This API should not be used in production environment.</p><p><b>Note:</b> The <code>stickyHeader</code> of the <code>PlanningCalendar</code> uses the <code>sticky</code> property of <code>sap.m.Table</code>. Therefore, all features and limitations of the property in <code>sap.m.Table</code> apply to the <code>PlanningCalendar</code> as well.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>stickyHeader</code></p>
             */
            getStickyHeader(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p><p>The content of the toolbar.</p>
             * @returns sap.ui.core.Control[] 
             */
            getToolbarContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViewKey" href="#/api/sap.m.PlanningCalendar/methods/getViewKey">viewKey</a>.</p><p>Defines the key of the <code>PlanningCalendarView</code> used for the output.</p><p><b>Note:</b> The default value is set <code>Hour</code>. If you are using your own views, the keys of these views should be used instead.</p><p>Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.</p>
             * @returns string <p>Value of property <code>viewKey</code></p>
             */
            getViewKey(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p><p>Views of the <code>PlanningCalendar</code>.</p><p><b>Note:</b> If not set, all the default views are available. Their keys are defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.CalendarIntervalType">sap.ui.unified.CalendarIntervalType</a>.</p>
             * @returns sap.m.PlanningCalendarView[] 
             */
            getViews(): sap.m.PlanningCalendarView[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.PlanningCalendar/methods/getWidth">width</a>.</p><p>Specifies the width of the <code>PlanningCalendar</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.PlanningCalendarRow</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.PlanningCalendarRow} oRow <p>The row whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfRow(oRow: sap.m.PlanningCalendarRow): number;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oToolbarContent <p>The toolbarContent whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfToolbarContent(oToolbarContent: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.m.PlanningCalendarView</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.PlanningCalendarView} oView <p>The view whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfView(oView: sap.m.PlanningCalendarView): number;
            /**
             * <p>Inserts a row into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p>
             * @param {sap.m.PlanningCalendarRow} oRow <p>The row to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the row should be inserted at; for a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value greater than the current size of the aggregation, the row is inserted at the last position</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertRow(oRow: sap.m.PlanningCalendarRow, iIndex: number): sap.m.PlanningCalendar;
            /**
             * <p>Inserts a specialDate into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the specialDate should be inserted at; for a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate is inserted at the last position</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.PlanningCalendar;
            /**
             * <p>Inserts a toolbarContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p>
             * @param {sap.ui.core.Control} oToolbarContent <p>The toolbarContent to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the toolbarContent should be inserted at; for a negative value of <code>iIndex</code>, the toolbarContent is inserted at position 0; for a value greater than the current size of the aggregation, the toolbarContent is inserted at the last position</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertToolbarContent(oToolbarContent: sap.ui.core.Control, iIndex: number): sap.m.PlanningCalendar;
            /**
             * <p>Inserts a view into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p>
             * @param {sap.m.PlanningCalendarView} oView <p>The view to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the view should be inserted at; for a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value greater than the current size of the aggregation, the view is inserted at the last position</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertView(oView: sap.m.PlanningCalendarView, iIndex: number): sap.m.PlanningCalendar;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.PlanningCalendar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.PlanningCalendarRow[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllRows(): sap.m.PlanningCalendarRow[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.DateTypeRange[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllToolbarContent(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.PlanningCalendarView[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllViews(): sap.m.PlanningCalendarView[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.PlanningCalendar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a row from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.PlanningCalendar/methods/getRows">rows</a>.</p>
             * @param {number | string | sap.m.PlanningCalendarRow} vRow <p>The row to remove or its index or id</p>
             * @returns sap.m.PlanningCalendarRow <p>The removed row or <code>null</code></p>
             */
            removeRow(vRow: number | string | sap.m.PlanningCalendarRow): sap.m.PlanningCalendarRow;
            /**
             * <p>Removes a specialDate from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {number | string | sap.ui.unified.DateTypeRange} vSpecialDate <p>The specialDate to remove or its index or id</p>
             * @returns sap.ui.unified.DateTypeRange <p>The removed specialDate or <code>null</code></p>
             */
            removeSpecialDate(vSpecialDate: number | string | sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
            /**
             * <p>Removes a toolbarContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbarContent" href="#/api/sap.m.PlanningCalendar/methods/getToolbarContent">toolbarContent</a>.</p>
             * @param {number | string | sap.ui.core.Control} vToolbarContent <p>The toolbarContent to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed toolbarContent or <code>null</code></p>
             */
            removeToolbarContent(vToolbarContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a view from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.PlanningCalendar/methods/getViews">views</a>.</p>
             * @param {number | string | sap.m.PlanningCalendarView} vView <p>The view to remove or its index or id</p>
             * @returns sap.m.PlanningCalendarView <p>The removed view or <code>null</code></p>
             */
            removeView(vView: number | string | sap.m.PlanningCalendarView): sap.m.PlanningCalendarView;
            /**
             * <p>Selects or deselects all <code>PlanningCalendarRows</code>.</p><p><b>Note:</b> Selection only works if <code>singleSelection</code> is set to <code>false</code>.</p>
             * @param {boolean} bSelect <p>Indicator showing whether <code>PlanningCalendarRows</code> should be selected or deselected</p>
             * @returns sap.m.PlanningCalendar <p><code>this</code> to allow method chaining</p>
             */
            selectAllRows(bSelect: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentsReducedHeight" href="#/api/sap.m.PlanningCalendar/methods/getAppointmentsReducedHeight">appointmentsReducedHeight</a>.</p><p>Determines whether the appointments that have only title without text are rendered with smaller height.</p><p><b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height to facilitate touching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bAppointmentsReducedHeight <p>New value for property <code>appointmentsReducedHeight</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAppointmentsReducedHeight(bAppointmentsReducedHeight: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentsVisualization" href="#/api/sap.m.PlanningCalendar/methods/getAppointmentsVisualization">appointmentsVisualization</a>.</p><p>Determines how the appointments are visualized depending on the used theme.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.ui.unified.CalendarAppointmentVisualization} sAppointmentsVisualization <p>New value for property <code>appointmentsVisualization</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAppointmentsVisualization(sAppointmentsVisualization: sap.ui.unified.CalendarAppointmentVisualization): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBuiltInViews" href="#/api/sap.m.PlanningCalendar/methods/getBuiltInViews">builtInViews</a>.</p><p>Defines the list of predefined views as an array. The views should be specified by their keys.</p><p>The default predefined views and their keys are available at <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarBuiltInView">sap.m.PlanningCalendarBuiltInView</a>.</p><p><b>Note:</b> If set, all specified views will be displayed along with any custom views (if available). If not set and no custom views are available, all default views will be displayed. If not set and there are any custom views available, only the custom views will be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>[]</code>.</p>
             * @param {string[]} sBuiltInViews <p>New value for property <code>builtInViews</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBuiltInViews(sBuiltInViews: string[]): sap.m.PlanningCalendar;
            /**
             * <p>Setter for custom sorting of appointments. If not used, the appointments will be sorted according to their duration vertically. For example, the start time and order to the X axis won't change.</p>
             * @param {Function} fnSorter 
             * @returns sap.m.PlanningCalendar <p><code>this</code> for chaining</p>
             */
            setCustomAppointmentsSorterCallback(fnSorter: Function): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupAppointmentsMode" href="#/api/sap.m.PlanningCalendar/methods/getGroupAppointmentsMode">groupAppointmentsMode</a>.</p><p>Defines the mode in which the overlapping appointments are displayed.</p><p><b>Note:</b> This property takes effect, only if the <code>intervalType</code> of the current calendar view is set to <code>sap.ui.unified.CalendarIntervalType.Month</code>. On phone devices this property is ignored, and the default value is applied.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Collapsed</code>.</p>
             * @param {sap.ui.unified.GroupAppointmentsMode} sGroupAppointmentsMode <p>New value for property <code>groupAppointmentsMode</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGroupAppointmentsMode(sGroupAppointmentsMode: sap.ui.unified.GroupAppointmentsMode): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.PlanningCalendar/methods/getHeight">height</a>.</p><p>Specifies the height of the <code>PlanningCalendar</code>. <b>Note:</b> If the set height is less than the displayed content, it will not be applied</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.PlanningCalendar;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLegend" href="#/api/sap.m.PlanningCalendar/methods/getLegend">legend</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.unified.CalendarLegend} oLegend <p>ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given</p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLegend(oLegend: sap.ui.core.ID | sap.ui.unified.CalendarLegend): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxDate" href="#/api/sap.m.PlanningCalendar/methods/getMaxDate">maxDate</a>.</p><p>Defines the maximum date that can be displayed and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>maxDate</code> is set to be before the current <code>minDate</code>, the <code>minDate</code> is set to the first date of the month in which the <code>maxDate</code> belongs.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oMaxDate <p>New value for property <code>maxDate</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxDate(oMaxDate: any): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinDate" href="#/api/sap.m.PlanningCalendar/methods/getMinDate">minDate</a>.</p><p>Defines the minimum date that can be displayed and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.</p><p><b>Note:</b> If the <code>minDate</code> is set to be after the current <code>maxDate</code>, the <code>maxDate</code> is set to the last date of the month in which the <code>minDate</code> belongs.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oMinDate <p>New value for property <code>minDate</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinDate(oMinDate: any): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.PlanningCalendar/methods/getNoDataText">noDataText</a>.</p><p>Defines the text that is displayed when no <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRows</a> are assigned.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNoDataText <p>New value for property <code>noDataText</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNoDataText(sNoDataText: string): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowDayNamesLine" href="#/api/sap.m.PlanningCalendar/methods/getShowDayNamesLine">showDayNamesLine</a>.</p><p>Determines whether the day names are displayed in a separate line or inside the single days.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowDayNamesLine <p>New value for property <code>showDayNamesLine</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowDayNamesLine(bShowDayNamesLine: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowEmptyIntervalHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowEmptyIntervalHeaders">showEmptyIntervalHeaders</a>.</p><p>Determines whether the space (at the top of the intervals), where the assigned interval headers appear, should remain visible even when no interval headers are present in the visible time frame. If set to <code>false</code>, this space would collapse/disappear when no interval headers are assigned.</p><p><b>Note:</b> This property takes effect, only if <code>showIntervalHeaders</code> is also set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowEmptyIntervalHeaders <p>New value for property <code>showEmptyIntervalHeaders</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowEmptyIntervalHeaders(bShowEmptyIntervalHeaders: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIntervalHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowIntervalHeaders">showIntervalHeaders</a>.</p><p>Determines whether the assigned interval headers are displayed. You can assign them using the <code>intervalHeaders</code> aggregation of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRow</a>.</p><p><b>Note:</b> If you set both <code>showIntervalHeaders</code> and <code>showEmptyIntervalHeaders</code> properties to <code>true</code>, the space (at the top of the intervals) where the assigned interval headers appear, will remain visible even if no interval headers are assigned.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowIntervalHeaders <p>New value for property <code>showIntervalHeaders</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIntervalHeaders(bShowIntervalHeaders: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRowHeaders" href="#/api/sap.m.PlanningCalendar/methods/getShowRowHeaders">showRowHeaders</a>.</p><p>Determines whether the column containing the headers of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarRow">PlanningCalendarRows</a> is displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowRowHeaders <p>New value for property <code>showRowHeaders</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowRowHeaders(bShowRowHeaders: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowWeekNumbers" href="#/api/sap.m.PlanningCalendar/methods/getShowWeekNumbers">showWeekNumbers</a>.</p><p>Determines if the week numbers are displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowWeekNumbers <p>New value for property <code>showWeekNumbers</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowWeekNumbers(bShowWeekNumbers: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSingleSelection" href="#/api/sap.m.PlanningCalendar/methods/getSingleSelection">singleSelection</a>.</p><p>Determines whether only a single row can be selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bSingleSelection <p>New value for property <code>singleSelection</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSingleSelection(bSingleSelection: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets the given date as start date. The current date is used as default. Depending on the current view the start date may be adjusted (for example, the week view shows always the first weekday of the same week as the given date).</p>
             * @param {Date} oDate <p>the date to set as <code>sap.m.PlanningCalendar</code> <code>startDate</code>. May be changed(adjusted) if property <code>startDate</code> is adjusted. See remark about week view above.</p>
             * @returns sap.m.PlanningCalendar <p><code>this</code> to allow method chaining</p>
             */
            setStartDate(oDate: Date): sap.m.PlanningCalendar;
            /**
             * <p>Sets the stickyHeader property.</p>
             * @param {boolean} bStick <p>Whether the header area will remain visible (fixed on top)</p>
             * @returns sap.m.PlanningCalendar <p>this pointer for chaining</p>
             */
            setStickyHeader(bStick: boolean): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViewKey" href="#/api/sap.m.PlanningCalendar/methods/getViewKey">viewKey</a>.</p><p>Defines the key of the <code>PlanningCalendarView</code> used for the output.</p><p><b>Note:</b> The default value is set <code>Hour</code>. If you are using your own views, the keys of these views should be used instead.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.</p>
             * @param {string} sViewKey <p>New value for property <code>viewKey</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setViewKey(sViewKey: string): sap.m.PlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.PlanningCalendar/methods/getWidth">width</a>.</p><p>Specifies the width of the <code>PlanningCalendar</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.PlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.PlanningCalendar;
        }
        namespace PlanningCalendar {
        }
        /**
         * <p><p>A list of the default built-in views in a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>, described by their keys.</p></p>
         */
        export enum PlanningCalendarBuiltInView {
            /**
             * <p>Represents the key of the built-in view, in which the intervals have the size of one day.</p>
             */
            Day = "Day",
            /**
             * <p>Represents the key of the built-in view, in which the intervals have the size of one hour.</p>
             */
            Hour = "Hour",
            /**
             * <p>Represents the key of the built-in view, in which the intervals have the size of one month.</p>
             */
            Month = "Month",
            /**
             * <p>Represents the key of the built-in view, in which the intervals have the size of one day where 31 days are displayed, starting with the first day of the month.</p>
             */
            OneMonth = "OneMonth",
            /**
             * <p>Represents the key of the built-in view, in which the intervals have the size of one day where 7 days are displayed, starting with the first day of the week.</p>
             */
            Week = "Week",
        }
        /**
         * <p>A legend for the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that displays the special dates and appointments in colors with their corresponding description. The <code>PlanningCalendarLegend</code> extends <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.CalendarLegend">sap.ui.unified.CalendarLegend</a> and overwrites the default value for property <code>columnWidth</code> to <code>auto</code></p>
         */
        export class PlanningCalendarLegend extends sap.ui.unified.CalendarLegend {
            /**
             * <p>Constructor for a new <code>PlanningCalendarLegend</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some appointmentItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p>
             * @param {sap.ui.unified.CalendarLegendItem} oAppointmentItem <p>The appointmentItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendarLegend <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAppointmentItem(oAppointmentItem: sap.ui.unified.CalendarLegendItem): sap.m.PlanningCalendarLegend;
            /**
             * <p>Destroys all the appointmentItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p>
             * @returns sap.m.PlanningCalendarLegend <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAppointmentItems(): sap.m.PlanningCalendarLegend;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p><p>The legend items which show color and type information about the calendar appointments.</p>
             * @returns sap.ui.unified.CalendarLegendItem[] 
             */
            getAppointmentItems(): sap.ui.unified.CalendarLegendItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItemsHeader" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItemsHeader">appointmentItemsHeader</a>.</p><p>Defines the text displayed in the header of the appointment items list. It is commonly related to the calendar appointments.</p><p>Default value is <code>Appointments</code>.</p>
             * @returns string <p>Value of property <code>appointmentItemsHeader</code></p>
             */
            getAppointmentItemsHeader(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItemsHeader" href="#/api/sap.m.PlanningCalendarLegend/methods/getItemsHeader">itemsHeader</a>.</p><p>Defines the text displayed in the header of the items list. It is commonly related to the calendar days.</p><p>Default value is <code>Calendar</code>.</p>
             * @returns string <p>Value of property <code>itemsHeader</code></p>
             */
            getItemsHeader(): string;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.CalendarLegendItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.CalendarLegendItem} oAppointmentItem <p>The appointmentItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAppointmentItem(oAppointmentItem: sap.ui.unified.CalendarLegendItem): number;
            /**
             * <p>Inserts a appointmentItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p>
             * @param {sap.ui.unified.CalendarLegendItem} oAppointmentItem <p>The appointmentItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the appointmentItem should be inserted at; for a negative value of <code>iIndex</code>, the appointmentItem is inserted at position 0; for a value greater than the current size of the aggregation, the appointmentItem is inserted at the last position</p>
             * @returns sap.m.PlanningCalendarLegend <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAppointmentItem(oAppointmentItem: sap.ui.unified.CalendarLegendItem, iIndex: number): sap.m.PlanningCalendarLegend;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.CalendarLegendItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAppointmentItems(): sap.ui.unified.CalendarLegendItem[];
            /**
             * <p>Removes a appointmentItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItems" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItems">appointmentItems</a>.</p>
             * @param {number | string | sap.ui.unified.CalendarLegendItem} vAppointmentItem <p>The appointmentItem to remove or its index or id</p>
             * @returns sap.ui.unified.CalendarLegendItem <p>The removed appointmentItem or <code>null</code></p>
             */
            removeAppointmentItem(vAppointmentItem: number | string | sap.ui.unified.CalendarLegendItem): sap.ui.unified.CalendarLegendItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointmentItemsHeader" href="#/api/sap.m.PlanningCalendarLegend/methods/getAppointmentItemsHeader">appointmentItemsHeader</a>.</p><p>Defines the text displayed in the header of the appointment items list. It is commonly related to the calendar appointments.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Appointments</code>.</p>
             * @param {string} sAppointmentItemsHeader <p>New value for property <code>appointmentItemsHeader</code></p>
             * @returns sap.m.PlanningCalendarLegend <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAppointmentItemsHeader(sAppointmentItemsHeader: string): sap.m.PlanningCalendarLegend;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItemsHeader" href="#/api/sap.m.PlanningCalendarLegend/methods/getItemsHeader">itemsHeader</a>.</p><p>Defines the text displayed in the header of the items list. It is commonly related to the calendar days.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Calendar</code>.</p>
             * @param {string} sItemsHeader <p>New value for property <code>itemsHeader</code></p>
             * @returns sap.m.PlanningCalendarLegend <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setItemsHeader(sItemsHeader: string): sap.m.PlanningCalendarLegend;
        }
        /**
         * <p>Represents a row in the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>.</p><p>This element holds the data of one row in the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>. Once the header information (for example, person information) is assigned, the appointments are assigned. The <code>sap.m.PlanningCalendarRow</code> allows you to modify appointments at row level.</p>
         */
        export class PlanningCalendarRow extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>PlanningCalendarRow</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some appointment to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAppointment(oAppointment: sap.ui.unified.CalendarAppointment): sap.m.PlanningCalendarRow;
            /**
             * <p>Adds some headerContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addHeaderContent(oHeaderContent: sap.ui.core.Control): sap.m.PlanningCalendarRow;
            /**
             * <p>Adds some intervalHeader to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oIntervalHeader <p>The intervalHeader to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): sap.m.PlanningCalendarRow;
            /**
             * <p>Adds some specialDate to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to add; if empty, nothing is inserted</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.PlanningCalendarRow;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.PlanningCalendarRow/events/appointmentCreate">appointmentCreate</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendarRow</code> itself.</p><p>Fired if an appointment is created.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendarRow</code> itself</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentCreate(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDragEnter" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDragEnter">appointmentDragEnter</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendarRow</code> itself.</p><p>Fired if an appointment is dropped.</p><p>When this event handler is attached, the default behavior of the <code>enableAppointmentsDragAndDrop</code> property to move appointments only within their original calendar row is no longer valid. You can move the appointment around all rows for which <code>enableAppointmentsDragAndDrop</code> is set to true. In this case, the drop target area is indicated by a placeholder. In the event handler you can call the <code>preventDefault</code> method of the event to prevent this default behavior. In this case, the placeholder will no longer be available and it will not be possible to drop the appointment in the row.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendarRow</code> itself</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentDragEnter(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendarRow</code> itself.</p><p>Fired if an appointment is dropped.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendarRow</code> itself</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentDrop(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PlanningCalendarRow</code> itself.</p><p>Fired if an appointment is resized.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendarRow</code> itself</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentResize(oData: any, fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Destroys all the appointments in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAppointments(): sap.m.PlanningCalendarRow;
            /**
             * <p>Destroys all the headerContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderContent(): sap.m.PlanningCalendarRow;
            /**
             * <p>Destroys all the intervalHeaders in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyIntervalHeaders(): sap.m.PlanningCalendarRow;
            /**
             * <p>Destroys all the specialDates in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySpecialDates(): sap.m.PlanningCalendarRow;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.PlanningCalendarRow/events/appointmentCreate">appointmentCreate</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentCreate(fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDragEnter" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDragEnter">appointmentDragEnter</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentDragEnter(fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentDrop(fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event of this <code>sap.m.PlanningCalendarRow</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentResize(fnFunction: Function, oListener?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.PlanningCalendarRow/events/appointmentCreate">appointmentCreate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentCreate(mParameters?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDragEnter" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDragEnter">appointmentDragEnter</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireAppointmentDragEnter(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentDrop(mParameters?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentResize(mParameters?: any): sap.m.PlanningCalendarRow;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p><p>The appointments to be displayed in the row. Appointments that outside the visible time frame are not rendered.</p><p><b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.</p>
             * @returns sap.ui.unified.CalendarAppointment[] 
             */
            getAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsCreate" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsCreate">enableAppointmentsCreate</a>.</p><p>Determines whether the appointments can be created by dragging on empty cells.</p><p>See <a target="_self" class="jsdoclink" href="#/api/%23property%3AenableAppointmentsResize">enableAppointmentsResize</a> for the specific points for events snapping</p><p><b>Notes:</b> In "One month" view, the appointments cannot be created on small screen (as there they are displayed as a list below the dates).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsCreate</code></p>
             */
            getEnableAppointmentsCreate(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsDragAndDrop" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsDragAndDrop">enableAppointmentsDragAndDrop</a>.</p><p>Determines whether the appointments in the row are draggable.</p><p>The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment can be dropped by the user.</p><p>By default, appointments can be dragged only within their original <code>PlanningCalendarRow</code>. When <code>enableAppointmentsDragAndDrop</code> is set to true, attaching the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDragEnter" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDragEnter">appointmentDragEnter</a> event can change the default behavior and allow appointments to be dragged between calendar rows.</p><p>Specifics based on the intervals (hours, days or months) displayed in the <code>PlanningCalendar</code> views:</p><p>Hours:<br> For views where the displayed intervals are hours, the placeholder snaps on every interval of 30 minutes. After the appointment is dropped, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired, containing the new start and end JavaScript date objects.<br> For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30" lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new start date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can snap on every 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later and would be either "hh:27:30" or "hh:57:30".</p><p>Days:<br> For views where intervals are days, the placeholder highlights the whole day and after the appointment is dropped the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired. The event contains the new start and end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.</p><p>Months:<br> For views where intervals are months, the placeholder highlights the whole month and after the appointment is dropped the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired. The event contains the new start and end JavaScript date objects with changed month but the original date and time is preserved.</p><p><b>Note:</b> In "One month" view, the appointments are not draggable on small screen (as there they are displayed as a list below the dates). Group appointments are also not draggable.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsDragAndDrop</code></p>
             */
            getEnableAppointmentsDragAndDrop(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsResize" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsResize">enableAppointmentsResize</a>.</p><p>Determines whether the appointments in the row are resizable.</p><p>The resize interaction is visualized by making the appointment transparent.</p><p>Specifics based on the intervals (hours, days or months) displayed in the <code>PlanningCalendar</code> views:</p><p>Hours: For views where the displayed intervals are hours, the appointment snaps on every interval of 30 minutes. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects.</p><p>Days: For views where intervals are days, the appointment snaps to the end of the day. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects. The <code>endDate</code> time is changed to 00:00:00</p><p>Months: For views where intervals are months, the appointment snaps to the end of the month. The <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects. The <code>endDate</code> is set to the 00:00:00 and first day of the following month.</p><p><b>Notes:</b> In "One month" view, the appointments are not resizable on small screen (as there they are displayed as a list below the dates). Group appointments are also not resizable</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsResize</code></p>
             */
            getEnableAppointmentsResize(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p><p>Holds the header content of the row.</p><p><b>Note:</b> If the <code>headerContent</code> aggregation is added, then the set icon, description, title and tooltip are ignored.</p>
             * @returns sap.ui.core.Control[] 
             */
            getHeaderContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.PlanningCalendarRow/methods/getIcon">icon</a>.</p><p>Specifies the URI of an image or an icon registered in <code>sap.ui.core.IconPool</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p><p>The appointments to be displayed at the top of the intervals (for example, for public holidays). Appointments outside the visible time frame are not rendered.</p><p>Keep in mind that the <code>intervalHeaders</code> should always fill whole intervals. If they are shorter or longer than one interval, they are not displayed.</p><p><b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.</p>
             * @returns sap.ui.unified.CalendarAppointment[] 
             */
            getIntervalHeaders(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.PlanningCalendarRow/methods/getKey">key</a>.</p><p>Defines the identifier of the row.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNonWorkingDays" href="#/api/sap.m.PlanningCalendarRow/methods/getNonWorkingDays">nonWorkingDays</a>.</p><p>Determines whether the provided weekdays are displayed as non-working days. Valid values inside the array are from 0 to 6 (other values are ignored). If not set, the weekend defined in the locale settings is displayed as non-working days.</p><p><b>Note:</b> The non-working days are visualized if the <code>intervalType</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">sap.m.PlanningCalendarView</a> is set to <code>Day</code>.</p>
             * @returns number[] <p>Value of property <code>nonWorkingDays</code></p>
             */
            getNonWorkingDays(): number[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNonWorkingHours" href="#/api/sap.m.PlanningCalendarRow/methods/getNonWorkingHours">nonWorkingHours</a>.</p><p>Determines whether the provided hours are displayed as non-working hours. Valid values inside the array are from 0 to 23 (other values are ignored).</p><p><b>Note:</b> The non-working hours are visualized if <code>intervalType</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">sap.m.PlanningCalendarView</a> is set to <code>Hour</code>.</p>
             * @returns number[] <p>Value of property <code>nonWorkingHours</code></p>
             */
            getNonWorkingHours(): number[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.PlanningCalendarRow/methods/getSelected">selected</a>.</p><p>Defines the selected state of the <code>PlanningCalendarRow</code>.</p><p><b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected row in your binding.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p><p>Holds the special dates in the context of a row. A single date or a date range can be set.</p><p><b>Note</b> Only date or date ranges of type <code>sap.ui.unified.CalendarDayType.NonWorking</code> will be visualized in the <code>PlanningCalendarRow</code>. If the aggregation is set as another type, the date or date range will be ignored and will not be displayed in the control.</p>
             * @returns sap.ui.unified.DateTypeRange[] 
             */
            getSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.PlanningCalendarRow/methods/getText">text</a>.</p><p>Defines the text of the header (for example, the department of the person).</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.PlanningCalendarRow/methods/getTitle">title</a>.</p><p>Defines the title of the header (for example, the name of the person).</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAppointment(oAppointment: sap.ui.unified.CalendarAppointment): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfHeaderContent(oHeaderContent: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.CalendarAppointment} oIntervalHeader <p>The intervalHeader whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): number;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
            /**
             * <p>Inserts a appointment into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the appointment should be inserted at; for a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value greater than the current size of the aggregation, the appointment is inserted at the last position</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAppointment(oAppointment: sap.ui.unified.CalendarAppointment, iIndex: number): sap.m.PlanningCalendarRow;
            /**
             * <p>Inserts a headerContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p>
             * @param {sap.ui.core.Control} oHeaderContent <p>The headerContent to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the headerContent should be inserted at; for a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value greater than the current size of the aggregation, the headerContent is inserted at the last position</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertHeaderContent(oHeaderContent: sap.ui.core.Control, iIndex: number): sap.m.PlanningCalendarRow;
            /**
             * <p>Inserts a intervalHeader into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oIntervalHeader <p>The intervalHeader to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the intervalHeader should be inserted at; for a negative value of <code>iIndex</code>, the intervalHeader is inserted at position 0; for a value greater than the current size of the aggregation, the intervalHeader is inserted at the last position</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment, iIndex: number): sap.m.PlanningCalendarRow;
            /**
             * <p>Inserts a specialDate into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the specialDate should be inserted at; for a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate is inserted at the last position</p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.PlanningCalendarRow;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.CalendarAppointment[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllHeaderContent(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.CalendarAppointment[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllIntervalHeaders(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.DateTypeRange[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Removes a appointment from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.PlanningCalendarRow/methods/getAppointments">appointments</a>.</p>
             * @param {number | string | sap.ui.unified.CalendarAppointment} vAppointment <p>The appointment to remove or its index or id</p>
             * @returns sap.ui.unified.CalendarAppointment <p>The removed appointment or <code>null</code></p>
             */
            removeAppointment(vAppointment: number | string | sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;
            /**
             * <p>Removes a headerContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderContent" href="#/api/sap.m.PlanningCalendarRow/methods/getHeaderContent">headerContent</a>.</p>
             * @param {number | string | sap.ui.core.Control} vHeaderContent <p>The headerContent to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed headerContent or <code>null</code></p>
             */
            removeHeaderContent(vHeaderContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a intervalHeader from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalHeaders" href="#/api/sap.m.PlanningCalendarRow/methods/getIntervalHeaders">intervalHeaders</a>.</p>
             * @param {number | string | sap.ui.unified.CalendarAppointment} vIntervalHeader <p>The intervalHeader to remove or its index or id</p>
             * @returns sap.ui.unified.CalendarAppointment <p>The removed intervalHeader or <code>null</code></p>
             */
            removeIntervalHeader(vIntervalHeader: number | string | sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;
            /**
             * <p>Removes a specialDate from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.PlanningCalendarRow/methods/getSpecialDates">specialDates</a>.</p>
             * @param {number | string | sap.ui.unified.DateTypeRange} vSpecialDate <p>The specialDate to remove or its index or id</p>
             * @returns sap.ui.unified.DateTypeRange <p>The removed specialDate or <code>null</code></p>
             */
            removeSpecialDate(vSpecialDate: number | string | sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsCreate" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsCreate">enableAppointmentsCreate</a>.</p><p>Determines whether the appointments can be created by dragging on empty cells.</p><p>See <a target="_self" class="jsdoclink" href="#/api/%23property%3AenableAppointmentsResize">enableAppointmentsResize</a> for the specific points for events snapping</p><p><b>Notes:</b> In "One month" view, the appointments cannot be created on small screen (as there they are displayed as a list below the dates).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsCreate <p>New value for property <code>enableAppointmentsCreate</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsCreate(bEnableAppointmentsCreate: boolean): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsDragAndDrop" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsDragAndDrop">enableAppointmentsDragAndDrop</a>.</p><p>Determines whether the appointments in the row are draggable.</p><p>The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment can be dropped by the user.</p><p>By default, appointments can be dragged only within their original <code>PlanningCalendarRow</code>. When <code>enableAppointmentsDragAndDrop</code> is set to true, attaching the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDragEnter" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDragEnter">appointmentDragEnter</a> event can change the default behavior and allow appointments to be dragged between calendar rows.</p><p>Specifics based on the intervals (hours, days or months) displayed in the <code>PlanningCalendar</code> views:</p><p>Hours:<br> For views where the displayed intervals are hours, the placeholder snaps on every interval of 30 minutes. After the appointment is dropped, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired, containing the new start and end JavaScript date objects.<br> For example, an appointment with start date "Nov 13 2017 12:17:00" and end date "Nov 13 2017 12:45:30" lasts for 27 minutes and 30 seconds. After dragging and dropping to a new time, the possible new start date has time that is either "hh:00:00" or "hh:30:00" because of the placeholder that can snap on every 30 minutes. The new end date is calculated to be 27 minutes and 30 seconds later and would be either "hh:27:30" or "hh:57:30".</p><p>Days:<br> For views where intervals are days, the placeholder highlights the whole day and after the appointment is dropped the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired. The event contains the new start and end JavaScript date objects with changed date but the original time (hh:mm:ss) is preserved.</p><p>Months:<br> For views where intervals are months, the placeholder highlights the whole month and after the appointment is dropped the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.PlanningCalendarRow/events/appointmentDrop">appointmentDrop</a> event is fired. The event contains the new start and end JavaScript date objects with changed month but the original date and time is preserved.</p><p><b>Note:</b> In "One month" view, the appointments are not draggable on small screen (as there they are displayed as a list below the dates). Group appointments are also not draggable.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsDragAndDrop <p>New value for property <code>enableAppointmentsDragAndDrop</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsDragAndDrop(bEnableAppointmentsDragAndDrop: boolean): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsResize" href="#/api/sap.m.PlanningCalendarRow/methods/getEnableAppointmentsResize">enableAppointmentsResize</a>.</p><p>Determines whether the appointments in the row are resizable.</p><p>The resize interaction is visualized by making the appointment transparent.</p><p>Specifics based on the intervals (hours, days or months) displayed in the <code>PlanningCalendar</code> views:</p><p>Hours: For views where the displayed intervals are hours, the appointment snaps on every interval of 30 minutes. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects.</p><p>Days: For views where intervals are days, the appointment snaps to the end of the day. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects. The <code>endDate</code> time is changed to 00:00:00</p><p>Months: For views where intervals are months, the appointment snaps to the end of the month. The <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.PlanningCalendarRow/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects. The <code>endDate</code> is set to the 00:00:00 and first day of the following month.</p><p><b>Notes:</b> In "One month" view, the appointments are not resizable on small screen (as there they are displayed as a list below the dates). Group appointments are also not resizable</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsResize <p>New value for property <code>enableAppointmentsResize</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsResize(bEnableAppointmentsResize: boolean): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.PlanningCalendarRow/methods/getIcon">icon</a>.</p><p>Specifies the URI of an image or an icon registered in <code>sap.ui.core.IconPool</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.PlanningCalendarRow/methods/getKey">key</a>.</p><p>Defines the identifier of the row.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNonWorkingDays" href="#/api/sap.m.PlanningCalendarRow/methods/getNonWorkingDays">nonWorkingDays</a>.</p><p>Determines whether the provided weekdays are displayed as non-working days. Valid values inside the array are from 0 to 6 (other values are ignored). If not set, the weekend defined in the locale settings is displayed as non-working days.</p><p><b>Note:</b> The non-working days are visualized if the <code>intervalType</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">sap.m.PlanningCalendarView</a> is set to <code>Day</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number[]} sNonWorkingDays <p>New value for property <code>nonWorkingDays</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNonWorkingDays(sNonWorkingDays: number[]): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNonWorkingHours" href="#/api/sap.m.PlanningCalendarRow/methods/getNonWorkingHours">nonWorkingHours</a>.</p><p>Determines whether the provided hours are displayed as non-working hours. Valid values inside the array are from 0 to 23 (other values are ignored).</p><p><b>Note:</b> The non-working hours are visualized if <code>intervalType</code> property of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendarView">sap.m.PlanningCalendarView</a> is set to <code>Hour</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number[]} sNonWorkingHours <p>New value for property <code>nonWorkingHours</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNonWorkingHours(sNonWorkingHours: number[]): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.PlanningCalendarRow/methods/getSelected">selected</a>.</p><p>Defines the selected state of the <code>PlanningCalendarRow</code>.</p><p><b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected row in your binding.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.PlanningCalendarRow/methods/getText">text</a>.</p><p>Defines the text of the header (for example, the department of the person).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.PlanningCalendarRow;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.PlanningCalendarRow/methods/getTitle">title</a>.</p><p>Defines the title of the header (for example, the name of the person).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.PlanningCalendarRow <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.PlanningCalendarRow;
        }
        /**
         * <p><p>Available sticky modes for the <a target="_self" class="jsdoclink" href="#/api/sap.m.SinglePlanningCalendar">sap.m.SinglePlanningCalendar</a></p></p>
         */
        export enum PlanningCalendarStickyMode {
            /**
             * <p>Actions toolbar, navigation toolbar and the column headers will be sticky.</p>
             */
            All = "All",
            /**
             * <p>Only the navigation toolbar and column headers will be sticky.</p>
             */
            NavBarAndColHeaders = "NavBarAndColHeaders",
            /**
             * <p>Nothing will stick at the top.</p>
             */
            None = "None",
        }
        /**
         * <p>View of the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>.</p><p>The <code>PlanningCalendarView</code> defines the type of the intervals (hours, days, months) and how many intervals are displayed.</p>
         */
        export class PlanningCalendarView extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>PlanningCalendarView</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.PlanningCalendarView/methods/getDescription">description</a>.</p><p>Defines the description of the <code>PlanningCalendarView</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsL" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsL">intervalsL</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is more than 1024 pixels wide.</p><p>Default value is <code>12</code>.</p>
             * @returns number <p>Value of property <code>intervalsL</code></p>
             */
            getIntervalsL(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsM" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsM">intervalsM</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is between 600 and 1024 pixels wide.</p><p>Default value is <code>8</code>.</p>
             * @returns number <p>Value of property <code>intervalsM</code></p>
             */
            getIntervalsM(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsS" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsS">intervalsS</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is less than 600 pixels wide. <b>Note:</b> On a phone the maximum visible intervals are 8.</p><p>Default value is <code>6</code>.</p>
             * @returns number <p>Value of property <code>intervalsS</code></p>
             */
            getIntervalsS(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalType" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalType">intervalType</a>.</p><p>Determines the type of the intervals of the row.</p><p><b>Note:</b> Not all predefined interval types are supported for this property. For more information, see the descriptions in the <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.CalendarIntervalType">CalendarIntervalType</a> enumeration.</p><p>Default value is <code>Hour</code>.</p>
             * @returns sap.ui.unified.CalendarIntervalType <p>Value of property <code>intervalType</code></p>
             */
            getIntervalType(): sap.ui.unified.CalendarIntervalType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.PlanningCalendarView/methods/getKey">key</a>.</p><p>Defines the key of the view. This must be set to identify the used view in the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubIntervals" href="#/api/sap.m.PlanningCalendarView/methods/getShowSubIntervals">showSubIntervals</a>.</p><p>If set, subintervals are displayed as lines in the rows.</p><p><ul> <li>Quarter hour subintervals for interval type <code>Hour</code>.</li> <li>Hour subintervals for interval types <code>Day</code>, <code>Week</code> and <code>OneMonth</code>.</li> <li>Day subintervals for interval type <code>Month</code>.</li> </ul></p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSubIntervals</code></p>
             */
            getShowSubIntervals(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.PlanningCalendarView/methods/getDescription">description</a>.</p><p>Defines the description of the <code>PlanningCalendarView</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsL" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsL">intervalsL</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is more than 1024 pixels wide.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>12</code>.</p>
             * @param {number} iIntervalsL <p>New value for property <code>intervalsL</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntervalsL(iIntervalsL: number): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsM" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsM">intervalsM</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is between 600 and 1024 pixels wide.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>8</code>.</p>
             * @param {number} iIntervalsM <p>New value for property <code>intervalsM</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntervalsM(iIntervalsM: number): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalsS" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalsS">intervalsS</a>.</p><p>Defines the number of intervals that are displayed for a <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a> that is less than 600 pixels wide. <b>Note:</b> On a phone the maximum visible intervals are 8.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>6</code>.</p>
             * @param {number} iIntervalsS <p>New value for property <code>intervalsS</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntervalsS(iIntervalsS: number): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIntervalType" href="#/api/sap.m.PlanningCalendarView/methods/getIntervalType">intervalType</a>.</p><p>Determines the type of the intervals of the row.</p><p><b>Note:</b> Not all predefined interval types are supported for this property. For more information, see the descriptions in the <a target="_self" class="jsdoclink" href="#/api/sap.ui.unified.CalendarIntervalType">CalendarIntervalType</a> enumeration.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Hour</code>.</p>
             * @param {sap.ui.unified.CalendarIntervalType} sIntervalType <p>New value for property <code>intervalType</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIntervalType(sIntervalType: sap.ui.unified.CalendarIntervalType): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.PlanningCalendarView/methods/getKey">key</a>.</p><p>Defines the key of the view. This must be set to identify the used view in the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlanningCalendar">sap.m.PlanningCalendar</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.PlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubIntervals" href="#/api/sap.m.PlanningCalendarView/methods/getShowSubIntervals">showSubIntervals</a>.</p><p>If set, subintervals are displayed as lines in the rows.</p><p><ul> <li>Quarter hour subintervals for interval type <code>Hour</code>.</li> <li>Hour subintervals for interval types <code>Day</code>, <code>Week</code> and <code>OneMonth</code>.</li> <li>Day subintervals for interval type <code>Month</code>.</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowSubIntervals <p>New value for property <code>showSubIntervals</code></p>
             * @returns sap.m.PlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSubIntervals(bShowSubIntervals: boolean): sap.m.PlanningCalendarView;
        }
        /**
         * <p><p>Defines the display of table pop-ins.</p></p>
         */
        export enum PopinDisplay {
            /**
             * <p>Inside the table popin, header is displayed at the first line and cell content is displayed at the next line.</p>
             */
            Block = "Block",
            /**
             * <p>Inside the table popin, cell content is displayed next to the header in the same line. <b>Note:</b> If there is not enough space for the cell content then it jumps to the next line.</p>
             */
            Inline = "Inline",
            /**
             * <p>Inside the table popin, only the cell content will be visible.</p>
             */
            WithoutHeader = "WithoutHeader",
        }
        /**
         * <p><p>Defines the layout options of the table popins.</p></p>
         */
        export enum PopinLayout {
            /**
             * <p>Sets block layout for rendering the table popins. The elements inside the popin container are rendered one below the other. <b>Note:</b> This option enables the former rendering behavior of the table popins.</p>
             */
            Block = "Block",
            /**
             * <p>Sets grid layout for rendering the table popins. The grid width for each table popin is comparatively larger than <code>GridSmall</code>, hence this allows less content to be rendered in a single popin row.</p><p><b>Note:</b> This feature is currently not supported with Internet Explorer and Edge (version lower than 16) browsers.</p>
             */
            GridLarge = "GridLarge",
            /**
             * <p>Sets grid layout for rendering the table popins. The grid width for each table popin is small, hence this allows more content to be rendered in a single popin row. This value defines small grid width for the table popins.</p><p><b>Note:</b> This feature is currently not supported with Internet Explorer and Edge (version lower than 16) browsers.</p>
             */
            GridSmall = "GridSmall",
        }
        /**
         * <p>Displays additional information for an object in a compact way.</p><h3>Overview</h3><p> The popover displays additional information for an object in a compact way and without leaving the page. The popover can contain various UI elements such as fields, tables, images, and charts. It can also include actions in the footer. </p><h3>Structure</h3><p> The popover has three main areas: <ul> <li>Header (optional) - with a back button and a title</li> <li>Content - holds all the controls</li> <li>Footer (optional) - with additional action buttons</li> </ul> </p><h4>Guidelines</h4><p> <ul> <li>Do not overlap popovers.</li> <li>You can determine the <a target="_self" class="jsdoclink" href="#/api/sap.m.PlacementType">placement</a> of the popover relative to the control that opens it.</li> <li>Ensure that the content has a basic design and shows only the most important information.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You need to define your own structure of controls within the popover.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>The <a target="_self" class="jsdoclink" href="#/api/sap.m.QuickView">QuickView</a> is more appropriate for your use case.</li> </ul> </p><h3>Responsive Behavior</h3><p> The popover is closed when the user clicks or taps outside the popover or selects an action within the popover. You can prevent this with the <code>modal</code> property. The popover can be resized when the <code>resizable</code> property is enabled.</p><p><ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">sap.m.Popover</a> is <u>not</u> responsive on mobile devices - it will always be rendered as a popover and you have to take care of its size and position.</li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.ResponsivePopover">sap.m.ResponsivePopover</a> is adaptive and responsive. It renders as a dialog with a close button in the header on phones, and as a popover on tablets.</li> </ul></p>
         */
        export class Popover extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Popover.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Hook called after adjusment of the Popover position.</p>
             */
            protected _afterAdjustPositionAndArrowHook(): void;
            /**
             * <p>If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the title and buttons if needed inside, and finally return this newly create header.</p>
             * @returns any <p>The created header</p>
             */
            protected _getAnyHeader(): any;
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Popover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Popover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Popover/events/afterClose">afterClose</a> event of this <code>sap.m.Popover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Popover</code> itself.</p><p>This event will be fired after the popover is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Popover/events/afterOpen">afterOpen</a> event of this <code>sap.m.Popover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Popover</code> itself.</p><p>This event will be fired after the popover is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Popover/events/beforeClose">beforeClose</a> event of this <code>sap.m.Popover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Popover</code> itself.</p><p>This event will be fired before the popover is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Popover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.Popover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Popover</code> itself.</p><p>This event will be fired before the popover is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Closes the popover when it's already opened.</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            close(): sap.m.Popover;
            /**
             * <p>Destroys the beginButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Popover/methods/getBeginButton">beginButton</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyBeginButton(): sap.m.Popover;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.Popover;
            /**
             * <p>Destroys the customHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Popover/methods/getCustomHeader">customHeader</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomHeader(): sap.m.Popover;
            /**
             * <p>Destroys the endButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Popover/methods/getEndButton">endButton</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyEndButton(): sap.m.Popover;
            /**
             * <p>Destroys the footer in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Popover/methods/getFooter">footer</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFooter(): sap.m.Popover;
            /**
             * <p>Destroys the subHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Popover/methods/getSubHeader">subHeader</a>.</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySubHeader(): sap.m.Popover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Popover/events/afterClose">afterClose</a> event of this <code>sap.m.Popover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Popover/events/afterOpen">afterOpen</a> event of this <code>sap.m.Popover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Popover/events/beforeClose">beforeClose</a> event of this <code>sap.m.Popover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Popover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.Popover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.Popover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.Popover/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.Popover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.Popover/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.Popover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.Popover/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.Popover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.Popover/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.Popover;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Popover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Popover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Popover/methods/getBeginButton">beginButton</a>.</p><p>BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</p>
             * @returns sap.ui.core.Control 
             */
            getBeginButton(): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p><p>The content inside the popover.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.Popover/methods/getContentHeight">contentHeight</a>.</p><p>Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentHeight</code></p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMinWidth" href="#/api/sap.m.Popover/methods/getContentMinWidth">contentMinWidth</a>.</p><p>Sets the minimum width of the content area inside popover.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentMinWidth</code></p>
             */
            getContentMinWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.Popover/methods/getContentWidth">contentWidth</a>.</p><p>Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentWidth</code></p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Popover/methods/getCustomHeader">customHeader</a>.</p><p>Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.</p>
             * @returns sap.ui.core.Control 
             */
            getCustomHeader(): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Popover/methods/getEndButton">endButton</a>.</p><p>EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.</p>
             * @returns sap.ui.core.Control 
             */
            getEndButton(): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Popover/methods/getFooter">footer</a>.</p><p>This is optional footer which is shown on the bottom of the popover.</p>
             * @returns sap.ui.core.Control 
             */
            getFooter(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.Popover/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>horizontalScrolling</code></p>
             */
            getHorizontalScrolling(): boolean;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.Popover/methods/getInitialFocus">initialFocus</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialFocus(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModal" href="#/api/sap.m.Popover/methods/getModal">modal</a>.</p><p>If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>modal</code></p>
             */
            getModal(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetX" href="#/api/sap.m.Popover/methods/getOffsetX">offsetX</a>.</p><p>The offset for the popover placement in the x axis. It's with unit pixel.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>offsetX</code></p>
             */
            getOffsetX(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetY" href="#/api/sap.m.Popover/methods/getOffsetY">offsetY</a>.</p><p>The offset for the popover placement in the y axis. It's with unit pixel.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>offsetY</code></p>
             */
            getOffsetY(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.Popover/methods/getPlacement">placement</a>.</p><p>This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.</p><p>Default value is <code>Right</code>.</p>
             * @returns sap.m.PlacementType <p>Value of property <code>placement</code></p>
             */
            getPlacement(): sap.m.PlacementType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.Popover/methods/getResizable">resizable</a>.</p><p>Whether resize option is enabled. Note:* This property is effective only on Desktop</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>resizable</code></p>
             */
            getResizable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowArrow" href="#/api/sap.m.Popover/methods/getShowArrow">showArrow</a>.</p><p>Whether Popover arrow should be visible</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showArrow</code></p>
             */
            getShowArrow(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Popover/methods/getShowHeader">showHeader</a>.</p><p>If a header should be shown at the top of the popover.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHeader</code></p>
             */
            getShowHeader(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Popover/methods/getSubHeader">subHeader</a>.</p><p>When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.</p>
             * @returns sap.ui.core.Control 
             */
            getSubHeader(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Popover/methods/getTitle">title</a>.</p><p>Title text appears in the header. This property will be ignored when showHeader is set to false.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.Popover/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>verticalScrolling</code></p>
             */
            getVerticalScrolling(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Popover;
            /**
             * <p>The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.</p>
             * @returns boolean <p>whether the Popover is currently opened</p>
             */
            isOpen(): boolean;
            /**
             * <p>Opens the Popover and sets the Popover position according to the <a target="_self" class="jsdoclink" href="#/api/%23getPlacement()">placement</a> property around the <code>oControl</code> parameter.</p>
             * @param {any} oControl <p>This is the control to which the Popover will be placed. It can be not only a UI5 control, but also an existing DOM reference. The side of the placement depends on the placement property set in the Popover.</p>
             * @param {boolean} bSkipInstanceManager <p>Indicates whether popover should be managed by InstanceManager or not</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            openBy(oControl: any, bSkipInstanceManager: boolean): sap.m.Popover;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Popover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Popover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Popover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Popover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Popover/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.Popover/methods/getBeginButton">beginButton</a>.</p>
             * @param {sap.ui.core.Control} oBeginButton <p>The beginButton to set</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBeginButton(oBeginButton: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Setter for property <code>bounce</code>.</p><p>Default value is empty</p>
             * @param {boolean} bBounce <p>New value for property <code>bounce</code></p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            protected setBounce(bBounce: boolean): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.Popover/methods/getContentHeight">contentHeight</a>.</p><p>Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentHeight <p>New value for property <code>contentHeight</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentHeight(sContentHeight: sap.ui.core.CSSSize): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentMinWidth" href="#/api/sap.m.Popover/methods/getContentMinWidth">contentMinWidth</a>.</p><p>Sets the minimum width of the content area inside popover.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sContentMinWidth <p>New value for property <code>contentMinWidth</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentMinWidth(sContentMinWidth: sap.ui.core.CSSSize): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.Popover/methods/getContentWidth">contentWidth</a>.</p><p>Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentWidth <p>New value for property <code>contentWidth</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentWidth(sContentWidth: sap.ui.core.CSSSize): sap.m.Popover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.Popover/methods/getCustomHeader">customHeader</a>.</p>
             * @param {sap.ui.core.Control} oCustomHeader <p>The customHeader to set</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomHeader(oCustomHeader: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.Popover/methods/getEndButton">endButton</a>.</p>
             * @param {sap.ui.core.Control} oEndButton <p>The endButton to set</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEndButton(oEndButton: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>The followOf feature closes the Popover when the position of the control that opened the Popover changes by at least 32 pixels (on desktop browsers). This may lead to unwanted closing of the Popover.</p><p>This function is for enabling/disabling the followOf feature.</p>
             * @param {boolean} bValue <p>Enables the followOf feature</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            protected setFollowOf(bValue: boolean): sap.m.Popover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.Popover/methods/getFooter">footer</a>.</p>
             * @param {sap.ui.core.Control} oFooter <p>The footer to set</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooter(oFooter: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.Popover/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bHorizontalScrolling <p>New value for property <code>horizontalScrolling</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.Popover;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.Popover/methods/getInitialFocus">initialFocus</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus <p>ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialFocus(oInitialFocus: sap.ui.core.ID | sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>Setter for property <code>modal</code>. This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.</p><p>Default value is <code>false</code></p>
             * @param {boolean} bModal <p>New value for property <code>modal</code>.</p>
             * @param {string} sModalCSSClass <p>A CSS class (or space-separated list of classes) that should be added to the block layer.</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            setModal(bModal: boolean, sModalCSSClass?: string): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetX" href="#/api/sap.m.Popover/methods/getOffsetX">offsetX</a>.</p><p>The offset for the popover placement in the x axis. It's with unit pixel.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iOffsetX <p>New value for property <code>offsetX</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOffsetX(iOffsetX: number): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetY" href="#/api/sap.m.Popover/methods/getOffsetY">offsetY</a>.</p><p>The offset for the popover placement in the y axis. It's with unit pixel.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iOffsetY <p>New value for property <code>offsetY</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOffsetY(iOffsetY: number): sap.m.Popover;
            /**
             * <p>Set the placement of the Popover.</p>
             * @param {sap.m.PlacementType} sPlacement <p>The position of the Popover</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            setPlacement(sPlacement: sap.m.PlacementType): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.Popover/methods/getResizable">resizable</a>.</p><p>Whether resize option is enabled. Note:* This property is effective only on Desktop</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bResizable <p>New value for property <code>resizable</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setResizable(bResizable: boolean): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowArrow" href="#/api/sap.m.Popover/methods/getShowArrow">showArrow</a>.</p><p>Whether Popover arrow should be visible</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowArrow <p>New value for property <code>showArrow</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowArrow(bShowArrow: boolean): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.Popover/methods/getShowHeader">showHeader</a>.</p><p>If a header should be shown at the top of the popover.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHeader <p>New value for property <code>showHeader</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHeader(bShowHeader: boolean): sap.m.Popover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.Popover/methods/getSubHeader">subHeader</a>.</p>
             * @param {sap.ui.core.Control} oSubHeader <p>The subHeader to set</p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeader(oSubHeader: sap.ui.core.Control): sap.m.Popover;
            /**
             * <p>The setter of the title property.</p><p>If you want to show a header in the popover, don't forget to set the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setShowHeader" href="#/api/sap.m.Popover/methods/setShowHeader">showHeader</a> property to true.</p>
             * @param {string} sTitle <p>The title to be set</p>
             * @returns sap.m.Popover <p>Reference to the control instance for chaining</p>
             */
            setTitle(sTitle: string): sap.m.Popover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.Popover/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly. Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVerticalScrolling <p>New value for property <code>verticalScrolling</code></p>
             * @returns sap.m.Popover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVerticalScrolling(bVerticalScrolling: boolean): sap.m.Popover;
        }
        /**
         * <p>Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color. Additionally, a user-defined string can be displayed on the ProgressIndicator.</p>
         */
        export class ProgressIndicator extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ProgressIndicator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ProgressIndicator;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ProgressIndicator;
            /**
             * <p>Returns the <code>sap.m.ProgressIndicator</code> accessibility information.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.ProgressIndicator</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.ProgressIndicator/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines whether the control is in display-only state where the control has different visualization and cannot be focused.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>displayOnly</code></p>
             */
            getDisplayOnly(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValue" href="#/api/sap.m.ProgressIndicator/methods/getDisplayValue">displayValue</a>.</p><p>Specifies the text value to be displayed in the bar.</p>
             * @returns string <p>Value of property <code>displayValue</code></p>
             */
            getDisplayValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.ProgressIndicator/methods/getEnabled">enabled</a>.</p><p>Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.ProgressIndicator/methods/getHeight">height</a>.</p><p>Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPercentValue" href="#/api/sap.m.ProgressIndicator/methods/getPercentValue">percentValue</a>.</p><p>Specifies the numerical value in percent for the length of the progress bar.</p><p><b>Note:</b> If a value greater than 100 is provided, the <code>percentValue</code> is set to 100. In other cases of invalid value, <code>percentValue</code> is set to its default of 0.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>percentValue</code></p>
             */
            getPercentValue(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValue" href="#/api/sap.m.ProgressIndicator/methods/getShowValue">showValue</a>.</p><p>Indicates whether the displayValue should be shown in the ProgressIndicator.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showValue</code></p>
             */
            getShowValue(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.ProgressIndicator/methods/getState">state</a>.</p><p>Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success, Information, None (default value). The color for each state depends on the theme.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>state</code></p>
             */
            getState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ProgressIndicator/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ProgressIndicator/methods/getWidth">width</a>.</p><p>Specifies the width of the control.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ProgressIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.ProgressIndicator/methods/getDisplayOnly">displayOnly</a>.</p><p>Determines whether the control is in display-only state where the control has different visualization and cannot be focused.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisplayOnly <p>New value for property <code>displayOnly</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayOnly(bDisplayOnly: boolean): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValue" href="#/api/sap.m.ProgressIndicator/methods/getDisplayValue">displayValue</a>.</p><p>Specifies the text value to be displayed in the bar.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDisplayValue <p>New value for property <code>displayValue</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayValue(sDisplayValue: string): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.ProgressIndicator/methods/getEnabled">enabled</a>.</p><p>Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.ProgressIndicator/methods/getHeight">height</a>.</p><p>Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPercentValue" href="#/api/sap.m.ProgressIndicator/methods/getPercentValue">percentValue</a>.</p><p>Specifies the numerical value in percent for the length of the progress bar.</p><p><b>Note:</b> If a value greater than 100 is provided, the <code>percentValue</code> is set to 100. In other cases of invalid value, <code>percentValue</code> is set to its default of 0.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} fPercentValue <p>New value for property <code>percentValue</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPercentValue(fPercentValue: number): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowValue" href="#/api/sap.m.ProgressIndicator/methods/getShowValue">showValue</a>.</p><p>Indicates whether the displayValue should be shown in the ProgressIndicator.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowValue <p>New value for property <code>showValue</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowValue(bShowValue: boolean): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.ProgressIndicator/methods/getState">state</a>.</p><p>Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error, Warning, Success, Information, None (default value). The color for each state depends on the theme.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sState <p>New value for property <code>state</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(sState: sap.ui.core.ValueState): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.ProgressIndicator/methods/getTextDirection">textDirection</a>.</p><p>Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.ProgressIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ProgressIndicator/methods/getWidth">width</a>.</p><p>Specifies the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.ProgressIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.ProgressIndicator;
        }
        /**
         * <p>PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling. On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event. In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.</p>
         */
        export class PullToRefresh extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new PullToRefresh.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="refresh" href="#/api/sap.m.PullToRefresh/events/refresh">refresh</a> event of this <code>sap.m.PullToRefresh</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.PullToRefresh</code> itself.</p><p>Event indicates that the user has requested new data</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code> itself</p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachRefresh(oData: any, fnFunction: Function, oListener?: any): sap.m.PullToRefresh;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="refresh" href="#/api/sap.m.PullToRefresh/events/refresh">refresh</a> event of this <code>sap.m.PullToRefresh</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachRefresh(fnFunction: Function, oListener?: any): sap.m.PullToRefresh;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="refresh" href="#/api/sap.m.PullToRefresh/events/refresh">refresh</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireRefresh(mParameters?: any): sap.m.PullToRefresh;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.PullToRefresh/methods/getCustomIcon">customIcon</a>.</p><p>Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>customIcon</code></p>
             */
            getCustomIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.PullToRefresh/methods/getDescription">description</a>.</p><p>Optional description. May be used to inform a user, for example, when the list has been updated last time.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.PullToRefresh/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.PullToRefresh/methods/getShowIcon">showIcon</a>.</p><p>Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showIcon</code></p>
             */
            getShowIcon(): boolean;
            /**
             * <p>Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.</p>
             */
            hide(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomIcon" href="#/api/sap.m.PullToRefresh/methods/getCustomIcon">customIcon</a>.</p><p>Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sCustomIcon <p>New value for property <code>customIcon</code></p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomIcon(sCustomIcon: sap.ui.core.URI): sap.m.PullToRefresh;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.PullToRefresh/methods/getDescription">description</a>.</p><p>Optional description. May be used to inform a user, for example, when the list has been updated last time.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.PullToRefresh;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.PullToRefresh/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is the key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.PullToRefresh;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcon" href="#/api/sap.m.PullToRefresh/methods/getShowIcon">showIcon</a>.</p><p>Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowIcon <p>New value for property <code>showIcon</code></p>
             * @returns sap.m.PullToRefresh <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowIcon(bShowIcon: boolean): sap.m.PullToRefresh;
        }
        /**
         * <p>A responsive popover that displays information on an object in a business-card format. </p><h3>Overview</h3><p> The quick view is used to show business information on either a person or an entity (e.g. a company). It uses a set of pre-defined controls. Objects can be linked together and you can navigate between several objects. An unlimited number of objects can be linked. </p><h3>Structure</h3><p> Each card is represented by a <a target="_self" class="jsdoclink" href="#/api/sap.m.QuickViewPage">sap.m.QuickViewPage</a> which holds all the information (icon, title, header, description) for the object. A single quick view can hold multiple objects, each showing information on a single entity. </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>You want to display a concise overview of an object (an employee or a company).</li> <li>Information on the object can be split into concrete groups.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>You want to display complex information about an object.</li> </ul> </p><h3>Responsive Behavior</h3><p> The quick view is displayed in a <a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">popover</a> on desktop and a full-screen <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">dialog</a> on mobile devices.</p>
         */
        export class QuickView extends sap.m.QuickViewBase {
            /**
             * <p>Constructor for a new QuickView.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.QuickView/events/afterClose">afterClose</a> event of this <code>sap.m.QuickView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickView</code> itself.</p><p>This event fires after the QuickView is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.QuickView/events/afterOpen">afterOpen</a> event of this <code>sap.m.QuickView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickView</code> itself.</p><p>This event fires after the QuickView is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.QuickView/events/beforeClose">beforeClose</a> event of this <code>sap.m.QuickView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickView</code> itself.</p><p>This event fires before the QuickView is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.QuickView/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.QuickView</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickView</code> itself.</p><p>This event fires before the QuickView is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Closes the QuickView.</p>
             * @returns sap.m.QuickView <p>Pointer to the control instance for chaining</p>
             */
            close(): sap.m.QuickView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.QuickView/events/afterClose">afterClose</a> event of this <code>sap.m.QuickView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.QuickView/events/afterOpen">afterOpen</a> event of this <code>sap.m.QuickView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.QuickView/events/beforeClose">beforeClose</a> event of this <code>sap.m.QuickView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.QuickView/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.QuickView</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.QuickView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.QuickView/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.QuickView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.QuickView/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.QuickView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.QuickView/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.QuickView;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.QuickView/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.QuickView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.QuickView;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.QuickView/methods/getPlacement">placement</a>.</p><p>This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.</p><p>Default value is <code>Right</code>.</p>
             * @returns sap.m.PlacementType <p>Value of property <code>placement</code></p>
             */
            getPlacement(): sap.m.PlacementType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.QuickView/methods/getWidth">width</a>.</p><p>The width of the QuickView. The property takes effect only when running on desktop or tablet.</p><p>Default value is <code>320px</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Opens the QuickView.</p>
             * @param {sap.ui.core.Control} oControl <p>The control which opens the QuickView.</p>
             * @returns sap.m.QuickView <p>Pointer to the control instance for chaining</p>
             */
            openBy(oControl: sap.ui.core.Control): sap.m.QuickView;
            /**
             * <p>The method sets placement position of the QuickView.</p>
             * @param {sap.m.PlacementType} sPlacement <p>The side from which the QuickView appears relative to the control that opens it.</p>
             * @returns sap.m.QuickView <p>Pointer to the control instance for chaining.</p>
             */
            setPlacement(sPlacement: sap.m.PlacementType): sap.m.QuickView;
            /**
             * <p>The method sets the width of the QuickView. Works only on desktop or tablet.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>The new width of the QuickView.</p>
             * @returns sap.m.QuickView <p>Pointer to the control instance for chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.QuickView;
        }
        /**
         * <p>QuickViewBase class provides base functionality for QuickView and QuickViewCard. Do not use it directly.</p>
         */
        export class QuickViewBase extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new QuickViewBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some page to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p>
             * @param {sap.m.QuickViewPage} oPage <p>The page to add; if empty, nothing is inserted</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addPage(oPage: sap.m.QuickViewPage): sap.m.QuickViewBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.QuickViewBase/events/afterNavigate">afterNavigate</a> event of this <code>sap.m.QuickViewBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.</p><p>The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickViewBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.QuickViewBase/events/navigate">navigate</a> event of this <code>sap.m.QuickViewBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.</p><p>The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.QuickViewBase;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindPages(oBindingInfo: any): sap.m.QuickViewBase;
            /**
             * <p>Destroys all the pages in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPages(): sap.m.QuickViewBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.QuickViewBase/events/afterNavigate">afterNavigate</a> event of this <code>sap.m.QuickViewBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterNavigate(fnFunction: Function, oListener?: any): sap.m.QuickViewBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.QuickViewBase/events/navigate">navigate</a> event of this <code>sap.m.QuickViewBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavigate(fnFunction: Function, oListener?: any): sap.m.QuickViewBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterNavigate" href="#/api/sap.m.QuickViewBase/events/afterNavigate">afterNavigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterNavigate(mParameters?: any): sap.m.QuickViewBase;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.QuickViewBase/events/navigate">navigate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireNavigate(mParameters?: any): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p><p>Displays a page header, object icon or image, object name with short description, and object information divided in groups</p>
             * @returns sap.m.QuickViewPage[] 
             */
            getPages(): sap.m.QuickViewPage[];
            /**
             * <p>Checks for the provided <code>sap.m.QuickViewPage</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.QuickViewPage} oPage <p>The page whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPage(oPage: sap.m.QuickViewPage): number;
            /**
             * <p>Inserts a page into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p>
             * @param {sap.m.QuickViewPage} oPage <p>The page to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the page should be inserted at; for a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value greater than the current size of the aggregation, the page is inserted at the last position</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPage(oPage: sap.m.QuickViewPage, iIndex: number): sap.m.QuickViewBase;
            /**
             * <p>Navigates to the previous page if there is such.</p>
             */
            navigateBack(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.QuickViewPage[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPages(): sap.m.QuickViewPage[];
            /**
             * <p>Removes a page from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a>.</p>
             * @param {number | string | sap.m.QuickViewPage} vPage <p>The page to remove or its index or id</p>
             * @returns sap.m.QuickViewPage <p>The removed page or <code>null</code></p>
             */
            removePage(vPage: number | string | sap.m.QuickViewPage): sap.m.QuickViewPage;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPages" href="#/api/sap.m.QuickViewBase/methods/getPages">pages</a> from model data.</p>
             * @returns sap.m.QuickViewBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindPages(): sap.m.QuickViewBase;
        }
        /**
         * <p>The QuickViewCard control displays information of an object in a business-card format. It also allows this object to be linked to another object using one of the links. Clicking that link updates the information with the data of the linked object. Unlimited number of objects can be linked.</p>
         */
        export class QuickViewCard extends sap.m.QuickViewBase {
            /**
             * <p>Constructor for a new QuickViewCard.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowVerticalScrollBar" href="#/api/sap.m.QuickViewCard/methods/getShowVerticalScrollBar">showVerticalScrollBar</a>.</p><p>Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showVerticalScrollBar</code></p>
             */
            getShowVerticalScrollBar(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowVerticalScrollBar" href="#/api/sap.m.QuickViewCard/methods/getShowVerticalScrollBar">showVerticalScrollBar</a>.</p><p>Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowVerticalScrollBar <p>New value for property <code>showVerticalScrollBar</code></p>
             * @returns sap.m.QuickViewCard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowVerticalScrollBar(bShowVerticalScrollBar: boolean): sap.m.QuickViewCard;
        }
        /**
         * <p>QuickViewGroup consists of a title (optional) and an entity of group elements.</p>
         */
        export class QuickViewGroup extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new QuickViewGroup.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some element to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p>
             * @param {sap.m.QuickViewGroupElement} oElement <p>The element to add; if empty, nothing is inserted</p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addElement(oElement: sap.m.QuickViewGroupElement): sap.m.QuickViewGroup;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindElements(oBindingInfo: any): sap.m.QuickViewGroup;
            /**
             * <p>Destroys all the elements in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyElements(): sap.m.QuickViewGroup;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p><p>A combination of one label and another control (Link or Text) associated to this label.</p>
             * @returns sap.m.QuickViewGroupElement[] 
             */
            getElements(): sap.m.QuickViewGroupElement[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeading" href="#/api/sap.m.QuickViewGroup/methods/getHeading">heading</a>.</p><p>The title of the group</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>heading</code></p>
             */
            getHeading(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.QuickViewGroup/methods/getVisible">visible</a>.</p><p>Determines whether the group is visible on the screen.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.QuickViewGroupElement</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.QuickViewGroupElement} oElement <p>The element whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfElement(oElement: sap.m.QuickViewGroupElement): number;
            /**
             * <p>Inserts a element into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p>
             * @param {sap.m.QuickViewGroupElement} oElement <p>The element to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the element should be inserted at; for a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value greater than the current size of the aggregation, the element is inserted at the last position</p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertElement(oElement: sap.m.QuickViewGroupElement, iIndex: number): sap.m.QuickViewGroup;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.QuickViewGroupElement[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllElements(): sap.m.QuickViewGroupElement[];
            /**
             * <p>Removes a element from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a>.</p>
             * @param {number | string | sap.m.QuickViewGroupElement} vElement <p>The element to remove or its index or id</p>
             * @returns sap.m.QuickViewGroupElement <p>The removed element or <code>null</code></p>
             */
            removeElement(vElement: number | string | sap.m.QuickViewGroupElement): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeading" href="#/api/sap.m.QuickViewGroup/methods/getHeading">heading</a>.</p><p>The title of the group</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sHeading <p>New value for property <code>heading</code></p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeading(sHeading: string): sap.m.QuickViewGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.QuickViewGroup/methods/getVisible">visible</a>.</p><p>Determines whether the group is visible on the screen.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.QuickViewGroup;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.m.QuickViewGroup/methods/getElements">elements</a> from model data.</p>
             * @returns sap.m.QuickViewGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindElements(): sap.m.QuickViewGroup;
        }
        /**
         * <p>QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to this label.</p>
         */
        export class QuickViewGroupElement extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new QuickViewGroupElement.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmailSubject" href="#/api/sap.m.QuickViewGroupElement/methods/getEmailSubject">emailSubject</a>.</p><p>The subject of the email. Works only with QuickViewGroupElement of type email.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>emailSubject</code></p>
             */
            getEmailSubject(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.QuickViewGroupElement/methods/getLabel">label</a>.</p><p>Specifies the text displayed below the associated label.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>label</code></p>
             */
            getLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageLinkId" href="#/api/sap.m.QuickViewGroupElement/methods/getPageLinkId">pageLinkId</a>.</p><p>Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement. Works only with QuickViewGroupElement of type pageLink.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>pageLinkId</code></p>
             */
            getPageLinkId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.QuickViewGroupElement/methods/getTarget">target</a>.</p><p>Specifies the target of the link - it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.</p><p>Default value is <code>_blank</code>.</p>
             * @returns string <p>Value of property <code>target</code></p>
             */
            getTarget(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.QuickViewGroupElement/methods/getType">type</a>.</p><p>Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is 'text'.</p><p>Default value is <code>text</code>.</p>
             * @returns sap.m.QuickViewGroupElementType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.QuickViewGroupElementType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.QuickViewGroupElement/methods/getUrl">url</a>.</p><p>Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>url</code></p>
             */
            getUrl(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.QuickViewGroupElement/methods/getValue">value</a>.</p><p>Specifies the text of the control that associates with the label.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.QuickViewGroupElement/methods/getVisible">visible</a>.</p><p>Determines whether the element should be visible on the screen.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmailSubject" href="#/api/sap.m.QuickViewGroupElement/methods/getEmailSubject">emailSubject</a>.</p><p>The subject of the email. Works only with QuickViewGroupElement of type email.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sEmailSubject <p>New value for property <code>emailSubject</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEmailSubject(sEmailSubject: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.QuickViewGroupElement/methods/getLabel">label</a>.</p><p>Specifies the text displayed below the associated label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sLabel <p>New value for property <code>label</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabel(sLabel: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageLinkId" href="#/api/sap.m.QuickViewGroupElement/methods/getPageLinkId">pageLinkId</a>.</p><p>Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement. Works only with QuickViewGroupElement of type pageLink.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sPageLinkId <p>New value for property <code>pageLinkId</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPageLinkId(sPageLinkId: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTarget" href="#/api/sap.m.QuickViewGroupElement/methods/getTarget">target</a>.</p><p>Specifies the target of the link - it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>_blank</code>.</p>
             * @param {string} sTarget <p>New value for property <code>target</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTarget(sTarget: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.QuickViewGroupElement/methods/getType">type</a>.</p><p>Specifies the type of the displayed information - phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is 'text'.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>text</code>.</p>
             * @param {sap.m.QuickViewGroupElementType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.QuickViewGroupElementType): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.QuickViewGroupElement/methods/getUrl">url</a>.</p><p>Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sUrl <p>New value for property <code>url</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUrl(sUrl: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.QuickViewGroupElement/methods/getValue">value</a>.</p><p>Specifies the text of the control that associates with the label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.QuickViewGroupElement;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.QuickViewGroupElement/methods/getVisible">visible</a>.</p><p>Determines whether the element should be visible on the screen.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.QuickViewGroupElement <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.QuickViewGroupElement;
        }
        /**
         * <p><p>QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to this label.</p></p>
         */
        export enum QuickViewGroupElementType {
            /**
             * <p>Displays an e-mail link</p>
             */
            email = "email",
            /**
             * <p>Displays a regular HTML link</p>
             */
            link = "link",
            /**
             * <p>Displays a phone number link for direct dialing and an icon for sending a text message</p>
             */
            mobile = "mobile",
            /**
             * <p>Displays a link for navigating to another QuickViewPage</p>
             */
            pageLink = "pageLink",
            /**
             * <p>Displays a phone number link for direct dialing</p>
             */
            phone = "phone",
            /**
             * <p>Displays text</p>
             */
            text = "text",
        }
        /**
         * <p>QuickViewPage consists of a page header, an object icon or image, an object name with short description, and an object information divided in groups. The control uses the sap.m.SimpleForm control to display information.</p>
         */
        export class QuickViewPage extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new QuickViewPage.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some group to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p>
             * @param {sap.m.QuickViewGroup} oGroup <p>The group to add; if empty, nothing is inserted</p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addGroup(oGroup: sap.m.QuickViewGroup): sap.m.QuickViewPage;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindGroups(oBindingInfo: any): sap.m.QuickViewPage;
            /**
             * <p>Destroys all the groups in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyGroups(): sap.m.QuickViewPage;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCrossAppNavCallback" href="#/api/sap.m.QuickViewPage/methods/getCrossAppNavCallback">crossAppNavCallback</a>.</p><p>Specifies the application which provides target and param configuration for cross-application navigation from the 'page header'.</p>
             * @returns any <p>Value of property <code>crossAppNavCallback</code></p>
             */
            getCrossAppNavCallback(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.QuickViewPage/methods/getDescription">description</a>.</p><p>Specifies the text displayed under the header of the content section</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFallbackIcon" href="#/api/sap.m.QuickViewPage/methods/getFallbackIcon">fallbackIcon</a>.</p><p>Defines the fallback icon displayed in case of wrong image src or loading issues.</p><p><b>Note</b> Accepted values are only icons from the SAP icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>fallbackIcon</code></p>
             */
            getFallbackIcon(): sap.ui.core.URI;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p><p>QuickViewGroup consists of a title (optional) and an entity of group elements.</p>
             * @returns sap.m.QuickViewGroup[] 
             */
            getGroups(): sap.m.QuickViewGroup[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.QuickViewPage/methods/getHeader">header</a>.</p><p>Specifies the text displayed in the header of the control.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>header</code></p>
             */
            getHeader(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.QuickViewPage/methods/getIcon">icon</a>.</p><p>Specifies the URL of the icon displayed under the header of the page</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>icon</code></p>
             */
            getIcon(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageId" href="#/api/sap.m.QuickViewPage/methods/getPageId">pageId</a>.</p><p>Page id</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>pageId</code></p>
             */
            getPageId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.QuickViewPage/methods/getTitle">title</a>.</p><p>Specifies the text displayed in the header of the content section of the control.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleUrl" href="#/api/sap.m.QuickViewPage/methods/getTitleUrl">titleUrl</a>.</p><p>Specifies the URL which opens when the title or the thumbnail is clicked.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>titleUrl</code></p>
             */
            getTitleUrl(): string;
            /**
             * <p>Checks for the provided <code>sap.m.QuickViewGroup</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.QuickViewGroup} oGroup <p>The group whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfGroup(oGroup: sap.m.QuickViewGroup): number;
            /**
             * <p>Inserts a group into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p>
             * @param {sap.m.QuickViewGroup} oGroup <p>The group to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the group should be inserted at; for a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value greater than the current size of the aggregation, the group is inserted at the last position</p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertGroup(oGroup: sap.m.QuickViewGroup, iIndex: number): sap.m.QuickViewPage;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.QuickViewGroup[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllGroups(): sap.m.QuickViewGroup[];
            /**
             * <p>Removes a group from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a>.</p>
             * @param {number | string | sap.m.QuickViewGroup} vGroup <p>The group to remove or its index or id</p>
             * @returns sap.m.QuickViewGroup <p>The removed group or <code>null</code></p>
             */
            removeGroup(vGroup: number | string | sap.m.QuickViewGroup): sap.m.QuickViewGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCrossAppNavCallback" href="#/api/sap.m.QuickViewPage/methods/getCrossAppNavCallback">crossAppNavCallback</a>.</p><p>Specifies the application which provides target and param configuration for cross-application navigation from the 'page header'.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oCrossAppNavCallback <p>New value for property <code>crossAppNavCallback</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCrossAppNavCallback(oCrossAppNavCallback: any): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.QuickViewPage/methods/getDescription">description</a>.</p><p>Specifies the text displayed under the header of the content section</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFallbackIcon" href="#/api/sap.m.QuickViewPage/methods/getFallbackIcon">fallbackIcon</a>.</p><p>Defines the fallback icon displayed in case of wrong image src or loading issues.</p><p><b>Note</b> Accepted values are only icons from the SAP icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sFallbackIcon <p>New value for property <code>fallbackIcon</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFallbackIcon(sFallbackIcon: sap.ui.core.URI): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeader" href="#/api/sap.m.QuickViewPage/methods/getHeader">header</a>.</p><p>Specifies the text displayed in the header of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sHeader <p>New value for property <code>header</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeader(sHeader: string): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.QuickViewPage/methods/getIcon">icon</a>.</p><p>Specifies the URL of the icon displayed under the header of the page</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: string): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPageId" href="#/api/sap.m.QuickViewPage/methods/getPageId">pageId</a>.</p><p>Page id</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sPageId <p>New value for property <code>pageId</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPageId(sPageId: string): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.QuickViewPage/methods/getTitle">title</a>.</p><p>Specifies the text displayed in the header of the content section of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.QuickViewPage;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleUrl" href="#/api/sap.m.QuickViewPage/methods/getTitleUrl">titleUrl</a>.</p><p>Specifies the URL which opens when the title or the thumbnail is clicked.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitleUrl <p>New value for property <code>titleUrl</code></p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleUrl(sTitleUrl: string): sap.m.QuickViewPage;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroups" href="#/api/sap.m.QuickViewPage/methods/getGroups">groups</a> from model data.</p>
             * @returns sap.m.QuickViewPage <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindGroups(): sap.m.QuickViewPage;
        }
        /**
         * <p>RadioButton is a control similar to a <a target="_self" class="jsdoclink" href="#/api/sap.m.CheckBox">checkbox</a>, but it allows you to choose only one of the predefined set of options. Multiple radio buttons have to belong to the same group (have the same value for <code>groupName</code>) in order to be mutually exclusive. A wrapper control <a target="_self" class="jsdoclink" href="#/api/sap.m.RadioButtonGroup">RadioButtonGroup</a> can be used instead of individual radio buttons. </p><h3>Structure</h3><p> <ul> <li>Radio buttons can have a value state like Error or Warning.</li> <li>Radio buttons can be arranged vertically by setting the <code>column</code> to a number higher than 1.</li> <li>Radio button options need to have a <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">label</a>.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You quickly need to choose between at least two alternatives.</li> <li>You need to place other controls between the radio button options.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>You want to select multiple values for the same option. Use <a target="_self" class="jsdoclink" href="#/api/sap.m.CheckBox">checkboxes</a> instead.</li> <li>When the default value is recommended for most users in most situations. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">drop-down</a> instead as is saves space by not showing all the alternatives.</li> <li>You want have more than 8 options. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">drop-down</a> instead.</li> <li>When the options are mutually exclusive e.g. ON/OFF. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Switch">switch</a> instead.</li> <li>Avoid using horizontally aligned radio buttons as they will be cut off on phones.</li> </ul></p><p><b>Note:</b> The order in which the RadioButtons will be selected one after another is determined upon instantiation of the control. This order is consistent with the ARIA attributes for position, which the same button will receive when added to specific group.</p><p><b>Example:</b> If three buttons are created (<code>button1, button2, button3</code>) in consecutive order, initially they will have the same positions and TAB order. However if after that <code>button1</code> and <code>button3</code> are moved to a new group and then <code>button2</code> is added to the same group, their TAB order and position in this group will be <code>button1, button3, button2</code>.</p>
         */
        export class RadioButton extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new RadioButton.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control Enables users to select a single option from a set of options.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RadioButton;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RadioButton;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButton/events/select">select</a> event of this <code>sap.m.RadioButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.RadioButton</code> itself.</p><p>Event is triggered when the user makes a change on the radio button (selecting or unselecting it).</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code> itself</p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.RadioButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButton/events/select">select</a> event of this <code>sap.m.RadioButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.RadioButton;
            /**
             * <p>Destroys all related objects to the RadioButton</p>
             */
            exit(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButton/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.RadioButton;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.RadioButton</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveHandling" href="#/api/sap.m.RadioButton/methods/getActiveHandling">activeHandling</a>.</p><p>This is a flag to switch on activeHandling. When it is switched off, there will not be visual changes on active state. Default value is 'true'</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>activeHandling</code></p>
             */
            getActiveHandling(): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.RadioButton/methods/getEditable">editable</a>.</p><p>Specifies whether the user can select the radio button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.RadioButton/methods/getEnabled">enabled</a>.</p><p>Specifies if the radio button is disabled.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupName" href="#/api/sap.m.RadioButton/methods/getGroupName">groupName</a>.</p><p>Name of the radio button group the current radio button belongs to. You can define a new name for the group. If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.</p><p>Default value is <code>sapMRbDefaultGroup</code>.</p>
             * @returns string <p>Value of property <code>groupName</code></p>
             */
            getGroupName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.RadioButton/methods/getSelected">selected</a>.</p><p>Specifies the select state of the radio button</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.RadioButton/methods/getText">text</a>.</p><p>Specifies the text displayed next to the RadioButton</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.RadioButton/methods/getTextAlign">textAlign</a>.</p><p>Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.RadioButton/methods/getTextDirection">textDirection</a>.</p><p>Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseEntireWidth" href="#/api/sap.m.RadioButton/methods/getUseEntireWidth">useEntireWidth</a>.</p><p>Indicates if the given width will be applied for the whole RadioButton or only it's label. By Default width is set only for the label.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>useEntireWidth</code></p>
             */
            getUseEntireWidth(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.RadioButton/methods/getValueState">valueState</a>.</p><p>Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, Information, None</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.RadioButton/methods/getWidth">width</a>.</p><p>Width of the RadioButton or it's label depending on the useEntireWidth property. By Default width is set only for the label.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)</p>
             * @param {any} oEvent <p>provides information for the event</p>
             */
            onsapselect(oEvent: any): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveHandling" href="#/api/sap.m.RadioButton/methods/getActiveHandling">activeHandling</a>.</p><p>This is a flag to switch on activeHandling. When it is switched off, there will not be visual changes on active state. Default value is 'true'</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bActiveHandling <p>New value for property <code>activeHandling</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveHandling(bActiveHandling: boolean): sap.m.RadioButton;
            /**
             * <p>Method to set a RadioButton's state to active or inactive.</p>
             * @param {boolean} bActive <p>Sets the active state to true or false</p>
             */
            setActiveState(bActive: boolean): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.RadioButton/methods/getEditable">editable</a>.</p><p>Specifies whether the user can select the radio button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.RadioButton/methods/getEnabled">enabled</a>.</p><p>Specifies if the radio button is disabled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.RadioButton;
            /**
             * <p>Sets RadioButton's groupName. Only one radioButton from the same group can be selected</p>
             * @param {string} sGroupName <p>Name of the group to which the RadioButton will belong.</p>
             * @returns sap.m.RadioButton <p>Reference to the control instance for chaining</p>
             */
            setGroupName(sGroupName: string): sap.m.RadioButton;
            /**
             * <p>Sets the state of the RadioButton to selected.</p>
             * @param {boolean} bSelected <p>defines if the radio button is selected</p>
             * @returns sap.m.RadioButton <p>Reference to the control instance for chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.RadioButton;
            /**
             * <p>Sets the text for the RadioButton's label.</p>
             * @param {string} sText <p>The text to be set</p>
             * @returns sap.m.RadioButton <p>Reference to the control instance for chaining</p>
             */
            setText(sText: string): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.RadioButton/methods/getTextAlign">textAlign</a>.</p><p>Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.RadioButton;
            /**
             * <p>Sets the text direction for the RadioButton's label.</p>
             * @param {string} sDirection <p>Text direction to be set to RadioButton's label</p>
             * @returns sap.m.RadioButton <p>Reference to the control instance for chaining</p>
             */
            setTextDirection(sDirection: string): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseEntireWidth" href="#/api/sap.m.RadioButton/methods/getUseEntireWidth">useEntireWidth</a>.</p><p>Indicates if the given width will be applied for the whole RadioButton or only it's label. By Default width is set only for the label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUseEntireWidth <p>New value for property <code>useEntireWidth</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUseEntireWidth(bUseEntireWidth: boolean): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.RadioButton/methods/getValueState">valueState</a>.</p><p>Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, Information, None</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.RadioButton/methods/getWidth">width</a>.</p><p>Width of the RadioButton or it's label depending on the useEntireWidth property. By Default width is set only for the label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.RadioButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.RadioButton;
        }
        /**
         * <p>This control is used as a wrapper for a group of <a target="_self" class="jsdoclink" href="#/api/sap.m.RadioButton">sap.m.RadioButton</a> controls, which can be used as a single UI element. You can select only one of the grouped radio buttons at a time. </p><h3>Structure</h3><p> <ul> <li>The radio buttons are stored in the <code>buttons</code> aggregation.</li> <li>By setting the <code>columns</code> property, you can create layouts like a 'matrix', 'vertical' or 'horizontal'.</li> <li><b>Note:</b>For proper display on all devices, we recommend creating radio button groups with only one row or only one column.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You want to attach a single event handler on a group of buttons, rather than on each individual button.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>Do not put two radio button groups right next to each other as it is difficult to determine which buttons belong to which group.</li> </ul></p>
         */
        export class RadioButtonGroup extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new RadioButtonGroup.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control A wrapper control for a group of radio buttons.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RadioButtonGroup;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RadioButtonGroup;
            /**
             * <p>Adds a new radio button to the group.</p>
             * @param {sap.m.RadioButton} oButton <p>The button which will be added to the group.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            addButton(oButton: sap.m.RadioButton): sap.m.RadioButtonGroup;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButtonGroup/events/select">select</a> event of this <code>sap.m.RadioButtonGroup</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.RadioButtonGroup</code> itself.</p><p>Fires when selection is changed by user interaction.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.RadioButtonGroup</code> itself</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.RadioButtonGroup;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.RadioButtonGroup/methods/getButtons">buttons</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindButtons(oBindingInfo: any): sap.m.RadioButtonGroup;
            /**
             * <p>Creates a new instance of RadioButtonGroup, with the same settings as the RadioButtonGroup on which the method is called. Event handlers are not cloned.</p>
             * @returns sap.m.RadioButtonGroup <p>New instance of RadioButtonGroup</p>
             */
            clone(): sap.m.RadioButtonGroup;
            /**
             * <p>Destroys all radio buttons.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            destroyButtons(): sap.m.RadioButtonGroup;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButtonGroup/events/select">select</a> event of this <code>sap.m.RadioButtonGroup</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.RadioButtonGroup;
            /**
             * <p>Exits the radio button group.</p>
             */
            exit(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.RadioButtonGroup/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.RadioButtonGroup;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.RadioButtonGroup/methods/getButtons">buttons</a>.</p><p>Returns a list of the RadioButtons in a RadioButtonGroup</p>
             * @returns sap.m.RadioButton[] 
             */
            getButtons(): sap.m.RadioButton[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.RadioButtonGroup/methods/getColumns">columns</a>.</p><p>Specifies the maximum number of radio buttons displayed in one line.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>columns</code></p>
             */
            getColumns(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.RadioButtonGroup/methods/getEditable">editable</a>.</p><p>Specifies whether the user can change the selected value of the RadioButtonGroup. When the property is set to false, the control obtains visual styles different from its visual styles for the normal and the disabled state. Additionally, the control is no longer interactive, but can receive focus.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.RadioButtonGroup/methods/getEnabled">enabled</a>.</p><p>Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is "true".</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Returns the selected radio button.</p>
             * @returns sap.m.RadioButton <p>The selected radio button.</p>
             */
            getSelectedButton(): sap.m.RadioButton;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedIndex" href="#/api/sap.m.RadioButtonGroup/methods/getSelectedIndex">selectedIndex</a>.</p><p>Determines the index of the selected/checked RadioButton. Default is 0. If no radio button is selected, the selectedIndex property will return -1.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>selectedIndex</code></p>
             */
            getSelectedIndex(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.RadioButtonGroup/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.RadioButtonGroup/methods/getValueState">valueState</a>.</p><p>The value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error, sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None. Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled, sets the value of the invalid property for the whole RadioButtonGroup to "true".</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.RadioButtonGroup/methods/getWidth">width</a>.</p><p>Specifies the width of the RadioButtonGroup.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.RadioButton</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.RadioButtonGroup/methods/getButtons">buttons</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.RadioButton} oButton <p>The button whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfButton(oButton: sap.m.RadioButton): number;
            /**
             * <p>Adds a new radio button to the group at a specified index.</p>
             * @param {sap.m.RadioButton} oButton <p>The radio button which will be added to the group.</p>
             * @param {number} iIndex <p>The index, at which the radio button will be added.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            insertButton(oButton: sap.m.RadioButton, iIndex: number): sap.m.RadioButtonGroup;
            /**
             * <p>Overwrites the onAfterRendering</p>
             */
            onAfterRendering(): void;
            /**
             * <p>Overwrites the onBeforeRendering method.</p>
             */
            onBeforeRendering(): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all radio buttons.</p>
             * @returns any[] <p>Array of removed buttons or null.</p>
             */
            removeAllButtons(): any[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RadioButtonGroup/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a radio button from the group.</p>
             * @returns sap.m.RadioButton <p>vElement The removed radio button.</p>
             */
            removeButton(): sap.m.RadioButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.RadioButtonGroup/methods/getColumns">columns</a>.</p><p>Specifies the maximum number of radio buttons displayed in one line.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} iColumns <p>New value for property <code>columns</code></p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumns(iColumns: number): sap.m.RadioButtonGroup;
            /**
             * <p>Sets the editable property of the RadioButtonGroup. Single buttons preserve the value of their editable property. If the group is set to editable=false the buttons are also displayed and function as read only. Non editable radio buttons can still obtain focus.</p>
             * @param {boolean} bEditable <p>Defines whether the radio buttons should be interactive.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            setEditable(bEditable: boolean): sap.m.RadioButtonGroup;
            /**
             * <p>Sets the enabled property of the RadioButtonGroup. Single buttons preserve internally the value of their enabled property. If the group is set to enabled=false the buttons are also displayed as disabled and getEnabled returns false.</p>
             * @param {boolean} bEnabled <p>Defines whether the radio buttons should be interactive.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            setEnabled(bEnabled: boolean): sap.m.RadioButtonGroup;
            /**
             * <p>Sets the selected sap.m.RadioButton using sap.m.RadioButton.</p>
             * @param {sap.m.RadioButton} oSelectedButton <p>The item to be selected.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            setSelectedButton(oSelectedButton: sap.m.RadioButton): sap.m.RadioButtonGroup;
            /**
             * <p>Sets the selected sap.m.RadioButton using index.</p>
             * @param {number} iSelectedIndex <p>The index of the radio button which has to be selected.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            setSelectedIndex(iSelectedIndex: number): sap.m.RadioButtonGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.RadioButtonGroup/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.RadioButtonGroup;
            /**
             * <p>Sets ValueState of all radio buttons in the group.</p>
             * @param {string} sValueState <p>The value state of the radio group - none, success, warning, error.</p>
             * @returns sap.m.RadioButtonGroup <p>Pointer to the control instance for chaining.</p>
             */
            setValueState(sValueState: string): sap.m.RadioButtonGroup;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.RadioButtonGroup/methods/getWidth">width</a>.</p><p>Specifies the width of the RadioButtonGroup.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.RadioButtonGroup;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getButtons" href="#/api/sap.m.RadioButtonGroup/methods/getButtons">buttons</a> from model data.</p>
             * @returns sap.m.RadioButtonGroup <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindButtons(): sap.m.RadioButtonGroup;
            /**
             * <p>Updates the buttons in the group.</p>
             */
            updateButtons(): void;
        }
        /**
         * <p>Represents a numerical interval and two handles to select a sub-range within it. </p><h3>Overview</h3><p> The purpose of the control is to enable visual selection of sub-ranges within a given interval. </p><h4>Notes:</p><h4> <ul> <li>The RangeSlider extends the functionality of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Slider">Slider</a></li> <li>The right and left handle can be moved individually and their positions could therefore switch.</li> <li>The entire range can be moved along the interval.</li> <li>The right and left handle can select the same value</li> </ul></p><h3>Usage</h3><p> The most common usecase is to select and move sub-ranges on a continuous numerical scale.</p><h3>Responsive Behavior</h3><p> You can move the currently selected range by clicking on it and dragging it along the interval.</p>
         */
        export class RangeSlider extends sap.m.Slider {
            /**
             * <p>Constructor for a new <code>RangeSlider</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRange" href="#/api/sap.m.RangeSlider/methods/getRange">range</a>.</p><p>Determines the currently selected range on the slider.</p><p>If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the console.</p><p>Default value is <code>0,100</code>.</p>
             * @returns number[] <p>Value of property <code>range</code></p>
             */
            getRange(): number[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue2" href="#/api/sap.m.RangeSlider/methods/getValue2">value2</a>.</p><p>Current second value of the slider. (Position of the second handle.)</p><p><b>Note:</b> If the value is not in the valid range (between <code>min</code> and <code>max</code>) it will be changed to be in the valid range. If it is smaller than <code>value</code> it will be set to the same value.</p><p>Default value is <code>100</code>.</p>
             * @returns number <p>Value of property <code>value2</code></p>
             */
            getValue2(): number;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRange" href="#/api/sap.m.RangeSlider/methods/getRange">range</a>.</p><p>Determines the currently selected range on the slider.</p><p>If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the console.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0,100</code>.</p>
             * @param {number[]} sRange <p>New value for property <code>range</code></p>
             * @returns sap.m.RangeSlider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRange(sRange: number[]): sap.m.RangeSlider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue2" href="#/api/sap.m.RangeSlider/methods/getValue2">value2</a>.</p><p>Current second value of the slider. (Position of the second handle.)</p><p><b>Note:</b> If the value is not in the valid range (between <code>min</code> and <code>max</code>) it will be changed to be in the valid range. If it is smaller than <code>value</code> it will be set to the same value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100</code>.</p>
             * @param {number} fValue2 <p>New value for property <code>value2</code></p>
             * @returns sap.m.RangeSlider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue2(fValue2: number): sap.m.RangeSlider;
            /**
             * <p>Updates value of the advanced tooltip.</p>
             * @param {string} sNewValue <p>The new value</p>
             */
            protected updateAdvancedTooltipDom(sNewValue: string): void;
            /**
             * <p>Updates values of the advanced tooltips.</p>
             * @param {string} sNewValue <p>The new value</p>
             */
            protected updateAdvancedTooltipDom(sNewValue: string): void;
        }
        /**
         * <p>The rating indicator is used to display a specific number of icons that are used to rate an item. Additionally it is also used to display the average over all ratings. </p><h3>Structure</h3><p> <ul> <li>The rating indicator can use different icons (default: stars) which are defined as URIs in the properties <code>iconHovered</code>, <code>iconSelected</code> and <code>iconUnselected</code>.</li> <li>The rating indicator can display half-values (<a target="_self" class="jsdoclink" href="#/api/sap.m.RatingIndicatorVisualMode">visualMode</a> = Half) when it is used to show the average. Half-values can't be selected by the user.</li> </ul> </p><h3>Usage</h3><p> The preferred number of icons is between 5 (default) and 7. </p><h3>Responsive Behavior</h3><p> You can display icons in 4 recommended sizes: <ul> <li>large - 32px</li> <li>medium(default) - 22px</li> <li>small - 16px</li> <li>XS - 12px</li> </ul> <b>Note:</b> If no icon size is set, the rating indicator will set it according to the content density.</h4>
         */
        export class RatingIndicator extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new RatingIndicator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control Enables users to rate an item on a numeric scale.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RatingIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RatingIndicator;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RatingIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.RatingIndicator;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.RatingIndicator/events/change">change</a> event of this <code>sap.m.RatingIndicator</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.</p><p>The event is fired when the user has done a rating.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.RatingIndicator;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.RatingIndicator/events/liveChange">liveChange</a> event of this <code>sap.m.RatingIndicator</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.</p><p>This event is triggered during the dragging period, each time the rating value changes.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.RatingIndicator;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.RatingIndicator/methods/getValue">value</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindValue(oBindingInfo: any): sap.m.RatingIndicator;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.RatingIndicator/events/change">change</a> event of this <code>sap.m.RatingIndicator</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.RatingIndicator;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.RatingIndicator/events/liveChange">liveChange</a> event of this <code>sap.m.RatingIndicator</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.RatingIndicator;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.RatingIndicator/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.RatingIndicator;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.RatingIndicator/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.RatingIndicator;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns sap.m.RatingIndicator <p>this instance for method chaining</p>
             */
            protected getAccessibilityInfo(): sap.m.RatingIndicator;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RatingIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RatingIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.RatingIndicator/methods/getDisplayOnly">displayOnly</a>.</p><p>The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the tab chain. This setting is used for forms in review mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>displayOnly</code></p>
             */
            getDisplayOnly(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.RatingIndicator/methods/getEditable">editable</a>.</p><p>Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is focusable, and in the tab chain but not interactive.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.RatingIndicator/methods/getEnabled">enabled</a>.</p><p>Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconHovered" href="#/api/sap.m.RatingIndicator/methods/getIconHovered">iconHovered</a>.</p><p>The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set</p>
             * @returns sap.ui.core.URI <p>Value of property <code>iconHovered</code></p>
             */
            getIconHovered(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconSelected" href="#/api/sap.m.RatingIndicator/methods/getIconSelected">iconSelected</a>.</p><p>The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set</p>
             * @returns sap.ui.core.URI <p>Value of property <code>iconSelected</code></p>
             */
            getIconSelected(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconSize" href="#/api/sap.m.RatingIndicator/methods/getIconSize">iconSize</a>.</p><p>The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>iconSize</code></p>
             */
            getIconSize(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconUnselected" href="#/api/sap.m.RatingIndicator/methods/getIconUnselected">iconUnselected</a>.</p><p>The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set</p>
             * @returns sap.ui.core.URI <p>Value of property <code>iconUnselected</code></p>
             */
            getIconUnselected(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxValue" href="#/api/sap.m.RatingIndicator/methods/getMaxValue">maxValue</a>.</p><p>The number of displayed rating symbols</p><p>Default value is <code>5</code>.</p>
             * @returns number <p>Value of property <code>maxValue</code></p>
             */
            getMaxValue(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.RatingIndicator/methods/getValue">value</a>.</p><p>The indicated value of the rating</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>value</code></p>
             */
            getValue(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisualMode" href="#/api/sap.m.RatingIndicator/methods/getVisualMode">visualMode</a>.</p><p>Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)</p><p>Default value is <code>Half</code>.</p>
             * @returns sap.m.RatingIndicatorVisualMode <p>Value of property <code>visualMode</code></p>
             */
            getVisualMode(): sap.m.RatingIndicatorVisualMode;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RatingIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RatingIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.RatingIndicator/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.RatingIndicator/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayOnly" href="#/api/sap.m.RatingIndicator/methods/getDisplayOnly">displayOnly</a>.</p><p>The RatingIndicator in displayOnly mode is not interactive, not editable, not focusable, and not in the tab chain. This setting is used for forms in review mode.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisplayOnly <p>New value for property <code>displayOnly</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayOnly(bDisplayOnly: boolean): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.RatingIndicator/methods/getEditable">editable</a>.</p><p>Defines whether the user is allowed to edit the RatingIndicator. If editable is false the control is focusable, and in the tab chain but not interactive.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.RatingIndicator/methods/getEnabled">enabled</a>.</p><p>Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconHovered" href="#/api/sap.m.RatingIndicator/methods/getIconHovered">iconHovered</a>.</p><p>The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIconHovered <p>New value for property <code>iconHovered</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconHovered(sIconHovered: sap.ui.core.URI): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconSelected" href="#/api/sap.m.RatingIndicator/methods/getIconSelected">iconSelected</a>.</p><p>The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIconSelected <p>New value for property <code>iconSelected</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconSelected(sIconSelected: sap.ui.core.URI): sap.m.RatingIndicator;
            /**
             * <p>Sets the icon size value. The method automatically updates the UI components if the control has been rendered before.</p>
             * @param {sap.ui.core.CSSSize} sIconSize <p>The size of the icon</p>
             * @returns sap.m.RatingIndicator <p>Returns <code>this</code> to facilitate method chaining.</p>
             */
            setIconSize(sIconSize: sap.ui.core.CSSSize): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconUnselected" href="#/api/sap.m.RatingIndicator/methods/getIconUnselected">iconUnselected</a>.</p><p>The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIconUnselected <p>New value for property <code>iconUnselected</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconUnselected(sIconUnselected: sap.ui.core.URI): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxValue" href="#/api/sap.m.RatingIndicator/methods/getMaxValue">maxValue</a>.</p><p>The number of displayed rating symbols</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>5</code>.</p>
             * @param {number} iMaxValue <p>New value for property <code>maxValue</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxValue(iMaxValue: number): sap.m.RatingIndicator;
            /**
             * <p>Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxValue" href="#/api/sap.m.RatingIndicator/methods/getMaxValue">maxValue</a> and if it is a valid number. Calling the setter with null or undefined will reset the value to it's default.</p>
             * @param {number} fValue <p>The rating value to be set.</p>
             * @returns sap.m.RatingIndicator <p>Returns <code>this</code> to facilitate method chaining.</p>
             */
            setValue(fValue: number): sap.m.RatingIndicator;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisualMode" href="#/api/sap.m.RatingIndicator/methods/getVisualMode">visualMode</a>.</p><p>Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Half</code>.</p>
             * @param {sap.m.RatingIndicatorVisualMode} sVisualMode <p>New value for property <code>visualMode</code></p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisualMode(sVisualMode: sap.m.RatingIndicatorVisualMode): sap.m.RatingIndicator;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.RatingIndicator/methods/getValue">value</a> from model data.</p>
             * @returns sap.m.RatingIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindValue(): sap.m.RatingIndicator;
        }
        /**
         * <p><p>Possible values for the visualization of float values in the RatingIndicator control.</p></p>
         */
        export enum RatingIndicatorVisualMode {
            /**
             * <p>Values are rounded to the nearest integer value (e.g. 1.7 -> 2).</p>
             */
            Full = "Full",
            /**
             * <p>Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).</p>
             */
            Half = "Half",
        }
        /**
         * <h3>Overview</h3><p> The responsive popover acts as a <a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">popover</a> on desktop and tablet, while on phone it acts as a <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">dialog</a> with <code>stretch</code> set to true.</p><p><b>Note:</b> It is recommended that <code>ResponsivePopover</code> is used in fragments otherwise there might be some implications on the user experience. For example, on desktop, open or close functions of the <code>Popover</code> might not be called.</p><h3>Usage</h3><p> When you want to make sure that all content is visible on any device.</p>
         */
        export class ResponsivePopover extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ResponsivePopover.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control A popover-based control that behaves differently according to the device it is on.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ResponsivePopover;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.ResponsivePopover;
            /**
             * <p>Adds content to the ResponsivePopover</p>
             * @param {sap.ui.core.Control} oControl <p>The control to be added to the content</p>
             */
            addContent(oControl: sap.ui.core.Control): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ResponsivePopover/events/afterClose">afterClose</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.</p><p>Event is fired after popover or dialog is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ResponsivePopover/events/afterOpen">afterOpen</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.</p><p>Event is fired after popover or dialog is open.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ResponsivePopover/events/beforeClose">beforeClose</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.</p><p>Event is fired before popover or dialog is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ResponsivePopover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.</p><p>Event is fired before popover or dialog is open.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Creates a new instance of ResponsivePopover with the same settings as the ResponsivePopover on which the method is called</p>
             * @returns sap.m.ResponsivePopover <p>New instance of ResponsivePopover</p>
             */
            clone(): sap.m.ResponsivePopover;
            /**
             * <p>Closes the ResponsivePopover.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            close(): sap.m.ResponsivePopover;
            /**
             * <p>Destroys the beginButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBeginButton" href="#/api/sap.m.ResponsivePopover/methods/getBeginButton">beginButton</a>.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyBeginButton(): sap.m.ResponsivePopover;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.ResponsivePopover;
            /**
             * <p>Destroys the customHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.ResponsivePopover/methods/getCustomHeader">customHeader</a>.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomHeader(): sap.m.ResponsivePopover;
            /**
             * <p>Destroys the endButton in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndButton" href="#/api/sap.m.ResponsivePopover/methods/getEndButton">endButton</a>.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyEndButton(): sap.m.ResponsivePopover;
            /**
             * <p>Destroys the subHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.ResponsivePopover/methods/getSubHeader">subHeader</a>.</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySubHeader(): sap.m.ResponsivePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ResponsivePopover/events/afterClose">afterClose</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterClose(fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ResponsivePopover/events/afterOpen">afterOpen</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterOpen(fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ResponsivePopover/events/beforeClose">beforeClose</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ResponsivePopover/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.ResponsivePopover</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.ResponsivePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterClose" href="#/api/sap.m.ResponsivePopover/events/afterClose">afterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterClose(mParameters?: any): sap.m.ResponsivePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterOpen" href="#/api/sap.m.ResponsivePopover/events/afterOpen">afterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterOpen(mParameters?: any): sap.m.ResponsivePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.ResponsivePopover/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.ResponsivePopover;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.ResponsivePopover/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.ResponsivePopover;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Getter for beginButton aggregation</p>
             * @returns sap.m.Button <p>The button that is set as a beginButton aggregation</p>
             */
            getBeginButton(): sap.m.Button;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>.</p><p>Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.ResponsivePopover/methods/getContentHeight">contentHeight</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentHeight</code></p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.ResponsivePopover/methods/getContentWidth">contentWidth</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentWidth</code></p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.ResponsivePopover/methods/getCustomHeader">customHeader</a>.</p><p>CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader</p>
             * @returns sap.m.IBar 
             */
            getCustomHeader(): sap.m.IBar;
            /**
             * <p>Getter for endButton aggregation</p>
             * @returns sap.m.Button <p>The button that is set as an endButton aggregation</p>
             */
            getEndButton(): sap.m.Button;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.ResponsivePopover/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>horizontalScrolling</code></p>
             */
            getHorizontalScrolling(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ResponsivePopover/methods/getIcon">icon</a>.</p><p>This property only takes effect on phone. Please see the documentation sap.m.Dialog#icon.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.ResponsivePopover/methods/getInitialFocus">initialFocus</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialFocus(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModal" href="#/api/sap.m.ResponsivePopover/methods/getModal">modal</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.</p>
             * @returns boolean <p>Value of property <code>modal</code></p>
             */
            getModal(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetX" href="#/api/sap.m.ResponsivePopover/methods/getOffsetX">offsetX</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.</p>
             * @returns number <p>Value of property <code>offsetX</code></p>
             */
            getOffsetX(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetY" href="#/api/sap.m.ResponsivePopover/methods/getOffsetY">offsetY</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.</p>
             * @returns number <p>Value of property <code>offsetY</code></p>
             */
            getOffsetY(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.ResponsivePopover/methods/getPlacement">placement</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.</p><p>Default value is <code>Right</code>.</p>
             * @returns sap.m.PlacementType <p>Value of property <code>placement</code></p>
             */
            getPlacement(): sap.m.PlacementType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.ResponsivePopover/methods/getResizable">resizable</a>.</p><p>Whether resize option is enabled.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>resizable</code></p>
             */
            getResizable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowArrow" href="#/api/sap.m.ResponsivePopover/methods/getShowArrow">showArrow</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showArrow</code></p>
             */
            getShowArrow(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowCloseButton" href="#/api/sap.m.ResponsivePopover/methods/getShowCloseButton">showCloseButton</a>.</p><p>Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone. <b>Note:</b> The close button could be placed only in a sap.m.Bar if a sap.m.Toolbar is passed as a header - the property will not take effect.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showCloseButton</code></p>
             */
            getShowCloseButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.ResponsivePopover/methods/getShowHeader">showHeader</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHeader</code></p>
             */
            getShowHeader(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.ResponsivePopover/methods/getSubHeader">subHeader</a>.</p><p>SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader</p>
             * @returns sap.m.IBar 
             */
            getSubHeader(): sap.m.IBar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ResponsivePopover/methods/getTitle">title</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.ResponsivePopover/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>verticalScrolling</code></p>
             */
            getVerticalScrolling(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ResponsivePopover;
            /**
             * <p>Checks whether the ResponsivePopover is currently open.</p>
             * @returns boolean <p>whether the ResponsivePopover is currently opened</p>
             */
            isOpen(): boolean;
            /**
             * <p>Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter on tablet or desktop and is full screen on phone. Therefore the control parameter is only used on tablet or desktop and is ignored on phone.</p>
             * @param {any} oParent <p>When this control is displayed on tablet or desktop, the ResponsivePopover is positioned relative to this control.</p>
             * @returns any <p>Reference to the opening control</p>
             */
            openBy(oParent: any): any;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.ResponsivePopover/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ResponsivePopover/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Setter for beginButton aggregation</p>
             * @param {sap.m.Button} oButton <p>The button that will be set as an aggregation</p>
             * @returns sap.m.ResponsivePopover <p>Pointer to the control instance for chaining</p>
             */
            setBeginButton(oButton: sap.m.Button): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.ResponsivePopover/methods/getContentHeight">contentHeight</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentHeight <p>New value for property <code>contentHeight</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentHeight(sContentHeight: sap.ui.core.CSSSize): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.ResponsivePopover/methods/getContentWidth">contentWidth</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentWidth <p>New value for property <code>contentWidth</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentWidth(sContentWidth: sap.ui.core.CSSSize): sap.m.ResponsivePopover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeader" href="#/api/sap.m.ResponsivePopover/methods/getCustomHeader">customHeader</a>.</p>
             * @param {sap.m.IBar} oCustomHeader <p>The customHeader to set</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomHeader(oCustomHeader: sap.m.IBar): sap.m.ResponsivePopover;
            /**
             * <p>Setter for endButton aggregation</p>
             * @param {sap.m.Button} oButton <p>The button that will be set as an aggregation</p>
             * @returns sap.m.ResponsivePopover <p>Pointer to the control instance for chaining</p>
             */
            setEndButton(oButton: sap.m.Button): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontalScrolling" href="#/api/sap.m.ResponsivePopover/methods/getHorizontalScrolling">horizontalScrolling</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bHorizontalScrolling <p>New value for property <code>horizontalScrolling</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHorizontalScrolling(bHorizontalScrolling: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ResponsivePopover/methods/getIcon">icon</a>.</p><p>This property only takes effect on phone. Please see the documentation sap.m.Dialog#icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.ResponsivePopover;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialFocus" href="#/api/sap.m.ResponsivePopover/methods/getInitialFocus">initialFocus</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus <p>ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialFocus(oInitialFocus: sap.ui.core.ID | sap.ui.core.Control): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModal" href="#/api/sap.m.ResponsivePopover/methods/getModal">modal</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bModal <p>New value for property <code>modal</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setModal(bModal: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetX" href="#/api/sap.m.ResponsivePopover/methods/getOffsetX">offsetX</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iOffsetX <p>New value for property <code>offsetX</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOffsetX(iOffsetX: number): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffsetY" href="#/api/sap.m.ResponsivePopover/methods/getOffsetY">offsetY</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iOffsetY <p>New value for property <code>offsetY</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOffsetY(iOffsetY: number): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlacement" href="#/api/sap.m.ResponsivePopover/methods/getPlacement">placement</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Right</code>.</p>
             * @param {sap.m.PlacementType} sPlacement <p>New value for property <code>placement</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlacement(sPlacement: sap.m.PlacementType): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.ResponsivePopover/methods/getResizable">resizable</a>.</p><p>Whether resize option is enabled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bResizable <p>New value for property <code>resizable</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setResizable(bResizable: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowArrow" href="#/api/sap.m.ResponsivePopover/methods/getShowArrow">showArrow</a>.</p><p>This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowArrow <p>New value for property <code>showArrow</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowArrow(bShowArrow: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Determines if the close button to the ResponsivePopover is shown or not. Works only when ResponsivePopover is used as a dialog</p>
             * @param {boolean} bShowCloseButton <p>Defines whether the close button is shown</p>
             * @returns sap.m.ResponsivePopover <p>Pointer to the control instance for chaining</p>
             */
            setShowCloseButton(bShowCloseButton: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHeader" href="#/api/sap.m.ResponsivePopover/methods/getShowHeader">showHeader</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHeader <p>New value for property <code>showHeader</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHeader(bShowHeader: boolean): sap.m.ResponsivePopover;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.ResponsivePopover/methods/getSubHeader">subHeader</a>.</p>
             * @param {sap.m.IBar} oSubHeader <p>The subHeader to set</p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSubHeader(oSubHeader: sap.m.IBar): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ResponsivePopover/methods/getTitle">title</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ResponsivePopover;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVerticalScrolling" href="#/api/sap.m.ResponsivePopover/methods/getVerticalScrolling">verticalScrolling</a>.</p><p>This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVerticalScrolling <p>New value for property <code>verticalScrolling</code></p>
             * @returns sap.m.ResponsivePopover <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVerticalScrolling(bVerticalScrolling: boolean): sap.m.ResponsivePopover;
        }
        /**
         * <p><strong><i>Overview</i></strong></p><p>A <a target="_self" class="jsdoclink" href="#/api/sap.m.Slider">sap.m.Slider</a> element represents a scale with tickmarks and labels. The purpose of the element is to decouple the scale logic from other controls i.e. Slider / RangeSlider</p><p>The most important properties of the ResponsiveScale are: <ul> <li> tickmarksBetweenLabels - Puts a label on every N-th tickmark.</li> </ul></p>
         */
        export class ResponsiveScale extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>ResponsiveScale</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTickmarksBetweenLabels" href="#/api/sap.m.ResponsiveScale/methods/getTickmarksBetweenLabels">tickmarksBetweenLabels</a>.</p><p>Put a label on every N-th tickmark.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>tickmarksBetweenLabels</code></p>
             */
            getTickmarksBetweenLabels(): number;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTickmarksBetweenLabels" href="#/api/sap.m.ResponsiveScale/methods/getTickmarksBetweenLabels">tickmarksBetweenLabels</a>.</p><p>Put a label on every N-th tickmark.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iTickmarksBetweenLabels <p>New value for property <code>tickmarksBetweenLabels</code></p>
             * @returns sap.m.ResponsiveScale <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTickmarksBetweenLabels(iTickmarksBetweenLabels: number): sap.m.ResponsiveScale;
        }
        /**
         * <p><p>Breakpoint names for different screen sizes.</p></p>
         */
        export enum ScreenSize {
            /**
             * <p>1024px wide</p>
             */
            Desktop = "Desktop",
            /**
             * <p>768px wide</p>
             */
            Large = "Large",
            /**
             * <p>560px wide</p>
             */
            Medium = "Medium",
            /**
             * <p>240px wide</p>
             */
            Phone = "Phone",
            /**
             * <p>480px wide</p>
             */
            Small = "Small",
            /**
             * <p>600px wide</p>
             */
            Tablet = "Tablet",
            /**
             * <p>960px wide</p>
             */
            XLarge = "XLarge",
            /**
             * <p>320px wide</p>
             */
            XSmall = "XSmall",
            /**
             * <p>1120px wide</p>
             */
            XXLarge = "XXLarge",
            /**
             * <p>240px wide</p>
             */
            XXSmall = "XXSmall",
        }
        /**
         * <p>The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides scrolling to make all content accessible. </p><h3>When not to use</h3><p> Do not nest scrolling areas that scroll in the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled).</p>
         */
        export class ScrollContainer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new ScrollContainer.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.ScrollContainer;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.ScrollContainer;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p><p>The content of the ScrollContainer.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFocusable" href="#/api/sap.m.ScrollContainer/methods/getFocusable">focusable</a>.</p><p>Whether the scroll container can be focused.</p><p>Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>focusable</code></p>
             */
            getFocusable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.ScrollContainer/methods/getHeight">height</a>.</p><p>The height of the ScrollContainer. By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.</p><p>Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontal" href="#/api/sap.m.ScrollContainer/methods/getHorizontal">horizontal</a>.</p><p>Whether horizontal scrolling should be possible.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>horizontal</code></p>
             */
            getHorizontal(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVertical" href="#/api/sap.m.ScrollContainer/methods/getVertical">vertical</a>.</p><p>Whether vertical scrolling should be possible.</p><p>Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true". Important: it is not supported to have nested controls that both enable scrolling into the same dimension.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>vertical</code></p>
             */
            getVertical(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ScrollContainer/methods/getWidth">width</a>.</p><p>The width of the ScrollContainer. If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ScrollContainer;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ScrollContainer/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Scrolls to the given position. When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.</p>
             * @param {number} x <p>The horizontal pixel position to scroll to. Scrolling to the right happens with positive values. In right-to-left mode scrolling starts at the right side and higher values scroll to the left. If only vertical scrolling is enabled, give 0 as value.</p>
             * @param {number} y <p>The vertical pixel position to scroll to. Scrolling down happens with positive values. If only horizontal scrolling is enabled, give 0 as value.</p>
             * @param {number} time <p>The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.</p>
             * @returns sap.m.ScrollContainer <p><code>this</code> to facilitate method chaining</p>
             */
            scrollTo(x: number, y: number, time: number): sap.m.ScrollContainer;
            /**
             * <p>Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.</p>
             * @param {HTMLElement | sap.ui.core.Element} element <p>The element to which should be scrolled.</p>
             * @param {number} time <p>The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave it default.</p>
             * @returns sap.m.ScrollContainer <p><code>this</code> to facilitate method chaining.</p>
             */
            scrollToElement(element: HTMLElement | sap.ui.core.Element, time?: number): sap.m.ScrollContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFocusable" href="#/api/sap.m.ScrollContainer/methods/getFocusable">focusable</a>.</p><p>Whether the scroll container can be focused.</p><p>Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bFocusable <p>New value for property <code>focusable</code></p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFocusable(bFocusable: boolean): sap.m.ScrollContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.ScrollContainer/methods/getHeight">height</a>.</p><p>The height of the ScrollContainer. By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.</p><p>Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>auto</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.ScrollContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHorizontal" href="#/api/sap.m.ScrollContainer/methods/getHorizontal">horizontal</a>.</p><p>Whether horizontal scrolling should be possible.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bHorizontal <p>New value for property <code>horizontal</code></p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHorizontal(bHorizontal: boolean): sap.m.ScrollContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVertical" href="#/api/sap.m.ScrollContainer/methods/getVertical">vertical</a>.</p><p>Whether vertical scrolling should be possible.</p><p>Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true". Important: it is not supported to have nested controls that both enable scrolling into the same dimension.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bVertical <p>New value for property <code>vertical</code></p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVertical(bVertical: boolean): sap.m.ScrollContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ScrollContainer/methods/getWidth">width</a>.</p><p>The width of the ScrollContainer. If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>auto</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.ScrollContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.ScrollContainer;
        }
        /**
         * <p>An input field to search for a specific item. </p><h3>Overview</h3><p> A search field is needed when the user needs to find specific information in large amounts of data. The search field is also the control of choice for filtering down a given amount of information. </p><h3>Structure</h3><p> The search input field can be used in two ways: <ul> <li>Manual search - The search is triggered after the user presses the search button. Manual search uses a “starts with” approach.</li> <li>Live search (search-as-you-type) - The search is triggered after each button press. A suggestion list is shown below the search field. Live search uses a “contains” approach.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li> Use live search whenever possible. </li> <li> Use a manual search only if the amount of data is too large and if your app would otherwise run into performance issues. </li> </ul> </p><h3>Responsive Behavior</h3><p> On mobile devices, there is no refresh button in the search field. "Pull Down to Refresh" is used instead. The "Pull Down to Refresh" arrow icon is animated and spins to signal that the user should release it.</p>
         */
        export class SearchField extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new SearchField.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SearchField/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SearchField;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SearchField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SearchField;
            /**
             * <p>Adds some suggestionItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p>
             * @param {sap.m.SuggestionItem} oSuggestionItem <p>The suggestionItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSuggestionItem(oSuggestionItem: sap.m.SuggestionItem): sap.m.SearchField;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SearchField/events/liveChange">liveChange</a> event of this <code>sap.m.SearchField</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SearchField</code> itself.</p><p>This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SearchField/events/search">search</a> event of this <code>sap.m.SearchField</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SearchField</code> itself.</p><p>Event which is fired when the user triggers a search.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSearch(oData: any, fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.SearchField/events/suggest">suggest</a> event of this <code>sap.m.SearchField</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SearchField</code> itself.</p><p>This event is fired when the search field is initially focused or its value is changed by the user. This event means that suggestion data should be updated, in case if suggestions are used. Use the value parameter to create new suggestions for it.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSuggest(oData: any, fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SearchField/methods/getValue">value</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindValue(oBindingInfo: any): sap.m.SearchField;
            /**
             * <p>Destroys all the suggestionItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySuggestionItems(): sap.m.SearchField;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SearchField/events/liveChange">liveChange</a> event of this <code>sap.m.SearchField</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SearchField/events/search">search</a> event of this <code>sap.m.SearchField</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSearch(fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.SearchField/events/suggest">suggest</a> event of this <code>sap.m.SearchField</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSuggest(fnFunction: Function, oListener?: any): sap.m.SearchField;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SearchField/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.SearchField;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SearchField/events/search">search</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSearch(mParameters?: any): sap.m.SearchField;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="suggest" href="#/api/sap.m.SearchField/events/suggest">suggest</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSuggest(mParameters?: any): sap.m.SearchField;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SearchField/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SearchField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SearchField/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is true).</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableSuggestions" href="#/api/sap.m.SearchField/methods/getEnableSuggestions">enableSuggestions</a>.</p><p>If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused. On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableSuggestions</code></p>
             */
            getEnableSuggestions(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.SearchField/methods/getMaxLength">maxLength</a>.</p><p>Maximum number of characters. Value '0' means the feature is switched off.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>maxLength</code></p>
             */
            getMaxLength(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.SearchField/methods/getPlaceholder">placeholder</a>.</p><p>Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.</p>
             * @returns string <p>Value of property <code>placeholder</code></p>
             */
            getPlaceholder(): string;
            /**
             * <p>Function returns DOM element which acts as reference point for the opening suggestion menu</p>
             * @returns HTMLElement <p>the DOM element at which to open the suggestion list</p>
             */
            protected getPopupAnchorDomRef(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRefreshButtonTooltip" href="#/api/sap.m.SearchField/methods/getRefreshButtonTooltip">refreshButtonTooltip</a>.</p><p>Tooltip text of the refresh button. If it is not set, the Default tooltip text is the word "Refresh" in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.</p>
             * @returns string <p>Value of property <code>refreshButtonTooltip</code></p>
             */
            getRefreshButtonTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRefreshButton" href="#/api/sap.m.SearchField/methods/getShowRefreshButton">showRefreshButton</a>.</p><p>Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showRefreshButton</code></p>
             */
            getShowRefreshButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSearchButton" href="#/api/sap.m.SearchField/methods/getShowSearchButton">showSearchButton</a>.</p><p>Set to true to show the search button with the magnifier icon. If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showSearchButton</code></p>
             */
            getShowSearchButton(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p><p><code>SuggestionItems</code> are the items which will be shown in the suggestions list. The following properties can be used: <ul> <li><code>key</code> is not displayed and may be used as internal technical field</li> <li><code>text</code> is displayed as normal suggestion text</li> <li><code>icon</code></li> <li><code>description</code> - additional text may be used to visually display search item type or category</li> </ul></p>
             * @returns sap.m.SuggestionItem[] 
             */
            getSuggestionItems(): sap.m.SuggestionItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SearchField/methods/getValue">value</a>.</p><p>Input Value.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.SearchField/methods/getVisible">visible</a>.</p><p>Invisible inputs are not rendered.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SearchField/methods/getWidth">width</a>.</p><p>Defines the CSS width of the input. If not set, width is 100%.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.SuggestionItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SuggestionItem} oSuggestionItem <p>The suggestionItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSuggestionItem(oSuggestionItem: sap.m.SuggestionItem): number;
            /**
             * <p>Inserts a suggestionItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p>
             * @param {sap.m.SuggestionItem} oSuggestionItem <p>The suggestionItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the suggestionItem should be inserted at; for a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem is inserted at the last position</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSuggestionItem(oSuggestionItem: sap.m.SuggestionItem, iIndex: number): sap.m.SearchField;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SearchField/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SearchField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.SuggestionItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSuggestionItems(): sap.m.SuggestionItem[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SearchField/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SearchField/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a suggestionItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestionItems" href="#/api/sap.m.SearchField/methods/getSuggestionItems">suggestionItems</a>.</p>
             * @param {number | string | sap.m.SuggestionItem} vSuggestionItem <p>The suggestionItem to remove or its index or id</p>
             * @returns sap.m.SuggestionItem <p>The removed suggestionItem or <code>null</code></p>
             */
            removeSuggestionItem(vSuggestionItem: number | string | sap.m.SuggestionItem): sap.m.SuggestionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SearchField/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is true).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableSuggestions" href="#/api/sap.m.SearchField/methods/getEnableSuggestions">enableSuggestions</a>.</p><p>If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused. On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableSuggestions <p>New value for property <code>enableSuggestions</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableSuggestions(bEnableSuggestions: boolean): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.SearchField/methods/getMaxLength">maxLength</a>.</p><p>Maximum number of characters. Value '0' means the feature is switched off.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iMaxLength <p>New value for property <code>maxLength</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLength(iMaxLength: number): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.SearchField/methods/getPlaceholder">placeholder</a>.</p><p>Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sPlaceholder <p>New value for property <code>placeholder</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholder(sPlaceholder: string): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRefreshButtonTooltip" href="#/api/sap.m.SearchField/methods/getRefreshButtonTooltip">refreshButtonTooltip</a>.</p><p>Tooltip text of the refresh button. If it is not set, the Default tooltip text is the word "Refresh" in the current local language (if supported) or in English. Tooltips are not displayed on touch devices.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sRefreshButtonTooltip <p>New value for property <code>refreshButtonTooltip</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRefreshButtonTooltip(sRefreshButtonTooltip: string): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowRefreshButton" href="#/api/sap.m.SearchField/methods/getShowRefreshButton">showRefreshButton</a>.</p><p>Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowRefreshButton <p>New value for property <code>showRefreshButton</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowRefreshButton(bShowRefreshButton: boolean): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSearchButton" href="#/api/sap.m.SearchField/methods/getShowSearchButton">showSearchButton</a>.</p><p>Set to true to show the search button with the magnifier icon. If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowSearchButton <p>New value for property <code>showSearchButton</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSearchButton(bShowSearchButton: boolean): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SearchField/methods/getValue">value</a>.</p><p>Input Value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.SearchField/methods/getVisible">visible</a>.</p><p>Invisible inputs are not rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.SearchField;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SearchField/methods/getWidth">width</a>.</p><p>Defines the CSS width of the input. If not set, width is 100%.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.SearchField;
            /**
             * <p>Toggle visibility of the suggestion list.</p>
             * @param {boolean | undefined} bShow <p>set to <code>true</code> to display suggestions and <code>false</code> to hide them. Default value is <code>true</code>. An empty suggestion list is not shown on desktop and tablet devices.<br></p><p>This method may be called only as a response to the <code>suggest</code> event to ensure that the suggestion list is shown at the moment when the user expects it.</p>
             * @returns sap.m.SearchField <p><code>this</code> to allow method chaining</p>
             */
            suggest(bShow: boolean | undefined): sap.m.SearchField;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SearchField/methods/getValue">value</a> from model data.</p>
             * @returns sap.m.SearchField <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindValue(): sap.m.SearchField;
        }
        /**
         * <p>A horizontal control made of multiple buttons, which can display a title or an image.</p><h3>Overview</h3><p>The <code>SegmentedButton</code> shows a group of buttons. When the user clicks or taps one of the buttons, it stays in a pressed state. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.</p>
         */
        export class SegmentedButton extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>SegmentedButton</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SegmentedButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SegmentedButton;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SegmentedButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SegmentedButton;
            /**
             * <p>Adds item to <code>items</code> aggregation.</p>
             * @param {sap.m.SegmentedButtonItem} oItem <p>The item to be added</p>
             * @returns sap.m.SegmentedButton <p><code>this</code> pointer for chaining</p>
             */
            addItem(oItem: sap.m.SegmentedButtonItem): sap.m.SegmentedButton;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SegmentedButton/events/selectionChange">selectionChange</a> event of this <code>sap.m.SegmentedButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SegmentedButton</code> itself.</p><p>Fires when the user selects an item, which returns the item object.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code> itself</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SegmentedButton;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SegmentedButton/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.SegmentedButton;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.SegmentedButton/methods/getSelectedKey">selectedKey</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindSelectedKey(oBindingInfo: any): sap.m.SegmentedButton;
            /**
             * <p>Adds a Button with a text as title, a URI for an icon, enabled and textDirection. Only one is allowed.</p>
             * @param {string} sText <p>Defines the title text of the newly created Button</p>
             * @param {sap.ui.core.URI} sURI <p>Icon to be displayed as graphical element within the Button. Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.</p>
             * @param {boolean} bEnabled <p>Enables the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>Element's text directionality with enumerated options</p>
             * @returns sap.m.Button <p>The created Button</p>
             */
            createButton(sText: string, sURI: sap.ui.core.URI, bEnabled: boolean, sTextDirection?: sap.ui.core.TextDirection): sap.m.Button;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SegmentedButton/methods/getItems">items</a>.</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.SegmentedButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SegmentedButton/events/selectionChange">selectionChange</a> event of this <code>sap.m.SegmentedButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.SegmentedButton;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SegmentedButton/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.SegmentedButton;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SegmentedButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SegmentedButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SegmentedButton/methods/getEnabled">enabled</a>.</p><p>Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p><code>SegmentedButton</code> must not be stretched in Form because ResizeHandler is used internally in order to manage the width of the SegmentedButton depending on the container size</p>
             * @returns boolean <p>True this method always returns <code>true</code></p>
             */
            protected getFormDoNotAdjustWidth(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SegmentedButton/methods/getItems">items</a>.</p><p>Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control. The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.</p>
             * @returns sap.m.SegmentedButtonItem[] 
             */
            getItems(): sap.m.SegmentedButtonItem[];
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.SegmentedButton/methods/getSelectedItem">selectedItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedItem(): sap.ui.core.ID;
            /**
             * <p>Gets the <code>selectedKey</code> and is usable only when the control is initiated with the <code>items</code> aggregation.</p>
             * @returns string <p>Current selected key</p>
             */
            getSelectedKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SegmentedButton/methods/getWidth">width</a>.</p><p>Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.SegmentedButtonItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SegmentedButton/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SegmentedButtonItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.SegmentedButtonItem): number;
            /**
             * <p>Inserts item into <code>items</code> aggregation.</p>
             * @param {sap.m.SegmentedButtonItem} oItem <p>The item to be inserted</p>
             * @param {number} iIndex <p>index the item should be inserted at</p>
             * @returns sap.m.SegmentedButton <p><code>this</code> pointer for chaining</p>
             */
            insertItem(oItem: sap.m.SegmentedButtonItem, iIndex: number): sap.m.SegmentedButton;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SegmentedButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SegmentedButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all items from <code>items</code> aggregation</p>
             * @param {boolean} bSuppressInvalidate <p>If <code>true</code> the control invalidation will be suppressed</p>
             */
            removeAllItems(bSuppressInvalidate?: boolean): void;
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SegmentedButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SegmentedButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an item from <code>items</code> aggregation.</p>
             * @param {sap.m.SegmentedButtonItem} oItem <p>The item to be removed</p>
             */
            removeItem(oItem: sap.m.SegmentedButtonItem): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SegmentedButton/methods/getEnabled">enabled</a>.</p><p>Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.SegmentedButton;
            /**
             * <p>Setter for association <code>selectedButton</code>.</p>
             * @param {string | sap.m.Button | null | undefined} vButton <p>New value for association <code>setSelectedButton</code> An sap.m.Button instance which becomes the new target of this <code>selectedButton</code> association. Alternatively, the ID of an sap.m.Button instance may be given as a string. If the value of null, undefined, or an empty string is provided the first item will be selected.</p>
             * @returns sap.m.SegmentedButton <p><code>this</code> pointer for chaining</p>
             */
            setSelectedButton(vButton: string | sap.m.Button | null | undefined): sap.m.SegmentedButton;
            /**
             * <p>Setter for association <code>selectedItem</code>.</p>
             * @param {string | sap.m.SegmentedButtonItem | null | undefined} vItem <p>New value for association <code>setSelectedItem</code> An sap.m.SegmentedButtonItem instance which becomes the new target of this <code>selectedItem</code> association. Alternatively, the ID of an <code>sap.m.SegmentedButtonItem</code> instance may be given as a string. If the value of null, undefined, or an empty string is provided, the first item will be selected.</p>
             * @returns sap.m.SegmentedButton <p><code>this</code> pointer for chaining</p>
             */
            setSelectedItem(vItem: string | sap.m.SegmentedButtonItem | null | undefined): sap.m.SegmentedButton;
            /**
             * <p>Sets the <code>selectedKey</code> and is usable only when the control is initiated with the <code>items</code> aggregation.</p>
             * @param {string} sKey <p>The key of the button to be selected</p>
             * @returns sap.m.SegmentedButton <p><code>this</code> pointer for chaining</p>
             */
            setSelectedKey(sKey: string): sap.m.SegmentedButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SegmentedButton/methods/getWidth">width</a>.</p><p>Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.SegmentedButton;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SegmentedButton/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.SegmentedButton;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.SegmentedButton/methods/getSelectedKey">selectedKey</a> from model data.</p>
             * @returns sap.m.SegmentedButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindSelectedKey(): sap.m.SegmentedButton;
        }
        /**
         * <p>Used for creating buttons for the <a target="_self" class="jsdoclink" href="#/api/sap.m.SegmentedButton">sap.m.SegmentedButton</a>. It is derived from the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Item">sap.ui.core.Item</a>.</p>
         */
        export class SegmentedButtonItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new <code>SegmentedButtonItem</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SegmentedButtonItem/events/press">press</a> event of this <code>sap.m.SegmentedButtonItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SegmentedButtonItem</code> itself.</p><p>Fires when the user clicks on an individual button.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButtonItem</code> itself</p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SegmentedButtonItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SegmentedButtonItem/events/press">press</a> event of this <code>sap.m.SegmentedButtonItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.SegmentedButtonItem;
            /**
             * <p>Cleanup</p>
             */
            protected exit(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SegmentedButtonItem/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.SegmentedButtonItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SegmentedButtonItem/methods/getIcon">icon</a>.</p><p>The icon, which belongs to the button. This can be a URI to an image or an icon font URI.</p>
             * @returns string <p>Value of property <code>icon</code></p>
             */
            getIcon(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.SegmentedButtonItem/methods/getVisible">visible</a>.</p><p>Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visible</code></p>
             */
            getVisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SegmentedButtonItem/methods/getWidth">width</a>.</p><p>Sets the width of the buttons.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Called once during the element's initialization</p>
             */
            protected init(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SegmentedButtonItem/methods/getIcon">icon</a>.</p><p>The icon, which belongs to the button. This can be a URI to an image or an icon font URI.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: string): sap.m.SegmentedButtonItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.SegmentedButtonItem/methods/getVisible">visible</a>.</p><p>Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisible(bVisible: boolean): sap.m.SegmentedButtonItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SegmentedButtonItem/methods/getWidth">width</a>.</p><p>Sets the width of the buttons.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.SegmentedButtonItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.SegmentedButtonItem;
        }
        /**
         * <p>The <code>sap.m.Select</code> control provides a list of items that allows users to select an item.</p>
         */
        export class Select extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>sap.m.Select</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Select/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Select;
            /**
             * <p>Adds an item to the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to be added; if empty, nothing is added.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            addItem(oItem: sap.ui.core.Item): sap.m.Select;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Select/events/change">change</a> event of this <code>sap.m.Select</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Select</code> itself.</p><p>This event is fired when the value in the selection field is changed in combination with one of the following actions: <ul> <li>The focus leaves the selection field</li> <li>The <i>Enter</i> key is pressed</li> <li>The item is pressed</li> </ul></p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Select</code> itself</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Select;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Select/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.Select;
            /**
             * <p>Closes the control's picker popup.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            close(): sap.m.Select;
            /**
             * <p>Creates a picker popup container where the selection should take place.</p>
             * @param {string} sPickerType <p>The picker type</p>
             * @returns sap.ui.core.Control <p>The <code>sap.m.Popover</code> or <code>sap.m.Dialog</code> instance</p>
             */
            protected createPicker(sPickerType: string): sap.ui.core.Control;
            /**
             * <p>Destroys all the items in the aggregation named <code>items</code>.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            destroyItems(): sap.m.Select;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Select/events/change">change</a> event of this <code>sap.m.Select</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.Select;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Select/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.Select;
            /**
             * <p>Returns the <code>sap.m.Select</code> accessibility information.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>The <code>sap.m.Select</code> accessibility information</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Select/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoAdjustWidth" href="#/api/sap.m.Select/methods/getAutoAdjustWidth">autoAdjustWidth</a>.</p><p>Indicates whether the width of the input field is determined by the selected item's content.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>autoAdjustWidth</code></p>
             */
            getAutoAdjustWidth(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.Select/methods/getEditable">editable</a>.</p><p>Determines whether the user can modify the selected item. When the property is set to <code>false</code>, the control appears as disabled but CAN still be focused.</p><p><b>Note:</b> When both <code>enabled</code> and <code>editable</code> properties are set to <code>false</code>, <code>enabled</code> has priority over <code>editable</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Select/methods/getEnabled">enabled</a>.</p><p>Determines whether the user can modify the selected item. When the property is set to <code>false</code>, the control appears as disabled and CANNOT be focused.</p><p><b>Note:</b> When both <code>enabled</code> and <code>editable</code> properties are set to <code>false</code>, <code>enabled</code> has priority over <code>editable</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets the enabled items from the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item[]} aItems <p>Items to filter.</p>
             * @returns sap.ui.core.Item[] <p>An array containing the enabled items.</p>
             */
            getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
            /**
             * <p>Gets the first item from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The first item, or null if there are no items.</p>
             */
            getFirstItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForceSelection" href="#/api/sap.m.Select/methods/getForceSelection">forceSelection</a>.</p><p>Indicates whether the selection is restricted to one of the items in the list. <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind the <code>selectedKey</code> property to the desired value for better interoperability with data binding.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>forceSelection</code></p>
             */
            getForceSelection(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Select/methods/getIcon">icon</a>.</p><p>The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Returns the DOMNode Id to be used for the "labelFor" attribute of the label.</p><p>By default, this is the Id of the control itself.</p>
             * @returns string <p>Id to be used for the <code>labelFor</code></p>
             */
            getIdForLabel(): string;
            /**
             * <p>Gets the item from the aggregation named <code>items</code> at the given 0-based index.</p>
             * @param {number} iIndex <p>Index of the item to return.</p>
             * @returns sap.ui.core.Item|null <p>Item at the given index, or null if none.</p>
             */
            getItemAt(iIndex: number): sap.ui.core.Item | null;
            /**
             * <p>Gets the item with the given key from the aggregation named <code>items</code>.</p><p><b>Note: </b> If duplicate keys exist, the first item matching the key is returned.</p>
             * @param {string} sKey <p>An item key that specifies the item to be retrieved.</p>
             * @returns sap.ui.core.Item <p>The <code>sap.ui.core.Item</code> instance or <code>null</code> if thre is no such item</p>
             */
            getItemByKey(sKey: string): sap.ui.core.Item;
            /**
             * <p>Gets aggregation <code>items</code>.</p><p><b>Note</b>: This is the default aggregation.</p>
             * @returns sap.ui.core.Item[] <p>The controls in the <code>items</code> aggregation</p>
             */
            getItems(): sap.ui.core.Item[];
            /**
             * <p>Gets the last item from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The last item, or null if there are no items.</p>
             */
            getLastItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.Select/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the control.</p><p><b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Select/methods/getName">name</a>.</p><p>The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Enables the <code>sap.m.Select</code> to move inside the sap.m.OverflowToolbar. Required by the <a target="_self" class="jsdoclink" href="#/api/sap.m.IOverflowToolbarContent">sap.m.IOverflowToolbarContent</a> interface.</p>
             * @returns any <p>Configuration information for the <code>sap.m.IOverflowToolbarContent</code> interface.</p>
             */
            getOverflowToolbarConfig(): any;
            /**
             * <p>Gets the selected item object from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The current target of the <code>selectedItem</code> association, or null.</p>
             */
            getSelectedItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItemId" href="#/api/sap.m.Select/methods/getSelectedItemId">selectedItemId</a>.</p><p>ID of the selected item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedItemId</code></p>
             */
            getSelectedItemId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.Select/methods/getSelectedKey">selectedKey</a>.</p><p>Key of the selected item.</p><p><b>Notes:</b> <ul> <li> If duplicate keys exist, the first item matching the key is used.</li> <li> If invalid or none <code>selectedKey</code> is used, the first item is being selected.</li> <li> Invalid or missing <code>selectedKey</code> leads to severe functional issues in <code>sap.m.Table</code>, when the <code>sap.m.Select</code> is used inside a <code>sap.m.Table</code> column.</li> </ul></p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedKey</code></p>
             */
            getSelectedKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.Select/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSecondaryValues</code></p>
             */
            getShowSecondaryValues(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Select/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the text within the input field.</p><p>Default value is <code>Initial</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Select/methods/getTextDirection">textDirection</a>.</p><p>Specifies the direction of the text within the input field with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Select/methods/getType">type</a>.</p><p>Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.m.SelectType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.SelectType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.Select/methods/getValueState">valueState</a>.</p><p>Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>, <code>Information</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.Select/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text of the value state message popup. If this is not specified, a default text is shown from the resource bundle.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Select/methods/getWidth">width</a>.</p><p>Sets the width of the field. By default, the field width is automatically adjusted to the size of its content and the default width of the field is calculated based on the widest list item in the dropdown list. If the width defined is smaller than its content, only the field width is changed whereas the dropdown list keeps the width of its content. If the dropdown list is wider than the visual viewport, it is truncated and an ellipsis is displayed for each item. For phones, the width of the dropdown list is always the same as the viewport.</p><p><b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapItemsText" href="#/api/sap.m.Select/methods/getWrapItemsText">wrapItemsText</a>.</p><p>Determines whether the text in the items wraps on multiple lines when the available width is not enough.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapItemsText</code></p>
             */
            getWrapItemsText(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Select/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.ui.core.Item): number;
            /**
             * <p>Inserts an item into the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to be inserted; if empty, nothing is inserted.</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.Select;
            /**
             * <p>Indicates whether the control's picker popup is opened.</p>
             * @returns boolean <p>Indicates whether the picker popup is currently open (this includes opening and closing animations).</p>
             */
            isOpen(): boolean;
            /**
             * <p>Open the control's picker popup.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            protected open(): sap.m.Select;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Select/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the items in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Select/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to be removed or its index or ID.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoAdjustWidth" href="#/api/sap.m.Select/methods/getAutoAdjustWidth">autoAdjustWidth</a>.</p><p>Indicates whether the width of the input field is determined by the selected item's content.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bAutoAdjustWidth <p>New value for property <code>autoAdjustWidth</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAutoAdjustWidth(bAutoAdjustWidth: boolean): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.Select/methods/getEditable">editable</a>.</p><p>Determines whether the user can modify the selected item. When the property is set to <code>false</code>, the control appears as disabled but CAN still be focused.</p><p><b>Note:</b> When both <code>enabled</code> and <code>editable</code> properties are set to <code>false</code>, <code>enabled</code> has priority over <code>editable</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Select/methods/getEnabled">enabled</a>.</p><p>Determines whether the user can modify the selected item. When the property is set to <code>false</code>, the control appears as disabled and CANNOT be focused.</p><p><b>Note:</b> When both <code>enabled</code> and <code>editable</code> properties are set to <code>false</code>, <code>enabled</code> has priority over <code>editable</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForceSelection" href="#/api/sap.m.Select/methods/getForceSelection">forceSelection</a>.</p><p>Indicates whether the selection is restricted to one of the items in the list. <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind the <code>selectedKey</code> property to the desired value for better interoperability with data binding.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bForceSelection <p>New value for property <code>forceSelection</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setForceSelection(bForceSelection: boolean): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.Select/methods/getIcon">icon</a>.</p><p>The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.Select/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the control.</p><p><b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sMaxWidth <p>New value for property <code>maxWidth</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Select/methods/getName">name</a>.</p><p>The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.Select;
            /**
             * <p>Sets the <code>selectedItem</code> association.</p><p>Default value is <code>null</code>.</p>
             * @param {string | sap.ui.core.Item | null} vItem <p>New value for the <code>selectedItem</code> association. If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association. Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code>. If the value of <code>null</code> is provided, the first enabled item will be selected (if any items exist).</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItem(vItem: string | sap.ui.core.Item | null): sap.m.Select;
            /**
             * <p>Sets the <code>selectedItemId</code> property.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string | undefined} vItem <p>New value for property <code>selectedItemId</code>. If the provided <code>vItem</code> has a default value, the first enabled item will be selected (if any items exist).</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItemId(vItem: string | undefined): sap.m.Select;
            /**
             * <p>Sets property <code>selectedKey</code>.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string} sKey <p>New value for property <code>selectedKey</code>. If the <code>forceSelection</code> property is set to <code>true</code> and the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>, the value of <code>sKey</code> is changed to match the <code>key</code> of the first enabled item and the first enabled item is selected (if any items exist).</p><p>In the case that an item has the default key value, it is selected instead. If duplicate keys exist, the first item matching the key is selected.</p>
             * @returns sap.m.Select <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedKey(sKey: string): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.Select/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowSecondaryValues <p>New value for property <code>showSecondaryValues</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Select/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the text within the input field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Initial</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Select/methods/getTextDirection">textDirection</a>.</p><p>Specifies the direction of the text within the input field with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Select/methods/getType">type</a>.</p><p>Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.m.SelectType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.SelectType): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.Select/methods/getValueState">valueState</a>.</p><p>Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>, <code>Information</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.Select/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text of the value state message popup. If this is not specified, a default text is shown from the resource bundle.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sValueStateText <p>New value for property <code>valueStateText</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueStateText(sValueStateText: string): sap.m.Select;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Select/methods/getWidth">width</a>.</p><p>Sets the width of the field. By default, the field width is automatically adjusted to the size of its content and the default width of the field is calculated based on the widest list item in the dropdown list. If the width defined is smaller than its content, only the field width is changed whereas the dropdown list keeps the width of its content. If the dropdown list is wider than the visual viewport, it is truncated and an ellipsis is displayed for each item. For phones, the width of the dropdown list is always the same as the viewport.</p><p><b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>auto</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Select;
            /**
             * <p>Sets the <code>wrapItemsText</code> property.</p>
             * @param {boolean} bWrap 
             * @returns sap.m.Select <p><code>this</code> to allow method chaining</p>
             */
            setWrapItemsText(bWrap: boolean): sap.m.Select;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.Select/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.Select <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.Select;
        }
        /**
         * <h3>Overview</h3><p> A SelectDialog is a dialog containing a list, search functionality to filter it and a confirmation/cancel button. The list used in the dialog is a growing list and can be filled with any kind of list item. </p><h3>Structure</h3><h4>Dialog structure</h4><p> The select dialog has the following components: <ul> <li>Header - title of the dialog</li> <li>Search field - input field to enter search terms</li> <li>Info toolbar (only in multi-select) - displays the number of currently selected items</li> <li>Content - <a target="_self" class="jsdoclink" href="#/api/sap.m.StandardListItem">standard list items</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.DisplayListItem">display list items</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.FeedListItem">feed list items</a></li> <li>Button toolbar - for confirmation/cancellation buttons </li> </ul> </p><h4>List structure & selection</h4><p> <ul> <li> The search field triggers the events <code>search</code> and <code>liveChange</code> where a filter function can be applied to the list binding. </li> <li> The growing functionality of the list does not support two-way Binding, so if you use this control with a JSON model make sure the binding mode is set to <code>OneWay</code> and that you update the selection model manually with the items passed in the <code>confirm</code> event. </li> <li> In the multi-select mode of the select dialog, checkboxes are provided for choosing multiple entries. </li> <li> You can set <code>rememberSelections</code> to true to store the current selection and load this state when the dialog is opened again. </li> <li> When cancelling the selection, the event <code>change</code> will be fired and the selection is restored to the state when the dialog was opened. </li> <li>The SelectDialog is usually displayed at the center of the screen. Its size and position can be changed by the user. To enable this you need to set the <code>resizable</code> and <code>draggable</code> properties. Both properties are available only in desktop mode.</li> </ul> </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You need to select one or more entries from a comprehensive list that contains multiple attributes or values. </li> </ul> </p><h4>When not to use:</h4><p> <ul> <li> You need to pick one item from a predefined set of options. Use <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">select</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.ComboBox">combobox</a> instead. </li> <li> You need to select a range of item. Use <a target="_self" class="jsdoclink" href="#/api/sap.ui.comp.valuehelpdialog.ValueHelpDialog">value help dialog</a> instead. </li> <li> You need to be able to add your own values to an existing list. Use a <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">dialog</a> instead. </li> </ul> </p><h4>Note:</h4><p> The property <code>growing</code> determines the progressive loading. If it's set to true (the default value), the <code>selected count</code> in info bar and search will work only for the currently loaded items. To make sure that all items in the list are loaded at once and the above feature works properly, we recommend setting the <code>growing</code> property to false. </p><h3>Responsive Behavior</h3><p> <ul> <li> On phones, the select dialog takes up the whole screen. </li> <li> On desktop and tablet devices, the select dialog appears as a popover. </li> </ul></p>
         */
        export class SelectDialog extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new SelectDialog.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control A dialog that enables users to select one or more items from a comprehensive list.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Set the binding context for the internal list AND the current control so that both controls can be used with the context</p>
             */
            _setBindingContext: any;
            /**
             * <p>Set the model for the internal list AND the current control so that both controls can be used with data binding</p>
             */
            _setModel: any;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.ListItemBase): sap.m.SelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.SelectDialog/events/cancel">cancel</a> event of this <code>sap.m.SelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.</p><p>This event will be fired when the cancel button is clicked or ESC key is pressed</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancel(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.SelectDialog/events/confirm">confirm</a> event of this <code>sap.m.SelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.</p><p>This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachConfirm(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SelectDialog/events/liveChange">liveChange</a> event of this <code>sap.m.SelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.</p><p>This event will be fired when the value of the search field is changed by a user - e.g. at each key press</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SelectDialog/events/search">search</a> event of this <code>sap.m.SelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.</p><p>This event will be fired when the search button has been clicked on the searchfield on the visual control</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSearch(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Clears the selections in the <code>sap.m.SelectDialog</code> and its internally used <code>sap.m.List</code> control.</p><p>Use this method whenever the application logic expects changes in the model providing data for the SelectDialog that will modify the position of the items, or will change the set with completely new items.</p>
             * @returns sap.m.SelectDialog <p><code>this</code> to allow method chaining.</p>
             */
            clearSelection(): sap.m.SelectDialog;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.SelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.SelectDialog/events/cancel">cancel</a> event of this <code>sap.m.SelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancel(fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.SelectDialog/events/confirm">confirm</a> event of this <code>sap.m.SelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachConfirm(fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SelectDialog/events/liveChange">liveChange</a> event of this <code>sap.m.SelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SelectDialog/events/search">search</a> event of this <code>sap.m.SelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSearch(fnFunction: Function, oListener?: any): sap.m.SelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.SelectDialog/events/cancel">cancel</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancel(mParameters?: any): sap.m.SelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.SelectDialog/events/confirm">confirm</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireConfirm(mParameters?: any): sap.m.SelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.SelectDialog/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.SelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.SelectDialog/events/search">search</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSearch(mParameters?: any): sap.m.SelectDialog;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConfirmButtonText" href="#/api/sap.m.SelectDialog/methods/getConfirmButtonText">confirmButtonText</a>.</p><p>Overwrites the default text for the confirmation button.</p>
             * @returns string <p>Value of property <code>confirmButtonText</code></p>
             */
            getConfirmButtonText(): string;
            /**
             * <p>Get the internal Dialog's contentHeight property <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @returns sap.ui.core.CSSSize <p>sHeight The content width of the internal dialog</p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Get the internal Dialog's contentWidth property <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @returns sap.ui.core.CSSSize <p>sWidth The content width of the internal dialog</p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Forward method to the inner dialog: getDomRef</p>
             * @returns HTMLElement <p>The Element's DOM Element sub DOM Element or null</p>
             */
            getDomRef(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraggable" href="#/api/sap.m.SelectDialog/methods/getDraggable">draggable</a>.</p><p>When set to <code>true</code>, the SelectDialog is draggable by its header. The default value is <code>false</code>. <b>Note</b>: The SelectDialog can be draggable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>draggable</code></p>
             */
            getDraggable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.SelectDialog/methods/getGrowing">growing</a>.</p><p>If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the bound model (progressive loading). <b>Note:</b> This feature only works when an <code>items</code> aggregation is bound. <b>Note:</b> Growing property, must not be used together with two-way binding.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>growing</code></p>
             */
            getGrowing(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingThreshold" href="#/api/sap.m.SelectDialog/methods/getGrowingThreshold">growingThreshold</a>.</p><p>Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow. <b>Note:</b> This property could take affect only be used if the property <code>growing</code> is set to <code>true</code>.</p>
             * @returns number <p>Value of property <code>growingThreshold</code></p>
             */
            getGrowingThreshold(): number;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p><p>The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.</p>
             * @returns sap.m.ListItemBase[] 
             */
            getItems(): sap.m.ListItemBase[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelect" href="#/api/sap.m.SelectDialog/methods/getMultiSelect">multiSelect</a>.</p><p>Determines if the user can select several options from the list</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>multiSelect</code></p>
             */
            getMultiSelect(): boolean;
            /**
             * <p>Get the internal List's no data text property</p>
             * @returns string <p>the current no data text</p>
             */
            getNoDataText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.SelectDialog/methods/getRememberSelections">rememberSelections</a>.</p><p>This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".</p><p><b>Note:</b> The sap.m.SelectDialog uses <a target="_self" class="jsdoclink" href="#/api/sap.m.ListBase/methods/rememberSelections">this</a> property of the ListBase and therefore its limitations also apply here.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>rememberSelections</code></p>
             */
            getRememberSelections(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.SelectDialog/methods/getResizable">resizable</a>.</p><p>When set to <code>true</code>, the SelectDialog will have a resize handler in its bottom right corner. The default value is <code>false</code>. <b>Note</b>: The SelectDialog can be resizable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>resizable</code></p>
             */
            getResizable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowClearButton" href="#/api/sap.m.SelectDialog/methods/getShowClearButton">showClearButton</a>.</p><p>This flag controls whether the Clear button is shown. When set to <code>true</code>, it provides a way to clear selection mode in Select Dialog. We recommended enabling of the Clear button in the following cases, where a mechanism to clear the value is needed: In case of single selection mode(default mode) for Select Dialog and <code>rememberSelections</code> is set to <code>true</code>. Clear button needs to be enabled in order to allow users to clear the selection. In case of using <code>sap.m.Input</code> with <code>valueHelpOnly</code> set to <code>true</code>, the Clear button could be used for clearing selection. In case the application stores a value and uses only Select Dialog to edit/maintain it. <b>Note:</b>When used with oData, only the loaded selections will be cleared.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showClearButton</code></p>
             */
            getShowClearButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.SelectDialog/methods/getTitle">title</a>.</p><p>Determines the title text that appears in the dialog header</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Forward method to the inner dialog: hasStyleClass</p>
             * @returns boolean <p>true if the class is set, false otherwise</p>
             */
            hasStyleClass(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.ListItemBase): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p>
             * @param {sap.m.ListItemBase} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.ListItemBase, iIndex: number): sap.m.SelectDialog;
            /**
             * <p>Invalidates the dialog instead of this control (we don't have a renderer)</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            protected invalidate(): sap.m.SelectDialog;
            /**
             * <p>Is called after renderer is finished to show the busy state</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            protected onAfterRendering(): sap.m.SelectDialog;
            /**
             * <p>Opens the internal dialog with a searchfield and a list.</p>
             * @param {string} sSearchValue <p>A value for the search can be passed to match with the filter applied to the list binding.</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            open(sSearchValue: string): sap.m.SelectDialog;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ListItemBase[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.ListItemBase[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectDialog/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.ListItemBase} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.ListItemBase <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.ListItemBase): sap.m.ListItemBase;
            /**
             * <p>Sets the busyIndicatorDelay value to the internal list</p>
             * @param {number} iValue <p>Value for the busyIndicatorDelay.</p>
             * @returns sap.m.SelectDialog <p>this pointer for chaining</p>
             */
            setBusyIndicatorDelay(iValue: number): sap.m.SelectDialog;
            /**
             * <p>Sets the text of the confirmation button.</p>
             * @param {string} sText <p>The text for the confirm button</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setConfirmButtonText(sText: string): sap.m.SelectDialog;
            /**
             * <p>Set the internal Dialog's contentHeight property <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @param {sap.ui.core.CSSSize} sHeight <p>The new content width value for the dialog</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setContentHeight(sHeight: sap.ui.core.CSSSize): sap.m.SelectDialog;
            /**
             * <p>Set the internal Dialog's contentWidth property <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @param {sap.ui.core.CSSSize} sWidth <p>The new content width value for the dialog</p>
             * @returns sap.m.SelectDialog <p><code>this</code>s pointer for chaining</p>
             */
            setContentWidth(sWidth: sap.ui.core.CSSSize): sap.m.SelectDialog;
            /**
             * <p>Sets the draggable property.</p>
             * @param {boolean} bValue <p>Value for the draggable property</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setDraggable(bValue: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the growing to the internal list</p>
             * @param {boolean} bValue <p>Value for the list's growing.</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setGrowing(bValue: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the growing threshold to the internal list</p>
             * @param {number} iValue <p>Value for the list's growing threshold.</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setGrowingThreshold(iValue: number): sap.m.SelectDialog;
            /**
             * <p>Enable/Disable multi selection mode.</p>
             * @param {boolean} bMulti <p>Flag for multi selection mode</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setMultiSelect(bMulti: boolean): sap.m.SelectDialog;
            /**
             * <p>Set the internal List's no data text property</p>
             * @param {string} sNoDataText <p>The no data text for the list</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setNoDataText(sNoDataText: string): sap.m.SelectDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.SelectDialog/methods/getRememberSelections">rememberSelections</a>.</p><p>This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".</p><p><b>Note:</b> The sap.m.SelectDialog uses <a target="_self" class="jsdoclink" href="#/api/sap.m.ListBase/methods/rememberSelections">this</a> property of the ListBase and therefore its limitations also apply here.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRememberSelections <p>New value for property <code>rememberSelections</code></p>
             * @returns sap.m.SelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRememberSelections(bRememberSelections: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the resizable property.</p>
             * @param {boolean} bValue <p>Value for the resizable property</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setResizable(bValue: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the Clear button visible state</p>
             * @param {boolean} bVisible <p>Value for the Clear button visible state.</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setShowClearButton(bVisible: boolean): sap.m.SelectDialog;
            /**
             * <p>Set the title of the internal dialog</p>
             * @param {string} sTitle <p>The title text for the dialog</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setTitle(sTitle: string): sap.m.SelectDialog;
            /**
             * <p>Forward method to the inner dialog: toggleStyleClass</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            toggleStyleClass(): sap.m.SelectDialog;
        }
        /**
         * <p>The protected control provides a popover that displays the details of the items selected in the chart. This control should only be used in the toolbars of sap.suite.ui.commons.ChartContainer and sap.ui.comp.smartchart.SmartChart controls. Initially, the control is rendered as a button that opens the popup after clicking on it. <b><i>Note:</i></b>It is protected and should only be used within the framework itself.</p>
         */
        export class SelectionDetails extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new SelectionDetails.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAction(oAction: sap.ui.core.Item): sap.m.SelectionDetails;
            /**
             * <p>Adds some actionGroup to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p>
             * @param {sap.ui.core.Item} oActionGroup <p>The actionGroup to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addActionGroup(oActionGroup: sap.ui.core.Item): sap.m.SelectionDetails;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p>
             * @param {sap.m.SelectionDetailsItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.SelectionDetailsItem): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="actionPress" href="#/api/sap.m.SelectionDetails/events/actionPress">actionPress</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered when a custom action is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachActionPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.SelectionDetails/events/beforeClose">beforeClose</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered before the popover is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.SelectionDetails/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered before the popover is open.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.SelectionDetails/events/navigate">navigate</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered after a list item of <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">sap.m.SelectionDetailsItem</a> is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches an event handler to the given listener to react to user selection interaction.</p>
             * @param {string} eventId <p>The identifier of the event to listen for</p>
             * @param {any} listener <p>The object which triggers the event to register on</p>
             * @returns sap.m.SelectionDetails <p>this to allow method chaining</p>
             */
            protected attachSelectionHandler(eventId: string, listener: any): sap.m.SelectionDetails;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.SelectionDetails;
            /**
             * <p>Destroys all the actionGroups in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyActionGroups(): sap.m.SelectionDetails;
            /**
             * <p>Destroys all the actions in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyActions(): sap.m.SelectionDetails;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="actionPress" href="#/api/sap.m.SelectionDetails/events/actionPress">actionPress</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachActionPress(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.SelectionDetails/events/beforeClose">beforeClose</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.SelectionDetails/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.SelectionDetails/events/navigate">navigate</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachNavigate(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches the event which was attached by <code>attachSelectionHandler</code>.</p>
             * @returns sap.m.SelectionDetails <p>this to allow method chaining</p>
             */
            protected detachSelectionHandler(): sap.m.SelectionDetails;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="actionPress" href="#/api/sap.m.SelectionDetails/events/actionPress">actionPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireActionPress(mParameters?: any): sap.m.SelectionDetails;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.SelectionDetails/events/beforeClose">beforeClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeClose(mParameters?: any): sap.m.SelectionDetails;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.SelectionDetails/events/beforeOpen">beforeOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeOpen(mParameters?: any): sap.m.SelectionDetails;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.SelectionDetails/events/navigate">navigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireNavigate(mParameters?: any): sap.m.SelectionDetails;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p><p>Contains actions that are rendered as a dedicated <a target="_self" class="jsdoclink" href="#/api/sap.m.StandardListItem">item</a>. In case an action group is pressed, a navigation should be triggered via <code>navTo</code> method. A maximum of 5 actionGroups is displayed inside the popover, though more can be added to the aggregation.</p>
             * @returns sap.ui.core.Item[] 
             */
            getActionGroups(): sap.ui.core.Item[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p><p>Contains custom actions shown in the responsive toolbar below items on the first page.</p>
             * @returns sap.ui.core.Item[] 
             */
            getActions(): sap.ui.core.Item[];
            /**
             * <p>Returns the public facade of the SelectionDetails control for non inner framework usages.</p>
             * @returns sap.ui.base.Interface <p>The reduced facade for outer framework usages.</p>
             */
            protected getFacade(): sap.ui.base.Interface;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p><p>Contains <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">items</a> that are displayed on the first page.</p>
             * @returns sap.m.SelectionDetailsItem[] 
             */
            getItems(): sap.m.SelectionDetailsItem[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oAction <p>The action whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAction(oAction: sap.ui.core.Item): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oActionGroup <p>The actionGroup whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfActionGroup(oActionGroup: sap.ui.core.Item): number;
            /**
             * <p>Checks for the provided <code>sap.m.SelectionDetailsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SelectionDetailsItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.SelectionDetailsItem): number;
            /**
             * <p>Inserts a action into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the action should be inserted at; for a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted at the last position</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAction(oAction: sap.ui.core.Item, iIndex: number): sap.m.SelectionDetails;
            /**
             * <p>Inserts a actionGroup into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p>
             * @param {sap.ui.core.Item} oActionGroup <p>The actionGroup to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the actionGroup should be inserted at; for a negative value of <code>iIndex</code>, the actionGroup is inserted at position 0; for a value greater than the current size of the aggregation, the actionGroup is inserted at the last position</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertActionGroup(oActionGroup: sap.ui.core.Item, iIndex: number): sap.m.SelectionDetails;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p>
             * @param {sap.m.SelectionDetailsItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.SelectionDetailsItem, iIndex: number): sap.m.SelectionDetails;
            /**
             * <p>Method to register the factory function that creates the SelectionDetailsItems. The factory function is called for every selected entry separately with three parameters. First parameter is the display data array for each item out of the selection. Second parameter is the data array for each item out of the selection. Third parameter is the binding context for each item in the selection. This is undefined if no binding is used. Fourth parameter is <code>oData</code>. Can be undefined.</p>
             * @param {any} data <p>Data to be passed to the factory function</p>
             * @param {Function} factory <p>The item factory function that returns SelectionDetailsItems</p>
             * @returns sap.m.SelectionDetails <p>this to allow method chaining</p>
             */
            protected registerSelectionDetailsItemFactory(data: any, factory: Function): sap.m.SelectionDetails;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.ui.core.Item} vAction <p>The action to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed action or <code>null</code></p>
             */
            removeAction(vAction: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes a actionGroup from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p>
             * @param {number | string | sap.ui.core.Item} vActionGroup <p>The actionGroup to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed actionGroup or <code>null</code></p>
             */
            removeActionGroup(vActionGroup: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetails/methods/getActionGroups">actionGroups</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllActionGroups(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetails/methods/getActions">actions</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllActions(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.SelectionDetailsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.SelectionDetailsItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.SelectionDetailsItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.SelectionDetailsItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.SelectionDetailsItem): sap.m.SelectionDetailsItem;
            /**
             * <p>Sets the popover to modal or non-modal based on the given parameter. This only takes effect on desktop or tablet. Please see the documentation <a target="_self" class="jsdoclink" href="#/api/sap.m.ResponsivePopover/methods/modal">sap.m.ResponsivePopover#modal</a>.</p>
             * @param {boolean} modal <p>New value for property modal of the internally used popover.</p>
             * @returns sap.m.SelectionDetails <p>To ensure method chaining, return the SelectionDetails.</p>
             */
            protected setPopoverModal(modal: boolean): sap.m.SelectionDetails;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectionDetails/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.SelectionDetails;
        }
        /**
         * <p><p>Enumeration for different action levels in sap.m.SelectionDetails control.</p></p>
         */
        export enum SelectionDetailsActionLevel {
            /**
             * <p>ActionGroup on SelectionDetails list level.</p>
             */
            Group = "Group",
            /**
             * <p>Action on SelectionDetailsItem level.</p>
             */
            Item = "Item",
            /**
             * <p>Action on SelectionDetails list level.</p>
             */
            List = "List",
        }
        /**
         * <p>The public facade of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetails">sap.m.SelectionDetails</a> control.</p>
         */
        export class SelectionDetailsFacade {
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsFacade/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static addAction(oAction: sap.ui.core.Item): sap.m.SelectionDetails;
            /**
             * <p>Adds some actionGroup to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetailsFacade/methods/getActionGroups">actionGroups</a>.</p>
             * @param {sap.ui.core.Item} oActionGroup <p>The actionGroup to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static addActionGroup(oActionGroup: sap.ui.core.Item): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="actionPress" href="#/api/sap.m.SelectionDetailsFacade/events/actionPress">actionPress</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered when a custom action is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static attachActionPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.SelectionDetailsFacade/events/beforeClose">beforeClose</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered before the popover is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static attachBeforeClose(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.SelectionDetailsFacade/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered before the popover is open.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static attachBeforeOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.SelectionDetailsFacade/events/navigate">navigate</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.</p><p>Event is triggered after a list item of <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">sap.m.SelectionDetailsItem</a> is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static attachNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="actionPress" href="#/api/sap.m.SelectionDetailsFacade/events/actionPress">actionPress</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static detachActionPress(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeClose" href="#/api/sap.m.SelectionDetailsFacade/events/beforeClose">beforeClose</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static detachBeforeClose(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpen" href="#/api/sap.m.SelectionDetailsFacade/events/beforeOpen">beforeOpen</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static detachBeforeOpen(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navigate" href="#/api/sap.m.SelectionDetailsFacade/events/navigate">navigate</a> event of this <code>sap.m.SelectionDetails</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectionDetails <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static detachNavigate(fnFunction: Function, oListener?: any): sap.m.SelectionDetails;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsFacade/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.ui.core.Item} vAction <p>The action to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed action or <code>null</code></p>
             */
            static removeAction(vAction: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes a actionGroup from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetailsFacade/methods/getActionGroups">actionGroups</a>.</p>
             * @param {number | string | sap.ui.core.Item} vActionGroup <p>The actionGroup to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed actionGroup or <code>null</code></p>
             */
            static removeActionGroup(vActionGroup: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActionGroups" href="#/api/sap.m.SelectionDetailsFacade/methods/getActionGroups">actionGroups</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            static removeAllActionGroups(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsFacade/methods/getActions">actions</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            static removeAllActions(): sap.ui.core.Item[];
            /**
             * <p>Describes the public facade of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetails">sap.m.SelectionDetails</a> control.</p>
             */
            constructor();
            /**
             * <p>Closes SelectionDetails if open.</p>
             * @returns sap.m.SelectionDetails <p>To ensure method chaining, return the SelectionDetails.</p>
             */
            close(): sap.m.SelectionDetails;
            /**
             * <p>Returns <code>true</code> if the labels of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItemLine">sap.m.SelectionDetailsItemLine</a> elements are wrapped, <code>false</code> otherwise.</p>
             * @returns boolean <p>True if the labels of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItemLine">sap.m.SelectionDetailsItemLine</a> elements are wrapped, false otherwise.</p>
             */
            getWrapLabels(): boolean;
            /**
             * <p>Returns true if the SelectionDetails is enabled, otherwise false.</p>
             * @returns boolean <p>True if the SelectionDetails contains items, otherwise false.</p>
             */
            isEnabled(): boolean;
            /**
             * <p>Returns true if the SelectionDetails is open, otherwise false.</p>
             * @returns boolean <p>True if the SelectionDetails is open, otherwise false.</p>
             */
            isOpen(): boolean;
            /**
             * <p>Wraps the given content in <a target="_self" class="jsdoclink" href="#/api/sap.m.Page">page</a>, adds it to existing <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">NavContainer</a> and navigates to this newly created page. Has no effect if the SelectionDetails is closed. Lazily processes dependencies for the navigation event.</p>
             * @param {string} title <p>The title property of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Page">page</a> control to which the navigation should occur.</p>
             * @param {sap.ui.core.Control} content <p>The content of the control to which the navigation should occur.</p>
             * @returns sap.m.SelectionDetails <p>To ensure method chaining, return the SelectionDetails.</p>
             */
            navTo(title: string, content: sap.ui.core.Control): sap.m.SelectionDetails;
            /**
             * <p>Enables line wrapping for the labels of the of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItemLine">sap.m.SelectionDetailsItemLine</a> elements.</p>
             * @param {boolean} bWrap <p>True to apply wrapping to the labels of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItemLine">sap.m.SelectionDetailsItemLine</a> elements.</p>
             * @returns sap.m.SelectionDetails <p>To ensure method chaining, returns SelectionDetails.</p>
             */
            setWrapLabels(bWrap: boolean): sap.m.SelectionDetails;
        }
        /**
         * <p>This protected element provides an item for <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetails">sap.m.SelectionDetails</a> that is shown inside a list. The item includes SelectionDetailsItemLine as its lines that are displayed in one block above the optional actions. <b><i>Note:</i></b>It is protected and should only be used within the framework itself.</p>
         */
        export class SelectionDetailsItem extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new SelectionDetailsItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAction(oAction: sap.ui.core.Item): sap.m.SelectionDetailsItem;
            /**
             * <p>Adds some line to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p>
             * @param {sap.m.SelectionDetailsItemLine} oLine <p>The line to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addLine(oLine: sap.m.SelectionDetailsItemLine): sap.m.SelectionDetailsItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindLines(oBindingInfo: any): sap.m.SelectionDetailsItem;
            /**
             * <p>Destroys all the actions in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyActions(): sap.m.SelectionDetailsItem;
            /**
             * <p>Destroys all the lines in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyLines(): sap.m.SelectionDetailsItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p><p>Contains custom actions shown below the main content of the item.</p>
             * @returns sap.ui.core.Item[] 
             */
            getActions(): sap.ui.core.Item[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableNav" href="#/api/sap.m.SelectionDetailsItem/methods/getEnableNav">enableNav</a>.</p><p>Determines whether or not the item is active and a navigation event is triggered on press.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableNav</code></p>
             */
            getEnableNav(): boolean;
            /**
             * <p>Returns the public facade of the SelectionDetailsItem for non inner framework usages.</p>
             * @returns sap.ui.base.Interface <p>The reduced facade for outer framework usages.</p>
             */
            protected getFacade(): sap.ui.base.Interface;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p><p>Contains a record of information about, for example, measures and dimensions. These entries are usually obtained via selection in chart controls.</p>
             * @returns sap.m.SelectionDetailsItemLine[] 
             */
            getLines(): sap.m.SelectionDetailsItemLine[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oAction <p>The action whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAction(oAction: sap.ui.core.Item): number;
            /**
             * <p>Checks for the provided <code>sap.m.SelectionDetailsItemLine</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SelectionDetailsItemLine} oLine <p>The line whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfLine(oLine: sap.m.SelectionDetailsItemLine): number;
            /**
             * <p>Inserts a action into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the action should be inserted at; for a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted at the last position</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAction(oAction: sap.ui.core.Item, iIndex: number): sap.m.SelectionDetailsItem;
            /**
             * <p>Inserts a line into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p>
             * @param {sap.m.SelectionDetailsItemLine} oLine <p>The line to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the line should be inserted at; for a negative value of <code>iIndex</code>, the line is inserted at position 0; for a value greater than the current size of the aggregation, the line is inserted at the last position</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertLine(oLine: sap.m.SelectionDetailsItemLine, iIndex: number): sap.m.SelectionDetailsItem;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.ui.core.Item} vAction <p>The action to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed action or <code>null</code></p>
             */
            removeAction(vAction: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItem/methods/getActions">actions</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllActions(): sap.ui.core.Item[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.SelectionDetailsItemLine[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllLines(): sap.m.SelectionDetailsItemLine[];
            /**
             * <p>Removes a line from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a>.</p>
             * @param {number | string | sap.m.SelectionDetailsItemLine} vLine <p>The line to remove or its index or id</p>
             * @returns sap.m.SelectionDetailsItemLine <p>The removed line or <code>null</code></p>
             */
            removeLine(vLine: number | string | sap.m.SelectionDetailsItemLine): sap.m.SelectionDetailsItemLine;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableNav" href="#/api/sap.m.SelectionDetailsItem/methods/getEnableNav">enableNav</a>.</p><p>Determines whether or not the item is active and a navigation event is triggered on press.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableNav <p>New value for property <code>enableNav</code></p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableNav(bEnableNav: boolean): sap.m.SelectionDetailsItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLines" href="#/api/sap.m.SelectionDetailsItem/methods/getLines">lines</a> from model data.</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindLines(): sap.m.SelectionDetailsItem;
        }
        /**
         * <p>The public facade of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">sap.m.SelectionDetailsItem</a> element.</p>
         */
        export class SelectionDetailsItemFacade {
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItemFacade/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Item} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static addAction(oAction: sap.ui.core.Item): sap.m.SelectionDetailsItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableNav" href="#/api/sap.m.SelectionDetailsItemFacade/methods/getEnableNav">enableNav</a>.</p><p>Determines whether or not the item is active and a navigation event is triggered on press.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableNav</code></p>
             */
            static getEnableNav(): boolean;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SelectionDetailsItemFacade/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.ui.core.Item} vAction <p>The action to remove or its index or id</p>
             * @returns sap.ui.core.Item <p>The removed action or <code>null</code></p>
             */
            static removeAction(vAction: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableNav" href="#/api/sap.m.SelectionDetailsItemFacade/methods/getEnableNav">enableNav</a>.</p><p>Determines whether or not the item is active and a navigation event is triggered on press.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableNav <p>New value for property <code>enableNav</code></p>
             * @returns sap.m.SelectionDetailsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            static setEnableNav(bEnableNav: boolean): sap.m.SelectionDetailsItem;
            /**
             * <p>Describes the public facade of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">sap.m.SelectionDetailsItem</a> element.</p>
             */
            constructor();
        }
        /**
         * <p>This Element provides a means to fill an <a target="_self" class="jsdoclink" href="#/api/sap.m.SelectionDetailsItem">sap.m.SelectionDetailsItem</a> with content. It is used for a form-like display of a label followed by a value with an optional unit. If the unit is used, the value is displayed bold. <b><i>Note:</i></b>It is protected and should ony be used within the framework itself.</p>
         */
        export class SelectionDetailsItemLine extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new SelectionDetailsItemLine.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new element</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValue" href="#/api/sap.m.SelectionDetailsItemLine/methods/getDisplayValue">displayValue</a>.</p><p>The display value of the line. If this property is set, it overrides the value property and is displayed as is.</p>
             * @returns string <p>Value of property <code>displayValue</code></p>
             */
            getDisplayValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.SelectionDetailsItemLine/methods/getLabel">label</a>.</p><p>The label that is shown as the first part of the line. It may contain the name of the currently selected dimension or measure.</p>
             * @returns string <p>Value of property <code>label</code></p>
             */
            getLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLineMarker" href="#/api/sap.m.SelectionDetailsItemLine/methods/getLineMarker">lineMarker</a>.</p><p>A string to be rendered by the control as a line marker. This string must be a valid SVG definition. The only valid tags are: svg, path, line.</p>
             * @returns string <p>Value of property <code>lineMarker</code></p>
             */
            getLineMarker(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.SelectionDetailsItemLine/methods/getUnit">unit</a>.</p><p>The unit of the given value. If this unit is given, the line is displayed bold.</p>
             * @returns string <p>Value of property <code>unit</code></p>
             */
            getUnit(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SelectionDetailsItemLine/methods/getValue">value</a>.</p><p>The value of the line, for example the value of the currently selected measure. Expected type is a string, number or a plain object, including date and time properties of type string.</p>
             * @returns any <p>Value of property <code>value</code></p>
             */
            getValue(): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValue" href="#/api/sap.m.SelectionDetailsItemLine/methods/getDisplayValue">displayValue</a>.</p><p>The display value of the line. If this property is set, it overrides the value property and is displayed as is.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDisplayValue <p>New value for property <code>displayValue</code></p>
             * @returns sap.m.SelectionDetailsItemLine <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayValue(sDisplayValue: string): sap.m.SelectionDetailsItemLine;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabel" href="#/api/sap.m.SelectionDetailsItemLine/methods/getLabel">label</a>.</p><p>The label that is shown as the first part of the line. It may contain the name of the currently selected dimension or measure.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLabel <p>New value for property <code>label</code></p>
             * @returns sap.m.SelectionDetailsItemLine <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabel(sLabel: string): sap.m.SelectionDetailsItemLine;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLineMarker" href="#/api/sap.m.SelectionDetailsItemLine/methods/getLineMarker">lineMarker</a>.</p><p>A string to be rendered by the control as a line marker. This string must be a valid SVG definition. The only valid tags are: svg, path, line.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLineMarker <p>New value for property <code>lineMarker</code></p>
             * @returns sap.m.SelectionDetailsItemLine <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLineMarker(sLineMarker: string): sap.m.SelectionDetailsItemLine;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.SelectionDetailsItemLine/methods/getUnit">unit</a>.</p><p>The unit of the given value. If this unit is given, the line is displayed bold.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sUnit <p>New value for property <code>unit</code></p>
             * @returns sap.m.SelectionDetailsItemLine <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUnit(sUnit: string): sap.m.SelectionDetailsItemLine;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.SelectionDetailsItemLine/methods/getValue">value</a>.</p><p>The value of the line, for example the value of the currently selected measure. Expected type is a string, number or a plain object, including date and time properties of type string.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oValue <p>New value for property <code>value</code></p>
             * @returns sap.m.SelectionDetailsItemLine <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(oValue: any): sap.m.SelectionDetailsItemLine;
        }
        /**
         * <p>The <code>sap.m.SelectList</code> displays a list of items that allows the user to select an item.</p>
         */
        export class SelectList extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>sap.m.SelectList</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given.</p>
             * @param {any} mSettings <p>Initial settings for the new control.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SelectList/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SelectList;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.ui.core.Item): sap.m.SelectList;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.SelectList/events/itemPress">itemPress</a> event of this <code>sap.m.SelectList</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectList</code> itself.</p><p>This event is fired when an item is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectList;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SelectList/events/selectionChange">selectionChange</a> event of this <code>sap.m.SelectList</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SelectList</code> itself.</p><p>This event is fired when the selection has changed.</p><p><b>Note: </b> The selection can be changed by pressing a non-selected item or via keyboard and after the enter or space key is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SelectList;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.SelectList;
            /**
             * <p>Clear the selection.</p>
             */
            protected clearSelection(): void;
            /**
             * <p>Destroys all the items in the aggregation named <code>items</code>.</p>
             * @returns sap.m.SelectList <p><code>this</code> to allow method chaining.</p>
             */
            destroyItems(): sap.m.SelectList;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.SelectList/events/itemPress">itemPress</a> event of this <code>sap.m.SelectList</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemPress(fnFunction: Function, oListener?: any): sap.m.SelectList;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SelectList/events/selectionChange">selectionChange</a> event of this <code>sap.m.SelectList</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.SelectList;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPress" href="#/api/sap.m.SelectList/events/itemPress">itemPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemPress(mParameters?: any): sap.m.SelectList;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.SelectList/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.SelectList;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SelectList/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Retrieves the default selected item from the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item[]} aItems 
             * @returns sap.ui.core.Item|null 
             */
            protected getDefaultSelectedItem(aItems?: sap.ui.core.Item[]): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SelectList/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can change the selection.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets the enabled items from the aggregation named <code>items</code>.</p>
             * @param {sap.ui.core.Item[]} aItems <p>items to filter</p>
             * @returns sap.ui.core.Item[] <p>An array containing the enabled items.</p>
             */
            getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
            /**
             * <p>Gets the first item from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The first item, or null if there are no items.</p>
             */
            getFirstItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets the item from the aggregation named <code>items</code> at the given 0-based index.</p>
             * @param {number} iIndex <p>Index of the item to return.</p>
             * @returns sap.ui.core.Item|null <p>Item at the given index, or null if none.</p>
             */
            getItemAt(iIndex: number): sap.ui.core.Item | null;
            /**
             * <p>Gets the item with the given key from the aggregation named <code>items</code>.</p><p><b>Note: </b> If duplicate keys exists, the first item matching the key is returned.</p>
             * @param {string} sKey <p>An item key that specifies the item to retrieve.</p>
             * @returns sap.ui.core.Item|null <p>The matched item or null</p>
             */
            getItemByKey(sKey: string): sap.ui.core.Item | null;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a>.</p><p>Defines the items contained within this control.</p>
             * @returns sap.ui.core.Item[] 
             */
            getItems(): sap.ui.core.Item[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeyboardNavigationMode" href="#/api/sap.m.SelectList/methods/getKeyboardNavigationMode">keyboardNavigationMode</a>.</p><p>Defines the keyboard navigation mode.</p><p><b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is only intended for use in some composite controls that handles keyboard navigation by themselves.</p><p>Default value is <code>Delimited</code>.</p>
             * @returns sap.m.SelectListKeyboardNavigationMode <p>Value of property <code>keyboardNavigationMode</code></p>
             */
            getKeyboardNavigationMode(): sap.m.SelectListKeyboardNavigationMode;
            /**
             * <p>Gets the enabled items from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The last item, or null if there are no items.</p>
             */
            getLastItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.SelectList/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the control.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets the selected item object from the aggregation named <code>items</code>.</p>
             * @returns sap.ui.core.Item|null <p>The current target of the <code>selectedItem</code> association, or null.</p>
             */
            getSelectedItem(): sap.ui.core.Item | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItemId" href="#/api/sap.m.SelectList/methods/getSelectedItemId">selectedItemId</a>.</p><p>ID of the selected item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedItemId</code></p>
             */
            getSelectedItemId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.SelectList/methods/getSelectedKey">selectedKey</a>.</p><p>Key of the selected item.</p><p><b>Note: </b> If duplicate keys exist, the first item matching the key is used.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>selectedKey</code></p>
             */
            getSelectedKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.SelectList/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showSecondaryValues</code></p>
             */
            getShowSecondaryValues(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SelectList/methods/getWidth">width</a>.</p><p>Sets the width of the control.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Item} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.ui.core.Item): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a>.</p>
             * @param {sap.ui.core.Item} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.SelectList;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SelectList/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the items in the aggregation named <code>items</code>. Additionally unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Item[] <p>An array of the removed items (might be empty).</p>
             */
            removeAllItems(): sap.ui.core.Item[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SelectList/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or id.</p>
             * @returns sap.ui.core.Item <p>The removed item or null.</p>
             */
            removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SelectList/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can change the selection.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.SelectList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeyboardNavigationMode" href="#/api/sap.m.SelectList/methods/getKeyboardNavigationMode">keyboardNavigationMode</a>.</p><p>Defines the keyboard navigation mode.</p><p><b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is only intended for use in some composite controls that handles keyboard navigation by themselves.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Delimited</code>.</p>
             * @param {sap.m.SelectListKeyboardNavigationMode} sKeyboardNavigationMode <p>New value for property <code>keyboardNavigationMode</code></p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKeyboardNavigationMode(sKeyboardNavigationMode: sap.m.SelectListKeyboardNavigationMode): sap.m.SelectList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.SelectList/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sMaxWidth <p>New value for property <code>maxWidth</code></p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): sap.m.SelectList;
            /**
             * <p>Sets the <code>selectedItem</code> association.</p>
             * @param {string | sap.ui.core.Item | null} vItem <p>New value for the <code>selectedItem</code> association. If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association. Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear the selection.</p>
             * @returns sap.m.SelectList <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItem(vItem: string | sap.ui.core.Item | null): sap.m.SelectList;
            /**
             * <p>Sets property <code>selectedItemId</code>.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string | undefined} vItem <p>New value for property <code>selectedItemId</code>.</p>
             * @returns sap.m.SelectList <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedItemId(vItem: string | undefined): sap.m.SelectList;
            /**
             * <p>Sets property <code>selectedKey</code>.</p><p>Default value is an empty string <code>""</code> or <code>undefined</code>.</p>
             * @param {string} sKey <p>New value for property <code>selectedKey</code>.</p>
             * @returns sap.m.SelectList <p><code>this</code> to allow method chaining.</p>
             */
            setSelectedKey(sKey: string): sap.m.SelectList;
            /**
             * <p>Updates and synchronizes <code>selectedItem</code> association, <code>selectedItemId</code> and <code>selectedKey</code> properties.</p>
             * @param {string | sap.ui.core.Item | null} vItem 
             */
            protected setSelection(vItem: string | sap.ui.core.Item | null): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSecondaryValues" href="#/api/sap.m.SelectList/methods/getShowSecondaryValues">showSecondaryValues</a>.</p><p>Indicates whether the text values of the <code>additionalText</code> property of a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ListItem">sap.ui.core.ListItem</a> are shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowSecondaryValues <p>New value for property <code>showSecondaryValues</code></p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSecondaryValues(bShowSecondaryValues: boolean): sap.m.SelectList;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SelectList/methods/getWidth">width</a>.</p><p>Sets the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>auto</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.SelectList;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.SelectList/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.SelectList <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.SelectList;
        }
        /**
         * <p><p>Defines the keyboard navigation mode.</p></p>
         */
        export enum SelectListKeyboardNavigationMode {
            /**
             * <p>Keyboard navigation is delimited at the last item or first item of the list.</p>
             */
            Delimited = "Delimited",
            /**
             * <p>Keyboard navigation is disabled.</p>
             */
            None = "None",
        }
        /**
         * <p><p>Enumeration for different Select types.</p></p>
         */
        export enum SelectType {
            /**
             * <p>Will show the text.</p>
             */
            Default = "Default",
            /**
             * <p>Will show only the specified icon.</p>
             */
            IconOnly = "IconOnly",
        }
        /**
         * <p>The Shell control can be used as root element of applications. It can contain an App or a <code>SplitApp</code> control. The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, such as a frame around the App, on desktop browser platforms.</p>
         */
        export class Shell extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Shell.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="logout" href="#/api/sap.m.Shell/events/logout">logout</a> event of this <code>sap.m.Shell</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Shell</code> itself.</p><p>Fires when the user presses the logout button/link.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code> itself</p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLogout(oData: any, fnFunction: Function, oListener?: any): sap.m.Shell;
            /**
             * <p>Destroys the app in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getApp" href="#/api/sap.m.Shell/methods/getApp">app</a>.</p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyApp(): sap.m.Shell;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="logout" href="#/api/sap.m.Shell/events/logout">logout</a> event of this <code>sap.m.Shell</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLogout(fnFunction: Function, oListener?: any): sap.m.Shell;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="logout" href="#/api/sap.m.Shell/events/logout">logout</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLogout(mParameters?: any): sap.m.Shell;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getApp" href="#/api/sap.m.Shell/methods/getApp">app</a>.</p><p>A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.</p>
             * @returns sap.ui.core.Control 
             */
            getApp(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppWidthLimited" href="#/api/sap.m.Shell/methods/getAppWidthLimited">appWidthLimited</a>.</p><p>Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>appWidthLimited</code></p>
             */
            getAppWidthLimited(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.Shell/methods/getBackgroundColor">backgroundColor</a>.</p><p>Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required. Any configured background image will be placed above this colored background. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</p>
             * @returns sap.ui.core.CSSColor <p>Value of property <code>backgroundColor</code></p>
             */
            getBackgroundColor(): sap.ui.core.CSSColor;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.Shell/methods/getBackgroundImage">backgroundImage</a>.</p><p>Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required. This background image will be placed above any color set for the background. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>backgroundImage</code></p>
             */
            getBackgroundImage(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.Shell/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque). This can be used to improve readability of the Shell content by making the background image partly transparent.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>backgroundOpacity</code></p>
             */
            getBackgroundOpacity(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.Shell/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>backgroundRepeat</code></p>
             */
            getBackgroundRepeat(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderRightText" href="#/api/sap.m.Shell/methods/getHeaderRightText">headerRightText</a>.</p><p>Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).</p>
             * @returns string <p>Value of property <code>headerRightText</code></p>
             */
            getHeaderRightText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.Shell/methods/getHomeIcon">homeIcon</a>.</p><p>Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.</p><p>This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.</p><p>Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers). The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this: { 'phone':'phone-icon_57x57.png', 'phone@2':'phone-retina_114x114.png', 'tablet':'tablet-icon_72x72.png', 'tablet@2':'tablet-retina_144x144.png', 'precomposed':true, 'favicon':'favicon.ico' }</p><p>See jQuery.sap.setIcons() for full documentation.</p>
             * @returns any <p>Value of property <code>homeIcon</code></p>
             */
            getHomeIcon(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLogo" href="#/api/sap.m.Shell/methods/getLogo">logo</a>.</p><p>Defines the logo to be displayed next to the App when the screen is sufficiently large.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>logo</code></p>
             */
            getLogo(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowLogout" href="#/api/sap.m.Shell/methods/getShowLogout">showLogout</a>.</p><p>Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showLogout</code></p>
             */
            getShowLogout(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Shell/methods/getTitle">title</a>.</p><p>Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.Shell/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title.</p><p>This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation. Depending on this setting an HTML h1-h6 element is used.</p><p>Default value is <code>H1</code>.</p>
             * @returns sap.ui.core.TitleLevel <p>Value of property <code>titleLevel</code></p>
             */
            getTitleLevel(): sap.ui.core.TitleLevel;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getApp" href="#/api/sap.m.Shell/methods/getApp">app</a>.</p>
             * @param {sap.ui.core.Control} oApp <p>The app to set</p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setApp(oApp: sap.ui.core.Control): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppWidthLimited" href="#/api/sap.m.Shell/methods/getAppWidthLimited">appWidthLimited</a>.</p><p>Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAppWidthLimited <p>New value for property <code>appWidthLimited</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAppWidthLimited(bAppWidthLimited: boolean): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.Shell/methods/getBackgroundColor">backgroundColor</a>.</p><p>Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required. Any configured background image will be placed above this colored background. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSColor} sBackgroundColor <p>New value for property <code>backgroundColor</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundColor(sBackgroundColor: sap.ui.core.CSSColor): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.Shell/methods/getBackgroundImage">backgroundImage</a>.</p><p>Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required. This background image will be placed above any color set for the background. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sBackgroundImage <p>New value for property <code>backgroundImage</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundImage(sBackgroundImage: sap.ui.core.URI): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.Shell/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque). This can be used to improve readability of the Shell content by making the background image partly transparent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} fBackgroundOpacity <p>New value for property <code>backgroundOpacity</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundOpacity(fBackgroundOpacity: number): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.Shell/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bBackgroundRepeat <p>New value for property <code>backgroundRepeat</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderRightText" href="#/api/sap.m.Shell/methods/getHeaderRightText">headerRightText</a>.</p><p>Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sHeaderRightText <p>New value for property <code>headerRightText</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeaderRightText(sHeaderRightText: string): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.Shell/methods/getHomeIcon">homeIcon</a>.</p><p>Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.</p><p>This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.</p><p>Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers). The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this: { 'phone':'phone-icon_57x57.png', 'phone@2':'phone-retina_114x114.png', 'tablet':'tablet-icon_72x72.png', 'tablet@2':'tablet-retina_144x144.png', 'precomposed':true, 'favicon':'favicon.ico' }</p><p>See jQuery.sap.setIcons() for full documentation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oHomeIcon <p>New value for property <code>homeIcon</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHomeIcon(oHomeIcon: any): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLogo" href="#/api/sap.m.Shell/methods/getLogo">logo</a>.</p><p>Defines the logo to be displayed next to the App when the screen is sufficiently large.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sLogo <p>New value for property <code>logo</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLogo(sLogo: sap.ui.core.URI): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowLogout" href="#/api/sap.m.Shell/methods/getShowLogout">showLogout</a>.</p><p>Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowLogout <p>New value for property <code>showLogout</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowLogout(bShowLogout: boolean): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Shell/methods/getTitle">title</a>.</p><p>Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.Shell;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.Shell/methods/getTitleLevel">titleLevel</a>.</p><p>Defines the semantic level of the title.</p><p>This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation. Depending on this setting an HTML h1-h6 element is used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>H1</code>.</p>
             * @param {sap.ui.core.TitleLevel} sTitleLevel <p>New value for property <code>titleLevel</code></p>
             * @returns sap.m.Shell <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.Shell;
        }
        /**
         * <p>Displays a calendar of a single entity (such as person, resource) for the selected time interval.</p><h3>Overview</h3><p><b>Note:</b> The <code>SinglePlanningCalendar</code> uses parts of the <code>sap.ui.unified</code> library. This library will be loaded after the <code>SinglePlanningCalendar</code>, if it wasn't previously loaded. This could lead to a waiting time when a <code>SinglePlanningCalendar</code> is used for the first time. To prevent this, apps using the <code>SinglePlanningCalendar</code> must also load the <code>sap.ui.unified</code> library.</p><p>The <code>SinglePlanningCalendar</code> has the following structure:</p><p><ul> <li>A <code>PlanningCalendarHeader</code> at the top. It contains the <code>title</code> set from the corresponding property, the <code>SegmentedButton</code>, which facilitates navigation through the views, controls, passed to the <code>actions</code> aggregation and the navigation, assisting the user in choosing the desired time period. The views, either custom or not, can be configured and passed through the <code>views</code> aggregation.</p><p>To create custom views, extend the <code>SinglePlanningCalendarView</code> basic view class. It defines three methods that should be overwritten: <code>getEntityCount</code>, <code>getScrollEntityCount</code> and <code>calculateStartDate</code> <ul> <li><code>getEntityCount</code> - returns number of columns to be displayed</li> <li><code>getScrollEntityCount</code> - used when next and previous arrows in the calendar are used. For example, in work week view, the <code>getEntityCount</code> returns 5 (5 columns from Monday to Friday), but when next arrow is selected, the control navigates 7 days ahead and <code>getScrollEntityCount</code> returns 7.</li> <li><code>calculateStartDate</code> - calculates the first day displayed in the calendar based on the <code>startDate</code> property of the <code>SinglePlanningCalendar</code>. For example, it returns the first date of a month or a week to display the first 10 days of the month.</li> </ul></p><p><li>A <code>SinglePlanningCalendarGrid</code> or <code>SinglePlanningCalendarMonthGrid</code>, which displays the appointments, set to the visual time range. An all-day appointment is an appointment which starts at 00:00 and ends in 00:00 on any day in the future. </ul></p>
         */
        export class SinglePlanningCalendar extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendar</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some action to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Control} oAction <p>The action to add; if empty, nothing is inserted</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAction(oAction: sap.ui.core.Control): sap.m.SinglePlanningCalendar;
            /**
             * <p>Adds some appointment to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment to add; if empty, nothing is inserted</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAppointment(oAppointment: sap.ui.unified.CalendarAppointment): sap.m.SinglePlanningCalendar;
            /**
             * <p>Adds some specialDate to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to add; if empty, nothing is inserted</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.m.SinglePlanningCalendar;
            /**
             * <p>Adds some view to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p>
             * @param {sap.m.SinglePlanningCalendarView} oView <p>The view to add; if empty, nothing is inserted</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addView(oView: sap.m.SinglePlanningCalendarView): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentCreate">appointmentCreate</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired if an appointment is created.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentCreate(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentDrop">appointmentDrop</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired if an appointment is dropped.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentDrop(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentResize">appointmentResize</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired when an appointment is resized.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentResize(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentSelect">appointmentSelect</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired when the selected state of an appointment is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAppointmentSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cellPress" href="#/api/sap.m.SinglePlanningCalendar/events/cellPress">cellPress</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired when a grid cell is focused.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCellPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="headerDateSelect" href="#/api/sap.m.SinglePlanningCalendar/events/headerDateSelect">headerDateSelect</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired if a date is selected in the calendar header.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachHeaderDateSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="moreLinkPress" href="#/api/sap.m.SinglePlanningCalendar/events/moreLinkPress">moreLinkPress</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>Fired when a 'more' button is pressed. <b>Note:</b> The 'more' button appears in a month view cell when multiple appointments exist and the available space is not sufficient to display all of them.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachMoreLinkPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.SinglePlanningCalendar/events/startDateChange">startDateChange</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p><code>startDate</code> is changed while navigating in the <code>SinglePlanningCalendar</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachStartDateChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.SinglePlanningCalendar/events/viewChange">viewChange</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SinglePlanningCalendar</code> itself.</p><p>The view was changed by user interaction.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SinglePlanningCalendar</code> itself</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachViewChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Destroys all the actions in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyActions(): sap.m.SinglePlanningCalendar;
            /**
             * <p>Destroys all the appointments in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAppointments(): sap.m.SinglePlanningCalendar;
            /**
             * <p>Destroys all the specialDates in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySpecialDates(): sap.m.SinglePlanningCalendar;
            /**
             * <p>Destroys all the views in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyViews(): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentCreate">appointmentCreate</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentCreate(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentDrop">appointmentDrop</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentDrop(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentResize">appointmentResize</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentResize(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentSelect">appointmentSelect</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAppointmentSelect(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cellPress" href="#/api/sap.m.SinglePlanningCalendar/events/cellPress">cellPress</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCellPress(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="headerDateSelect" href="#/api/sap.m.SinglePlanningCalendar/events/headerDateSelect">headerDateSelect</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachHeaderDateSelect(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="moreLinkPress" href="#/api/sap.m.SinglePlanningCalendar/events/moreLinkPress">moreLinkPress</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachMoreLinkPress(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.SinglePlanningCalendar/events/startDateChange">startDateChange</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachStartDateChange(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.SinglePlanningCalendar/events/viewChange">viewChange</a> event of this <code>sap.m.SinglePlanningCalendar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachViewChange(fnFunction: Function, oListener?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentCreate" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentCreate">appointmentCreate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentCreate(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentDrop" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentDrop">appointmentDrop</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentDrop(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentResize">appointmentResize</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentResize(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentSelect" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentSelect">appointmentSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAppointmentSelect(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cellPress" href="#/api/sap.m.SinglePlanningCalendar/events/cellPress">cellPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCellPress(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="headerDateSelect" href="#/api/sap.m.SinglePlanningCalendar/events/headerDateSelect">headerDateSelect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireHeaderDateSelect(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="moreLinkPress" href="#/api/sap.m.SinglePlanningCalendar/events/moreLinkPress">moreLinkPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireMoreLinkPress(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="startDateChange" href="#/api/sap.m.SinglePlanningCalendar/events/startDateChange">startDateChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireStartDateChange(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="viewChange" href="#/api/sap.m.SinglePlanningCalendar/events/viewChange">viewChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireViewChange(mParameters?: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p><p>The controls to be passed to the toolbar.</p>
             * @returns sap.ui.core.Control[] 
             */
            getActions(): sap.ui.core.Control[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p><p>The appointments to be displayed in the grid. Appointments outside the visible time frame are not rendered. Appointments, longer than a day, will be displayed in all of the affected days. To display an all-day appointment, the appointment must start at 00:00 and end on any day in the future in 00:00h.</p>
             * @returns sap.ui.unified.CalendarAppointment[] 
             */
            getAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsCreate" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsCreate">enableAppointmentsCreate</a>.</p><p>Determines whether the appointments can be created by dragging on empty cells.</p><p>See <a target="_self" class="jsdoclink" href="#/api/%23property%3AenableAppointmentsResize">enableAppointmentsResize</a> for the specific points for events snapping</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsCreate</code></p>
             */
            getEnableAppointmentsCreate(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsDragAndDrop" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsDragAndDrop">enableAppointmentsDragAndDrop</a>.</p><p>Determines whether the appointments in the grid are draggable.</p><p>The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment can be dropped by the user.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsDragAndDrop</code></p>
             */
            getEnableAppointmentsDragAndDrop(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsResize" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsResize">enableAppointmentsResize</a>.</p><p>Determines whether the appointments are resizable.</p><p>The resize interaction is visualized by making the appointment transparent.</p><p>The appointment snaps on every interval of 30 minutes. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableAppointmentsResize</code></p>
             */
            getEnableAppointmentsResize(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndHour" href="#/api/sap.m.SinglePlanningCalendar/methods/getEndHour">endHour</a>.</p><p>Determines the end hour of the grid to be shown if the <code>fullDay</code> property is set to <code>false</code>. Otherwise the next hours are displayed as non-working. The passed hour is considered as 24-hour based.</p><p>Default value is <code>24</code>.</p>
             * @returns number <p>Value of property <code>endHour</code></p>
             */
            getEndHour(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFullDay" href="#/api/sap.m.SinglePlanningCalendar/methods/getFullDay">fullDay</a>.</p><p>Determines if all of the hours in a day are displayed. If set to <code>false</code>, the hours shown are between the <code>startHour</code> and <code>endHour</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>fullDay</code></p>
             */
            getFullDay(): boolean;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLegend" href="#/api/sap.m.SinglePlanningCalendar/methods/getLegend">legend</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getLegend(): sap.ui.core.ID;
            /**
             * <p>Holds the selected appointments. If no appointments are selected, an empty array is returned.</p>
             * @returns sap.ui.unified.CalendarAppointment[] <p>All selected appointments</p>
             */
            getSelectedAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedView" href="#/api/sap.m.SinglePlanningCalendar/methods/getSelectedView">selectedView</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedView(): sap.ui.core.ID;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p><p>Special days in the header visualized as a date range with type.</p><p><b>Note:</b> If one day is assigned to more than one type, only the first type is used.</p>
             * @returns sap.ui.unified.DateTypeRange[] 
             */
            getSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartDate" href="#/api/sap.m.SinglePlanningCalendar/methods/getStartDate">startDate</a>.</p><p>Determines the start date of the grid, as a JavaScript date object. It is considered as a local date. The time part will be ignored. The current date is used as default.</p>
             * @returns any <p>Value of property <code>startDate</code></p>
             */
            getStartDate(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartHour" href="#/api/sap.m.SinglePlanningCalendar/methods/getStartHour">startHour</a>.</p><p>Determines the start hour of the grid to be shown if the <code>fullDay</code> property is set to <code>false</code>. Otherwise the previous hours are displayed as non-working. The passed hour is considered as 24-hour based.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>startHour</code></p>
             */
            getStartHour(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStickyMode" href="#/api/sap.m.SinglePlanningCalendar/methods/getStickyMode">stickyMode</a>.</p><p>Determines which part of the control will remain fixed at the top of the page during vertical scrolling as long as the control is in the viewport.</p><p><b>Note:</b> Limited browser support. Browsers which do not support this feature: <ul> <li>Microsoft Internet Explorer</li> <li>Microsoft Edge lower than version 41 (EdgeHTML 16)</li> <li>Mozilla Firefox lower than version 59</li> </ul></p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.PlanningCalendarStickyMode <p>Value of property <code>stickyMode</code></p>
             */
            getStickyMode(): sap.m.PlanningCalendarStickyMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.SinglePlanningCalendar/methods/getTitle">title</a>.</p><p>Determines the title of the <code>SinglePlanningCalendar</code>.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p><p>Views of the <code>SinglePlanningCalendar</code>.</p><p><b>Note:</b> If not set, the Week view is available.</p>
             * @returns sap.m.SinglePlanningCalendarView[] 
             */
            getViews(): sap.m.SinglePlanningCalendarView[];
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oAction <p>The action whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAction(oAction: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAppointment(oAppointment: sap.ui.unified.CalendarAppointment): number;
            /**
             * <p>Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
            /**
             * <p>Checks for the provided <code>sap.m.SinglePlanningCalendarView</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SinglePlanningCalendarView} oView <p>The view whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfView(oView: sap.m.SinglePlanningCalendarView): number;
            /**
             * <p>Inserts a action into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p>
             * @param {sap.ui.core.Control} oAction <p>The action to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the action should be inserted at; for a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted at the last position</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAction(oAction: sap.ui.core.Control, iIndex: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Inserts a appointment into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p>
             * @param {sap.ui.unified.CalendarAppointment} oAppointment <p>The appointment to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the appointment should be inserted at; for a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value greater than the current size of the aggregation, the appointment is inserted at the last position</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAppointment(oAppointment: sap.ui.unified.CalendarAppointment, iIndex: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Inserts a specialDate into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {sap.ui.unified.DateTypeRange} oSpecialDate <p>The specialDate to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the specialDate should be inserted at; for a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value greater than the current size of the aggregation, the specialDate is inserted at the last position</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Inserts a view into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p>
             * @param {sap.m.SinglePlanningCalendarView} oView <p>The view to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the view should be inserted at; for a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value greater than the current size of the aggregation, the view is inserted at the last position</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertView(oView: sap.m.SinglePlanningCalendarView, iIndex: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Removes a action from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p>
             * @param {number | string | sap.ui.core.Control} vAction <p>The action to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed action or <code>null</code></p>
             */
            removeAction(vAction: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActions" href="#/api/sap.m.SinglePlanningCalendar/methods/getActions">actions</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllActions(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.CalendarAppointment[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAppointments(): sap.ui.unified.CalendarAppointment[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.unified.DateTypeRange[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.SinglePlanningCalendarView[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllViews(): sap.m.SinglePlanningCalendarView[];
            /**
             * <p>Removes a appointment from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAppointments" href="#/api/sap.m.SinglePlanningCalendar/methods/getAppointments">appointments</a>.</p>
             * @param {number | string | sap.ui.unified.CalendarAppointment} vAppointment <p>The appointment to remove or its index or id</p>
             * @returns sap.ui.unified.CalendarAppointment <p>The removed appointment or <code>null</code></p>
             */
            removeAppointment(vAppointment: number | string | sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;
            /**
             * <p>Removes a specialDate from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSpecialDates" href="#/api/sap.m.SinglePlanningCalendar/methods/getSpecialDates">specialDates</a>.</p>
             * @param {number | string | sap.ui.unified.DateTypeRange} vSpecialDate <p>The specialDate to remove or its index or id</p>
             * @returns sap.ui.unified.DateTypeRange <p>The removed specialDate or <code>null</code></p>
             */
            removeSpecialDate(vSpecialDate: number | string | sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
            /**
             * <p>Removes a view from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViews" href="#/api/sap.m.SinglePlanningCalendar/methods/getViews">views</a>.</p>
             * @param {number | string | sap.m.SinglePlanningCalendarView} vView <p>The view to remove or its index or id</p>
             * @returns sap.m.SinglePlanningCalendarView <p>The removed view or <code>null</code></p>
             */
            removeView(vView: number | string | sap.m.SinglePlanningCalendarView): sap.m.SinglePlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsCreate" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsCreate">enableAppointmentsCreate</a>.</p><p>Determines whether the appointments can be created by dragging on empty cells.</p><p>See <a target="_self" class="jsdoclink" href="#/api/%23property%3AenableAppointmentsResize">enableAppointmentsResize</a> for the specific points for events snapping</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsCreate <p>New value for property <code>enableAppointmentsCreate</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsCreate(bEnableAppointmentsCreate: boolean): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsDragAndDrop" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsDragAndDrop">enableAppointmentsDragAndDrop</a>.</p><p>Determines whether the appointments in the grid are draggable.</p><p>The drag and drop interaction is visualized by a placeholder highlighting the area where the appointment can be dropped by the user.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsDragAndDrop <p>New value for property <code>enableAppointmentsDragAndDrop</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsDragAndDrop(bEnableAppointmentsDragAndDrop: boolean): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableAppointmentsResize" href="#/api/sap.m.SinglePlanningCalendar/methods/getEnableAppointmentsResize">enableAppointmentsResize</a>.</p><p>Determines whether the appointments are resizable.</p><p>The resize interaction is visualized by making the appointment transparent.</p><p>The appointment snaps on every interval of 30 minutes. After the resize is finished, the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="appointmentResize" href="#/api/sap.m.SinglePlanningCalendar/events/appointmentResize">appointmentResize</a> event is fired, containing the new start and end JavaScript date objects.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableAppointmentsResize <p>New value for property <code>enableAppointmentsResize</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableAppointmentsResize(bEnableAppointmentsResize: boolean): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEndHour" href="#/api/sap.m.SinglePlanningCalendar/methods/getEndHour">endHour</a>.</p><p>Determines the end hour of the grid to be shown if the <code>fullDay</code> property is set to <code>false</code>. Otherwise the next hours are displayed as non-working. The passed hour is considered as 24-hour based.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>24</code>.</p>
             * @param {number} iEndHour <p>New value for property <code>endHour</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEndHour(iEndHour: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFullDay" href="#/api/sap.m.SinglePlanningCalendar/methods/getFullDay">fullDay</a>.</p><p>Determines if all of the hours in a day are displayed. If set to <code>false</code>, the hours shown are between the <code>startHour</code> and <code>endHour</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bFullDay <p>New value for property <code>fullDay</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFullDay(bFullDay: boolean): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLegend" href="#/api/sap.m.SinglePlanningCalendar/methods/getLegend">legend</a>.</p>
             * @param {sap.ui.core.ID | sap.m.PlanningCalendarLegend} oLegend <p>ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLegend(oLegend: sap.ui.core.ID | sap.m.PlanningCalendarLegend): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedView" href="#/api/sap.m.SinglePlanningCalendar/methods/getSelectedView">selectedView</a>.</p>
             * @param {sap.ui.core.ID | sap.m.SinglePlanningCalendarView} oSelectedView <p>ID of an element which becomes the new target of this selectedView association; alternatively, an element instance may be given</p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelectedView(oSelectedView: sap.ui.core.ID | sap.m.SinglePlanningCalendarView): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartDate" href="#/api/sap.m.SinglePlanningCalendar/methods/getStartDate">startDate</a>.</p><p>Determines the start date of the grid, as a JavaScript date object. It is considered as a local date. The time part will be ignored. The current date is used as default.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oStartDate <p>New value for property <code>startDate</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStartDate(oStartDate: any): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStartHour" href="#/api/sap.m.SinglePlanningCalendar/methods/getStartHour">startHour</a>.</p><p>Determines the start hour of the grid to be shown if the <code>fullDay</code> property is set to <code>false</code>. Otherwise the previous hours are displayed as non-working. The passed hour is considered as 24-hour based.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iStartHour <p>New value for property <code>startHour</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStartHour(iStartHour: number): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStickyMode" href="#/api/sap.m.SinglePlanningCalendar/methods/getStickyMode">stickyMode</a>.</p><p>Determines which part of the control will remain fixed at the top of the page during vertical scrolling as long as the control is in the viewport.</p><p><b>Note:</b> Limited browser support. Browsers which do not support this feature: <ul> <li>Microsoft Internet Explorer</li> <li>Microsoft Edge lower than version 41 (EdgeHTML 16)</li> <li>Mozilla Firefox lower than version 59</li> </ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.PlanningCalendarStickyMode} sStickyMode <p>New value for property <code>stickyMode</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStickyMode(sStickyMode: sap.m.PlanningCalendarStickyMode): sap.m.SinglePlanningCalendar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.SinglePlanningCalendar/methods/getTitle">title</a>.</p><p>Determines the title of the <code>SinglePlanningCalendar</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.SinglePlanningCalendar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.SinglePlanningCalendar;
        }
        /**
         * <p>Represents a day view of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SinglePlanningCalendar">sap.m.SinglePlanningCalendar</a>. The purpose of the element is to decouple the view logic from parent control <code>SinglePlanningCalendar</code>.</p>
         */
        export class SinglePlanningCalendarDayView extends sap.m.SinglePlanningCalendarView {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendarDayView</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Represents a one month view of the <code>SinglePlanningCalendar</code>. The purpose of the element is to decouple the view logic from parent control <code>SinglePlanningCalendar</code>.</p>
         */
        export class SinglePlanningCalendarMonthView extends sap.m.SinglePlanningCalendarView {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendarMonthView</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Represents a day view of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SinglePlanningCalendar">sap.m.SinglePlanningCalendar</a>. The purpose of the element is to decouple the view logic from parent control <code>SinglePlanningCalendar</code>.</p>
         */
        export class SinglePlanningCalendarView extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendarView</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Should calculate the startDate which will be displayed in the <code>sap.m.SinglePlanningCalendar</code> based on a given date.</p>
             * @param {any} oDate <p>the given date</p>
             */
            calculateStartDate(oDate: any): void;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.SinglePlanningCalendarView/methods/getKey">key</a>.</p><p>Indicates a unique key for the view</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.SinglePlanningCalendarView/methods/getTitle">title</a>.</p><p>Adds a title for the view</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.SinglePlanningCalendarView/methods/getKey">key</a>.</p><p>Indicates a unique key for the view</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.SinglePlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.SinglePlanningCalendarView;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.SinglePlanningCalendarView/methods/getTitle">title</a>.</p><p>Adds a title for the view</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.SinglePlanningCalendarView <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.SinglePlanningCalendarView;
        }
        /**
         * <p>Represents a week view of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SinglePlanningCalendar">sap.m.SinglePlanningCalendar</a>. The purpose of the element is to decouple the view logic from parent control <code>SinglePlanningCalendar</code>.</p>
         */
        export class SinglePlanningCalendarWeekView extends sap.m.SinglePlanningCalendarView {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendarWeekView</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Represents a week view of the <a target="_self" class="jsdoclink" href="#/api/sap.m.SinglePlanningCalendar">sap.m.SinglePlanningCalendar</a>. The purpose of the element is to decouple the view logic from parent control <code>SinglePlanningCalendar</code>.</p>
         */
        export class SinglePlanningCalendarWorkWeekView extends sap.m.SinglePlanningCalendarView {
            /**
             * <p>Constructor for a new <code>SinglePlanningCalendarWorkWeekView</code>.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p><p>Enumeration of possible size settings.</p></p>
         */
        export enum Size {
            /**
             * <p>The size depends on the device it is running on. It is medium size for desktop and tablet and small size for phone.</p>
             */
            Auto = "Auto",
            /**
             * <p>Large size.</p>
             */
            L = "L",
            /**
             * <p>Medium size.</p>
             */
            M = "M",
            /**
             * <p>The width and height of the control are determined by the width and height of the container the control is placed in. Please note: it is decided by the control whether or not sap.m.Size.Responsive is supported.</p>
             */
            Responsive = "Responsive",
            /**
             * <p>Small size.</p>
             */
            S = "S",
            /**
             * <p>Extra small size.</p>
             */
            XS = "XS",
        }
        /**
         * <h3>Overview</h3><p>A <a target="_self" class="jsdoclink" href="#/api/sap.m.Slider">sap.m.Slider</a> control represents a numerical range and a handle. The purpose of the control is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.</p><p><b>Notes:</b> <ul><li>Only horizontal sliders are possible. </li> <li>The handle can be moved in steps of predefined size. This is done with the <code>step</code> property. </li> <li>Setting the property <code>showAdvancedTooltip</code> shows an input field above the handle</li> <li>Setting the property <code>inputsAsTooltips</code> enables the user to enter a specific value in the handle's tooltip. </li> </ul></p><h3>Structure</h3><p>The most important properties of the Slider are: <ul> <li> min - The minimum value of the slider range </li> <li> max - The maximum value of the slider range </li> <li> value - The current value of the slider</li> <li> progress - Determines if a progress bar will be shown on the slider range</li> <li> step - Determines the increments in which the slider will move</li> </ul> These properties determine the visualization of the tooltips: <ul> <li> <code>showAdvancedTooltip</code> - Determines if a tooltip should be displayed above the handle</li> <li> <code>inputsAsTooltips</code> - Determines if the tooltip displayed above the slider's handle should include an input field</li> </ul></p><h3>Usage</h3><p>The most common usecase is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).</p><h3>Responsive Behavior</h3><p>The <code>sap.m.Slider</code> control adjusts to the size of its parent container by recalculating and resizing the width of the control. You can move the slider handle in several different ways: <ul> <li> Drag and drop to the desired value</li> <li> Click/tap on the range bar to move the handle to that location </li> <li> Enter the desired value in the input field (if available) </li> <li> Keyboard (Arrow keys, "+" and "-") </li> </ul></p>
         */
        export class Slider extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>Slider</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Slider/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Slider;
            /**
             * <p>Adds some customTooltip to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p>
             * @param {sap.m.SliderTooltipBase} oCustomTooltip <p>The customTooltip to add; if empty, nothing is inserted</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addCustomTooltip(oCustomTooltip: sap.m.SliderTooltipBase): sap.m.Slider;
            /**
             * <p>Creates default tooltips, if needed, and forwards properties to them</p>
             * @param {any[]} aTooltipIds <p>Array of strings for ID generation</p>
             */
            protected assignDefaultTooltips(aTooltipIds?: any[]): void;
            /**
             * <p>Creates custom tooltips, if needed, and forwards properties to them</p>
             * @param {number} iTooltipCount <p>Count of the tooltips</p>
             */
            protected associateCustomTooltips(iTooltipCount?: number): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Slider/events/change">change</a> event of this <code>sap.m.Slider</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Slider</code> itself.</p><p>This event is triggered after the end user finishes interacting, if there is any change.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Slider;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Slider/events/liveChange">liveChange</a> event of this <code>sap.m.Slider</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Slider</code> itself.</p><p>This event is triggered during the dragging period, each time the slider value changes.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Slider;
            /**
             * <p>Destroys all the customTooltips in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomTooltips(): sap.m.Slider;
            /**
             * <p>Destroys the scale in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.Slider/methods/getScale">scale</a>.</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyScale(): sap.m.Slider;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Slider/events/change">change</a> event of this <code>sap.m.Slider</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.Slider;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Slider/events/liveChange">liveChange</a> event of this <code>sap.m.Slider</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.Slider;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Slider/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.Slider;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.Slider/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.Slider;
            /**
             * <p>Forwards properties to a given control</p>
             * @param {any[]} aProperties <p>Array of properties to forward</p>
             * @param {sap.ui.core.Element} oControl <p>Control to which should be forward</p>
             */
            protected forwardProperties(aProperties?: any[], oControl?: sap.ui.core.Element): void;
            /**
             * <p>Forwards properties to default tooltips</p>
             * @param {number} iTooltipCount <p>Count of the tooltips</p>
             */
            protected forwardPropertiesToDefaultTooltips(iTooltipCount?: number): void;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Slider/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p><p>Aggregation for user-defined tooltips. <b>Note:</b> In case of Slider, only the first tooltip of the aggregation is used. In the RangeSlider case - the first two. If no custom tooltips are provided, the default are used</p>
             * @returns sap.m.SliderTooltipBase[] 
             */
            getCustomTooltips(): sap.m.SliderTooltipBase[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Slider/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can change the value.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableTickmarks" href="#/api/sap.m.Slider/methods/getEnableTickmarks">enableTickmarks</a>.</p><p>Enables tickmarks visualisation</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableTickmarks</code></p>
             */
            getEnableTickmarks(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInputsAsTooltips" href="#/api/sap.m.Slider/methods/getInputsAsTooltips">inputsAsTooltips</a>.</p><p>Indicates whether input fields should be used as tooltips for the handles. <b>Note:</b> Setting this option to <code>true</code> will only work if <code>showAdvancedTooltip</code> is set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>inputsAsTooltips</code></p>
             */
            getInputsAsTooltips(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMax" href="#/api/sap.m.Slider/methods/getMax">max</a>.</p><p>The maximum value.</p><p>Default value is <code>100</code>.</p>
             * @returns number <p>Value of property <code>max</code></p>
             */
            getMax(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMin" href="#/api/sap.m.Slider/methods/getMin">min</a>.</p><p>The minimum value.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>min</code></p>
             */
            getMin(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Slider/methods/getName">name</a>.</p><p>The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProgress" href="#/api/sap.m.Slider/methods/getProgress">progress</a>.</p><p>Indicate whether a progress bar indicator is shown.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>progress</code></p>
             */
            getProgress(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.Slider/methods/getScale">scale</a>.</p><p>Scale for visualisation of tickmarks and labels</p>
             * @returns sap.m.IScale 
             */
            getScale(): sap.m.IScale;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAdvancedTooltip" href="#/api/sap.m.Slider/methods/getShowAdvancedTooltip">showAdvancedTooltip</a>.</p><p>Indicate whether the handle's advanced tooltip is shown. <b>Note:</b> Setting this option to <code>true</code> will ignore the value set in <code>showHandleTooltip</code>. This will cause only the advanced tooltip to be shown.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showAdvancedTooltip</code></p>
             */
            getShowAdvancedTooltip(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHandleTooltip" href="#/api/sap.m.Slider/methods/getShowHandleTooltip">showHandleTooltip</a>.</p><p>Indicate whether the handle tooltip is shown.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showHandleTooltip</code></p>
             */
            getShowHandleTooltip(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStep" href="#/api/sap.m.Slider/methods/getStep">step</a>.</p><p>Define the amount of units to change the slider when adjusting by drag and drop.</p><p>Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).</p><p>The step must be positive, if a negative number is provided, the default value will be used instead. If the width of the slider converted to pixels is less than the range (max - min), the value will be rounded to multiples of the step size.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>step</code></p>
             */
            getStep(): number;
            /**
             * <p>Gets the tooltips that should be shown. Returns custom tooltips if provided. Otherwise - default tooltips</p>
             * @returns sap.m.SliderTooltipBase[] <p>SliderTooltipBase instances.</p>
             */
            protected getUsedTooltips(): sap.m.SliderTooltipBase[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.Slider/methods/getValue">value</a>.</p><p>Define the value.</p><p>If the value is lower/higher than the allowed minimum/maximum, the value of the properties <code>min</code>/<code>max</code> are used instead.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>value</code></p>
             */
            getValue(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Slider/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Handles change of Tooltip's inputs.</p>
             * @param {any} oEvent 
             */
            protected handleTooltipChange(oEvent: any): void;
            /**
             * <p>Checks for the provided <code>sap.m.SliderTooltipBase</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.SliderTooltipBase} oCustomTooltip <p>The customTooltip whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfCustomTooltip(oCustomTooltip: sap.m.SliderTooltipBase): number;
            /**
             * <p>Assigns tooltips and forwards properties to them</p>
             * @param {any[]} aTooltipIds <p>Array of strings for ID generation</p>
             */
            protected initAndSyncTooltips(aTooltipIds?: any[]): void;
            /**
             * <p>Creates a default SliderTooltip instance and adds it as an aggregation</p>
             * @param {string} sId <p>The tooltip ID</p>
             */
            protected initDefaultTooltip(sId?: string): void;
            /**
             * <p>Creates a SliderTooltipContainer</p>
             */
            protected initTooltipContainer(): void;
            /**
             * <p>Inserts a customTooltip into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p>
             * @param {sap.m.SliderTooltipBase} oCustomTooltip <p>The customTooltip to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the customTooltip should be inserted at; for a negative value of <code>iIndex</code>, the customTooltip is inserted at position 0; for a value greater than the current size of the aggregation, the customTooltip is inserted at the last position</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertCustomTooltip(oCustomTooltip: sap.m.SliderTooltipBase, iIndex: number): sap.m.Slider;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Slider/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.SliderTooltipBase[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllCustomTooltips(): sap.m.SliderTooltipBase[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Slider/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a customTooltip from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTooltips" href="#/api/sap.m.Slider/methods/getCustomTooltips">customTooltips</a>.</p>
             * @param {number | string | sap.m.SliderTooltipBase} vCustomTooltip <p>The customTooltip to remove or its index or id</p>
             * @returns sap.m.SliderTooltipBase <p>The removed customTooltip or <code>null</code></p>
             */
            removeCustomTooltip(vCustomTooltip: number | string | sap.m.SliderTooltipBase): sap.m.SliderTooltipBase;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Slider/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can change the value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableTickmarks" href="#/api/sap.m.Slider/methods/getEnableTickmarks">enableTickmarks</a>.</p><p>Enables tickmarks visualisation</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableTickmarks <p>New value for property <code>enableTickmarks</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableTickmarks(bEnableTickmarks: boolean): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInputsAsTooltips" href="#/api/sap.m.Slider/methods/getInputsAsTooltips">inputsAsTooltips</a>.</p><p>Indicates whether input fields should be used as tooltips for the handles. <b>Note:</b> Setting this option to <code>true</code> will only work if <code>showAdvancedTooltip</code> is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bInputsAsTooltips <p>New value for property <code>inputsAsTooltips</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInputsAsTooltips(bInputsAsTooltips: boolean): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMax" href="#/api/sap.m.Slider/methods/getMax">max</a>.</p><p>The maximum value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100</code>.</p>
             * @param {number} fMax <p>New value for property <code>max</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMax(fMax: number): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMin" href="#/api/sap.m.Slider/methods/getMin">min</a>.</p><p>The minimum value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} fMin <p>New value for property <code>min</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMin(fMin: number): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Slider/methods/getName">name</a>.</p><p>The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProgress" href="#/api/sap.m.Slider/methods/getProgress">progress</a>.</p><p>Indicate whether a progress bar indicator is shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bProgress <p>New value for property <code>progress</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setProgress(bProgress: boolean): sap.m.Slider;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScale" href="#/api/sap.m.Slider/methods/getScale">scale</a>.</p>
             * @param {sap.m.IScale} oScale <p>The scale to set</p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScale(oScale: sap.m.IScale): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAdvancedTooltip" href="#/api/sap.m.Slider/methods/getShowAdvancedTooltip">showAdvancedTooltip</a>.</p><p>Indicate whether the handle's advanced tooltip is shown. <b>Note:</b> Setting this option to <code>true</code> will ignore the value set in <code>showHandleTooltip</code>. This will cause only the advanced tooltip to be shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowAdvancedTooltip <p>New value for property <code>showAdvancedTooltip</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowAdvancedTooltip(bShowAdvancedTooltip: boolean): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowHandleTooltip" href="#/api/sap.m.Slider/methods/getShowHandleTooltip">showHandleTooltip</a>.</p><p>Indicate whether the handle tooltip is shown.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bShowHandleTooltip <p>New value for property <code>showHandleTooltip</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowHandleTooltip(bShowHandleTooltip: boolean): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStep" href="#/api/sap.m.Slider/methods/getStep">step</a>.</p><p>Define the amount of units to change the slider when adjusting by drag and drop.</p><p>Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).</p><p>The step must be positive, if a negative number is provided, the default value will be used instead. If the width of the slider converted to pixels is less than the range (max - min), the value will be rounded to multiples of the step size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} fStep <p>New value for property <code>step</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStep(fStep: number): sap.m.Slider;
            /**
             * <p>Sets the property <code>value</code>.</p><p>Default value is <code>0</code>.</p>
             * @param {number} fNewValue <p>new value for property <code>value</code>.</p>
             * @param {any} mOptions <p>The options object</p>
             * @returns sap.m.Slider <p><code>this</code> to allow method chaining.</p>
             */
            setValue(fNewValue: number, mOptions: any): sap.m.Slider;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Slider/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Slider <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Slider;
            /**
             * <p>Decrements the value by multiplying the step the <code>step</code> with the given parameter.</p>
             * @param {number} iStep <p>The number of steps the slider goes down.</p>
             * @returns sap.m.Slider <p><code>this</code> to allow method chaining.</p>
             */
            stepDown(iStep?: number): sap.m.Slider;
            /**
             * <p>Increments the value by multiplying the <code>step</code> with the given parameter.</p>
             * @param {number} iStep <p>The number of steps the slider goes up.</p>
             * @returns sap.m.Slider <p><code>this</code> to allow method chaining.</p>
             */
            stepUp(iStep?: number): sap.m.Slider;
            /**
             * <p>Updates value of the advanced tooltip.</p>
             * @param {string} sNewValue <p>The new value</p>
             */
            protected updateAdvancedTooltipDom(sNewValue: string): void;
        }
        /**
         * <p>A Control that visualizes <code>Slider</code> and <code>RangeSlider</code> tooltips.</p>
         */
        export abstract class SliderTooltipBase extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new SliderTooltipBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/constructor">sap.ui.core.Control</a> can be used.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Called once the value of the Slider is changed by interaction.</p>
             * @param {number} fValue <p>The new Slider value</p>
             */
            protected sliderValueChanged(fValue?: number): void;
        }
        /**
         * <p>The control that displays multiple GenericTile controls as changing slides.</p>
         */
        export class SlideTile extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.SlideTile control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some tile to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p>
             * @param {sap.m.GenericTile} oTile <p>The tile to add; if empty, nothing is inserted</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addTile(oTile: sap.m.GenericTile): sap.m.SlideTile;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SlideTile/events/press">press</a> event of this <code>sap.m.SlideTile</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SlideTile</code> itself.</p><p>The event is fired when the user chooses the tile. The event is available only in Actions scope.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SlideTile</code> itself</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SlideTile;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindTiles(oBindingInfo: any): sap.m.SlideTile;
            /**
             * <p>Destroys all the tiles in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyTiles(): sap.m.SlideTile;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SlideTile/events/press">press</a> event of this <code>sap.m.SlideTile</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.SlideTile;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SlideTile/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.SlideTile;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayTime" href="#/api/sap.m.SlideTile/methods/getDisplayTime">displayTime</a>.</p><p>The time of the slide display in milliseconds.</p><p>Default value is <code>5000</code>.</p>
             * @returns number <p>Value of property <code>displayTime</code></p>
             */
            getDisplayTime(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScope" href="#/api/sap.m.SlideTile/methods/getScope">scope</a>.</p><p>Changes the visualization in order to enable additional actions with the SlideTile control.</p><p>Default value is <code>Display</code>.</p>
             * @returns sap.m.GenericTileScope <p>Value of property <code>scope</code></p>
             */
            getScope(): sap.m.GenericTileScope;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSizeBehavior" href="#/api/sap.m.SlideTile/methods/getSizeBehavior">sizeBehavior</a>.</p><p>If set to <code>TileSizeBehavior.Small</code>, the tile size is the same as it would be on a small-screened phone (374px wide and lower), regardless of the screen size of the actual device being used. If set to <code>TileSizeBehavior.Responsive</code>, the tile size adapts to the size of the screen. This property has to be set consistently for the <code>SlideTile</code> along with all its inner <code>GenericTile</code> elements, so that they match one another visually.</p><p>Default value is <code>Responsive</code>.</p>
             * @returns sap.m.TileSizeBehavior <p>Value of property <code>sizeBehavior</code></p>
             */
            getSizeBehavior(): sap.m.TileSizeBehavior;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p><p>The set of Generic Tiles to be shown in the control.</p>
             * @returns sap.m.GenericTile[] 
             */
            getTiles(): sap.m.GenericTile[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTransitionTime" href="#/api/sap.m.SlideTile/methods/getTransitionTime">transitionTime</a>.</p><p>The time of the slide changing in milliseconds.</p><p>Default value is <code>500</code>.</p>
             * @returns number <p>Value of property <code>transitionTime</code></p>
             */
            getTransitionTime(): number;
            /**
             * <p>Checks for the provided <code>sap.m.GenericTile</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.GenericTile} oTile <p>The tile whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfTile(oTile: sap.m.GenericTile): number;
            /**
             * <p>Inserts a tile into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p>
             * @param {sap.m.GenericTile} oTile <p>The tile to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the tile should be inserted at; for a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value greater than the current size of the aggregation, the tile is inserted at the last position</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertTile(oTile: sap.m.GenericTile, iIndex: number): sap.m.SlideTile;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.GenericTile[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTiles(): sap.m.GenericTile[];
            /**
             * <p>Removes a tile from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a>.</p>
             * @param {number | string | sap.m.GenericTile} vTile <p>The tile to remove or its index or id</p>
             * @returns sap.m.GenericTile <p>The removed tile or <code>null</code></p>
             */
            removeTile(vTile: number | string | sap.m.GenericTile): sap.m.GenericTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayTime" href="#/api/sap.m.SlideTile/methods/getDisplayTime">displayTime</a>.</p><p>The time of the slide display in milliseconds.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>5000</code>.</p>
             * @param {number} iDisplayTime <p>New value for property <code>displayTime</code></p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayTime(iDisplayTime: number): sap.m.SlideTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScope" href="#/api/sap.m.SlideTile/methods/getScope">scope</a>.</p><p>Changes the visualization in order to enable additional actions with the SlideTile control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Display</code>.</p>
             * @param {sap.m.GenericTileScope} sScope <p>New value for property <code>scope</code></p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setScope(sScope: sap.m.GenericTileScope): sap.m.SlideTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSizeBehavior" href="#/api/sap.m.SlideTile/methods/getSizeBehavior">sizeBehavior</a>.</p><p>If set to <code>TileSizeBehavior.Small</code>, the tile size is the same as it would be on a small-screened phone (374px wide and lower), regardless of the screen size of the actual device being used. If set to <code>TileSizeBehavior.Responsive</code>, the tile size adapts to the size of the screen. This property has to be set consistently for the <code>SlideTile</code> along with all its inner <code>GenericTile</code> elements, so that they match one another visually.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Responsive</code>.</p>
             * @param {sap.m.TileSizeBehavior} sSizeBehavior <p>New value for property <code>sizeBehavior</code></p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSizeBehavior(sSizeBehavior: sap.m.TileSizeBehavior): sap.m.SlideTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTransitionTime" href="#/api/sap.m.SlideTile/methods/getTransitionTime">transitionTime</a>.</p><p>The time of the slide changing in milliseconds.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>500</code>.</p>
             * @param {number} iTransitionTime <p>New value for property <code>transitionTime</code></p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTransitionTime(iTransitionTime: number): sap.m.SlideTile;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.SlideTile/methods/getTiles">tiles</a> from model data.</p>
             * @returns sap.m.SlideTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindTiles(): sap.m.SlideTile;
        }
        /**
         * <p>SplitApp is another possible root element of an SAPUI5 mobile application besides <a target="_self" class="jsdoclink" href="#/api/sap.m.App">sap.m.App</a>. It contains two NavContainers if running on tablet or desktop, and one on phone. The display of master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitApp. </p><h3>Structure</h3><p> The SplitApp divides the screen into two areas: <ul> <li>Master area - contains a list of available items where the user can search and filter.</li> <li>Details area - contains a control which shows further details on the item(s) selected from the master view.</li> </ul> Both areas have separate headers and footer bars with navigation and actions. </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>You need to review and process different items quickly with minimal navigation.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>You need to offer complex filters for the list of items.</li> <li>You need to see different attributes for each item in the list, and compare these values across items.</li> <li>You want to display a single object. Do not use the master list to display different facets of the same object.</li> </ul> </p><h3>Responsive Behavior</h3><p> On narrow screens for phones (or tablet devices in portrait mode), the master list and the details are split into two separate pages.</p><p>The user can navigate between the list and details, and see all the available information for each area.</p>
         */
        export class SplitApp extends sap.m.SplitContainer {
            /**
             * <p>Constructor for a new SplitApp.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control A container control that is used to display a master-detail view in an application.</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="orientationChange" href="#/api/sap.m.SplitApp/events/orientationChange">orientationChange</a> event of this <code>sap.m.SplitApp</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitApp</code> itself.</p><p>Fires when orientation (portrait/landscape) is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code> itself</p>
             * @returns sap.m.SplitApp <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachOrientationChange(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitApp;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="orientationChange" href="#/api/sap.m.SplitApp/events/orientationChange">orientationChange</a> event of this <code>sap.m.SplitApp</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitApp <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachOrientationChange(fnFunction: Function, oListener?: any): sap.m.SplitApp;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="orientationChange" href="#/api/sap.m.SplitApp/events/orientationChange">orientationChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitApp <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireOrientationChange(mParameters?: any): sap.m.SplitApp;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.SplitApp/methods/getHomeIcon">homeIcon</a>.</p><p>Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen". Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored. The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes. Note that if single icon is used for all devices, when scaled, its quality can regress. A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.</p><p>One example is:</p><p>app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png', 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });</p><p>The image size is 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one of the sizes is not given, the largest given icon will be used for this size.</p><p>On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.</p>
             * @returns any <p>Value of property <code>homeIcon</code></p>
             */
            getHomeIcon(): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHomeIcon" href="#/api/sap.m.SplitApp/methods/getHomeIcon">homeIcon</a>.</p><p>Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen". Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored. The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes. Note that if single icon is used for all devices, when scaled, its quality can regress. A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.</p><p>One example is:</p><p>app.setHomeIcon({ 'phone':'phone-icon.png', 'phone@2':'phone-retina.png', 'tablet':'tablet-icon.png', 'tablet@2':'tablet-retina.png', 'icon':'desktop.ico' });</p><p>The image size is 57/114 px for the phone and 72/144 px for the tablet. If an object is given but one of the sizes is not given, the largest given icon will be used for this size.</p><p>On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oHomeIcon <p>New value for property <code>homeIcon</code></p>
             * @returns sap.m.SplitApp <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHomeIcon(oHomeIcon: any): sap.m.SplitApp;
        }
        /**
         * <p><p>The mode of SplitContainer or SplitApp control to show/hide the master area.</p></p>
         */
        export enum SplitAppMode {
            /**
             * <p>Master area is hidden initially both in portrait and landscape.</p><p>Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.</p>
             */
            HideMode = "HideMode",
            /**
             * <p>Master will be shown inside a Popover when in portrait mode</p>
             */
            PopoverMode = "PopoverMode",
            /**
             * <p>Master will automatically be hidden in portrait mode.</p>
             */
            ShowHideMode = "ShowHideMode",
            /**
             * <p>Master will always be shown but in a compressed version when in portrait mode.</p>
             */
            StretchCompressMode = "StretchCompressMode",
        }
        /**
         * <p>Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.</p>
         */
        export class SplitButton extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>SplitButton</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SplitButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SplitButton;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SplitButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.SplitButton;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="arrowPress" href="#/api/sap.m.SplitButton/events/arrowPress">arrowPress</a> event of this <code>sap.m.SplitButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitButton</code> itself.</p><p>Fired when the arrow button is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitButton</code> itself</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachArrowPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitButton;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SplitButton/events/press">press</a> event of this <code>sap.m.SplitButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitButton</code> itself.</p><p>Fired when the user clicks on the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitButton</code> itself</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="arrowPress" href="#/api/sap.m.SplitButton/events/arrowPress">arrowPress</a> event of this <code>sap.m.SplitButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachArrowPress(fnFunction: Function, oListener?: any): sap.m.SplitButton;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SplitButton/events/press">press</a> event of this <code>sap.m.SplitButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.SplitButton;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="arrowPress" href="#/api/sap.m.SplitButton/events/arrowPress">arrowPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireArrowPress(mParameters?: any): sap.m.SplitButton;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.SplitButton/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.SplitButton;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.SplitButton/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (pressed) state of the button. Both active and default icon properties should be defined and of the same type - image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SplitButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SplitButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SplitButton/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is <code>true</code>). <b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SplitButton/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.SplitButton/methods/getIconDensityAware">iconDensityAware</a>.</p><p>When set to <code>true</code (default), one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server. If only one version of image is provided, set this value to <code>false</code> to avoid the attempt of fetching density perfect image.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.SplitButton/methods/getText">text</a>.</p><p>Define the text of the button.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.SplitButton/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.SplitButton/methods/getType">type</a>.</p><p>Defines the type of the button (for example, Default, Accept, Reject, Transparent). Values <code>Back</code>, <code>Up</code> and <code>Unstyled</code> are ignored.</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.m.ButtonType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.ButtonType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SplitButton/methods/getWidth">width</a>.</p><p>Defines the width of the button.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SplitButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SplitButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.SplitButton/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.SplitButton/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.SplitButton/methods/getActiveIcon">activeIcon</a>.</p><p>The source property of an alternative icon for the active (pressed) state of the button. Both active and default icon properties should be defined and of the same type - image or icon font. If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.SplitButton;
            /**
             * <p>Sets the arrow state to down or not down.</p>
             * @param {boolean} bIsDown <p>Is the arrow down</p>
             */
            setArrowState(bIsDown: boolean): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.SplitButton/methods/getEnabled">enabled</a>.</p><p>Boolean property to enable the control (default is <code>true</code>). <b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SplitButton/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.SplitButton/methods/getIconDensityAware">iconDensityAware</a>.</p><p>When set to <code>true</code (default), one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server. If only one version of image is provided, set this value to <code>false</code> to avoid the attempt of fetching density perfect image.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.SplitButton/methods/getText">text</a>.</p><p>Define the text of the button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.SplitButton/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.SplitButton/methods/getType">type</a>.</p><p>Defines the type of the button (for example, Default, Accept, Reject, Transparent). Values <code>Back</code>, <code>Up</code> and <code>Unstyled</code> are ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.m.ButtonType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.ButtonType): sap.m.SplitButton;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.SplitButton/methods/getWidth">width</a>.</p><p>Defines the width of the button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.SplitButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.SplitButton;
        }
        /**
         * <p>SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone. The display of the master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitContainer.</p><p>NOTE: This control must be rendered as a full screen control in order to make the show/hide master area work properly.</p>
         */
        export class SplitContainer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new SplitContainer.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some detailPage to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p>
             * @param {sap.ui.core.Control} oDetailPage <p>The detailPage to add; if empty, nothing is inserted</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addDetailPage(oDetailPage: sap.ui.core.Control): sap.m.SplitContainer;
            /**
             * <p>Adds some masterPage to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p>
             * @param {sap.ui.core.Control} oMasterPage <p>The masterPage to add; if empty, nothing is inserted</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addMasterPage(oMasterPage: sap.ui.core.Control): sap.m.SplitContainer;
            /**
             * <p>Adds a content entity either to master area or detail area depending on the master parameter.</p><p>The method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.</p>
             * @param {sap.ui.core.Control} oPage <p>The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.</p>
             * @param {boolean} bMaster <p>States if the page should be added to the master area. If it's set to false, the page is added to detail area.</p>
             * @returns sap.m.SplitContainer 
             */
            addPage(oPage: sap.ui.core.Control, bMaster: boolean): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterDetailNavigate" href="#/api/sap.m.SplitContainer/events/afterDetailNavigate">afterDetailNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when navigation between two pages in detail area has completed. NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterDetailNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterClose" href="#/api/sap.m.SplitContainer/events/afterMasterClose">afterMasterClose</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when the master area is fully closed after the animation (if any).</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterMasterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterNavigate" href="#/api/sap.m.SplitContainer/events/afterMasterNavigate">afterMasterNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when navigation between two pages in master area has completed. NOTE: In case of animated transitions this event is fired with some delay after the navigate event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterMasterNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterOpen" href="#/api/sap.m.SplitContainer/events/afterMasterOpen">afterMasterOpen</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when the master area is fully opened after animation if any.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAfterMasterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterClose" href="#/api/sap.m.SplitContainer/events/beforeMasterClose">beforeMasterClose</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires before the master area is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeMasterClose(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterOpen" href="#/api/sap.m.SplitContainer/events/beforeMasterOpen">beforeMasterOpen</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires before the master area is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeMasterOpen(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailNavigate" href="#/api/sap.m.SplitContainer/events/detailNavigate">detailNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet. NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDetailNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterButton" href="#/api/sap.m.SplitContainer/events/masterButton">masterButton</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachMasterButton(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterNavigate" href="#/api/sap.m.SplitContainer/events/masterNavigate">masterNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.</p><p>Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet. This event can be aborted by the application with preventDefault(), which means that there will be no navigation.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachMasterNavigate(oData: any, fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Navigates back to the previous detail page found in the history.</p>
             * @param {any} oBackData <p>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property. (The original data from the to() navigation will still be available as data property.)</p><p>In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameter <p>This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.SplitContainer 
             */
            backDetail(oBackData: any, oTransitionParameter: any): sap.m.SplitContainer;
            /**
             * <p>Navigates back to the previous master page which is found in the history.</p>
             * @param {any} oBackData <p>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).</p><p>In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameter <p>This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.SplitContainer 
             */
            backMaster(oBackData: any, oTransitionParameter: any): sap.m.SplitContainer;
            /**
             * <p>Navigates back to the nearest previous page in the SplitContainer history with the given ID (if there is no such page among the previous pages, nothing happens). The transition effect, which had been used to get to the current page is inverted and used for this navigation.</p><p>Calling this navigation method, first triggers the (cancelable) navigate event on the SplitContainer, then the beforeHide pseudo event on the source page, beforeFirstShow (if applicable), and beforeShow on the target page. Later, after the transition has completed, the afterShow pseudo event is triggered on the target page and afterHide - on the page, which has been left. The given backData object is available in the beforeFirstShow, beforeShow, and afterShow event objects as data property. The original "data" object from the "to" navigation is also available in these event objects.</p>
             * @param {string} sPageId <p>The screen to which is being navigated to. The ID or the control itself can be given.</p>
             * @param {any} oBackData <p>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property. (the original data from the to() navigation will still be available as data property).</p><p>In scenarios, where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.m.SplitContainer 
             */
            backToPage(sPageId: string, oBackData: any, oTransitionParameters: any): sap.m.SplitContainer;
            /**
             * <p>Navigates back to the initial/top level of Detail (this is the element aggregated as initialPage, or the first added element). NOTE: If already on the initial page, nothing happens. The transition effect which had been used to get to the current page is inverted and used for this navigation.</p>
             * @param {any} oBackData <p>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).</p><p>In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameter <p>This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.ui.core.Control 
             */
            backToTopDetail(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;
            /**
             * <p>Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element). NOTE: If already on the initial page, nothing happens. The transition effect which had been used to get to the current page is inverted and used for this navigation.</p>
             * @param {any} oBackData <p>This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)</p><p>In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data. For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.</p><p>When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameter <p>This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration. The animation type can NOT be selected here - it is always the inverse of the "to" navigation.</p><p>In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.</p>
             * @returns sap.ui.core.Control 
             */
            backToTopMaster(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;
            /**
             * <p>Destroys all the detailPages in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyDetailPages(): sap.m.SplitContainer;
            /**
             * <p>Destroys all the masterPages in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyMasterPages(): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterDetailNavigate" href="#/api/sap.m.SplitContainer/events/afterDetailNavigate">afterDetailNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterDetailNavigate(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterClose" href="#/api/sap.m.SplitContainer/events/afterMasterClose">afterMasterClose</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterMasterClose(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterNavigate" href="#/api/sap.m.SplitContainer/events/afterMasterNavigate">afterMasterNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterMasterNavigate(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterOpen" href="#/api/sap.m.SplitContainer/events/afterMasterOpen">afterMasterOpen</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAfterMasterOpen(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterClose" href="#/api/sap.m.SplitContainer/events/beforeMasterClose">beforeMasterClose</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeMasterClose(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterOpen" href="#/api/sap.m.SplitContainer/events/beforeMasterOpen">beforeMasterOpen</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeMasterOpen(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailNavigate" href="#/api/sap.m.SplitContainer/events/detailNavigate">detailNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDetailNavigate(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterButton" href="#/api/sap.m.SplitContainer/events/masterButton">masterButton</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachMasterButton(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterNavigate" href="#/api/sap.m.SplitContainer/events/masterNavigate">masterNavigate</a> event of this <code>sap.m.SplitContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachMasterNavigate(fnFunction: Function, oListener?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterDetailNavigate" href="#/api/sap.m.SplitContainer/events/afterDetailNavigate">afterDetailNavigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterDetailNavigate(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterClose" href="#/api/sap.m.SplitContainer/events/afterMasterClose">afterMasterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterMasterClose(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterNavigate" href="#/api/sap.m.SplitContainer/events/afterMasterNavigate">afterMasterNavigate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterMasterNavigate(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterMasterOpen" href="#/api/sap.m.SplitContainer/events/afterMasterOpen">afterMasterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAfterMasterOpen(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterClose" href="#/api/sap.m.SplitContainer/events/beforeMasterClose">beforeMasterClose</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeMasterClose(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeMasterOpen" href="#/api/sap.m.SplitContainer/events/beforeMasterOpen">beforeMasterOpen</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeMasterOpen(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="detailNavigate" href="#/api/sap.m.SplitContainer/events/detailNavigate">detailNavigate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireDetailNavigate(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterButton" href="#/api/sap.m.SplitContainer/events/masterButton">masterButton</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireMasterButton(mParameters?: any): sap.m.SplitContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="masterNavigate" href="#/api/sap.m.SplitContainer/events/masterNavigate">masterNavigate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireMasterNavigate(mParameters?: any): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.SplitContainer/methods/getBackgroundColor">backgroundColor</a>.</p><p>Determines the background color of the SplitContainer. If set, this color overrides the default one, which is defined by the theme (should only be used when really required). Any configured background image will be placed above this colored background, but any theme adaptation in the Theme Designer will override this setting. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</p>
             * @returns string <p>Value of property <code>backgroundColor</code></p>
             */
            getBackgroundColor(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.SplitContainer/methods/getBackgroundImage">backgroundImage</a>.</p><p>Sets the background image of the SplitContainer. When set, this image overrides the default background defined by the theme (should only be used when really required). This background image will be placed above any color set for the background, but any theme adaptation in the Theme Designer will override this image setting. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>backgroundImage</code></p>
             */
            getBackgroundImage(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.SplitContainer/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque). This can be used to improve the content visibility by making the background image partly transparent.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>backgroundOpacity</code></p>
             */
            getBackgroundOpacity(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.SplitContainer/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Defines whether the background image (if configured) is proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>backgroundRepeat</code></p>
             */
            getBackgroundRepeat(): boolean;
            /**
             * <p>Returns the current displayed detail page.</p>
             * @returns sap.ui.core.Control 
             */
            getCurrentDetailPage(): sap.ui.core.Control;
            /**
             * <p>Returns the current displayed master page.</p>
             * @returns sap.ui.core.Control 
             */
            getCurrentMasterPage(): sap.ui.core.Control;
            /**
             * <p>Returns the currently displayed page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned, otherwise, the current page in detail area is returned.</p><p>This method is provided mainly for API consistency between sap.m.SplitContainer and sap.m.App, so that the same code line can be reused.</p>
             * @param {boolean} bMaster <p>States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.</p>
             * @returns sap.ui.core.Control 
             */
            getCurrentPage(bMaster: boolean): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionNameDetail" href="#/api/sap.m.SplitContainer/methods/getDefaultTransitionNameDetail">defaultTransitionNameDetail</a>.</p><p>Determines the type of the transition/animation to apply when to() is called without defining the transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</p><p>Default value is <code>slide</code>.</p>
             * @returns string <p>Value of property <code>defaultTransitionNameDetail</code></p>
             */
            getDefaultTransitionNameDetail(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionNameMaster" href="#/api/sap.m.SplitContainer/methods/getDefaultTransitionNameMaster">defaultTransitionNameMaster</a>.</p><p>Determines the type of the transition/animation to apply when to() is called, without defining the transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</p><p>Default value is <code>slide</code>.</p>
             * @returns string <p>Value of property <code>defaultTransitionNameMaster</code></p>
             */
            getDefaultTransitionNameMaster(): string;
            /**
             * <p>Returns the page with the given ID in detail area. If there's no page that has the given ID, null is returned.</p>
             * @param {string} sId <p>The ID of the page that needs to be fetched.</p>
             * @returns sap.ui.core.Control 
             */
            getDetailPage(sId: string): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p><p>Determines the content entities, between which the SplitContainer navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics. These aggregated controls receive navigation events like <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild/events/beforeShow">beforeShow</a>, they are documented in the pseudo interface <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild">sap.m.NavContainerChild</a>.</p>
             * @returns sap.ui.core.Control[] 
             */
            getDetailPages(): sap.ui.core.Control[];
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialDetail" href="#/api/sap.m.SplitContainer/methods/getInitialDetail">initialDetail</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialDetail(): sap.ui.core.ID;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialMaster" href="#/api/sap.m.SplitContainer/methods/getInitialMaster">initialMaster</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getInitialMaster(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterButtonText" href="#/api/sap.m.SplitContainer/methods/getMasterButtonText">masterButtonText</a>.</p><p>Determines the text displayed in master button, which has a default value "Navigation". This text is only displayed in iOS platform and the icon from the current page in detail area is displayed in the master button for the other platforms. The master button is shown/hidden depending on the orientation of the device and whether the master area is opened or not. SplitContainer manages the show/hide of the master button by itself only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page with built-in header, which is wrapped by one or several sap.ui.core.mvc.View. Otherwise, the show/hide of master button needs to be managed by the application.</p>
             * @returns string <p>Value of property <code>masterButtonText</code></p>
             */
            getMasterButtonText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterButtonTooltip" href="#/api/sap.m.SplitContainer/methods/getMasterButtonTooltip">masterButtonTooltip</a>.</p><p>Specifies the tooltip of the master button. If the tooltip is not specified, the title of the page, which is displayed is the master part, is set as tooltip to the master button.</p>
             * @returns string <p>Value of property <code>masterButtonTooltip</code></p>
             */
            getMasterButtonTooltip(): string;
            /**
             * <p>Returns the page with the given ID in master area (if there's no page that has the given ID, null is returned).</p>
             * @param {string} sId <p>The ID of the page that needs to be fetched</p>
             * @returns sap.ui.core.Control 
             */
            getMasterPage(sId: string): sap.ui.core.Control;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p><p>Determines the content entities, between which the SplitContainer navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics. These aggregated controls receive navigation events like <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild/events/beforeShow">beforeShow</a>, they are documented in the pseudo interface <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainerChild">sap.m.NavContainerChild</a>.</p>
             * @returns sap.ui.core.Control[] 
             */
            getMasterPages(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.SplitContainer/methods/getMode">mode</a>.</p><p>Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode), or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode. Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).</p><p>Default value is <code>ShowHideMode</code>.</p>
             * @returns sap.m.SplitAppMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.SplitAppMode;
            /**
             * <p>Returns the page with the given ID from either master area, or detail area depending on the master parameter (if there's no page that has the given ID, null is returned).</p>
             * @param {string} sId <p>The ID of the page that needs to be fetched</p>
             * @param {boolean} bMaster <p>If the page with given ID should be fetched from the master area. If it's set to false, the page will be fetched from detail area.</p>
             * @returns sap.ui.core.Control 
             */
            getPage(sId: string, bMaster: boolean): sap.ui.core.Control;
            /**
             * <p>Returns the previous page (the page, from which the user drilled down to the current page with to()). Note: this is not the page, which the user has seen before, but the page which is the target of the next back() navigation. If there is no previous page, "undefined" is returned.</p>
             * @param {boolean} bMaster <p>States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.</p>
             * @returns sap.ui.core.Control 
             */
            getPreviousPage(bMaster: boolean): sap.ui.core.Control;
            /**
             * <p>Used to hide the master page when in ShowHideMode and the device is in portrait mode.</p>
             * @returns sap.m.SplitContainer 
             */
            hideMaster(): sap.m.SplitContainer;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oDetailPage <p>The detailPage whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfDetailPage(oDetailPage: sap.ui.core.Control): number;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oMasterPage <p>The masterPage whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfMasterPage(oMasterPage: sap.ui.core.Control): number;
            /**
             * <p>Inserts a detailPage into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p>
             * @param {sap.ui.core.Control} oDetailPage <p>The detailPage to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the detailPage should be inserted at; for a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value greater than the current size of the aggregation, the detailPage is inserted at the last position</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertDetailPage(oDetailPage: sap.ui.core.Control, iIndex: number): sap.m.SplitContainer;
            /**
             * <p>Inserts a masterPage into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p>
             * @param {sap.ui.core.Control} oMasterPage <p>The masterPage to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the masterPage should be inserted at; for a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value greater than the current size of the aggregation, the masterPage is inserted at the last position</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertMasterPage(oMasterPage: sap.ui.core.Control, iIndex: number): sap.m.SplitContainer;
            /**
             * <p>Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.</p><p>This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally, such a back navigation would not be possible as there is no previous page in the SplitContainer's history stack.</p>
             * @param {string} sPageId <p>The ID of the control/page/screen, which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.</p>
             * @param {string} sTransitionName <p>The type of the transition/animation, which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).</p>
             * @param {any} oData <p>This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.</p>
             * @returns sap.m.SplitContainer 
             */
            insertPreviousPage(sPageId: string, sTransitionName: string, oData: any): sap.m.SplitContainer;
            /**
             * <p>Returns whether master area is currently displayed on the screen. In desktop browser or tablet, this method returns true when master area is displayed on the screen, regardless if in portrait or landscape mode. On mobile phone devices, this method returns true when the currently displayed page is from the pages, which are added to the master area, otherwise, it returns false.</p>
             * @returns boolean 
             */
            isMasterShown(): boolean;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllDetailPages(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllMasterPages(): sap.ui.core.Control[];
            /**
             * <p>Removes a detailPage from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDetailPages" href="#/api/sap.m.SplitContainer/methods/getDetailPages">detailPages</a>.</p>
             * @param {number | string | sap.ui.core.Control} vDetailPage <p>The detailPage to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed detailPage or <code>null</code></p>
             */
            removeDetailPage(vDetailPage: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes a masterPage from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterPages" href="#/api/sap.m.SplitContainer/methods/getMasterPages">masterPages</a>.</p>
             * @param {number | string | sap.ui.core.Control} vMasterPage <p>The masterPage to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed masterPage or <code>null</code></p>
             */
            removeMasterPage(vMasterPage: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.m.SplitContainer/methods/getBackgroundColor">backgroundColor</a>.</p><p>Determines the background color of the SplitContainer. If set, this color overrides the default one, which is defined by the theme (should only be used when really required). Any configured background image will be placed above this colored background, but any theme adaptation in the Theme Designer will override this setting. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sBackgroundColor <p>New value for property <code>backgroundColor</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundColor(sBackgroundColor: string): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundImage" href="#/api/sap.m.SplitContainer/methods/getBackgroundImage">backgroundImage</a>.</p><p>Sets the background image of the SplitContainer. When set, this image overrides the default background defined by the theme (should only be used when really required). This background image will be placed above any color set for the background, but any theme adaptation in the Theme Designer will override this image setting. Use the backgroundRepeat property to define whether this image should be stretched to cover the complete SplitContainer or whether it should be tiled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sBackgroundImage <p>New value for property <code>backgroundImage</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundImage(sBackgroundImage: sap.ui.core.URI): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundOpacity" href="#/api/sap.m.SplitContainer/methods/getBackgroundOpacity">backgroundOpacity</a>.</p><p>Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque). This can be used to improve the content visibility by making the background image partly transparent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} fBackgroundOpacity <p>New value for property <code>backgroundOpacity</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundOpacity(fBackgroundOpacity: number): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundRepeat" href="#/api/sap.m.SplitContainer/methods/getBackgroundRepeat">backgroundRepeat</a>.</p><p>Defines whether the background image (if configured) is proportionally stretched to cover the whole SplitContainer (false) or whether it should be tiled (true).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bBackgroundRepeat <p>New value for property <code>backgroundRepeat</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundRepeat(bBackgroundRepeat: boolean): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionNameDetail" href="#/api/sap.m.SplitContainer/methods/getDefaultTransitionNameDetail">defaultTransitionNameDetail</a>.</p><p>Determines the type of the transition/animation to apply when to() is called without defining the transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>slide</code>.</p>
             * @param {string} sDefaultTransitionNameDetail <p>New value for property <code>defaultTransitionNameDetail</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDefaultTransitionNameDetail(sDefaultTransitionNameDetail: string): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDefaultTransitionNameMaster" href="#/api/sap.m.SplitContainer/methods/getDefaultTransitionNameMaster">defaultTransitionNameMaster</a>.</p><p>Determines the type of the transition/animation to apply when to() is called, without defining the transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>slide</code>.</p>
             * @param {string} sDefaultTransitionNameMaster <p>New value for property <code>defaultTransitionNameMaster</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDefaultTransitionNameMaster(sDefaultTransitionNameMaster: string): sap.m.SplitContainer;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialDetail" href="#/api/sap.m.SplitContainer/methods/getInitialDetail">initialDetail</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialDetail <p>ID of an element which becomes the new target of this initialDetail association; alternatively, an element instance may be given</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialDetail(oInitialDetail: sap.ui.core.ID | sap.ui.core.Control): sap.m.SplitContainer;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialMaster" href="#/api/sap.m.SplitContainer/methods/getInitialMaster">initialMaster</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialMaster <p>ID of an element which becomes the new target of this initialMaster association; alternatively, an element instance may be given</p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialMaster(oInitialMaster: sap.ui.core.ID | sap.ui.core.Control): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterButtonText" href="#/api/sap.m.SplitContainer/methods/getMasterButtonText">masterButtonText</a>.</p><p>Determines the text displayed in master button, which has a default value "Navigation". This text is only displayed in iOS platform and the icon from the current page in detail area is displayed in the master button for the other platforms. The master button is shown/hidden depending on the orientation of the device and whether the master area is opened or not. SplitContainer manages the show/hide of the master button by itself only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page with built-in header, which is wrapped by one or several sap.ui.core.mvc.View. Otherwise, the show/hide of master button needs to be managed by the application.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMasterButtonText <p>New value for property <code>masterButtonText</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMasterButtonText(sMasterButtonText: string): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMasterButtonTooltip" href="#/api/sap.m.SplitContainer/methods/getMasterButtonTooltip">masterButtonTooltip</a>.</p><p>Specifies the tooltip of the master button. If the tooltip is not specified, the title of the page, which is displayed is the master part, is set as tooltip to the master button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMasterButtonTooltip <p>New value for property <code>masterButtonTooltip</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMasterButtonTooltip(sMasterButtonTooltip: string): sap.m.SplitContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.SplitContainer/methods/getMode">mode</a>.</p><p>Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode), or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode. Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>ShowHideMode</code>.</p>
             * @param {sap.m.SplitAppMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.SplitContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.SplitAppMode): sap.m.SplitContainer;
            /**
             * <p>Used to make the master page visible when in ShowHideMode and the device is in portrait mode.</p>
             * @returns sap.m.SplitContainer 
             */
            showMaster(): sap.m.SplitContainer;
            /**
             * <p>Navigates to the given page inside the SplitContainer. The navigation is done inside the master area if the page has been added, otherwise, it tries to do the page navigation in the detail area.</p>
             * @param {string} sPageId <p>The screen to which we are navigating to. The ID or the control itself can be given.</p>
             * @param {string} sTransitionName <p>The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right). Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.</p><p>None of the standard transitions is currently making use of any given transition parameters.</p>
             * @param {any} oData <p>This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.</p><p>Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.</p><p>When the transitionParameters object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.</p><p>For a proper parameter order, the "data" parameter must be given when the transitionParameters parameter is used (it can be given as "null").</p><p>NOTE: It depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use any parameter.</p>
             * @returns sap.m.SplitContainer 
             */
            to(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): sap.m.SplitContainer;
            /**
             * <p>Navigates to a given detail page.</p>
             * @param {string} sPageId 
             * @param {string} sTransitionName <p>The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right). Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.</p><p>None of the standard transitions is currently making use of any given transition parameters.</p>
             * @param {any} oData <p>This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.</p><p>Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameter <p>This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.</p><p>For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use any parameter.</p>
             * @returns sap.m.SplitContainer 
             */
            toDetail(sPageId: string, sTransitionName: string, oData: any, oTransitionParameter: any): sap.m.SplitContainer;
            /**
             * <p>Navigates to a given master page.</p>
             * @param {string} sPageId <p>The screen to which drilldown should happen. The ID or the control itself can be given.</p>
             * @param {string} sTransitionName <p>The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right). Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.</p><p>None of the standard transitions is currently making use of any given transition parameters.</p>
             * @param {any} oData <p>Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.</p><p>Use case: in scenarios where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.</p><p>When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.</p>
             * @param {any} oTransitionParameters <p>Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.</p><p>For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").</p><p>NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition. The "show", "slide" and "fade" transitions do not use any parameter.</p>
             * @returns sap.m.SplitContainer 
             */
            toMaster(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): sap.m.SplitContainer;
        }
        /**
         * <p><code>sap.m.StandardListItem</code> is a list item providing the most common use cases, e.g. image, title and description.</p>
         */
        export class StandardListItem extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new StandardListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.StandardListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Defines the icon that is shown while the list item is pressed.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdaptTitleSize" href="#/api/sap.m.StandardListItem/methods/getAdaptTitleSize">adaptTitleSize</a>.</p><p>By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>adaptTitleSize</code></p>
             */
            getAdaptTitleSize(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.StandardListItem/methods/getDescription">description</a>.</p><p>Defines the additional information for the title. <b>Note:</b> This is only visible when the <code>title</code> property is not empty.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.StandardListItem/methods/getIcon">icon</a>.</p><p>Defines the list item icon.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.StandardListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server. <b>Note:</b> If bandwidth is a key factor for the application, set this value to <code>false</code>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconInset" href="#/api/sap.m.StandardListItem/methods/getIconInset">iconInset</a>.</p><p>Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconInset</code></p>
             */
            getIconInset(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.StandardListItem/methods/getInfo">info</a>.</p><p>Defines an additional information text.</p>
             * @returns string <p>Value of property <code>info</code></p>
             */
            getInfo(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoState" href="#/api/sap.m.StandardListItem/methods/getInfoState">infoState</a>.</p><p>Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>infoState</code></p>
             */
            getInfoState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoTextDirection" href="#/api/sap.m.StandardListItem/methods/getInfoTextDirection">infoTextDirection</a>.</p><p>Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>infoTextDirection</code></p>
             */
            getInfoTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardListItem/methods/getTitle">title</a>.</p><p>Defines the title of the list item.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.StandardListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>titleTextDirection</code></p>
             */
            getTitleTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.StandardListItem/methods/getWrapping">wrapping</a>.</p><p>Defines the wrapping behavior of title and description texts.</p><p><b>Note:</b></p><p>In the desktop mode, initial rendering of the control contains 300 characters along with a button to expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.StandardListItem/methods/getActiveIcon">activeIcon</a>.</p><p>Defines the icon that is shown while the list item is pressed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdaptTitleSize" href="#/api/sap.m.StandardListItem/methods/getAdaptTitleSize">adaptTitleSize</a>.</p><p>By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bAdaptTitleSize <p>New value for property <code>adaptTitleSize</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAdaptTitleSize(bAdaptTitleSize: boolean): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.StandardListItem/methods/getDescription">description</a>.</p><p>Defines the additional information for the title. <b>Note:</b> This is only visible when the <code>title</code> property is not empty.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.StandardListItem/methods/getIcon">icon</a>.</p><p>Defines the list item icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.StandardListItem/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server. <b>Note:</b> If bandwidth is a key factor for the application, set this value to <code>false</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconInset" href="#/api/sap.m.StandardListItem/methods/getIconInset">iconInset</a>.</p><p>Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconInset <p>New value for property <code>iconInset</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconInset(bIconInset: boolean): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.StandardListItem/methods/getInfo">info</a>.</p><p>Defines an additional information text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sInfo <p>New value for property <code>info</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfo(sInfo: string): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoState" href="#/api/sap.m.StandardListItem/methods/getInfoState">infoState</a>.</p><p>Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sInfoState <p>New value for property <code>infoState</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoState(sInfoState: sap.ui.core.ValueState): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoTextDirection" href="#/api/sap.m.StandardListItem/methods/getInfoTextDirection">infoTextDirection</a>.</p><p>Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sInfoTextDirection <p>New value for property <code>infoTextDirection</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoTextDirection(sInfoTextDirection: sap.ui.core.TextDirection): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardListItem/methods/getTitle">title</a>.</p><p>Defines the title of the list item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleTextDirection" href="#/api/sap.m.StandardListItem/methods/getTitleTextDirection">titleTextDirection</a>.</p><p>Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTitleTextDirection <p>New value for property <code>titleTextDirection</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): sap.m.StandardListItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.StandardListItem/methods/getWrapping">wrapping</a>.</p><p>Defines the wrapping behavior of title and description texts.</p><p><b>Note:</b></p><p>In the desktop mode, initial rendering of the control contains 300 characters along with a button to expand and collapse the text whereas in the phone mode, the character limit is set to 100 characters.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.StandardListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.StandardListItem;
        }
        /**
         * <p>The StandardTile control is displayed in the tile container.</p>
         */
        export class StandardTile extends sap.m.Tile {
            /**
             * <p>Constructor for a new StandardTile.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StandardTile/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.StandardTile;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.StandardTile/methods/getActiveIcon">activeIcon</a>.</p><p>Defines the active icon of the StandardTile.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>activeIcon</code></p>
             */
            getActiveIcon(): sap.ui.core.URI;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StandardTile/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Gets the icon of the <code>StandardTile</code> control.</p>
             * @returns any <p>The icon of the control</p>
             */
            getIcon(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.StandardTile/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is key for the application, set this value to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>iconDensityAware</code></p>
             */
            getIconDensityAware(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.StandardTile/methods/getInfo">info</a>.</p><p>Defines the description of the StandardTile.</p>
             * @returns string <p>Value of property <code>info</code></p>
             */
            getInfo(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoState" href="#/api/sap.m.StandardTile/methods/getInfoState">infoState</a>.</p><p>Defines the color of the info text. Possible values are Error, Warning, Success and so on.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>infoState</code></p>
             */
            getInfoState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.StandardTile/methods/getNumber">number</a>.</p><p>Defines the number field of the StandardTile.</p>
             * @returns string <p>Value of property <code>number</code></p>
             */
            getNumber(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberUnit" href="#/api/sap.m.StandardTile/methods/getNumberUnit">numberUnit</a>.</p><p>Defines the number units qualifier of the StandardTile.</p>
             * @returns string <p>Value of property <code>numberUnit</code></p>
             */
            getNumberUnit(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardTile/methods/getTitle">title</a>.</p><p>Defines the title of the StandardTile.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.StandardTile/methods/getType">type</a>.</p><p>Defines the type of the StandardTile.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.StandardTileType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.StandardTileType;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StandardTile/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StandardTile/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveIcon" href="#/api/sap.m.StandardTile/methods/getActiveIcon">activeIcon</a>.</p><p>Defines the active icon of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sActiveIcon <p>New value for property <code>activeIcon</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActiveIcon(sActiveIcon: sap.ui.core.URI): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.StandardTile/methods/getIcon">icon</a>.</p><p>Defines the icon of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconDensityAware" href="#/api/sap.m.StandardTile/methods/getIconDensityAware">iconDensityAware</a>.</p><p>By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.</p><p>If bandwidth is key for the application, set this value to false.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bIconDensityAware <p>New value for property <code>iconDensityAware</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconDensityAware(bIconDensityAware: boolean): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfo" href="#/api/sap.m.StandardTile/methods/getInfo">info</a>.</p><p>Defines the description of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sInfo <p>New value for property <code>info</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfo(sInfo: string): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoState" href="#/api/sap.m.StandardTile/methods/getInfoState">infoState</a>.</p><p>Defines the color of the info text. Possible values are Error, Warning, Success and so on.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sInfoState <p>New value for property <code>infoState</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoState(sInfoState: sap.ui.core.ValueState): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumber" href="#/api/sap.m.StandardTile/methods/getNumber">number</a>.</p><p>Defines the number field of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumber <p>New value for property <code>number</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumber(sNumber: string): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberUnit" href="#/api/sap.m.StandardTile/methods/getNumberUnit">numberUnit</a>.</p><p>Defines the number units qualifier of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumberUnit <p>New value for property <code>numberUnit</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberUnit(sNumberUnit: string): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardTile/methods/getTitle">title</a>.</p><p>Defines the title of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.StandardTile;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.StandardTile/methods/getType">type</a>.</p><p>Defines the type of the StandardTile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.StandardTileType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.StandardTile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.StandardTileType): sap.m.StandardTile;
        }
        /**
         * <p><p>Types for StandardTile.</p></p>
         */
        export enum StandardTileType {
            /**
             * <p>Tile representing that something needs to be created</p>
             */
            Create = "Create",
            /**
             * <p>Monitor tile</p>
             */
            Monitor = "Monitor",
            /**
             * <p>Default type</p>
             */
            None = "None",
        }
        /**
         * <p>The <code>sap.m.StandardTreeItem</code> is a tree item providing a title, image, etc.</p>
         */
        export class StandardTreeItem extends sap.m.TreeItemBase {
            /**
             * <p>Constructor for a new StandardTreeItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.StandardTreeItem/methods/getIcon">icon</a>.</p><p>Defines the tree item icon.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardTreeItem/methods/getTitle">title</a>.</p><p>Defines the title of the item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.StandardTreeItem/methods/getIcon">icon</a>.</p><p>Defines the tree item icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.StandardTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.StandardTreeItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.StandardTreeItem/methods/getTitle">title</a>.</p><p>Defines the title of the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.StandardTreeItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.StandardTreeItem;
        }
        /**
         * <p>Allows the user to change the input values with predefined increments (steps).</p><h3>Overview</h3><p>The <code>StepInput</code> consists of an input field and buttons with icons to increase/decrease the value.</p><p>The user can change the value of the control by pressing the increase/decrease buttons, by typing a number directly, by using the keyboard up/down and page up/down, or by using the mouse scroll wheel. Decimal values are supported.</p><h3>Usage</h3><p>The default step is 1 but the app developer can set a different one.</p><p>On desktop, the control supports a larger step, when using the keyboard page up/down keys. You can set a multiple of the step with the use of the <code>largerStep</code> property. The default value is 2 (two times the set step). For example, when using the keyboard page up/down keys the value increases/decreases with a double of the default step. If the set step is 2, the larger step is also 2 and the current value is 1, using the page up key will increase the value to 5 (1 + 2*2).</p><p>App developers can set a maximum and minimum value for the <code>StepInput</code>. The increase/decrease button and the up/down keyboard navigation become disabled when the value reaches the max/min or a new value is entered from the input which is greater/less than the max/min.</p><p><i>When to use</i> <ul> <li>To adjust amounts, quantities, or other values quickly.</li> <li>To adjust values for a specific step.</li> </ul></p><p><i>When not to use</i> <ul> <li>To enter a static number (for example, postal code, phone number, or ID). In this case, use the regular <a target="_self" class="jsdoclink" href="#/api/sap.m.Input">sap.m.Input</a> instead.</li> <li>To display a value that rarely needs to be adjusted and does not pertain to a particular step. In this case, use the regular <a target="_self" class="jsdoclink" href="#/api/sap.m.Input">sap.m.Input</a> instead.</li> <li>To enter dates and times. In this case, use the <a target="_self" class="jsdoclink" href="#/api/sap.m.DatePicker">sap.m.DatePicker</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.DateRangeSelection">sap.m.DateRangeSelection</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a>, or <a target="_self" class="jsdoclink" href="#/api/sap.m.DateTimePicker">sap.m.DateTimePicker</a> instead.</li> </ul></p><p><b>Note:</b> The control uses a JavaScript number to keep its value, which has a certain precision limitation.</p><p>In general, exponential notation is used: <ul> <li>if there are more than 21 digits before the decimal point.</li> <li>if number starts with "0." followed by more than five zeros.</li> </ul></p><p>Exponential notation is not supported by the control and using it may lead to unpredictable behavior.</p><p>Also, the JavaScript number persists its precision up to 16 digits. If the user enters a number with a greater precision, the value will be rounded.</p><p>This limitation comes from JavaScript itself and it cannot be worked around in a feasible way.</p>
         */
        export class StepInput extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>StepInput</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StepInput/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.StepInput;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.StepInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.StepInput;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.StepInput/events/change">change</a> event of this <code>sap.m.StepInput</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.StepInput</code> itself.</p><p>Is fired when one of the following happens: <br> <ol> <li>the text in the input has changed and the focus leaves the input field or the enter key is pressed.</li> <li>One of the decrement or increment buttons is pressed</li> </ol></p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.StepInput</code> itself</p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.StepInput;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.StepInput/events/change">change</a> event of this <code>sap.m.StepInput</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.StepInput;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.StepInput/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.StepInput;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StepInput/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.StepInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.StepInput/methods/getDescription">description</a>.</p><p>Determines the description text after the input field, for example units of measurement, currencies.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValuePrecision" href="#/api/sap.m.StepInput/methods/getDisplayValuePrecision">displayValuePrecision</a>.</p><p>Determines the number of digits after the decimal point.</p><p>The value should be between 0 (default) and 20. In case the value is not valid it will be set to the default value.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>displayValuePrecision</code></p>
             */
            getDisplayValuePrecision(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.StepInput/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the text from it.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.StepInput/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldWidth" href="#/api/sap.m.StepInput/methods/getFieldWidth">fieldWidth</a>.</p><p>Determines the distribution of space between the input field and the description text . Default value is 50% (leaving the other 50% for the description).</p><p><b>Note:</b> This property takes effect only if the <code>description</code> property is also set.</p><p>Default value is <code>50%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>fieldWidth</code></p>
             */
            getFieldWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Returns the DOMNode Id to be used for the "labelFor" attribute of the label.</p><p>By default, this is the Id of the control itself.</p>
             * @returns string <p>Id to be used for the <code>labelFor</code></p>
             */
            getIdForLabel(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLargerStep" href="#/api/sap.m.StepInput/methods/getLargerStep">largerStep</a>.</p><p>Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys. Default value is 2 times larger than the set step.</p><p>Default value is <code>2</code>.</p>
             * @returns number <p>Value of property <code>largerStep</code></p>
             */
            getLargerStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMax" href="#/api/sap.m.StepInput/methods/getMax">max</a>.</p><p>Sets the maximum possible value of the defined range.</p>
             * @returns number <p>Value of property <code>max</code></p>
             */
            getMax(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMin" href="#/api/sap.m.StepInput/methods/getMin">min</a>.</p><p>Sets the minimum possible value of the defined range.</p>
             * @returns number <p>Value of property <code>min</code></p>
             */
            getMin(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.StepInput/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.StepInput/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p>
             * @returns string <p>Value of property <code>placeholder</code></p>
             */
            getPlaceholder(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.StepInput/methods/getRequired">required</a>.</p><p>Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established (e.g. one label should label multiple fields).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>required</code></p>
             */
            getRequired(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStep" href="#/api/sap.m.StepInput/methods/getStep">step</a>.</p><p>Increases/decreases the value of the input. <ul><b>Note:</b> <li>The value of the <code>step</code> property should not contain more digits after the decimal point than what is set to the <code>displayValuePrecision</code> property, as it may lead to an increase/decrease that is not visible for the user. For example, if the <code>value</code> is set to 1.22 and the <code>displayValuePrecision</code> is set to one digit after the decimal, the user will see 1.2. In this case, if the <code>value</code> of the <code>step</code> property is set to 1.005 and the user selects <code>increase</code>, the resulting value will increase to 1.2261 but the displayed value will remain as 1.2 as it will be rounded to the first digit after the decimal point.</li> <li>Depending on what is set for the <code>value</code> and the <code>displayValuePrecision</code> properties, it is possible the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.</li></ul></p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>step</code></p>
             */
            getStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStepMode" href="#/api/sap.m.StepInput/methods/getStepMode">stepMode</a>.</p><p>Defines the calculation mode for the provided <code>step</code> and <code>largerStep</code>.</p><p>If the user increases/decreases the value by <code>largerStep</code>, this calculation will consider it as well. For example, if the current <code>value</code> is 3, <code>step</code> is 5, <code>largerStep</code> is 5 and the user chooses PageUp, the calculation logic will consider the value of 3x5=15 to decide what will be the next <code>value</code>.</p><p>Default value is <code>AdditionAndSubtraction</code>.</p>
             * @returns sap.m.StepInputStepModeType <p>Value of property <code>stepMode</code></p>
             */
            getStepMode(): sap.m.StepInputStepModeType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.StepInput/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is displayed inside the input field.</p><p>Default value is <code>End</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationMode" href="#/api/sap.m.StepInput/methods/getValidationMode">validationMode</a>.</p><p>Defines when the validation of the typed value will happen. By default this happens on focus out.</p><p>Default value is <code>FocusOut</code>.</p>
             * @returns sap.m.StepInputValidationMode <p>Value of property <code>validationMode</code></p>
             */
            getValidationMode(): sap.m.StepInputValidationMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.StepInput/methods/getValue">value</a>.</p><p>Determines the value of the <code>StepInput</code> and can be set initially from the app developer.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>value</code></p>
             */
            getValue(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.StepInput/methods/getValueState">valueState</a>.</p><p>Accepts the core enumeration ValueState.type that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and <code>Success</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.ValueState <p>Value of property <code>valueState</code></p>
             */
            getValueState(): sap.ui.core.ValueState;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.StepInput/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up.</p>
             * @returns string <p>Value of property <code>valueStateText</code></p>
             */
            getValueStateText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.StepInput/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StepInput/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.StepInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.StepInput/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.StepInput/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.StepInput/methods/getDescription">description</a>.</p><p>Determines the description text after the input field, for example units of measurement, currencies.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayValuePrecision" href="#/api/sap.m.StepInput/methods/getDisplayValuePrecision">displayValuePrecision</a>.</p><p>Determines the number of digits after the decimal point.</p><p>The value should be between 0 (default) and 20. In case the value is not valid it will be set to the default value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iDisplayValuePrecision <p>New value for property <code>displayValuePrecision</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisplayValuePrecision(iDisplayValuePrecision: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.StepInput/methods/getEditable">editable</a>.</p><p>Defines whether the control can be modified by the user or not. <b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the text from it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.StepInput/methods/getEnabled">enabled</a>.</p><p>Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldWidth" href="#/api/sap.m.StepInput/methods/getFieldWidth">fieldWidth</a>.</p><p>Determines the distribution of space between the input field and the description text . Default value is 50% (leaving the other 50% for the description).</p><p><b>Note:</b> This property takes effect only if the <code>description</code> property is also set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>50%</code>.</p>
             * @param {sap.ui.core.CSSSize} sFieldWidth <p>New value for property <code>fieldWidth</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFieldWidth(sFieldWidth: sap.ui.core.CSSSize): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLargerStep" href="#/api/sap.m.StepInput/methods/getLargerStep">largerStep</a>.</p><p>Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys. Default value is 2 times larger than the set step.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>2</code>.</p>
             * @param {number} fLargerStep <p>New value for property <code>largerStep</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLargerStep(fLargerStep: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMax" href="#/api/sap.m.StepInput/methods/getMax">max</a>.</p><p>Sets the maximum possible value of the defined range.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} fMax <p>New value for property <code>max</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMax(fMax: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMin" href="#/api/sap.m.StepInput/methods/getMin">min</a>.</p><p>Sets the minimum possible value of the defined range.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} fMin <p>New value for property <code>min</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMin(fMin: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.StepInput/methods/getName">name</a>.</p><p>Defines the name of the control for the purposes of form submission.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholder" href="#/api/sap.m.StepInput/methods/getPlaceholder">placeholder</a>.</p><p>Defines a short hint intended to aid the user with data entry when the control has no value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sPlaceholder <p>New value for property <code>placeholder</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholder(sPlaceholder: string): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRequired" href="#/api/sap.m.StepInput/methods/getRequired">required</a>.</p><p>Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established (e.g. one label should label multiple fields).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRequired <p>New value for property <code>required</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRequired(bRequired: boolean): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStep" href="#/api/sap.m.StepInput/methods/getStep">step</a>.</p><p>Increases/decreases the value of the input. <ul><b>Note:</b> <li>The value of the <code>step</code> property should not contain more digits after the decimal point than what is set to the <code>displayValuePrecision</code> property, as it may lead to an increase/decrease that is not visible for the user. For example, if the <code>value</code> is set to 1.22 and the <code>displayValuePrecision</code> is set to one digit after the decimal, the user will see 1.2. In this case, if the <code>value</code> of the <code>step</code> property is set to 1.005 and the user selects <code>increase</code>, the resulting value will increase to 1.2261 but the displayed value will remain as 1.2 as it will be rounded to the first digit after the decimal point.</li> <li>Depending on what is set for the <code>value</code> and the <code>displayValuePrecision</code> properties, it is possible the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.</li></ul></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>1</code>.</p>
             * @param {number} fStep <p>New value for property <code>step</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStep(fStep: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStepMode" href="#/api/sap.m.StepInput/methods/getStepMode">stepMode</a>.</p><p>Defines the calculation mode for the provided <code>step</code> and <code>largerStep</code>.</p><p>If the user increases/decreases the value by <code>largerStep</code>, this calculation will consider it as well. For example, if the current <code>value</code> is 3, <code>step</code> is 5, <code>largerStep</code> is 5 and the user chooses PageUp, the calculation logic will consider the value of 3x5=15 to decide what will be the next <code>value</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>AdditionAndSubtraction</code>.</p>
             * @param {sap.m.StepInputStepModeType} sStepMode <p>New value for property <code>stepMode</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStepMode(sStepMode: sap.m.StepInputStepModeType): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.StepInput/methods/getTextAlign">textAlign</a>.</p><p>Defines the horizontal alignment of the text that is displayed inside the input field.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>End</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidationMode" href="#/api/sap.m.StepInput/methods/getValidationMode">validationMode</a>.</p><p>Defines when the validation of the typed value will happen. By default this happens on focus out.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>FocusOut</code>.</p>
             * @param {sap.m.StepInputValidationMode} sValidationMode <p>New value for property <code>validationMode</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidationMode(sValidationMode: sap.m.StepInputValidationMode): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.StepInput/methods/getValue">value</a>.</p><p>Determines the value of the <code>StepInput</code> and can be set initially from the app developer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} fValue <p>New value for property <code>value</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(fValue: number): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueState" href="#/api/sap.m.StepInput/methods/getValueState">valueState</a>.</p><p>Accepts the core enumeration ValueState.type that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and <code>Success</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.ValueState} sValueState <p>New value for property <code>valueState</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueState(sValueState: sap.ui.core.ValueState): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueStateText" href="#/api/sap.m.StepInput/methods/getValueStateText">valueStateText</a>.</p><p>Defines the text that appears in the value state message pop-up.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueStateText <p>New value for property <code>valueStateText</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueStateText(sValueStateText: string): sap.m.StepInput;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.StepInput/methods/getWidth">width</a>.</p><p>Defines the width of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.StepInput <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.StepInput;
        }
        /**
         * <p><p>Available step modes for <a target="_self" class="jsdoclink" href="#/api/sap.m.StepInput">sap.m.StepInput</a>.</p></p>
         */
        export enum StepInputStepModeType {
            /**
             * <p>Choosing increase/decrease button will add/subtract the <code>step</code> value to/from the current value. For example, if <code>step</code> is 5, current <code>value</code> is 17 and increase button is chosen, the result will be 22 (5+17).</p><p><b>Note:</b> Using keyboard PageUp/PageDown will add/subtract the <code>step</code> multiplied by the <code>largerStep</code> values to/from the current <code>value</code>. For example, if <code>step</code> is 5, <code>largerStep</code> is 3, current <code>value</code> is 17 and PageUp is chosen, the result would be 32 (5*3+17).</p><p>For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.m.StepInput">sap.m.StepInput</a>'s <code>step</code>, <code>largerStep</code> and <code>stepMode</code> properties.</p>
             */
            AdditionAndSubtraction = "AdditionAndSubtraction",
            /**
             * <p>Pressing increase/decrease button will increase/decrease the current <code>value</code> to the closest number that is divisible by the <code>step</code>.</p><p>For example, if <code>step</code> is 5, current <code>value</code> is 17 and increase button is chosen, the result will be 20 as it is the closest larger number that is divisible by 5.</p><p><b>Note:</b> Using keyboard PageUp/PageDown will increase/decrease the current <code>value</code> to the closest number that is divisible by the multiplication of the <code>step</code> and the <code>largerStep</code> values. For example, if <code>step</code> is 5, <code>largerStep</code> is 3, current <code>value</code> is 17 and PageUp is chosen, the result would be 30 as it is the closest larger number that is divisible by 15.</p><p>The logic above will work only if both <code>step</code> and <code>largerStep</code> are integers.</p><p>For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.m.StepInput">sap.m.StepInput</a>'s <code>step</code>, <code>largerStep</code> and <code>stepMode</code> properties.</p>
             */
            Multiple = "Multiple",
        }
        /**
         * <p><p>Available validation modes for <a target="_self" class="jsdoclink" href="#/api/sap.m.StepInput">sap.m.StepInput</a>.</p></p>
         */
        export enum StepInputValidationMode {
            /**
             * <p>Validation happens on <code>FocusOut</code>.</p>
             */
            FocusOut = "FocusOut",
            /**
             * <p>Validation happens on <code>LiveChange</code>.</p>
             */
            LiveChange = "LiveChange",
        }
        /**
         * <p><p>Defines which area of the control remains fixed at the top of the page during vertical scrolling as long as the control is in the viewport.</p></p>
         */
        export enum Sticky {
            /**
             * <p>The column headers remain in a fixed position.</p>
             */
            ColumnHeaders = "ColumnHeaders",
            /**
             * <p>The header toolbar remains in a fixed position.</p>
             */
            HeaderToolbar = "HeaderToolbar",
            /**
             * <p>The info toolbar remains in a fixed position.</p>
             */
            InfoToolbar = "InfoToolbar",
        }
        /**
         * <p><p>Types of string filter operators.</p></p>
         */
        export enum StringFilterOperator {
            /**
             * <p>Checks if any word in the text starts with the search string.</p>
             */
            AnyWordStartsWith = "AnyWordStartsWith",
            /**
             * <p>Checks if the text contains the search string.</p>
             */
            Contains = "Contains",
            /**
             * <p>Checks if the text is equal with the search string.</p>
             */
            Equals = "Equals",
            /**
             * <p>Checks if the text starts with the search string.</p>
             */
            StartsWith = "StartsWith",
        }
        /**
         * <p>Display suggestion list items.</p>
         */
        export class SuggestionItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new SuggestionItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.SuggestionItem/methods/getDescription">description</a>.</p><p>Additional text of type string, optionally to be displayed along with this item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>description</code></p>
             */
            getDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SuggestionItem/methods/getIcon">icon</a>.</p><p>The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>icon</code></p>
             */
            getIcon(): string;
            /**
             * <p>Return suggestion text. By default, it is the value of the <code>text</code> property.</p><p>Subclasses may override this function.</p>
             * @returns string <p>suggestion text.</p>
             */
            protected getSuggestionText(): string;
            /**
             * <p>Produces the HTML of the suggestion item and writes it to render-output-buffer.</p><p>Subclasses may override this function.</p>
             * @param {sap.ui.core.RenderManager} oRenderManager <p>The <code>RenderManager</code></p>
             * @param {sap.m.SuggestionItem} oItem <p>The item which should be rendered</p>
             * @param {string} sSearch <p>The search text that should be emphasized</p>
             * @param {boolean} bSelected <p>The item is selected</p>
             */
            protected render(oRenderManager: sap.ui.core.RenderManager, oItem: sap.m.SuggestionItem, sSearch: string, bSelected: boolean): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDescription" href="#/api/sap.m.SuggestionItem/methods/getDescription">description</a>.</p><p>Additional text of type string, optionally to be displayed along with this item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sDescription <p>New value for property <code>description</code></p>
             * @returns sap.m.SuggestionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDescription(sDescription: string): sap.m.SuggestionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.SuggestionItem/methods/getIcon">icon</a>.</p><p>The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.SuggestionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: string): sap.m.SuggestionItem;
        }
        /**
         * <p><p>Directions for swipe event.</p></p>
         */
        export enum SwipeDirection {
            /**
             * <p>Both directions (left to right or right to left)</p>
             */
            Both = "Both",
            /**
             * <p>Swipe from left to right</p>
             */
            LeftToRight = "LeftToRight",
            /**
             * <p>Swipe from right to left.</p>
             */
            RightToLeft = "RightToLeft",
        }
        /**
         * <p>A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.</p>
         */
        export class Switch extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Switch.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Switch/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Switch;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Switch/events/change">change</a> event of this <code>sap.m.Switch</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Switch</code> itself.</p><p>Triggered when a switch changes the state.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code> itself</p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Switch;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Switch/events/change">change</a> event of this <code>sap.m.Switch</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.Switch;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.Switch/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.Switch;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Switch/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTextOff" href="#/api/sap.m.Switch/methods/getCustomTextOff">customTextOff</a>.</p><p>Custom text for the "OFF" state.</p><p>"OFF" translated to the current language is the default value. Beware that the given text will be cut off if available space is exceeded.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>customTextOff</code></p>
             */
            getCustomTextOff(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTextOn" href="#/api/sap.m.Switch/methods/getCustomTextOn">customTextOn</a>.</p><p>Custom text for the "ON" state.</p><p>"ON" translated to the current language is the default value. Beware that the given text will be cut off if available space is exceeded.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>customTextOn</code></p>
             */
            getCustomTextOn(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Switch/methods/getEnabled">enabled</a>.</p><p>Whether the switch is enabled.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Switch/methods/getName">name</a>.</p><p>The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.Switch/methods/getState">state</a>.</p><p>A boolean value indicating whether the switch is on or off.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>state</code></p>
             */
            getState(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Switch/methods/getType">type</a>.</p><p>Type of a Switch. Possibles values "Default", "AcceptReject".</p><p>Default value is <code>Default</code>.</p>
             * @returns sap.m.SwitchType <p>Value of property <code>type</code></p>
             */
            getType(): sap.m.SwitchType;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Switch/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Switch/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTextOff" href="#/api/sap.m.Switch/methods/getCustomTextOff">customTextOff</a>.</p><p>Custom text for the "OFF" state.</p><p>"OFF" translated to the current language is the default value. Beware that the given text will be cut off if available space is exceeded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sCustomTextOff <p>New value for property <code>customTextOff</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomTextOff(sCustomTextOff: string): sap.m.Switch;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTextOn" href="#/api/sap.m.Switch/methods/getCustomTextOn">customTextOn</a>.</p><p>Custom text for the "ON" state.</p><p>"ON" translated to the current language is the default value. Beware that the given text will be cut off if available space is exceeded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sCustomTextOn <p>New value for property <code>customTextOn</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCustomTextOn(sCustomTextOn: string): sap.m.Switch;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Switch/methods/getEnabled">enabled</a>.</p><p>Whether the switch is enabled.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Switch;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.Switch/methods/getName">name</a>.</p><p>The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.Switch;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getState" href="#/api/sap.m.Switch/methods/getState">state</a>.</p><p>A boolean value indicating whether the switch is on or off.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bState <p>New value for property <code>state</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setState(bState: boolean): sap.m.Switch;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.m.Switch/methods/getType">type</a>.</p><p>Type of a Switch. Possibles values "Default", "AcceptReject".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
             * @param {sap.m.SwitchType} sType <p>New value for property <code>type</code></p>
             * @returns sap.m.Switch <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setType(sType: sap.m.SwitchType): sap.m.Switch;
        }
        /**
         * <p><p>Enumeration for different switch types.</p></p>
         */
        export enum SwitchType {
            /**
             * <p>Switch with accept and reject icons</p>
             */
            AcceptReject = "AcceptReject",
            /**
             * <p>Will show "ON" and "OFF" translated to the current language or the custom text if provided</p>
             */
            Default = "Default",
        }
        /**
         * <p>A container control for managing multiple tabs, allowing the user to open and edit different items simultaneously.</p><h3>Overview</h3><p>The control contains a <code>TabStrip</code> area where the user can choose which tab to view/edit. When the open tabs are more than what can be displayed on the screen, there is an overflow mechanism. To access the tabs hidden in the overflow area, the user has to either use the overflow button (left or right arrow) to scroll them horizontally or the overflow overview button (down arrow) and view all open items as a list.</p><p>Each tab has a title and a <i>Close Tab</i> button. The title is truncated, if it's longer than 25 characters. On desktop, the <i>Close Tab</i> button is displayed on the currently active tab and for the other tabs it appears on mouse hover. On mobile devices, the <i>Close Tab</i> buttons are always visible.</p><p>To show that the open items have unsaved changes, the corresponding tabs can display an asterisk (*) after the title as a visual indication that the item is not saved. This is managed by the app developer using <a target="_self" class="jsdoclink" href="#/api/sap.m.TabContainerItem">TabContainerItem</a>'s <code>modified</code> property.</p><h3>Usage</h3><p>The <code>TabContainer</code> can have an <i>Add New Tab</i> button, which appears as a '+' icon on the top-right area of the control. When the user clicks or taps this button, the <code>addNewButtonPress</code> event is fired.</p><h3>Responsive behavior</h3><p>The <code>TabContainer</code> is a full-page container that takes 100% of its parent width and height. As the control is expected to occupy the whole parent, it should be the only child of its parent.</p>
         */
        export class TabContainer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>TabContainer</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>.</p>
             * @param {sap.m.TabContainerItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.TabContainerItem): sap.m.TabContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addNewButtonPress" href="#/api/sap.m.TabContainer/events/addNewButtonPress">addNewButtonPress</a> event of this <code>sap.m.TabContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.</p><p>Fired when the <i>Add New Tab</i> button is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachAddNewButtonPress(oData: any, fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemClose" href="#/api/sap.m.TabContainer/events/itemClose">itemClose</a> event of this <code>sap.m.TabContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.</p><p>Fired when an item is closed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemClose(oData: any, fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.TabContainer/events/itemSelect">itemSelect</a> event of this <code>sap.m.TabContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.</p><p>Fired when an item is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.TabContainer;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>.</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.TabContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addNewButtonPress" href="#/api/sap.m.TabContainer/events/addNewButtonPress">addNewButtonPress</a> event of this <code>sap.m.TabContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachAddNewButtonPress(fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemClose" href="#/api/sap.m.TabContainer/events/itemClose">itemClose</a> event of this <code>sap.m.TabContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemClose(fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.TabContainer/events/itemSelect">itemSelect</a> event of this <code>sap.m.TabContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemSelect(fnFunction: Function, oListener?: any): sap.m.TabContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="addNewButtonPress" href="#/api/sap.m.TabContainer/events/addNewButtonPress">addNewButtonPress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireAddNewButtonPress(mParameters?: any): sap.m.TabContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemClose" href="#/api/sap.m.TabContainer/events/itemClose">itemClose</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireItemClose(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemSelect" href="#/api/sap.m.TabContainer/events/itemSelect">itemSelect</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireItemSelect(mParameters?: any): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.TabContainer/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the background color of the content in <code>TabContainer</code>.</p><p>Default value is <code>List</code>.</p>
             * @returns sap.m.PageBackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.PageBackgroundDesign;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>.</p><p>The items displayed in the <code>TabContainer</code>.</p>
             * @returns sap.m.TabContainerItem[] 
             */
            getItems(): sap.m.TabContainerItem[];
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.TabContainer/methods/getSelectedItem">selectedItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedItem(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAddNewButton" href="#/api/sap.m.TabContainer/methods/getShowAddNewButton">showAddNewButton</a>.</p><p>Defines whether an <i>Add New Tab</i> button is displayed in the <code>TabStrip</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showAddNewButton</code></p>
             */
            getShowAddNewButton(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.TabContainerItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.TabContainerItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.TabContainerItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>.</p>
             * @param {sap.m.TabContainerItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.TabContainerItem, iIndex: number): sap.m.TabContainer;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.TabContainerItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.TabContainerItem[];
            /**
             * <p>Removes an item from the aggregation named <code>items</code>.</p>
             * @param {number | string | sap.m.TabContainerItem} vItem <p>The item to remove or its index or ID</p>
             * @returns sap.m.TabContainerItem <p>The removed item or null</p>
             */
            removeItem(vItem: number | string | sap.m.TabContainerItem): sap.m.TabContainerItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.TabContainer/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the background color of the content in <code>TabContainer</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>List</code>.</p>
             * @param {sap.m.PageBackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.PageBackgroundDesign): sap.m.TabContainer;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.TabContainer/methods/getSelectedItem">selectedItem</a>.</p>
             * @param {sap.ui.core.ID | sap.m.TabContainerItem} oSelectedItem <p>ID of an element which becomes the new target of this selectedItem association; alternatively, an element instance may be given</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelectedItem(oSelectedItem: sap.ui.core.ID | sap.m.TabContainerItem): sap.m.TabContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowAddNewButton" href="#/api/sap.m.TabContainer/methods/getShowAddNewButton">showAddNewButton</a>.</p><p>Defines whether an <i>Add New Tab</i> button is displayed in the <code>TabStrip</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowAddNewButton <p>New value for property <code>showAddNewButton</code></p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowAddNewButton(bShowAddNewButton: boolean): sap.m.TabContainer;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TabContainer/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.TabContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.TabContainer;
        }
        /**
         * <p>An item to be used in a TabContainer.</p>
         */
        export class TabContainerItem extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new <code>TabContainerItem</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.TabContainerItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.TabContainerItem/events/itemPropertyChanged">itemPropertyChanged</a> event of this <code>sap.m.TabContainerItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TabContainerItem</code> itself.</p><p>Sends information that some of the properties have changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TabContainerItem</code> itself</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemPropertyChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.TabContainerItem;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.TabContainerItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.TabContainerItem/events/itemPropertyChanged">itemPropertyChanged</a> event of this <code>sap.m.TabContainerItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemPropertyChanged(fnFunction: Function, oListener?: any): sap.m.TabContainerItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.TabContainerItem/events/itemPropertyChanged">itemPropertyChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemPropertyChanged(mParameters?: any): sap.m.TabContainerItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalText" href="#/api/sap.m.TabContainerItem/methods/getAdditionalText">additionalText</a>.</p><p>Determines additional text to be displayed for the item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>additionalText</code></p>
             */
            getAdditionalText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p><p>The content displayed for this item.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.TabContainerItem/methods/getIcon">icon</a>.</p><p>Defines the icon to be displayed as graphical element within the <code>TabContainerItem</code>. It can be an image or an icon from the icon font.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconTooltip" href="#/api/sap.m.TabContainerItem/methods/getIconTooltip">iconTooltip</a>.</p><p>Determines the tooltip text of the <code>TabContainerItem</code>'s icon.</p>
             * @returns string <p>Value of property <code>iconTooltip</code></p>
             */
            getIconTooltip(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.TabContainerItem/methods/getKey">key</a>.</p><p>Determines the name of the item. Can be used as input for subsequent actions.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModified" href="#/api/sap.m.TabContainerItem/methods/getModified">modified</a>.</p><p>Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>modified</code></p>
             */
            getModified(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.TabContainerItem/methods/getName">name</a>.</p><p>Determines the text to be displayed for the item.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.TabContainerItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TabContainerItem/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalText" href="#/api/sap.m.TabContainerItem/methods/getAdditionalText">additionalText</a>.</p><p>Determines additional text to be displayed for the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sAdditionalText <p>New value for property <code>additionalText</code></p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAdditionalText(sAdditionalText: string): sap.m.TabContainerItem;
            /**
             * <p>Property setter for the icon</p>
             * @param {sap.ui.core.URI} sIcon <p>new value of the Icon property</p>
             * @returns sap.m.TabContainerItem <p><code>this</code> to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.TabContainerItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIconTooltip" href="#/api/sap.m.TabContainerItem/methods/getIconTooltip">iconTooltip</a>.</p><p>Determines the tooltip text of the <code>TabContainerItem</code>'s icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sIconTooltip <p>New value for property <code>iconTooltip</code></p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIconTooltip(sIconTooltip: string): sap.m.TabContainerItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.TabContainerItem/methods/getKey">key</a>.</p><p>Determines the name of the item. Can be used as input for subsequent actions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.TabContainerItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModified" href="#/api/sap.m.TabContainerItem/methods/getModified">modified</a>.</p><p>Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bModified <p>New value for property <code>modified</code></p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setModified(bModified: boolean): sap.m.TabContainerItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.TabContainerItem/methods/getName">name</a>.</p><p>Determines the text to be displayed for the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.TabContainerItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.TabContainerItem;
            /**
             * <p>Overwrites the method in order to suppress invalidation for some properties.</p>
             * @param {string} sName <p>Property name to be set</p>
             * @param {boolean | string | any} vValue <p>Property value to be set</p>
             * @param {boolean} bSuppressInvalidation <p>Whether invalidation to be suppressed</p>
             * @returns sap.m.TabContainerItem <p>This instance for chaining</p>
             */
            setProperty(sName: string, vValue: boolean | string | any, bSuppressInvalidation: boolean): sap.m.TabContainerItem;
        }
        /**
         * <p><code>sap.m.Table</code> control provides a set of sophisticated and convenience functions for responsive table design. To render the <code>sap.m.Table</code> properly, the order of the <code>columns</code> aggregation should match with the order of the items <code>cells</code> aggregation (<code>sap.m.ColumnListItem</code>). Also <code>sap.m.Table</code> requires at least one visible <code>sap.m.Column</code> in <code>columns</code> aggregation. For mobile devices, the recommended limit of table rows is 100 (based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the <code>growing</code> feature.</p><p>See section "<a target="_self" href="#/topic/5eb6f63e0cc547d0bdc934d3652fdc9b">Creating Tables</a>" and "<a target="_self" href="#/topic/38855e06486f4910bfa6f4485f7c2bac">Configuring Responsive Behavior of a Table</a>" in the documentation for an introduction to <code>sap.m.Table</code> control.</p>
         */
        export class Table extends sap.m.ListBase {
            /**
             * <p>Constructor for a new Table.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some column to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>.</p>
             * @param {sap.m.Column} oColumn <p>The column to add; if empty, nothing is inserted</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addColumn(oColumn: sap.m.Column): sap.m.Table;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.ListBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ListBase</code> itself.</p><p>Fired when the context menu is opened. When the context menu is opened, the binding context of the item is set to the given <code>contextMenu</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpenContextMenu(oData: any, fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.Table/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.Table</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Table</code> itself.</p><p>Fired when the context menu is opened. When the context menu is opened, the binding context of the item is set to the given <code>contextMenu</code>.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Table</code> itself</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeOpenContextMenu(oData: any, fnFunction: Function, oListener?: any): sap.m.Table;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="paste" href="#/api/sap.m.Table/events/paste">paste</a> event of this <code>sap.m.Table</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Table</code> itself.</p><p>This event gets fired when the user pastes content from the clipboard to the table. Pasting can be done via the context menu or the standard paste keyboard shortcut, if the focus is inside the table.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Table</code> itself</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPaste(oData: any, fnFunction: Function, oListener?: any): sap.m.Table;
            /**
             * <p>Destroys all the columns in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>.</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyColumns(): sap.m.Table;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.ListBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ListBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpenContextMenu(fnFunction: Function, oListener?: any): sap.m.ListBase;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.Table/events/beforeOpenContextMenu">beforeOpenContextMenu</a> event of this <code>sap.m.Table</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeOpenContextMenu(fnFunction: Function, oListener?: any): sap.m.Table;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="paste" href="#/api/sap.m.Table/events/paste">paste</a> event of this <code>sap.m.Table</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPaste(fnFunction: Function, oListener?: any): sap.m.Table;
            /**
             * <p>This method is a hook for the RenderManager that gets called during the rendering of child Controls. It allows to add, remove and update existing accessibility attributes (ARIA) of those controls.</p>
             * @param {sap.ui.core.Control} oElement <p>The Control that gets rendered by the RenderManager</p>
             * @param {any} mAriaProps <p>The mapping of "aria-" prefixed attributes</p>
             */
            protected enhanceAccessibilityState(oElement: sap.ui.core.Control, mAriaProps: any): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.ListBase/events/beforeOpenContextMenu">beforeOpenContextMenu</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireBeforeOpenContextMenu(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeOpenContextMenu" href="#/api/sap.m.Table/events/beforeOpenContextMenu">beforeOpenContextMenu</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireBeforeOpenContextMenu(mParameters?: any): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="paste" href="#/api/sap.m.Table/events/paste">paste</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected firePaste(mParameters?: any): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlternateRowColors" href="#/api/sap.m.Table/methods/getAlternateRowColors">alternateRowColors</a>.</p><p>Enables alternating table row colors. <b>Note:</b> This property can only be used with the Belize and Belize Deep themes. Alternate row coloring is not available for the High Contrast Black/White themes.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>alternateRowColors</code></p>
             */
            getAlternateRowColors(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Table/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.</p><p>Default value is <code>Translucent</code>.</p>
             * @returns sap.m.BackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
             */
            getBackgroundDesign(): sap.m.BackgroundDesign;
            /**
             * <p>Getter for aggregation columns.</p>
             * @param {Boolean} bSort <p>set true to get the columns in an order that respects personalization settings</p>
             * @returns sap.m.Column[] <p>columns of the Table</p>
             */
            getColumns(bSort?: Boolean): sap.m.Column[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContextualWidth" href="#/api/sap.m.Table/methods/getContextualWidth">contextualWidth</a>.</p><p>Defines the contextual width for the <code>sap.m.Table</code> control. By defining this property the table adapts the pop-in behavior based on the container in which the table is placed or the configured contextual width. By default, <code>sap.m.Table</code> renders in pop-in behavior only depending on the window size or device.</p><p>For example, by setting the <code>contextualWidth</code> property to 600px or Tablet, the table can be placed in a container with 600px width, where the pop-in is used. You can use specific CSS sizes (for example, 600px or 600), you can also use the <code>sap.m.ScreenSize</code> enumeration (for example, Phone, Tablet, Desktop, Small, Medium, Large, ....). If this property is set to <code>Auto</code>, the <code>ResizeHandler</code> will manage the contextual width of the table. <b>Note:</b> Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px) can be applied to the <code>contextualWidth</code> property. Due to the rendering cost, we recommend to use the valid value mentioned before except for "Auto".</p><p>Default value is <code>Inherit</code>.</p>
             * @returns string <p>Value of property <code>contextualWidth</code></p>
             */
            getContextualWidth(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFixedLayout" href="#/api/sap.m.Table/methods/getFixedLayout">fixedLayout</a>.</p><p>Defines the algorithm to be used to layout the table cells, rows, and columns. By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.</p><p>When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout. <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow. In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>fixedLayout</code></p>
             */
            getFixedLayout(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopinLayout" href="#/api/sap.m.Table/methods/getPopinLayout">popinLayout</a>.</p><p>Defines the layout in which the table pop-in rows are rendered. <b>Note:</b> The <code>demandPopin</code> and <code>minScreenWidth</code> properties of the <code>Column</code> control must be configured appropriately.</p><p>Default value is <code>Block</code>.</p>
             * @returns sap.m.PopinLayout <p>Value of property <code>popinLayout</code></p>
             */
            getPopinLayout(): sap.m.PopinLayout;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverlay" href="#/api/sap.m.Table/methods/getShowOverlay">showOverlay</a>.</p><p>Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showOverlay</code></p>
             */
            getShowOverlay(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.Column</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Column} oColumn <p>The column whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfColumn(oColumn: sap.m.Column): number;
            /**
             * <p>Inserts a column into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>.</p>
             * @param {sap.m.Column} oColumn <p>The column to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the column should be inserted at; for a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted at the last position</p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertColumn(oColumn: sap.m.Column, iIndex: number): sap.m.Table;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Column[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllColumns(): sap.m.Column[];
            /**
             * <p>Removes a column from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.Table/methods/getColumns">columns</a>.</p>
             * @param {number | string | sap.m.Column} vColumn <p>The column to remove or its index or id</p>
             * @returns sap.m.Column <p>The removed column or <code>null</code></p>
             */
            removeColumn(vColumn: number | string | sap.m.Column): sap.m.Column;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlternateRowColors" href="#/api/sap.m.Table/methods/getAlternateRowColors">alternateRowColors</a>.</p><p>Enables alternating table row colors. <b>Note:</b> This property can only be used with the Belize and Belize Deep themes. Alternate row coloring is not available for the High Contrast Black/White themes.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bAlternateRowColors <p>New value for property <code>alternateRowColors</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAlternateRowColors(bAlternateRowColors: boolean): sap.m.Table;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.Table/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Translucent</code>.</p>
             * @param {sap.m.BackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setBackgroundDesign(sBackgroundDesign: sap.m.BackgroundDesign): sap.m.Table;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContextualWidth" href="#/api/sap.m.Table/methods/getContextualWidth">contextualWidth</a>.</p><p>Defines the contextual width for the <code>sap.m.Table</code> control. By defining this property the table adapts the pop-in behavior based on the container in which the table is placed or the configured contextual width. By default, <code>sap.m.Table</code> renders in pop-in behavior only depending on the window size or device.</p><p>For example, by setting the <code>contextualWidth</code> property to 600px or Tablet, the table can be placed in a container with 600px width, where the pop-in is used. You can use specific CSS sizes (for example, 600px or 600), you can also use the <code>sap.m.ScreenSize</code> enumeration (for example, Phone, Tablet, Desktop, Small, Medium, Large, ....). If this property is set to <code>Auto</code>, the <code>ResizeHandler</code> will manage the contextual width of the table. <b>Note:</b> Only "Inherit", "Auto", and pixel-based CSS sizes (for example, 200, 200px) can be applied to the <code>contextualWidth</code> property. Due to the rendering cost, we recommend to use the valid value mentioned before except for "Auto".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {string} sContextualWidth <p>New value for property <code>contextualWidth</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContextualWidth(sContextualWidth: string): sap.m.Table;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFixedLayout" href="#/api/sap.m.Table/methods/getFixedLayout">fixedLayout</a>.</p><p>Defines the algorithm to be used to layout the table cells, rows, and columns. By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.</p><p>When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout. <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow. In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bFixedLayout <p>New value for property <code>fixedLayout</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFixedLayout(bFixedLayout: boolean): sap.m.Table;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPopinLayout" href="#/api/sap.m.Table/methods/getPopinLayout">popinLayout</a>.</p><p>Defines the layout in which the table pop-in rows are rendered. <b>Note:</b> The <code>demandPopin</code> and <code>minScreenWidth</code> properties of the <code>Column</code> control must be configured appropriately.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Block</code>.</p>
             * @param {sap.m.PopinLayout} sPopinLayout <p>New value for property <code>popinLayout</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPopinLayout(sPopinLayout: sap.m.PopinLayout): sap.m.Table;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowOverlay" href="#/api/sap.m.Table/methods/getShowOverlay">showOverlay</a>.</p><p>Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowOverlay <p>New value for property <code>showOverlay</code></p>
             * @returns sap.m.Table <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowOverlay(bShowOverlay: boolean): sap.m.Table;
        }
        /**
         * <p>Table Personalization Controller</p>
         */
        export class TablePersoController extends sap.ui.base.ManagedObject {
            /**
             * <p>The TablePersoController can be used to connect a table that you want to provide a personalization dialog for, with a persistence service such as one provided by the unified shell.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>optional id for the new control; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
             * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new component instance</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Activates the controller, i.e. tries to retrieve existing persisted personalizations, creates a TablePersoDialog for the associated table and attaches a close handler to apply the personalizations to the table and persist them.</p><p>This method should be called when the table to be personalized knows its columns. Usually, this is when that table's view has set its model, which is typically done in the corresponding controller's init method. For example <pre><code>
             onInit: function () {
            
                    // set explored app's demo model on this sample
                    var oModel = new JSONModel(jQuery.sap.getModulePath("sap.ui.demo.mock", "/products.json"));
                    var oGroupingModel = new JSONModel({ hasGrouping: false});
                    this.getView().setModel(oModel);
                    this.getView().setModel(oGroupingModel, 'Grouping');
            
                    // init and activate controller
                    this._oTPC = new TablePersoController({
                        table: this.getView().byId("productsTable"),
                        //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                        componentName: "demoApp",
                        persoService: DemoPersoService,
                    }).activate();
                }
            </code></pre></p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            activate(): sap.m.TablePersoController;
            /**
             * <p>Adds some table into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTables" href="#/api/sap.m.TablePersoController/methods/getTables">tables</a>.</p>
             * @param {sap.ui.core.ID | sap.m.Table} vTable <p>The tables to add; if empty, nothing is inserted</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addTable(vTable: sap.ui.core.ID | sap.m.Table): sap.m.TablePersoController;
            /**
             * <p>Applies the personalizations by getting the existing personalizations and adjusting to the table.</p>
             * @param {sap.m.Table} oTable <p>the table to be personalized.</p>
             */
            applyPersonalizations(oTable: sap.m.Table): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="personalizationsDone" href="#/api/sap.m.TablePersoController/events/personalizationsDone">personalizationsDone</a> event of this <code>sap.m.TablePersoController</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TablePersoController</code> itself.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoController</code> itself</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPersonalizationsDone(oData: any, fnFunction: Function, oListener?: any): sap.m.TablePersoController;
            /**
             * <p>Destroys the persoService in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoService" href="#/api/sap.m.TablePersoController/methods/getPersoService">persoService</a>.</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPersoService(): sap.m.TablePersoController;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="personalizationsDone" href="#/api/sap.m.TablePersoController/events/personalizationsDone">personalizationsDone</a> event of this <code>sap.m.TablePersoController</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPersonalizationsDone(fnFunction: Function, oListener?: any): sap.m.TablePersoController;
            /**
             * <p>Do some clean up: remove event delegates, etc</p>
             */
            protected exit(): void;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="personalizationsDone" href="#/api/sap.m.TablePersoController/events/personalizationsDone">personalizationsDone</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePersonalizationsDone(mParameters?: any): sap.m.TablePersoController;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getComponentName" href="#/api/sap.m.TablePersoController/methods/getComponentName">componentName</a>.</p><p>Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</p>
             * @returns string <p>Value of property <code>componentName</code></p>
             */
            getComponentName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.TablePersoController/methods/getContentHeight">contentHeight</a>.</p><p>Default value is <code>20rem</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentHeight</code></p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.TablePersoController/methods/getContentWidth">contentWidth</a>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentWidth</code></p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHasGrouping" href="#/api/sap.m.TablePersoController/methods/getHasGrouping">hasGrouping</a>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>hasGrouping</code></p>
             */
            getHasGrouping(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoService" href="#/api/sap.m.TablePersoController/methods/getPersoService">persoService</a>.</p>
             * @returns any 
             */
            getPersoService(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowResetAll" href="#/api/sap.m.TablePersoController/methods/getShowResetAll">showResetAll</a>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showResetAll</code></p>
             */
            getShowResetAll(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSelectAll" href="#/api/sap.m.TablePersoController/methods/getShowSelectAll">showSelectAll</a>.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showSelectAll</code></p>
             */
            getShowSelectAll(): boolean;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTable" href="#/api/sap.m.TablePersoController/methods/getTable">table</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getTable(): sap.ui.core.ID;
            /**
             * <p>Returns a _tablePersoDialog instance if available. It can be NULL if the controller has not been activated yet.</p><p>This function makes a private aggregate publicly accessable. This is necessary for downward compatibility reasons: in the first versions of the tablePersoProvider developers still worked with the TablePersoDialog directly, which is now not necessary any longer.</p>
             * @returns sap.m.TablePersoDialog <p>the TablePersoDialog instance.</p>
             */
            getTablePersoDialog(): sap.m.TablePersoDialog;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTables" href="#/api/sap.m.TablePersoController/methods/getTables">tables</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getTables(): sap.ui.core.ID[];
            /**
             * <p>Initializes the TablePersoController instance after creation.</p>
             */
            protected init(): void;
            /**
             * <p>Opens the TablePersoDialog, stores the personalized settings on close, modifies the table columns, and sends them to the persistence service</p>
             */
            openDialog(): void;
            /**
             * <p>Refresh the personalizations: reloads the personalization information from the table perso provider, applies it to the controller's table and updates the controller's table perso dialog.</p><p>Use case for a 'refresh' call would be that the table which si personalized changed its columns during runtime, after personalization has been activated.</p>
             */
            refresh(): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTables" href="#/api/sap.m.TablePersoController/methods/getTables">tables</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTables(): sap.ui.core.ID[];
            /**
             * <p>Removes an table from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTables" href="#/api/sap.m.TablePersoController/methods/getTables">tables</a>.</p>
             * @param {number | sap.ui.core.ID | sap.m.Table} vTable <p>The table to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed table or <code>null</code></p>
             */
            removeTable(vTable: number | sap.ui.core.ID | sap.m.Table): sap.ui.core.ID;
            /**
             * <p>Persist the personalizations</p>
             */
            savePersonalizations(): void;
            /**
             * <p>Using this method, the first part of tablePerso persistence ids can be provided, in case the table's app does not provide that part itself.</p><p>If a component name is set using this method, it will be used, regardless of whether the table's app has a different component name or not.</p>
             * @param {string} sCompName <p>the new component name.</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setComponentName(sCompName: string): sap.m.TablePersoController;
            /**
             * <p>Reflector for the controller's 'contentHeight' property.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>the new height of the TablePersoDialog.</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setContentHeight(sHeight: sap.ui.core.CSSSize): sap.m.TablePersoController;
            /**
             * <p>Reflector for the controller's 'contentWidth' property.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>the new width of the tablePersoDialog</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setContentWidth(sWidth: sap.ui.core.CSSSize): sap.m.TablePersoController;
            /**
             * <p>Reflector for the controller's 'hasGrouping' property.</p>
             * @param {boolean} bHasGrouping <p>is the tablePersoDialog displayed in grouping mode or not.</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setHasGrouping(bHasGrouping: boolean): sap.m.TablePersoController;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoService" href="#/api/sap.m.TablePersoController/methods/getPersoService">persoService</a>.</p>
             * @param {any} oPersoService <p>The persoService to set</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPersoService(oPersoService: any): sap.m.TablePersoController;
            /**
             * <p>Reflector for the controller's 'showResetAll' property.</p>
             * @param {boolean} bShowResetAll <p>is the tablePersoDialog's 'UndoPersonalization' button displayed or not.</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setShowResetAll(bShowResetAll: boolean): sap.m.TablePersoController;
            /**
             * <p>Reflector for the controller's 'showSelectAll' property.</p>
             * @param {boolean} bShowSelectAll <p>is the tablePersoDialog's 'Display All' checkbox displayed or not.</p>
             * @returns sap.m.TablePersoController <p>the TablePersoController instance.</p>
             */
            setShowSelectAll(bShowSelectAll: boolean): sap.m.TablePersoController;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTable" href="#/api/sap.m.TablePersoController/methods/getTable">table</a>.</p>
             * @param {sap.ui.core.ID | sap.m.Table} oTable <p>ID of an element which becomes the new target of this table association; alternatively, an element instance may be given</p>
             * @returns sap.m.TablePersoController <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTable(oTable: sap.ui.core.ID | sap.m.Table): sap.m.TablePersoController;
        }
        /**
         * <p>Table Personalization Dialog</p>
         */
        export class TablePersoDialog extends sap.ui.base.ManagedObject {
            /**
             * <p>The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li> <li>the column header control's 'text' property if no caption property is available</li> <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li> <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul></p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>optional id for the new control; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
             * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new component instance</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TablePersoDialog/events/cancel">cancel</a> event of this <code>sap.m.TablePersoDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancel(oData: any, fnFunction: Function, oListener?: any): sap.m.TablePersoDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TablePersoDialog/events/confirm">confirm</a> event of this <code>sap.m.TablePersoDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachConfirm(oData: any, fnFunction: Function, oListener?: any): sap.m.TablePersoDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TablePersoDialog/events/cancel">cancel</a> event of this <code>sap.m.TablePersoDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancel(fnFunction: Function, oListener?: any): sap.m.TablePersoDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TablePersoDialog/events/confirm">confirm</a> event of this <code>sap.m.TablePersoDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachConfirm(fnFunction: Function, oListener?: any): sap.m.TablePersoDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TablePersoDialog/events/cancel">cancel</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancel(mParameters?: any): sap.m.TablePersoDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TablePersoDialog/events/confirm">confirm</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireConfirm(mParameters?: any): sap.m.TablePersoDialog;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnInfoCallback" href="#/api/sap.m.TablePersoDialog/methods/getColumnInfoCallback">columnInfoCallback</a>.</p>
             * @returns any <p>Value of property <code>columnInfoCallback</code></p>
             */
            getColumnInfoCallback(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.TablePersoDialog/methods/getContentHeight">contentHeight</a>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentHeight</code></p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.TablePersoDialog/methods/getContentWidth">contentWidth</a>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>contentWidth</code></p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHasGrouping" href="#/api/sap.m.TablePersoDialog/methods/getHasGrouping">hasGrouping</a>.</p>
             * @returns boolean <p>Value of property <code>hasGrouping</code></p>
             */
            getHasGrouping(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialColumnState" href="#/api/sap.m.TablePersoDialog/methods/getInitialColumnState">initialColumnState</a>.</p>
             * @returns any <p>Value of property <code>initialColumnState</code></p>
             */
            getInitialColumnState(): any;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoDialogFor" href="#/api/sap.m.TablePersoDialog/methods/getPersoDialogFor">persoDialogFor</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getPersoDialogFor(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoMap" href="#/api/sap.m.TablePersoDialog/methods/getPersoMap">persoMap</a>.</p>
             * @returns any <p>Value of property <code>persoMap</code></p>
             */
            getPersoMap(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowResetAll" href="#/api/sap.m.TablePersoDialog/methods/getShowResetAll">showResetAll</a>.</p>
             * @returns boolean <p>Value of property <code>showResetAll</code></p>
             */
            getShowResetAll(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSelectAll" href="#/api/sap.m.TablePersoDialog/methods/getShowSelectAll">showSelectAll</a>.</p>
             * @returns boolean <p>Value of property <code>showSelectAll</code></p>
             */
            getShowSelectAll(): boolean;
            /**
             * <p>Initializes the TablePersoDialog instance after creation.</p>
             */
            protected init(): void;
            /**
             * <p>Sets the content of the dialog, being list items representing the associated table's column settings, and opens the dialog</p>
             */
            open(): void;
            /**
             * <p>Returns the personalizations made. Currently supports a 'columns' property which holds an array of settings, one element per column in the associated table. The element contains column-specific information as follows: id: column id; order: new order; text: the column's header text that was displayed in the dialog; visible: visibility (true or false).</p>
             * @returns any <p>the personalization data</p>
             */
            retrievePersonalizations(): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumnInfoCallback" href="#/api/sap.m.TablePersoDialog/methods/getColumnInfoCallback">columnInfoCallback</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oColumnInfoCallback <p>New value for property <code>columnInfoCallback</code></p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setColumnInfoCallback(oColumnInfoCallback: any): sap.m.TablePersoDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentHeight" href="#/api/sap.m.TablePersoDialog/methods/getContentHeight">contentHeight</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentHeight <p>New value for property <code>contentHeight</code></p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentHeight(sContentHeight: sap.ui.core.CSSSize): sap.m.TablePersoDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentWidth" href="#/api/sap.m.TablePersoDialog/methods/getContentWidth">contentWidth</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sContentWidth <p>New value for property <code>contentWidth</code></p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContentWidth(sContentWidth: sap.ui.core.CSSSize): sap.m.TablePersoDialog;
            /**
             * <p>Setter to turn on/ switch off TablePersoDialog's grouping mode.</p>
             * @param {boolean} bHasGrouping <p>groping mode on or off.</p>
             * @returns sap.m.TablePersoDialog <p>the TablePersoDialog instance.</p>
             */
            setHasGrouping(bHasGrouping: boolean): sap.m.TablePersoDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInitialColumnState" href="#/api/sap.m.TablePersoDialog/methods/getInitialColumnState">initialColumnState</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oInitialColumnState <p>New value for property <code>initialColumnState</code></p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInitialColumnState(oInitialColumnState: any): sap.m.TablePersoDialog;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoDialogFor" href="#/api/sap.m.TablePersoDialog/methods/getPersoDialogFor">persoDialogFor</a>.</p>
             * @param {sap.ui.core.ID | sap.m.Table} oPersoDialogFor <p>ID of an element which becomes the new target of this persoDialogFor association; alternatively, an element instance may be given</p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPersoDialogFor(oPersoDialogFor: sap.ui.core.ID | sap.m.Table): sap.m.TablePersoDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPersoMap" href="#/api/sap.m.TablePersoDialog/methods/getPersoMap">persoMap</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {any} oPersoMap <p>New value for property <code>persoMap</code></p>
             * @returns sap.m.TablePersoDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPersoMap(oPersoMap: any): sap.m.TablePersoDialog;
            /**
             * <p>Setter to show/hide TablePersoDialog's 'Undo Personalization' button.</p>
             * @param {boolean} bShowResetAll <p>'undo Personalization' button visible or not.</p>
             * @returns sap.m.TablePersoDialog <p>the TablePersoDialog instance.</p>
             */
            setShowResetAll(bShowResetAll: boolean): sap.m.TablePersoDialog;
            /**
             * <p>Setter to show/hide TablePersoDialog's 'selectAll' checkbox.</p>
             * @param {boolean} bShowSelectAll <p>selectAll checkbox visible or not.</p>
             * @returns sap.m.TablePersoDialog <p>the TablePersoDialog instance.</p>
             */
            setShowSelectAll(bShowSelectAll: boolean): sap.m.TablePersoDialog;
        }
        /**
         * <p>Table Personalization Provider</p>
         */
        export abstract class TablePersoProvider extends sap.ui.base.ManagedObject {
            /**
             * <p>This is an abstract TablePersoProvider, describing the interface for a real TablePersoProvider.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject</a> can be used.</p>
             */
            constructor();
            /**
             * <p>Removes the personalization bundle This must return a jQuery promise (see http://api.jquery.com/promise/)</p>
             */
            delPersData(): void;
            /**
             * <p>Initializes the TablePersoProvider instance after creation.</p>
             */
            protected init(): void;
            /**
             * <p>Resets user’s personalization for a given table so that ‘getPersData’ will deliver its initial state. If no table is specified, all personalizations of the currently logged on user are reset.</p><p>This must return a jQuery promise (see http://api.jquery.com/promise/)</p>
             */
            resetPersData(): void;
            /**
             * <p>Stores the personalization bundle, overwriting any previous bundle completely This must return a jQuery promise (see http://api.jquery.com/promise/)</p>
             * @param {any} oBundle 
             */
            setPersData(oBundle: any): void;
        }
        /**
         * <p>A dialog to select items in a table containing multiple values and attributes. </p><h3>Overview</h3><p> The table select dialog helps users select items in a table-like structure with several attributes and values per item. A search fields helps narrow down the results. </p><h3>Structure</h3><p> The table select dialog consists of the following elements: <ul> <li> Search field - used to search enter search terms for a specific item.</li> <li> Info toolbar (only in multi-select mode) - displays the number of currently selected items.</li> <li> Content - the table with the items.</li> <li> Footer (optional) - a toolbar for actions.</li> </ul> Table select dialog supports multi-selection when the <code>multiSelect</code> property is set.</p><p>The selected items can be stored for later editing when the <code>rememberSelections</code> property is set. <b>Note:</b> This property has to be set before the dialog is opened. </p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>You need to select one or more items from a comprehensive list that contains multiple attributes or values.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li>You need to select only one item from a predefined list of single-value options. Use the <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">Select</a> control instead.</li> <li>You need to display complex content without having the user navigate away from the current page or you want to prompt the user for an action. Use the <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">Dialog</a> control instead.</li> <li>You need to select items within a query-based range. Use the <a target="_blank" href="https://experience.sap.com/fiori-design-web/value-help-dialog/">Value Help Dialog</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
        title="Information published on SAP site" class="sapUISDKExternalLink"/> control instead.</li> <li>You need to filter a set of items without any selection. Use the <a target="_blank" href="https://experience.sap.com/fiori-design-web/filter-bar/">Filter Bar</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
        title="Information published on SAP site" class="sapUISDKExternalLink"/> control instead.</li> </ul> </p><h4>Notes:</h4><p> <ul> <li>The property <code>growing</code> must not be used together with two-way binding. <li>When the property <code>growing</code> is set to <code>true</code> (default value), the features <code>selected count</code> in info bar, <code>search</code> and <code>select/deselect all</code>, if present, work only for the currently loaded items. To make sure that all items in the table are loaded at once and the above features work properly, set the property to <code>false</code>. <li>Since version 1.58, the columns headers and the info toolbar are sticky (remain fixed on top when scrolling). This feature is not supported in all browsers. <li>The TableSelectDialog is usually displayed at the center of the screen. Its size and position can be changed by the user. To enable this you need to set the <code>resizable</code> and <code>draggable</code> properties. Both properties are available only in desktop mode.</li> For more information on browser support limitations, you can refer to the <a target="_self" class="jsdoclink" href="#/api/sap.m.ListBase">sap.m.ListBase</a> <code>sticky</code> property. </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>On smaller screens, the columns of the table wrap and build a list that shows all the information.</li> </ul></p>
         */
        export class TableSelectDialog extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new TableSelectDialog.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Sets the model for the internal table and the current control, so that both controls can be used with data binding.</p>
             */
            _setModel: any;
            /**
             * <p>Adds some column to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p>
             * @param {sap.m.Column} oColumn <p>The column to add; if empty, nothing is inserted</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addColumn(oColumn: sap.m.Column): sap.m.TableSelectDialog;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p>
             * @param {sap.m.ColumnListItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.ColumnListItem): sap.m.TableSelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TableSelectDialog/events/cancel">cancel</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.</p><p>Fires when the Cancel button is clicked.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancel(oData: any, fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TableSelectDialog/events/confirm">confirm</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.</p><p>Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachConfirm(oData: any, fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TableSelectDialog/events/liveChange">liveChange</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.</p><p>Fires when the value of the search field is changed by a user (for example at each key press).</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.TableSelectDialog/events/search">search</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.</p><p>Fires when the search button has been clicked on dialog.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSearch(oData: any, fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindColumns(oBindingInfo: any): sap.m.TableSelectDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.TableSelectDialog;
            /**
             * <p>Destroys all the columns in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyColumns(): sap.m.TableSelectDialog;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.TableSelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TableSelectDialog/events/cancel">cancel</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancel(fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TableSelectDialog/events/confirm">confirm</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachConfirm(fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TableSelectDialog/events/liveChange">liveChange</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.TableSelectDialog/events/search">search</a> event of this <code>sap.m.TableSelectDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSearch(fnFunction: Function, oListener?: any): sap.m.TableSelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.TableSelectDialog/events/cancel">cancel</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancel(mParameters?: any): sap.m.TableSelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.TableSelectDialog/events/confirm">confirm</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireConfirm(mParameters?: any): sap.m.TableSelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TableSelectDialog/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.TableSelectDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="search" href="#/api/sap.m.TableSelectDialog/events/search">search</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSearch(mParameters?: any): sap.m.TableSelectDialog;
            /**
             * <p>Gets current busy state.</p>
             * @returns boolean <p>value of currtent busy state.</p>
             */
            getBusy(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p><p>The columns bindings.</p>
             * @returns sap.m.Column[] 
             */
            getColumns(): sap.m.Column[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConfirmButtonText" href="#/api/sap.m.TableSelectDialog/methods/getConfirmButtonText">confirmButtonText</a>.</p><p>Overwrites the default text for the confirmation button.</p>
             * @returns string <p>Value of property <code>confirmButtonText</code></p>
             */
            getConfirmButtonText(): string;
            /**
             * <p>Retrieves content height of the select dialog <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @returns sap.ui.core.CSSSize <p>sHeight the content height of the internal dialog</p>
             */
            getContentHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Retrieves content width of the select dialog <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @returns sap.ui.core.CSSSize <p>sWidth the content width of the internal dialog</p>
             */
            getContentWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Transfers method to the inner dialog: getDomRef</p>
             * @returns HTMLElement <p>The Element's DOM Element sub DOM Element or null</p>
             */
            getDomRef(): HTMLElement;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraggable" href="#/api/sap.m.TableSelectDialog/methods/getDraggable">draggable</a>.</p><p>When set to <code>true</code>, the TableSelectDialog is draggable by its header. The default value is <code>false</code>. <b>Note</b>: The SelectDialog can be draggable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>draggable</code></p>
             */
            getDraggable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.TableSelectDialog/methods/getGrowing">growing</a>.</p><p>Determines the progressive loading. When set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the bound model. <b>Note:</b> This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding. <b>Note:</b> If the property is set to true, the features <code>selected count</code> in info bar, <code>search</code> and <code>select/deselect all</code>, if present, work only for the currently loaded items. To make sure that all items in the table are loaded at once and the above features work properly, we recommend setting the <code>growing</code> property to false.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>growing</code></p>
             */
            getGrowing(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingThreshold" href="#/api/sap.m.TableSelectDialog/methods/getGrowingThreshold">growingThreshold</a>.</p><p>Determines the number of items initially displayed in the table and defines the number of items to be requested from the model for each grow. This property can only be used if the property <code>growing</code> is set to <code>true</code>.</p>
             * @returns number <p>Value of property <code>growingThreshold</code></p>
             */
            getGrowingThreshold(): number;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p><p>The items of the table.</p>
             * @returns sap.m.ColumnListItem[] 
             */
            getItems(): sap.m.ColumnListItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelect" href="#/api/sap.m.TableSelectDialog/methods/getMultiSelect">multiSelect</a>.</p><p>Enables the user to select several options from the table.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>multiSelect</code></p>
             */
            getMultiSelect(): boolean;
            /**
             * <p>Retrieves the internal List's no data text property</p>
             * @returns string <p>the current no data text</p>
             */
            getNoDataText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.TableSelectDialog/methods/getRememberSelections">rememberSelections</a>.</p><p>Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false" Note: This property must be set before the Dialog is opened to have an effect.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>rememberSelections</code></p>
             */
            getRememberSelections(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getResizable" href="#/api/sap.m.TableSelectDialog/methods/getResizable">resizable</a>.</p><p>When set to <code>true</code>, the TableSelectDialog will have a resize handler in its bottom right corner. The default value is <code>false</code>. <b>Note</b>: The SelectDialog can be resizable only in desktop mode.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>resizable</code></p>
             */
            getResizable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowClearButton" href="#/api/sap.m.TableSelectDialog/methods/getShowClearButton">showClearButton</a>.</p><p>This flag controls whether the Clear button is shown. When set to <code>true</code>, it provides a way to clear a selection made in Table Select Dialog.</p><p>We recommend enabling of the Clear button in the following cases, where a mechanism to clear the value is needed: In case the Table Select Dialog is in single-selection mode (default mode) and <code>rememberSelections</code> is set to <code>true</code>. The Clear button needs to be enabled in order to allow users to clear the selection. In case of using <code>sap.m.Input</code> with <code>valueHelpOnly</code> set to <code>true</code>, the Clear button can be used for clearing the selection. In case the application stores a value and uses only Table Select Dialog to edit/maintain it.</p><p>Optional: In case <code>multiSelect</code> is set to <code>true</code>, the selection can be easily cleared with one click.</p><p><b>Note:</b> When used with OData, only the loaded selections will be cleared.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showClearButton</code></p>
             */
            getShowClearButton(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.TableSelectDialog/methods/getTitle">title</a>.</p><p>Specifies the title text in the dialog header.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Transfers method to the inner dialog: hasStyleClass</p>
             * @returns boolean <p>true if the class is set, false otherwise</p>
             */
            hasStyleClass(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.Column</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Column} oColumn <p>The column whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfColumn(oColumn: sap.m.Column): number;
            /**
             * <p>Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ColumnListItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.ColumnListItem): number;
            /**
             * <p>Inserts a column into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p>
             * @param {sap.m.Column} oColumn <p>The column to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the column should be inserted at; for a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted at the last position</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertColumn(oColumn: sap.m.Column, iIndex: number): sap.m.TableSelectDialog;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p>
             * @param {sap.m.ColumnListItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.ColumnListItem, iIndex: number): sap.m.TableSelectDialog;
            /**
             * <p>Invalidates the dialog instead of this control, as there is no renderer.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            protected invalidate(): sap.m.TableSelectDialog;
            /**
             * <p>Shows the busy state and is called after the renderer is finished.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            protected onAfterRendering(): sap.m.TableSelectDialog;
            /**
             * <p>Opens the internal dialog with a searchfield and a table.</p>
             * @param {string} sSearchValue <p>Value for the search. The table will be automatically trigger the search event if this parameter is set.</p>
             * @returns sap.m.TableSelectDialog <p><code>this</code> to allow method chaining</p>
             */
            open(sSearchValue: string): sap.m.TableSelectDialog;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Column[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllColumns(): sap.m.Column[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ColumnListItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.ColumnListItem[];
            /**
             * <p>Removes a column from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a>.</p>
             * @param {number | string | sap.m.Column} vColumn <p>The column to remove or its index or id</p>
             * @returns sap.m.Column <p>The removed column or <code>null</code></p>
             */
            removeColumn(vColumn: number | string | sap.m.Column): sap.m.Column;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.ColumnListItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.ColumnListItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.ColumnListItem): sap.m.ColumnListItem;
            /**
             * <p>Enables/Disables busy state.</p>
             * @param {boolean} flag <p>for enabling busy indicator</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setBusy(flag: boolean): sap.m.TableSelectDialog;
            /**
             * <p>Sets the busyIndicatorDelay value to the internal table</p>
             * @param {number} iValue <p>Value for the busyIndicatorDelay.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setBusyIndicatorDelay(iValue: number): sap.m.TableSelectDialog;
            /**
             * <p>Sets the text of the confirmation button.</p>
             * @param {string} sText <p>The text for the confirm button</p>
             * @returns sap.m.TableSelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setConfirmButtonText(sText: string): sap.m.TableSelectDialog;
            /**
             * <p>Sets content height of the select dialog <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @param {sap.ui.core.CSSSize} sHeight <p>the new content height value for the dialog</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setContentHeight(sHeight: sap.ui.core.CSSSize): sap.m.TableSelectDialog;
            /**
             * <p>Sets content width of the select dialog <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">sap.m.Dialog</a></p>
             * @param {sap.ui.core.CSSSize} sWidth <p>the new content width value for the dialog</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setContentWidth(sWidth: sap.ui.core.CSSSize): sap.m.TableSelectDialog;
            /**
             * <p>Sets the draggable property.</p>
             * @param {boolean} bValue <p>Value for the draggable property</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setDraggable(bValue: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the growing to the internal table</p>
             * @param {boolean} bValue <p>Value for the table's growing.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setGrowing(bValue: boolean): sap.m.TableSelectDialog;
            /**
             * <p>Sets the growing threshold to the internal table</p>
             * @param {number} iValue <p>Value for the table's growing threshold.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setGrowingThreshold(iValue: number): sap.m.TableSelectDialog;
            /**
             * <p>Enables/Disables multi selection mode.</p>
             * @param {boolean} bMulti <p>flag for multi selection mode</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setMultiSelect(bMulti: boolean): sap.m.TableSelectDialog;
            /**
             * <p>Sets the no data text of the internal table</p>
             * @param {string} sNoDataText <p>the no data text for the table</p>
             */
            setNoDataText(sNoDataText: string): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRememberSelections" href="#/api/sap.m.TableSelectDialog/methods/getRememberSelections">rememberSelections</a>.</p><p>Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false" Note: This property must be set before the Dialog is opened to have an effect.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRememberSelections <p>New value for property <code>rememberSelections</code></p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRememberSelections(bRememberSelections: boolean): sap.m.TableSelectDialog;
            /**
             * <p>Sets the resizable property.</p>
             * @param {boolean} bValue <p>Value for the resizable property</p>
             * @returns sap.m.SelectDialog <p><code>this</code> pointer for chaining</p>
             */
            setResizable(bValue: boolean): sap.m.SelectDialog;
            /**
             * <p>Sets the Clear button visible state</p>
             * @param {boolean} bVisible <p>Value for the Clear button visible state.</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setShowClearButton(bVisible: boolean): sap.m.TableSelectDialog;
            /**
             * <p>Sets the title of the internal dialog</p>
             * @param {string} sTitle <p>the title text for the dialog</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            setTitle(sTitle: string): sap.m.TableSelectDialog;
            /**
             * <p>Transfers method to the inner dialog: toggleStyleClass</p>
             * @returns sap.m.TableSelectDialog <p>this pointer for chaining</p>
             */
            toggleStyleClass(): sap.m.TableSelectDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.m.TableSelectDialog/methods/getColumns">columns</a> from model data.</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindColumns(): sap.m.TableSelectDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.TableSelectDialog/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.TableSelectDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.TableSelectDialog;
        }
        /**
         * <p>The <code>Text</code> control can be used for embedding longer text paragraphs, that need text wrapping, into your app. If the configured text value contains HTML code or script tags, those will be escaped.</p><p>As of version 1.60, you can hyphenate the text with the use of the <code>wrappingType</code> property. For more information, see <a target="_self" href="#/topic/6322164936f047de941ec522b95d7b70">Text Controls Hyphenation</a>.</p><p><b>Note:</b> Line breaks will always be visualized except when the <code>wrapping</code> property is set to <code>false</code>. In addition, tabs and whitespace can be preserved by setting the <code>renderWhitespace</code> property to <code>true</code>.</p>
         */
        export class Text extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Text.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Determines per instance whether line height should be cached or not.</p><p>Default value is true.</p>
             */
            protected cacheLineHeight: boolean;
            /**
             * <p>Ellipsis(...) text to indicate more text when clampText function is used.</p><p>Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.</p>
             */
            protected ellipsis: string;
            /**
             * <p>Defines whether browser supports native line clamp or not</p>
             */
            protected hasNativeLineClamp: any;
            /**
             * <p>Default line height value as a number when line height is normal.</p><p>This value is required during max height calculation for the browsers that do not support line clamping. It is better to define line height in CSS instead of "normal" to get consistent <code>maxLines</code> results since normal line height not only varies from browser to browser but it also varies from one font face to another and can also vary within a given face.</p>
             */
            protected normalLineHeight: number;
            /**
             * <p>Binds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Text/methods/getText">text</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">ManagedObject.bindProperty</a> for a detailed description of the possible properties of <code>oBindingInfo</code></p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindText(oBindingInfo: any): sap.m.Text;
            /**
             * <p>Decides whether the control can use native line clamp feature or not.</p><p>In RTL mode native line clamp feature is not supported.</p>
             * @returns Boolean 
             */
            protected canUseNativeLineClamp(): Boolean;
            /**
             * <p>Sets the max height to support <code>maxLines</code> property.</p>
             * @param {HTMLElement} oDomRef <p>DOM reference of the text container.</p>
             * @returns number <p>Calculated max height value.</p>
             */
            protected clampHeight(oDomRef?: HTMLElement): number;
            /**
             * <p>Clamps the wrapping text according to max lines and returns the found ellipsis position. Parameters can be used for better performance.</p>
             * @param {HTMLElement} oDomRef <p>DOM reference of the text container.</p>
             * @param {number} iStartPos <p>Start point of the ellipsis search.</p>
             * @param {number} iEndPos <p>End point of the ellipsis search.</p>
             * @returns int|undefined <p>Returns found ellipsis position or undefined.</p>
             */
            protected clampText(oDomRef?: HTMLElement, iStartPos?: number, iEndPos?: number): number | undefined;
            /**
             * <p>Gets the accessibility information for the text.<br><br>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Accessibility information for the text.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Returns the max height according to max lines and line height calculation. This is not calculated max height!</p>
             * @param {HTMLElement} oDomRef <p>DOM reference of the text container.</p>
             * @returns number <p>The clamp height of the text.</p>
             */
            protected getClampHeight(oDomRef?: HTMLElement): number;
            /**
             * <p>Caches and returns the computed line height of the text.<br><br>References: <ul><li>sap.m.Text#cacheLineHeight</li></ul></p>
             * @param {HTMLElement} oDomRef <p>DOM reference of the text container.</p>
             * @returns number <p>returns calculated line height</p>
             */
            protected getLineHeight(oDomRef?: HTMLElement): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLines" href="#/api/sap.m.Text/methods/getMaxLines">maxLines</a>.</p><p>Limits the number of lines for wrapping texts.</p><p><b>Note</b>: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.</p>
             * @returns number <p>Value of property <code>maxLines</code></p>
             */
            getMaxLines(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRenderWhitespace" href="#/api/sap.m.Text/methods/getRenderWhitespace">renderWhitespace</a>.</p><p>Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved by the browser. Depending on wrapping property text will either only wrap on line breaks or wrap when necessary, and on line breaks.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>renderWhitespace</code></p>
             */
            getRenderWhitespace(): boolean;
            /**
             * <p>Gets the text.</p>
             * @param {boolean} bNormalize <p>Indication for normalized text.</p>
             * @returns string <p>Text value.</p>
             */
            getText(bNormalize: boolean): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Text/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the text.</p><p>Default value is <code>Begin</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Text/methods/getTextDirection">textDirection</a>.</p><p>Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Returns the text node container's DOM reference. This can be different from <code>getDomRef</code> when inner wrapper is needed.</p>
             * @returns HTMLElement|null <p>DOM reference of the text.</p>
             */
            protected getTextDomRef(): HTMLElement | null;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Text/methods/getWidth">width</a>.</p><p>Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Text/methods/getWrapping">wrapping</a>.</p><p>Enables text wrapping.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Text/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>Default value is <code>Normal</code>.</p>
             * @returns sap.m.WrappingType <p>Value of property <code>wrappingType</code></p>
             */
            getWrappingType(): sap.m.WrappingType;
            /**
             * <p>Determines whether max lines should be rendered or not.</p>
             * @returns HTMLElement|null <p>Max lines of the text.</p>
             */
            protected hasMaxLines(): HTMLElement | null;
            /**
             * <p>Overwrites onAfterRendering</p>
             */
            onAfterRendering(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLines" href="#/api/sap.m.Text/methods/getMaxLines">maxLines</a>.</p><p>Limits the number of lines for wrapping texts.</p><p><b>Note</b>: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iMaxLines <p>New value for property <code>maxLines</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLines(iMaxLines: number): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRenderWhitespace" href="#/api/sap.m.Text/methods/getRenderWhitespace">renderWhitespace</a>.</p><p>Specifies how whitespace and tabs inside the control are handled. If true, whitespace will be preserved by the browser. Depending on wrapping property text will either only wrap on line breaks or wrap when necessary, and on line breaks.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bRenderWhitespace <p>New value for property <code>renderWhitespace</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRenderWhitespace(bRenderWhitespace: boolean): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Text/methods/getText">text</a>.</p><p>Determines the text to be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Text/methods/getTextAlign">textAlign</a>.</p><p>Sets the horizontal alignment of the text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Begin</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Text/methods/getTextDirection">textDirection</a>.</p><p>Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Text/methods/getWidth">width</a>.</p><p>Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Text/methods/getWrapping">wrapping</a>.</p><p>Enables text wrapping.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.Text;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Text/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Normal</code>.</p>
             * @param {sap.m.WrappingType} sWrappingType <p>New value for property <code>wrappingType</code></p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrappingType(sWrappingType: sap.m.WrappingType): sap.m.Text;
            /**
             * <p>Unbinds property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Text/methods/getText">text</a> from model data.</p>
             * @returns sap.m.Text <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindText(): sap.m.Text;
        }
        /**
         * <p>A control that is used for multi-line input of text. </p><h3>Overview</h3><p> The text area is used to enter multiple lines of text. When empty, it can hold a placeholder similar to an <a target="_self" class="jsdoclink" href="#/api/sap.m.Input">input</a>. You can define the height and width of the text area and also determine specific behavior when handling long texts. </p><h3>Structure</h3><p> Parameters that determine the size: <ul> <li><code>rows</code> - Number of visible text lines (overruled by <code>height</code>, if both are set)</li> <li><code>cols</code> - Number of visible characters per line line (overruled by <code>width</code>, if both are set)</li> <li><code>height</code> - Height of the control</li> <li><code>width</code> - Width of the control</li> </ul> Parameters that determine the behavior: <ul> <li><code>growing</code> - The text area adjusts its size based on the content</li> <li><code>growingMaxLines</code> - Threshold for the <code>growing</code> property (shouldn't exceed the screen size)</li> <li><code>maxLength</code> - Maximum number of characters that can be entered in a text area</li> <li><code>wrapping</code> - The way the entered text is wrapped by the control</li> <li><code>showExceededText</code> - Determines how text beyond the <code>maxLength</code> length is handled</li> </ul> </p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>You want to enter multiple lines of text.</li> <li>Always provide labels for a text area.</li> <li>A placeholder does not substitute a label.</li> </ul> </p><h3>Responsive Behavior</h3><p> <ul> <li>On smaller screens, you can scroll down the text area to see the entire text. To indicate that the text continues, the control shows only half of the last line.</li> <li>If you have a growing text area, have in mind that its maximum height should not exceed the height of the screen. If that is the case, the screen height is used instead.</li> <li>If <code>showExceededText</code> is set to TRUE and you paste a longer text, all characters beyond the <code>maxLength</code> limit are automatically selected.</li> <li>If <code>showExceededText</code> is set to TRUE, the control will display a counter for the remaining characters.</p>
         */
        export class TextArea extends sap.m.InputBase {
            /**
             * <p>Constructor for a new TextArea.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TextArea/events/liveChange">liveChange</a> event of this <code>sap.m.TextArea</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TextArea</code> itself.</p><p>Is fired whenever the user has modified the text shown on the text area.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code> itself</p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachLiveChange(oData: any, fnFunction: Function, oListener?: any): sap.m.TextArea;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TextArea/events/liveChange">liveChange</a> event of this <code>sap.m.TextArea</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachLiveChange(fnFunction: Function, oListener?: any): sap.m.TextArea;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="liveChange" href="#/api/sap.m.TextArea/events/liveChange">liveChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireLiveChange(mParameters?: any): sap.m.TextArea;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCols" href="#/api/sap.m.TextArea/methods/getCols">cols</a>.</p><p>Defines the visible width of the control, in average character widths. <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.</p><p>Default value is <code>20</code>.</p>
             * @returns number <p>Value of property <code>cols</code></p>
             */
            getCols(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.TextArea/methods/getGrowing">growing</a>.</p><p>Indicates the ability of the control to automatically grow and shrink dynamically with its content. <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>growing</code></p>
             */
            getGrowing(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingMaxLines" href="#/api/sap.m.TextArea/methods/getGrowingMaxLines">growingMaxLines</a>.</p><p>Defines the maximum number of lines that the control can grow.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>growingMaxLines</code></p>
             */
            getGrowingMaxLines(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TextArea/methods/getHeight">height</a>.</p><p>Defines the height of the control.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.TextArea/methods/getMaxLength">maxLength</a>.</p><p>Defines the maximum number of characters that the <code>value</code> can be.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>maxLength</code></p>
             */
            getMaxLength(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.TextArea/methods/getRows">rows</a>.</p><p>Defines the number of visible text lines for the control. <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.</p><p>Default value is <code>2</code>.</p>
             * @returns number <p>Value of property <code>rows</code></p>
             */
            getRows(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowExceededText" href="#/api/sap.m.TextArea/methods/getShowExceededText">showExceededText</a>.</p><p>Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.</p><p>If set to <code>false</code> the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property. If set to <code>true</code> the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below the input field displays their number.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>showExceededText</code></p>
             */
            getShowExceededText(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueLiveUpdate" href="#/api/sap.m.TextArea/methods/getValueLiveUpdate">valueLiveUpdate</a>.</p><p>Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>valueLiveUpdate</code></p>
             */
            getValueLiveUpdate(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.TextArea/methods/getWrapping">wrapping</a>.</p><p>Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.ui.core.Wrapping <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): sap.ui.core.Wrapping;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCols" href="#/api/sap.m.TextArea/methods/getCols">cols</a>.</p><p>Defines the visible width of the control, in average character widths. <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>20</code>.</p>
             * @param {number} iCols <p>New value for property <code>cols</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setCols(iCols: number): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowing" href="#/api/sap.m.TextArea/methods/getGrowing">growing</a>.</p><p>Indicates the ability of the control to automatically grow and shrink dynamically with its content. <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGrowing <p>New value for property <code>growing</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowing(bGrowing: boolean): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGrowingMaxLines" href="#/api/sap.m.TextArea/methods/getGrowingMaxLines">growingMaxLines</a>.</p><p>Defines the maximum number of lines that the control can grow.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iGrowingMaxLines <p>New value for property <code>growingMaxLines</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGrowingMaxLines(iGrowingMaxLines: number): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TextArea/methods/getHeight">height</a>.</p><p>Defines the height of the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxLength" href="#/api/sap.m.TextArea/methods/getMaxLength">maxLength</a>.</p><p>Defines the maximum number of characters that the <code>value</code> can be.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>0</code>.</p>
             * @param {number} iMaxLength <p>New value for property <code>maxLength</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxLength(iMaxLength: number): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.m.TextArea/methods/getRows">rows</a>.</p><p>Defines the number of visible text lines for the control. <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>2</code>.</p>
             * @param {number} iRows <p>New value for property <code>rows</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRows(iRows: number): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowExceededText" href="#/api/sap.m.TextArea/methods/getShowExceededText">showExceededText</a>.</p><p>Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.</p><p>If set to <code>false</code> the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property. If set to <code>true</code> the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below the input field displays their number.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShowExceededText <p>New value for property <code>showExceededText</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowExceededText(bShowExceededText: boolean): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueLiveUpdate" href="#/api/sap.m.TextArea/methods/getValueLiveUpdate">valueLiveUpdate</a>.</p><p>Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bValueLiveUpdate <p>New value for property <code>valueLiveUpdate</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueLiveUpdate(bValueLiveUpdate: boolean): sap.m.TextArea;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.TextArea/methods/getWrapping">wrapping</a>.</p><p>Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.ui.core.Wrapping} sWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.TextArea <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(sWrapping: sap.ui.core.Wrapping): sap.m.TextArea;
        }
        /**
         * <p>A tile to be displayed in the tile container. Use this tile as the base class for specialized tile implementations. Use the renderer _addOuterClass methods to add a style class to the main surface of the Tile. In this class set the background color, gradients or background images. Instead of implementing the default render method in the renderer, implement your content HTML in the _renderContent method of the specialized tile.</p>
         */
        export class Tile extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Tile.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Tile/events/press">press</a> event of this <code>sap.m.Tile</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Tile</code> itself.</p><p>Tap event is raised if the user taps or clicks the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code> itself</p>
             * @returns sap.m.Tile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Tile;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Tile/events/press">press</a> event of this <code>sap.m.Tile</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Tile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Tile;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Tile/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Tile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.Tile;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRemovable" href="#/api/sap.m.Tile/methods/getRemovable">removable</a>.</p><p>Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>removable</code></p>
             */
            getRemovable(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRemovable" href="#/api/sap.m.Tile/methods/getRemovable">removable</a>.</p><p>Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bRemovable <p>New value for property <code>removable</code></p>
             * @returns sap.m.Tile <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setRemovable(bRemovable: boolean): sap.m.Tile;
        }
        /**
         * <p>A container that arranges same-size tiles nicely on carousel pages.</p>
         */
        export class TileContainer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new TileContainer.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds a Tile to the end of the tiles collection.</p>
             * @param {sap.m.Tile} oTile <p>The tile to add</p>
             * @returns sap.m.TileContainer <p>this pointer for chaining</p>
             */
            addTile(oTile: sap.m.Tile): sap.m.TileContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileAdd" href="#/api/sap.m.TileContainer/events/tileAdd">tileAdd</a> event of this <code>sap.m.TileContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.</p><p>Fires when a Tile is added.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTileAdd(oData: any, fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileDelete" href="#/api/sap.m.TileContainer/events/tileDelete">tileDelete</a> event of this <code>sap.m.TileContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.</p><p>Fires if a Tile is deleted in Edit mode.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTileDelete(oData: any, fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileMove" href="#/api/sap.m.TileContainer/events/tileMove">tileMove</a> event of this <code>sap.m.TileContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.</p><p>Fires if a Tile is moved.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTileMove(oData: any, fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Deletes a Tile.</p>
             * @param {sap.m.Tile} oTile <p>The tile to move</p>
             * @returns sap.m.TileContainer <p>this pointer for chaining</p>
             */
            deleteTile(oTile: sap.m.Tile): sap.m.TileContainer;
            /**
             * <p>Destroys all the tiles in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.TileContainer/methods/getTiles">tiles</a>.</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyTiles(): sap.m.TileContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileAdd" href="#/api/sap.m.TileContainer/events/tileAdd">tileAdd</a> event of this <code>sap.m.TileContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTileAdd(fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileDelete" href="#/api/sap.m.TileContainer/events/tileDelete">tileDelete</a> event of this <code>sap.m.TileContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTileDelete(fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileMove" href="#/api/sap.m.TileContainer/events/tileMove">tileMove</a> event of this <code>sap.m.TileContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTileMove(fnFunction: Function, oListener?: any): sap.m.TileContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileAdd" href="#/api/sap.m.TileContainer/events/tileAdd">tileAdd</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTileAdd(mParameters?: any): sap.m.TileContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileDelete" href="#/api/sap.m.TileContainer/events/tileDelete">tileDelete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTileDelete(mParameters?: any): sap.m.TileContainer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tileMove" href="#/api/sap.m.TileContainer/events/tileMove">tileMove</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTileMove(mParameters?: any): sap.m.TileContainer;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAllowAdd" href="#/api/sap.m.TileContainer/methods/getAllowAdd">allowAdd</a>.</p><p>Determines whether the user is allowed to add Tiles in Edit mode (editable = true).</p>
             * @returns boolean <p>Value of property <code>allowAdd</code></p>
             */
            getAllowAdd(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.TileContainer/methods/getEditable">editable</a>.</p><p>Determines whether the TileContainer is editable so you can move, delete or add tiles.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TileContainer/methods/getHeight">height</a>.</p><p>Defines the height of the TileContainer in px.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Returns the index of the first Tile visible in the current page.</p>
             * @returns number <p>The index of the first Tile that is visible in the current page</p>
             */
            getPageFirstTileIndex(): number;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.TileContainer/methods/getTiles">tiles</a>.</p><p>The Tiles to be displayed by the TileContainer.</p>
             * @returns sap.m.Tile[] 
             */
            getTiles(): sap.m.Tile[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.TileContainer/methods/getWidth">width</a>.</p><p>Defines the width of the TileContainer in px.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.Tile</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.TileContainer/methods/getTiles">tiles</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Tile} oTile <p>The tile whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfTile(oTile: sap.m.Tile): number;
            /**
             * <p>Inserts a Tile to the given index.</p>
             * @param {sap.m.Tile} oTile <p>The Tile to insert</p>
             * @param {number} iIndex <p>The new Tile position in the tiles aggregation</p>
             * @returns sap.m.TileContainer <p>this pointer for chaining</p>
             */
            insertTile(oTile: sap.m.Tile, iIndex: number): sap.m.TileContainer;
            /**
             * <p>Moves a given Tile to the given index.</p>
             * @param {sap.m.Tile} vTile <p>The tile to move</p>
             * @param {number} iNewIndex <p>The new Tile position in the tiles aggregation</p>
             * @returns sap.m.TileContainer <p>this pointer for chaining</p>
             */
            moveTile(vTile: sap.m.Tile, iNewIndex: number): sap.m.TileContainer;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.TileContainer/methods/getTiles">tiles</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Tile[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTiles(): sap.m.Tile[];
            /**
             * <p>Removes a tile from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTiles" href="#/api/sap.m.TileContainer/methods/getTiles">tiles</a>.</p>
             * @param {number | string | sap.m.Tile} vTile <p>The tile to remove or its index or id</p>
             * @returns sap.m.Tile <p>The removed tile or <code>null</code></p>
             */
            removeTile(vTile: number | string | sap.m.Tile): sap.m.Tile;
            /**
             * <p>Scrolls to the page where the given Tile or tile index is included. Optionally this can be done animated or not. With IE9 the scroll is never animated.</p>
             * @param {sap.m.Tile | number} vTile <p>The Tile or tile index to be scrolled into view</p>
             * @param {boolean} bAnimated <p>Whether the scroll should be animated</p>
             * @param {sap.m.Tile[]} aVisibleTiles <p>optional list of visible tiles in order to avoid filtering them again.</p>
             */
            scrollIntoView(vTile: sap.m.Tile | number, bAnimated: boolean, aVisibleTiles?: sap.m.Tile[]): void;
            /**
             * <p>Scrolls one page to the left.</p>
             */
            scrollLeft(): void;
            /**
             * <p>Scrolls one page to the right.</p>
             */
            scrollRight(): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAllowAdd" href="#/api/sap.m.TileContainer/methods/getAllowAdd">allowAdd</a>.</p><p>Determines whether the user is allowed to add Tiles in Edit mode (editable = true).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {boolean} bAllowAdd <p>New value for property <code>allowAdd</code></p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAllowAdd(bAllowAdd: boolean): sap.m.TileContainer;
            /**
             * <p>Sets the editable property to the TileContainer, allowing to move icons. This is currently also set with a long tap.</p>
             * @param {boolean} bValue <p>Whether the container is in edit mode or not</p>
             * @returns sap.m.TileContainer <p>this pointer for chaining</p>
             */
            setEditable(bValue: boolean): sap.m.TileContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TileContainer/methods/getHeight">height</a>.</p><p>Defines the height of the TileContainer in px.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.TileContainer;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.TileContainer/methods/getWidth">width</a>.</p><p>Defines the width of the TileContainer in px.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.TileContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.TileContainer;
        }
        /**
         * <p>This control is used within the GenericTile control.</p>
         */
        export class TileContent extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new sap.m.TileContent control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TileContent/methods/getContent">content</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindContent(oBindingInfo: any): sap.m.TileContent;
            /**
             * <p>Destroys the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TileContent/methods/getContent">content</a>.</p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.TileContent;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TileContent/methods/getContent">content</a>.</p><p>The switchable view that depends on the tile type.</p>
             * @returns sap.ui.core.Control 
             */
            getContent(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisabled" href="#/api/sap.m.TileContent/methods/getDisabled">disabled</a>.</p><p>Disables control if true.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>disabled</code></p>
             */
            getDisabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.TileContent/methods/getFooter">footer</a>.</p><p>The footer text of the tile.</p>
             * @returns string <p>Value of property <code>footer</code></p>
             */
            getFooter(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterColor" href="#/api/sap.m.TileContent/methods/getFooterColor">footerColor</a>.</p><p>The semantic color of the footer.</p><p>Default value is <code>Neutral</code>.</p>
             * @returns sap.m.ValueColor <p>Value of property <code>footerColor</code></p>
             */
            getFooterColor(): sap.m.ValueColor;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFrameType" href="#/api/sap.m.TileContent/methods/getFrameType">frameType</a>.</p><p>Frame types: 1x1, 2x1, and auto.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.m.FrameType <p>Value of property <code>frameType</code></p>
             */
            getFrameType(): sap.m.FrameType;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.TileContent/methods/getUnit">unit</a>.</p><p>The percent sign, the currency symbol, or the unit of measure.</p>
             * @returns string <p>Value of property <code>unit</code></p>
             */
            getUnit(): string;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TileContent/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to set</p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setContent(oContent: sap.ui.core.Control): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisabled" href="#/api/sap.m.TileContent/methods/getDisabled">disabled</a>.</p><p>Disables control if true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bDisabled <p>New value for property <code>disabled</code></p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDisabled(bDisabled: boolean): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooter" href="#/api/sap.m.TileContent/methods/getFooter">footer</a>.</p><p>The footer text of the tile.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sFooter <p>New value for property <code>footer</code></p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooter(sFooter: string): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFooterColor" href="#/api/sap.m.TileContent/methods/getFooterColor">footerColor</a>.</p><p>The semantic color of the footer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Neutral</code>.</p>
             * @param {sap.m.ValueColor} sFooterColor <p>New value for property <code>footerColor</code></p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFooterColor(sFooterColor: sap.m.ValueColor): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFrameType" href="#/api/sap.m.TileContent/methods/getFrameType">frameType</a>.</p><p>Frame types: 1x1, 2x1, and auto.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.m.FrameType} sFrameType <p>New value for property <code>frameType</code></p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFrameType(sFrameType: sap.m.FrameType): sap.m.TileContent;
            /**
             * <p>Setter for protected property to enable or disable content rendering. This function does not invalidate the control.</p>
             * @param {boolean} value <p>Determines whether the control's content is rendered or not</p>
             * @returns sap.m.TileContent <p>this To allow method chaining</p>
             */
            protected setRenderContent(value: boolean): sap.m.TileContent;
            /**
             * <p>Setter for protected property to enable or disable footer rendering. This function does not invalidate the control.</p>
             * @param {boolean} value <p>Determines whether the control's footer is rendered or not</p>
             * @returns sap.m.TileContent <p>this to allow method chaining</p>
             */
            protected setRenderFooter(value: boolean): sap.m.TileContent;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUnit" href="#/api/sap.m.TileContent/methods/getUnit">unit</a>.</p><p>The percent sign, the currency symbol, or the unit of measure.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sUnit <p>New value for property <code>unit</code></p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUnit(sUnit: string): sap.m.TileContent;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.TileContent/methods/getContent">content</a> from model data.</p>
             * @returns sap.m.TileContent <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindContent(): sap.m.TileContent;
        }
        /**
         * <p><p>Describes the behavior of tiles when displayed on a small-screened phone (374px wide and lower).</p></p>
         */
        export enum TileSizeBehavior {
            /**
             * <p>Default behavior: Tiles adapt to the size of the screen, getting smaller on small screens.</p>
             */
            Responsive = "Responsive",
            /**
             * <p>Tiles are small all the time, regardless of the actual screen size.</p>
             */
            Small = "Small",
        }
        /**
         * <p>A single-field input control that enables the users to fill time related input fields.</p><h3>Overview</h3><p>The <code>TimePicker</code> control enables the users to fill time related input fields using touch, mouse, or keyboard input.</p><h3>Usage</h3><p>Use this control if you want the user to select a time. If you want the user to select a duration (1 hour), use the <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a> control instead.</p><p>The user can enter a date by:</p><p><ul><li>Using the <code>TimePicker</code> dropdown that opens in a popup</li> <li>Typing it in directly in the input field</li></ul></p><p>On app level, there are two options to provide value for the <code>TimePicker</code> - as a string to the <code>value</code> property or as a JavaScript Date object to the <code>dateValue</code> property (only one of these properties should be used at a time):</p><p><ul><li>Use the <code>value</code> property if you want to bind the <code>TimePicker</code> to a model using the <code>sap.ui.model.type.Time</code></li> <li>Use the <code>value</code> property if the date is provided as a string from the backend or inside the app (for example, as ABAP type DATS field)</li> <li>Use the <code>dateValue</code> property if the date is already provided as a JavaScript Date object or you want to work with a JavaScript Date object. Use <code>dateValue</code> as a helper property to easily obtain the hours, minutes and seconds of the chosen time. Although possible to bind it, the recommendation is to not to do it. When binding is needed, use <code>value</code> property instead</li></ul></p><h3>Formatting</h3><p>All formatting and parsing of values from and to strings is done using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a>. If a value is entered by typing it into the input field, it must fit to the used time format and locale.</p><p>Supported format options are pattern-based on Unicode LDML Date Format notation. See <a target="_blank" href="http://unicode.org/reports/tr35/#Date_Field_Symbol_Table">http://unicode.org/reports/tr35/#Date_Field_Symbol_Table</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></p><p>A time format must be specified, otherwise the default "HH:mm:ss a" will be used. For example, if the <code>valueFormat</code> is "HH-mm-ss a", the <code>displayFormat</code> is "HH:mm:ss a", and the used locale is English, a valid value string is "10-30-15 AM", which leads to an output of "10:30:15 AM".</p><p>If no placeholder is set to the <code>TimePicker</code>, the used <code>displayFormat</code> is displayed as a placeholder. If another placeholder is needed, it must be set.</p><p><b>Note:</b> If the string does NOT match the <code>displayFormat</code> (from user input) or the <code>valueFormat</code> (on app level), the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> makes an attempt to parse it based on the locale settings. For more information, see the respective documentation in the API Reference.</p><h3>Responsive behavior</h3><p>The <code>TimePicker</code> is responsive and fully adapts to all device types. For larger screens, such as tablet or desktop, it opens as a popover. For mobile devices, it opens in full screen.</p>
         */
        export class TimePicker extends sap.m.DateTimeField {
            /**
             * <p>Constructor for a new <code>TimePicker</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some rule to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule to add; if empty, nothing is inserted</p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addRule(oRule: sap.m.MaskInputRule): sap.m.TimePicker;
            /**
             * <p>Destroys all the rules in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyRules(): sap.m.TimePicker;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.InputBase/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.InputBase <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.InputBase;
            /**
             * <p>Fires change event to attached listeners.</p><p>Expects following event parameters: <ul> <li>value parameter of type <code>string</code> - the new value of the input</li> <li>valid parameter of type <code>boolean</code> - indicator for a valid time</li> </ul></p>
             * @param {{ [key: string]: any }} mArguments <p>The arguments to pass along with the event</p>
             * @returns sap.m.TimePicker <p><code>this</code> to allow method chaining</p>
             */
            protected fireChange(mArguments?: { [key: string]: any }): sap.m.TimePicker;
            /**
             * <p>Fires the change event for the listeners</p>
             * @param {String} sValue <p>value of the input.</p>
             * @param {any} oParams <p>extra event parameters.</p>
             */
            protected fireChangeEvent(sValue: String, oParams?: any): void;
            /**
             * <p>Fires the change event for the listeners</p>
             * @param {String} sValue <p>value of the input.</p>
             * @param {any} oParams <p>extra event parameters.</p>
             */
            protected fireChangeEvent(sValue: String, oParams?: any): void;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDateValue" href="#/api/sap.m.DateTimeField/methods/getDateValue">dateValue</a>.</p><p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>. Use <code>dateValue</code> as a helper property to easily obtain the day, month, year, hours, minutes and seconds of the chosen date and time. Although possible to bind it, the recommendation is not to do it. When binding is needed, use <code>value</code> property instead.</p>
             * @returns any <p>Value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Holds a reference to a JavaScript Date Object. The <code>value</code> (string) property will be set according to it. Alternatively, if the <code>value</code> and <code>valueFormat</code> pair properties are supplied instead, the <code>dateValue</code> will be instantiated according to the parsed <code>value</code>.</p>
             * @returns any <p>the value of property <code>dateValue</code></p>
             */
            getDateValue(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.DateTimeField/methods/getDisplayFormat">displayFormat</a>.</p><p>Determines the format, displayed in the input field.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Determines the format, displayed in the input field and the picker sliders.</p><p>The default value is the browser's medium time format locale setting <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.LocaleData/methods/getTimePattern">sap.ui.core.LocaleData#getTimePattern</a>. If data binding with type <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.type.Time">sap.ui.model.type.Time</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Time">sap.ui.model.odata.type.Time</a> is used for the <code>value</code> property, the <code>displayFormat</code> property is ignored as the information is provided from the binding itself.</p>
             * @returns string <p>the value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLocaleId" href="#/api/sap.m.TimePicker/methods/getLocaleId">localeId</a>.</p><p>Defines the locale used to parse string values representing time.</p><p>Determines the locale, used to interpret the string, supplied by the <code>value</code> property.</p><p>Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser language settings if not set explicitly. Used in combination with 12 hour <code>displayFormat</code> containing 'a', which stands for day period string.</p>
             * @returns string <p>Value of property <code>localeId</code></p>
             */
            getLocaleId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMask" href="#/api/sap.m.TimePicker/methods/getMask">mask</a>.</p><p>Mask defined by its characters type (respectively, by its length). You should consider the following important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique char). Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior. 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable one.</p>
             * @returns string <p>Value of property <code>mask</code></p>
             */
            getMask(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaskMode" href="#/api/sap.m.TimePicker/methods/getMaskMode">maskMode</a>.</p><p>Defines whether the mask is enabled. When disabled, there are no restrictions and validation for the user and no placeholders are displayed.</p><p><b>Note:</b> A disabled mask does not reset any validation rules that are already set. You can update the <code>mask</code> property and add new <code>rules</code> while it is disabled. When <code>maskMode</code> is set to <code>On</code> again, the <code>rules</code> and the updated <code>mask</code> will be applied.</p><p>Default value is <code>On</code>.</p>
             * @returns sap.m.TimePickerMaskMode <p>Value of property <code>maskMode</code></p>
             */
            getMaskMode(): sap.m.TimePickerMaskMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinutesStep" href="#/api/sap.m.TimePicker/methods/getMinutesStep">minutesStep</a>.</p><p>Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1. The minutes slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>minutesStep</code></p>
             */
            getMinutesStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholderSymbol" href="#/api/sap.m.TimePicker/methods/getPlaceholderSymbol">placeholderSymbol</a>.</p><p>Defines a placeholder symbol. Shown at the position where there is no user input yet.</p><p>Default value is <code>_</code>.</p>
             * @returns string <p>Value of property <code>placeholderSymbol</code></p>
             */
            getPlaceholderSymbol(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p><p>A list of validation rules (one rule per mask character).</p>
             * @returns sap.m.MaskInputRule[] 
             */
            getRules(): sap.m.MaskInputRule[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondsStep" href="#/api/sap.m.TimePicker/methods/getSecondsStep">secondsStep</a>.</p><p>Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1. The seconds slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>secondsStep</code></p>
             */
            getSecondsStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSupport2400" href="#/api/sap.m.TimePicker/methods/getSupport2400">support2400</a>.</p><p>Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats. Don't use it together with am/pm.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>support2400</code></p>
             */
            getSupport2400(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.TimePicker/methods/getTitle">title</a>.</p><p>Displays the text of the general picker label and is read by screen readers. It is visible only on phone.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.DateTimeField/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the value property.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Determines the format of the value property.</p><p>The default value is the browser's medium time format locale setting <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.LocaleData/methods/getTimePattern">sap.ui.core.LocaleData#getTimePattern</a>. If data binding with type <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.type.Time">sap.ui.model.type.Time</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Time">sap.ui.model.odata.type.Time</a> is used for the <code>value</code> property, the <code>valueFormat</code> property is ignored as the information is provided from the binding itself.</p>
             * @returns string <p>the value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Checks for the provided <code>sap.m.MaskInputRule</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfRule(oRule: sap.m.MaskInputRule): number;
            /**
             * <p>Initializes the control.</p>
             */
            init(): void;
            /**
             * <p>Inserts a rule into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p>
             * @param {sap.m.MaskInputRule} oRule <p>The rule to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the rule should be inserted at; for a negative value of <code>iIndex</code>, the rule is inserted at position 0; for a value greater than the current size of the aggregation, the rule is inserted at the last position</p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertRule(oRule: sap.m.MaskInputRule, iIndex: number): sap.m.TimePicker;
            /**
             * <p>Called after the picker closes.</p>
             */
            onAfterClose(): void;
            /**
             * <p>Called after the picker appears.</p>
             */
            onAfterOpen(): void;
            /**
             * <p>Called before the picker appears.</p>
             */
            onBeforeOpen(): void;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.MaskInputRule[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllRules(): sap.m.MaskInputRule[];
            /**
             * <p>Removes a rule from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRules" href="#/api/sap.m.TimePicker/methods/getRules">rules</a>.</p>
             * @param {number | string | sap.m.MaskInputRule} vRule <p>The rule to remove or its index or id</p>
             * @returns sap.m.MaskInputRule <p>The removed rule or <code>null</code></p>
             */
            removeRule(vRule: number | string | sap.m.MaskInputRule): sap.m.MaskInputRule;
            /**
             * <p>Sets the locale of the control.</p><p>Used for parsing and formatting the time values in languages different than English. Necessary for translation and auto-complete of the day periods, such as AM and PM.</p>
             * @param {string} sLocaleId <p>A locale identifier like 'en_US'</p>
             * @returns sap.m.TimePicker <p>this instance, used for chaining</p>
             */
            setLocaleId(sLocaleId: string): sap.m.TimePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMask" href="#/api/sap.m.TimePicker/methods/getMask">mask</a>.</p><p>Mask defined by its characters type (respectively, by its length). You should consider the following important facts: 1. The mask characters normally correspond to an existing rule (one rule per unique char). Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule for digits, has the characters '2' and '0' as immutable). 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior. 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable. Use the double escape '^^' if you want to make use of the escape character as an immutable one.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMask <p>New value for property <code>mask</code></p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMask(sMask: string): sap.m.TimePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaskMode" href="#/api/sap.m.TimePicker/methods/getMaskMode">maskMode</a>.</p><p>Defines whether the mask is enabled. When disabled, there are no restrictions and validation for the user and no placeholders are displayed.</p><p><b>Note:</b> A disabled mask does not reset any validation rules that are already set. You can update the <code>mask</code> property and add new <code>rules</code> while it is disabled. When <code>maskMode</code> is set to <code>On</code> again, the <code>rules</code> and the updated <code>mask</code> will be applied.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>On</code>.</p>
             * @param {sap.m.TimePickerMaskMode} sMaskMode <p>New value for property <code>maskMode</code></p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaskMode(sMaskMode: sap.m.TimePickerMaskMode): sap.m.TimePicker;
            /**
             * <p>Sets the minutes slider step.</p>
             * @param {number} step <p>The step used to generate values for the minutes slider</p>
             * @returns any <p>this</p>
             */
            setMinutesStep(step: number): any;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPlaceholderSymbol" href="#/api/sap.m.TimePicker/methods/getPlaceholderSymbol">placeholderSymbol</a>.</p><p>Defines a placeholder symbol. Shown at the position where there is no user input yet.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>_</code>.</p>
             * @param {string} sPlaceholderSymbol <p>New value for property <code>placeholderSymbol</code></p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPlaceholderSymbol(sPlaceholderSymbol: string): sap.m.TimePicker;
            /**
             * <p>Sets the seconds slider step.</p>
             * @param {number} step <p>The step used to generate values for the seconds slider</p>
             * @returns sap.m.TimePicker <p><code>this</code> to allow method chaining</p>
             */
            setSecondsStep(step: number): sap.m.TimePicker;
            /**
             * <p>Sets <code>support2400</code> of the control.</p><p>Allows the control to use 24-hour format. Recommended usage is to not use it with am/pm format.</p>
             * @param {boolean} bSupport2400 
             * @returns sap.m.TimePicker <p>this instance, used for chaining</p>
             */
            setSupport2400(bSupport2400: boolean): sap.m.TimePicker;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.TimePicker/methods/getTitle">title</a>.</p><p>Displays the text of the general picker label and is read by screen readers. It is visible only on phone.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.TimePicker <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.TimePicker;
            /**
             * <p>Sets tooltip of the control.</p>
             * @param {string | sap.ui.core.TooltipBase} vTooltip 
             * @returns sap.m.TimePicker <p>A reference to <code>this</code> instance to allow method chaining.</p>
             */
            setTooltip(vTooltip: string | sap.ui.core.TooltipBase): sap.m.TimePicker;
        }
        /**
         * <p><p>Different modes for the <code>sap.m.TimePicker</code> mask.</p></p>
         */
        export enum TimePickerMaskMode {
            /**
             * <p><code>MaskInput</code> is disabled for the <code>sap.m.TimePicker</code>.</p>
             */
            Off = "Off",
            /**
             * <p><code>MaskInput</code> is enabled for the <code>sap.m.TimePicker</code>.</p>
             */
            On = "On",
        }
        /**
         * <p>A picker list container control used inside the <a target="_self" class="jsdoclink" href="#/api/sap.m.TimePicker">sap.m.TimePicker</a> or standalone to hold all the sliders.</p>
         */
        export class TimePickerSliders extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>TimePickerSliders</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.TimePickerSliders/events/change">change</a> event of this <code>sap.m.TimePickerSliders</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.TimePickerSliders</code> itself.</p><p>Fired when the value is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.TimePickerSliders</code> itself</p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.TimePickerSliders;
            /**
             * <p>Collapses all the slider controls.</p>
             * @returns sap.m.TimePickerSliders <p>Pointer to the control instance to allow method chaining</p>
             */
            collapseAll(): sap.m.TimePickerSliders;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.TimePickerSliders/events/change">change</a> event of this <code>sap.m.TimePickerSliders</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.TimePickerSliders;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.TimePickerSliders/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.TimePickerSliders;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayFormat" href="#/api/sap.m.TimePickerSliders/methods/getDisplayFormat">displayFormat</a>.</p><p>Defines the time <code>displayFormat</code> of the sliders. The <code>displayFormat</code> comes from the browser language settings if not set explicitly.</p>
             * @returns string <p>Value of property <code>displayFormat</code></p>
             */
            getDisplayFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TimePickerSliders/methods/getHeight">height</a>.</p><p>Sets the height of the container. If percentage value is used the parent container should have specified height</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelText" href="#/api/sap.m.TimePickerSliders/methods/getLabelText">labelText</a>.</p><p>Defines the text of the picker label.</p><p>It is read by screen readers. It is visible only on phone.</p>
             * @returns string <p>Value of property <code>labelText</code></p>
             */
            getLabelText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLocaleId" href="#/api/sap.m.TimePickerSliders/methods/getLocaleId">localeId</a>.</p><p>Defines the locale used to parse string values representing time.</p><p>Determines the locale, used to interpret the string, supplied by the <code>value</code> property.</p><p>Example: AM in the string "09:04 AM" is locale (language) dependent. The format comes from the browser language settings if not set explicitly. Used in combination with 12 hour <code>displayFormat</code> containing 'a', which stands for day period string.</p>
             * @returns string <p>Value of property <code>localeId</code></p>
             */
            getLocaleId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinutesStep" href="#/api/sap.m.TimePickerSliders/methods/getMinutesStep">minutesStep</a>.</p><p>Sets the minutes slider step. If step is less than 1, it will be automatically converted back to 1. The minutes slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>minutesStep</code></p>
             */
            getMinutesStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSecondsStep" href="#/api/sap.m.TimePickerSliders/methods/getSecondsStep">secondsStep</a>.</p><p>Sets the seconds slider step. If step is less than 1, it will be automatically converted back to 1. The seconds slider is populated only by multiples of the step.</p><p>Default value is <code>1</code>.</p>
             * @returns number <p>Value of property <code>secondsStep</code></p>
             */
            getSecondsStep(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSupport2400" href="#/api/sap.m.TimePickerSliders/methods/getSupport2400">support2400</a>.</p><p>Allows to set a value of 24:00, used to indicate the end of the day. Works only with HH or H formats. Don't use it together with am/pm.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>support2400</code></p>
             */
            getSupport2400(): boolean;
            /**
             * <p>Gets the time values from the sliders, as a date object.</p>
             * @returns any <p>A JavaScript date object</p>
             */
            getTimeValues(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.TimePickerSliders/methods/getValue">value</a>.</p><p>Defines the value of the control.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.TimePickerSliders/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the <code>value</code> property.</p>
             * @returns string <p>Value of property <code>valueFormat</code></p>
             */
            getValueFormat(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.TimePickerSliders/methods/getWidth">width</a>.</p><p>Sets the width of the container. The minimum width is 320px.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Opens first slider.</p>
             * @returns sap.m.TimePickerSliders <p>Pointer to the control instance to allow method chaining</p>
             */
            openFirstSlider(): sap.m.TimePickerSliders;
            /**
             * <p>Sets the time <code>displayFormat</code>.</p>
             * @param {string} sFormat <p>New display format</p>
             * @returns sap.m.TimePickerSliders <p>this instance, used for chaining</p>
             */
            setDisplayFormat(sFormat: string): sap.m.TimePickerSliders;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.TimePickerSliders/methods/getHeight">height</a>.</p><p>Sets the height of the container. If percentage value is used the parent container should have specified height</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.TimePickerSliders;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLabelText" href="#/api/sap.m.TimePickerSliders/methods/getLabelText">labelText</a>.</p><p>Defines the text of the picker label.</p><p>It is read by screen readers. It is visible only on phone.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sLabelText <p>New value for property <code>labelText</code></p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLabelText(sLabelText: string): sap.m.TimePickerSliders;
            /**
             * <p>Sets the <code>localeId</code> property.</p>
             * @param {string} sLocaleId <p>The ID of the Locale</p>
             * @returns sap.m.TimePickerSliders <p>this instance, used for chaining</p>
             */
            setLocaleId(sLocaleId: string): sap.m.TimePickerSliders;
            /**
             * <p>Sets the minutes slider step.</p>
             * @param {number} value <p>The step used to generate values for the minutes slider</p>
             * @returns sap.m.TimePickerSliders <p><code>this</code> to allow method chaining</p>
             */
            setMinutesStep(value: number): sap.m.TimePickerSliders;
            /**
             * <p>Sets the seconds slider step.</p>
             * @param {number} value <p>The step used to generate values for the seconds slider</p>
             * @returns sap.m.TimePickerSliders <p><code>this</code> to allow method chaining</p>
             */
            setSecondsStep(value: number): sap.m.TimePickerSliders;
            /**
             * <p>Sets <code>support2400</code>.</p>
             * @param {boolean} bSupport2400 
             * @returns sap.m.TimePickerSliders <p>this instance, used for chaining</p>
             */
            setSupport2400(bSupport2400: boolean): sap.m.TimePickerSliders;
            /**
             * <p>Sets the value of the <code>TimepickerSliders</code> container.</p>
             * @param {string} sValue <p>The value of the <code>TimepickerSliders</code></p>
             * @returns sap.m.TimePickerSliders <p>Pointer to the control instance to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.TimePickerSliders;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueFormat" href="#/api/sap.m.TimePickerSliders/methods/getValueFormat">valueFormat</a>.</p><p>Determines the format of the <code>value</code> property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValueFormat <p>New value for property <code>valueFormat</code></p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValueFormat(sValueFormat: string): sap.m.TimePickerSliders;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.TimePickerSliders/methods/getWidth">width</a>.</p><p>Sets the width of the container. The minimum width is 320px.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.TimePickerSliders <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.TimePickerSliders;
        }
        /**
         * <p>A simple, large-sized text with explicit header / title semantics.</p><h3>Overview</h3><p> The <code>Title</code> control is a simple, large-sized text containing additional semantic information for accessibility purposes.</p><p>As of version 1.52, you can truncate or wrap long titles if the screen is narrower than the full title by using the with the use of the <code>wrapping</code> property.</p><p>As of version 1.60, you can hyphenate the label's text with the use of the <code>wrappingType</code> property. For more information, see <a target="_self" href="#/topic/6322164936f047de941ec522b95d7b70">Text Controls Hyphenation</a>.</p><h3>Usage</h3><h4>When to use</h4><p> <ul> <li>If you want to set the title above a table or form.</li> <li>If you want to show text in the page header.</li> </ul> </p><h4>When not to use</h4><p> <ul> <li>If the text is inside a text block.</li> <li>If The text is inside a form element.</li> </ul></p>
         */
        export class Title extends sap.ui.core.Control {
            /**
             * <p>Sets the title for a <code>sap.m.Title</code> or <code>sap.ui.core.Title</code></p>
             * @param {sap.m.Title | sap.ui.core.Title} vTitle <p>Given variant of the a title which can be <code>sap.m.Title</code> or <code>sap.ui.core.Title</code>.</p>
             * @returns sap.m.Title <p>this Title reference for chaining.</p>
             */
            static setTitle(vTitle: sap.m.Title | sap.ui.core.Title): sap.m.Title;
            /**
             * <p>Constructor for a new Title control.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>Id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.m.Title/methods/getLevel">level</a>.</p><p>Defines the semantic level of the title. This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation. Depending on this setting either an HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element). This property does not influence the style of the control. Use the property <code>titleStyle</code> for this purpose instead.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.ui.core.TitleLevel <p>Value of property <code>level</code></p>
             */
            getLevel(): sap.ui.core.TitleLevel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Title/methods/getText">text</a>.</p><p>Defines the text which should be displayed as a title.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Title/methods/getTextAlign">textAlign</a>.</p><p>Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is larger than the displayed text.</p><p>Default value is <code>Initial</code>.</p>
             * @returns sap.ui.core.TextAlign <p>Value of property <code>textAlign</code></p>
             */
            getTextAlign(): sap.ui.core.TextAlign;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Title/methods/getTitle">title</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getTitle(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleStyle" href="#/api/sap.m.Title/methods/getTitleStyle">titleStyle</a>.</p><p>Defines the style of the title. When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title (e.g. inside a <code>Toolbar</code>). This default behavior can be overridden by setting a different style explicitly. The actual appearance of the title and the different styles always depends on the theme being used.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.ui.core.TitleLevel <p>Value of property <code>titleStyle</code></p>
             */
            getTitleStyle(): sap.ui.core.TitleLevel;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Title/methods/getWidth">width</a>.</p><p>Defines the width of the title.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Title/methods/getWrapping">wrapping</a>.</p><p>Enables text wrapping. <b>Note:</b> Wrapping must only be activated if the surrounding container allows flexible heights.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>wrapping</code></p>
             */
            getWrapping(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Title/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>Default value is <code>Normal</code>.</p>
             * @returns sap.m.WrappingType <p>Value of property <code>wrappingType</code></p>
             */
            getWrappingType(): sap.m.WrappingType;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.m.Title/methods/getLevel">level</a>.</p><p>Defines the semantic level of the title. This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation. Depending on this setting either an HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element). This property does not influence the style of the control. Use the property <code>titleStyle</code> for this purpose instead.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.ui.core.TitleLevel} sLevel <p>New value for property <code>level</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setLevel(sLevel: sap.ui.core.TitleLevel): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Title/methods/getText">text</a>.</p><p>Defines the text which should be displayed as a title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextAlign" href="#/api/sap.m.Title/methods/getTextAlign">textAlign</a>.</p><p>Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is larger than the displayed text.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Initial</code>.</p>
             * @param {sap.ui.core.TextAlign} sTextAlign <p>New value for property <code>textAlign</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextAlign(sTextAlign: sap.ui.core.TextAlign): sap.m.Title;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.Title/methods/getTitle">title</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Title} oTitle <p>ID of an element which becomes the new target of this title association; alternatively, an element instance may be given</p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(oTitle: sap.ui.core.ID | sap.ui.core.Title): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleStyle" href="#/api/sap.m.Title/methods/getTitleStyle">titleStyle</a>.</p><p>Defines the style of the title. When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title (e.g. inside a <code>Toolbar</code>). This default behavior can be overridden by setting a different style explicitly. The actual appearance of the title and the different styles always depends on the theme being used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.ui.core.TitleLevel} sTitleStyle <p>New value for property <code>titleStyle</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitleStyle(sTitleStyle: sap.ui.core.TitleLevel): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Title/methods/getWidth">width</a>.</p><p>Defines the width of the title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrapping" href="#/api/sap.m.Title/methods/getWrapping">wrapping</a>.</p><p>Enables text wrapping. <b>Note:</b> Wrapping must only be activated if the surrounding container allows flexible heights.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bWrapping <p>New value for property <code>wrapping</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrapping(bWrapping: boolean): sap.m.Title;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWrappingType" href="#/api/sap.m.Title/methods/getWrappingType">wrappingType</a>.</p><p>Defines the type of text wrapping to be used (hyphenated or normal).</p><p><b>Note:</b> This property takes effect only when the <code>wrapping</code> property is set to <code>true</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Normal</code>.</p>
             * @param {sap.m.WrappingType} sWrappingType <p>New value for property <code>wrappingType</code></p>
             * @returns sap.m.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWrappingType(sWrappingType: sap.m.WrappingType): sap.m.Title;
        }
        /**
         * <p>An enhanced <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> that can be toggled between pressed and normal state.</p><p>Clicking or tapping a <code>ToggleButton</code> changes its state to <code>pressed</code>. The button returns to its initial state when the user clicks or taps it again.</p>
         */
        export class ToggleButton extends sap.m.Button {
            /**
             * <p>Constructor for a new <code>ToggleButton</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>References: <ul><li>sap.ui.core.Control#getAccessibilityInfo</li></ul></p>
             * @returns any <p>Current accessibility state of the control.</p>
             */
            protected getAccessibilityInfo(): any;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPressed" href="#/api/sap.m.ToggleButton/methods/getPressed">pressed</a>.</p><p>The property is “true” when the control is toggled. The default state of this property is "false".</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>pressed</code></p>
             */
            getPressed(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPressed" href="#/api/sap.m.ToggleButton/methods/getPressed">pressed</a>.</p><p>The property is “true” when the control is toggled. The default state of this property is "false".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bPressed <p>New value for property <code>pressed</code></p>
             * @returns sap.m.ToggleButton <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setPressed(bPressed: boolean): sap.m.ToggleButton;
        }
        /**
         * <h3>Overview</h3><p> Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected items. Tokens are manipulated by a <a target="_self" class="jsdoclink" href="#/api/sap.m.Tokenizer">Tokenizer</a>. </p><h3>Structure</h3><p> The tokens store single text items or sometimes key-value pairs, such as "John Miller (ID1234567)". Each token also contains a delete icon, which is invisible if the token is in edit mode.</p><h3>Usage</h3><h4>When to use:</h4><p> Tokens can only be used with the Tokenizer as a container.</p>
         */
        export class Token extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Token.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Token/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Token;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Token/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Token;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.Token/events/delete">delete</a> event of this <code>sap.m.Token</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Token</code> itself.</p><p>This event is fired if the user clicks the token's delete icon.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDelete(oData: any, fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deselect" href="#/api/sap.m.Token/events/deselect">deselect</a> event of this <code>sap.m.Token</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Token</code> itself.</p><p>This event is fired when the token gets deselected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDeselect(oData: any, fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Token/events/press">press</a> event of this <code>sap.m.Token</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Token</code> itself.</p><p>This event is fired when the user clicks on the token.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.Token/events/select">select</a> event of this <code>sap.m.Token</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Token</code> itself.</p><p>This event is fired when the token gets selected.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelect(oData: any, fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.Token/events/delete">delete</a> event of this <code>sap.m.Token</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDelete(fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deselect" href="#/api/sap.m.Token/events/deselect">deselect</a> event of this <code>sap.m.Token</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDeselect(fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Token/events/press">press</a> event of this <code>sap.m.Token</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.Token/events/select">select</a> event of this <code>sap.m.Token</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelect(fnFunction: Function, oListener?: any): sap.m.Token;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="delete" href="#/api/sap.m.Token/events/delete">delete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDelete(mParameters?: any): sap.m.Token;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deselect" href="#/api/sap.m.Token/events/deselect">deselect</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDeselect(mParameters?: any): sap.m.Token;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Token/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.Token;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="select" href="#/api/sap.m.Token/events/select">select</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelect(mParameters?: any): sap.m.Token;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Token/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Token/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.Token/methods/getEditable">editable</a>.</p><p>Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.Token/methods/getKey">key</a>.</p><p>Key of the token.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>key</code></p>
             */
            getKey(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.Token/methods/getSelected">selected</a>.</p><p>Indicates the current selection status of the token.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Token/methods/getText">text</a>.</p><p>Displayed text of the token.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>text</code></p>
             */
            getText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Token/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>Default value is <code>Inherit</code>.</p>
             * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
             */
            getTextDirection(): sap.ui.core.TextDirection;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Token/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Token/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Token/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Token/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.Token/methods/getEditable">editable</a>.</p><p>Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEditable <p>New value for property <code>editable</code></p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.Token;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.m.Token/methods/getKey">key</a>.</p><p>Key of the token.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sKey <p>New value for property <code>key</code></p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setKey(sKey: string): sap.m.Token;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.Token/methods/getSelected">selected</a>.</p><p>Indicates the current selection status of the token.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.Token;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.Token/methods/getText">text</a>.</p><p>Displayed text of the token.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sText <p>New value for property <code>text</code></p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setText(sText: string): sap.m.Token;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.m.Token/methods/getTextDirection">textDirection</a>.</p><p>This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
             * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
             * @returns sap.m.Token <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.m.Token;
        }
        /**
         * <h3>Overview</h3><p> A tokenizer is a container for <a target="_self" class="jsdoclink" href="#/api/sap.m.Token">Tokens</a>. It also handles all actions associated with the tokens like adding, deleting, selecting and editing. </p><h3>Structure</h3><p> The tokens are stored in the <code>tokens</code> aggregation. The tokenizer can determine, by setting the <code>editable</code> property, whether the tokens in it are editable. Still the Token itself can determine if it is <code>editable</code>. This allows you to have non-editable Tokens in an editable Tokenizer.</p><h3>Usage</h3><h4>When to use:</h4><p> The tokenizer can only be used as part of <a target="_self" class="jsdoclink" href="#/api/sap.m.MultiComboBox">MultiComboBox</a>,<a target="_self" class="jsdoclink" href="#/api/sap.m.MultiInput">MultiInput</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.comp.valuehelpdialog.ValueHelpDialog">ValueHelpDialog</a></p>
         */
        export class Tokenizer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Tokenizer.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Function gets whether the tokens visibility should be adjusted.</p>
             * @returns boolean <p>If true the the tokenizer should adjust the tokens visibility</p>
             */
            protected _getAdjustable(): boolean;
            /**
             * <p>Function returns whether the n-more indicator is visible.</p>
             * @returns boolean <p>If true the indicator is visible</p>
             */
            protected _getIndicatorVisibility(): boolean;
            /**
             * <p>Function removes all selected tokens.</p>
             * @returns sap.m.Tokenizer <p>this instance for method chaining</p>
             */
            _removeSelectedTokens(): sap.m.Tokenizer;
            /**
             * <p>Function sets whether the tokens visibility should be adjusted.</p>
             * @param {boolean} If <p>true the the tokenizer should adjust the tokens visibility</p>
             */
            protected _setAdjustable(If: boolean): void;
            /**
             * <p>Adds some ariaDescribedBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Tokenizer/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Tokenizer;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Tokenizer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Tokenizer;
            /**
             * <p>Adds some token to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p>
             * @param {sap.m.Token} oToken <p>The token to add; if empty, nothing is inserted</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addToken(oToken: sap.m.Token): sap.m.Tokenizer;
            /**
             * <p>Function validates the given text and adds a new token if validation was successful.</p>
             * @param {any} oParameters <p>Parameter bag containing the following fields:</p>
             */
            addValidateToken(oParameters: any): void;
            /**
             * <p>Function adds a validation callback called before any new token gets added to the tokens aggregation.</p>
             * @param {Function} fValidator <p>The validation function</p>
             */
            addValidator(fValidator: Function): void;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenChange" href="#/api/sap.m.Tokenizer/events/tokenChange">tokenChange</a> event of this <code>sap.m.Tokenizer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Tokenizer</code> itself.</p><p>fired when the tokens aggregation changed (add / remove token)</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code> itself</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTokenChange(oData: any, fnFunction: Function, oListener?: any): sap.m.Tokenizer;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.Tokenizer/events/tokenUpdate">tokenUpdate</a> event of this <code>sap.m.Tokenizer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Tokenizer</code> itself.</p><p>Fired when the tokens aggregation changed due to a user interaction (add / remove token)</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code> itself</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTokenUpdate(oData: any, fnFunction: Function, oListener?: any): sap.m.Tokenizer;
            /**
             * <p>Destroys all the tokens in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyTokens(): sap.m.Tokenizer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenChange" href="#/api/sap.m.Tokenizer/events/tokenChange">tokenChange</a> event of this <code>sap.m.Tokenizer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTokenChange(fnFunction: Function, oListener?: any): sap.m.Tokenizer;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.Tokenizer/events/tokenUpdate">tokenUpdate</a> event of this <code>sap.m.Tokenizer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTokenUpdate(fnFunction: Function, oListener?: any): sap.m.Tokenizer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenChange" href="#/api/sap.m.Tokenizer/events/tokenChange">tokenChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTokenChange(mParameters?: any): sap.m.Tokenizer;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="tokenUpdate" href="#/api/sap.m.Tokenizer/events/tokenUpdate">tokenUpdate</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns boolean <p>Whether or not to prevent the default action</p>
             */
            protected fireTokenUpdate(mParameters?: any): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Tokenizer/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Tokenizer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditable" href="#/api/sap.m.Tokenizer/methods/getEditable">editable</a>.</p><p>true if tokens shall be editable otherwise false</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>editable</code></p>
             */
            getEditable(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.Tokenizer/methods/getMaxWidth">maxWidth</a>.</p><p>Defines the maximum width of the Tokenizer.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Function returns the internally used scroll delegate.</p>
             * @returns sap.ui.core.delegate.ScrollEnablement <p>The scroll delegate</p>
             */
            getScrollDelegate(): sap.ui.core.delegate.ScrollEnablement;
            /**
             * <p>Function returns the tokens' width.</p>
             * @returns number <p>The complete width of all tokens</p>
             */
            getScrollWidth(): number;
            /**
             * <p>Function returns all currently selected tokens.</p>
             * @returns sap.m.Token[] <p>Array of selected tokens or empty array</p>
             */
            getSelectedTokens(): sap.m.Token[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p><p>the currently displayed tokens</p>
             * @returns sap.m.Token[] 
             */
            getTokens(): sap.m.Token[];
            /**
             * <p>Gets the accessibility text aggregation id.</p>
             * @returns string <p>Returns the InvisibleText control id</p>
             */
            protected getTokensInfoId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Tokenizer/methods/getWidth">width</a>.</p><p>Defines the width of the Tokenizer.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.m.Token</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.Token} oToken <p>The token whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfToken(oToken: sap.m.Token): number;
            /**
             * <p>Inserts a token into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p>
             * @param {sap.m.Token} oToken <p>The token to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the token should be inserted at; for a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value greater than the current size of the aggregation, the token is inserted at the last position</p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertToken(oToken: sap.m.Token, iIndex: number): sap.m.Tokenizer;
            /**
             * <p>Handle the focus event on the control.</p>
             * @param {any} oEvent <p>The occuring event</p>
             */
            protected onclick(oEvent: any): void;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Tokenizer/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Tokenizer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.Token[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllTokens(): sap.m.Token[];
            /**
             * <p>Function removes all validation callbacks</p>
             */
            removeAllValidators(): void;
            /**
             * <p>Removes an ariaDescribedBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaDescribedBy" href="#/api/sap.m.Tokenizer/methods/getAriaDescribedBy">ariaDescribedBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy <p>The ariaDescribedBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaDescribedBy or <code>null</code></p>
             */
            removeAriaDescribedBy(vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Tokenizer/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a token from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTokens" href="#/api/sap.m.Tokenizer/methods/getTokens">tokens</a>.</p>
             * @param {number | string | sap.m.Token} vToken <p>The token to remove or its index or id</p>
             * @returns sap.m.Token <p>The removed token or <code>null</code></p>
             */
            removeToken(vToken: number | string | sap.m.Token): sap.m.Token;
            /**
             * <p>Function removes a validation callback.</p>
             * @param {Function} fValidator <p>The validation function</p>
             */
            removeValidator(fValidator: Function): void;
            /**
             * <p>Function scrolls the tokens to the end.</p>
             */
            scrollToEnd(): void;
            /**
             * <p>Function scrolls the tokens to the start.</p>
             */
            scrollToStart(): void;
            /**
             * <p>Function selects all tokens.</p>
             * @param {boolean} bSelect <p>[optional] true for selecting, false for deselecting</p>
             * @returns sap.m.Tokenizer <p>this instance for method chaining</p>
             */
            selectAllTokens(bSelect: boolean): sap.m.Tokenizer;
            /**
             * <p>Sets the editable property of the <code>sap.m.Tokenizer</code> and propagates it to its internal <code>sap.m.Token</code> controls. The value should be set to true, if tokens shall be editable; otherwise it should be set as false. When called with a value of null or undefined, the default value of the property will be restored. Default value is true.</p>
             * @param {boolean} bEditable <p>Whether the control should be editable</p>
             * @returns sap.m.Tokenizer <p>this instance for method chaining</p>
             */
            setEditable(bEditable: boolean): sap.m.Tokenizer;
            /**
             * <p>Function sets the maximum width of the Tokenizer.</p>
             * @param {string} sWidth <p>The new maximal width</p>
             * @returns sap.m.Tokenizer <p>this instance for method chaining</p>
             */
            setMaxWidth(sWidth: string): sap.m.Tokenizer;
            /**
             * <p>Function sets the tokenizer's width in pixels.</p>
             * @param {number} nWidth <p>The new width in pixels</p>
             */
            setPixelWidth(nWidth: number): void;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Tokenizer/methods/getWidth">width</a>.</p><p>Defines the width of the Tokenizer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Tokenizer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Tokenizer;
        }
        /**
         * <p>Horizontal container most commonly used to display buttons, labels, selects and various other input controls.</p><h3>Overview</h3><p>By default, the <code>Toolbar</code> items are shrinkable if they have percent-based width (for example, <a target="_self" class="jsdoclink" href="#/api/sap.m.Input">sap.m.Input</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.Slider">sap.m.Slider</a>) or implement the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IShrinkable">sap.ui.core.IShrinkable</a> interface (for example, <a target="_self" class="jsdoclink" href="#/api/sap.m.Text">sap.m.Text</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a>). This behavior can be overridden by providing <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarLayoutData">sap.m.ToolbarLayoutData</a> for the <code>Toolbar</code> items.</p><p><b>Note:</b> It is recommended that you use <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a> over <code>sap.m.Toolbar</code>, unless you want to avoid the overflow behavior in favor of shrinking.</p><h3>Usage</h3><p>You can add a visual separator between the preceding and succeeding <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a> item with the use of the <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarSeparator">sap.m.ToolbarSeparator</a>. The separator is theme dependent and can be a padding, a margin or a line.</p><p>To add horizontal space between the <code>Toolbar</code> items, use the <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarSpacer">sap.m.ToolbarSpacer</a>. You can define the width of the horizontal space or make it flexible to cover the remaining space between the <code>Toolbar</code> items (for example, to to push an item to the edge of the <code>Toolbar</code>.</p><p><b>Note:</b> <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarLayoutData">sap.m.ToolbarLayoutData</a> should not be used together with <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarSpacer">sap.m.ToolbarSpacer</a>.</p>
         */
        export class Toolbar extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>Toolbar</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Sets classes according to the context of the page. Possible contexts are header, footer and subheader.</p>
             * @returns sap.m.IBar <p><code>this</code> for chaining</p>
             */
            protected _applyContextClassFor(): sap.m.IBar;
            /**
             * <p>Sets HTML tag according to the context of the page. Possible contexts are header, footer and subheader.</p>
             * @returns sap.m.IBar <p><code>this</code> for chaining</p>
             */
            protected _applyTag(): sap.m.IBar;
            /**
             * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Toolbar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.m.Toolbar;
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.Toolbar;
            /**
             * <p>Sets classes and HTML tag according to the context of the page. Possible contexts are header, footer, subheader</p>
             * @returns sap.m.IBar <p><code>this</code> for chaining</p>
             */
            protected applyTagAndContextClassFor(): sap.m.IBar;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Toolbar/events/press">press</a> event of this <code>sap.m.Toolbar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Toolbar</code> itself.</p><p>Fired when the user clicks on the toolbar, if the Active property is set to "true".</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code> itself</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.Toolbar;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.Toolbar;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Toolbar/events/press">press</a> event of this <code>sap.m.Toolbar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.Toolbar;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.Toolbar/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.Toolbar/methods/getActive">active</a>.</p><p>Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true. Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>active</code></p>
             */
            getActive(): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Toolbar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p><p>The content of the toolbar.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Toolbar/methods/getDesign">design</a>.</p><p>Defines the toolbar design.</p><p><b>Note:</b> Design settings are theme-dependent. They also determine the default height of the toolbar.</p><p>Default value is <code>Auto</code>.</p>
             * @returns sap.m.ToolbarDesign <p>Value of property <code>design</code></p>
             */
            getDesign(): sap.m.ToolbarDesign;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Toolbar/methods/getEnabled">enabled</a>.</p><p>Sets the enabled property of all controls defined in the content aggregation. Note: This property does not apply to the toolbar itself, but rather to its items.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enabled</code></p>
             */
            getEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Toolbar/methods/getHeight">height</a>.</p><p>Defines the height of the control. By default, the <code>height</code> property depends on the used theme and the <code>design</code> property.</p><p><b>Note:</b> It is not recommended to use this property if the <code>sapMTBHeader-CTX</code> class is used</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Gets the HTML tag of the root domref</p>
             * @returns string <p>the HTML-tag</p>
             */
            protected getHTMLTag(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStyle" href="#/api/sap.m.Toolbar/methods/getStyle">style</a>.</p><p>Defines the visual style of the <code>Toolbar</code>.</p><p><b>Note:</b> The visual styles are theme-dependent.</p><p>Default value is <code>Standard</code>.</p>
             * @returns sap.m.ToolbarStyle <p>Value of property <code>style</code></p>
             */
            getStyle(): sap.m.ToolbarStyle;
            /**
             * <p>Returns the first sap.m.Title control instance inside the toolbar for the accessibility</p>
             * @returns sap.m.Title|undefined <p>The <code>sap.m.Title</code> instance or undefined</p>
             */
            protected getTitleControl(): sap.m.Title | undefined;
            /**
             * <p>Returns the first sap.m.Title control id inside the toolbar for the accessibility</p>
             * @returns String <p>The <code>sap.m.Title</code> ID</p>
             */
            protected getTitleId(): String;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Toolbar/methods/getWidth">width</a>.</p><p>Defines the width of the control. By default, Toolbar is a block element. If the width is not explicitly set, the control will assume its natural size.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.Toolbar;
            /**
             * <p>Returns if the bar is sensitive to the container context. Implementation of the IBar interface</p>
             * @returns boolean <p>isContextSensitive</p>
             */
            protected isContextSensitive(): boolean;
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Toolbar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.m.Toolbar/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
             * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
             */
            removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.Toolbar/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActive" href="#/api/sap.m.Toolbar/methods/getActive">active</a>.</p><p>Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true. Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bActive <p>New value for property <code>active</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setActive(bActive: boolean): sap.m.Toolbar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDesign" href="#/api/sap.m.Toolbar/methods/getDesign">design</a>.</p><p>Defines the toolbar design.</p><p><b>Note:</b> Design settings are theme-dependent. They also determine the default height of the toolbar.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
             * @param {sap.m.ToolbarDesign} sDesign <p>New value for property <code>design</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDesign(sDesign: sap.m.ToolbarDesign): sap.m.Toolbar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.Toolbar/methods/getEnabled">enabled</a>.</p><p>Sets the enabled property of all controls defined in the content aggregation. Note: This property does not apply to the toolbar itself, but rather to its items.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnabled(bEnabled: boolean): sap.m.Toolbar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Toolbar/methods/getHeight">height</a>.</p><p>Defines the height of the control. By default, the <code>height</code> property depends on the used theme and the <code>design</code> property.</p><p><b>Note:</b> It is not recommended to use this property if the <code>sapMTBHeader-CTX</code> class is used</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.Toolbar;
            /**
             * <p>Sets the HTML tag of the root domref</p>
             * @param {string} sTag 
             * @returns sap.m.IBar <p>this for chaining</p>
             */
            protected setHTMLTag(sTag: string): sap.m.IBar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStyle" href="#/api/sap.m.Toolbar/methods/getStyle">style</a>.</p><p>Defines the visual style of the <code>Toolbar</code>.</p><p><b>Note:</b> The visual styles are theme-dependent.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
             * @param {sap.m.ToolbarStyle} sStyle <p>New value for property <code>style</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setStyle(sStyle: sap.m.ToolbarStyle): sap.m.Toolbar;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Toolbar/methods/getWidth">width</a>.</p><p>Defines the width of the control. By default, Toolbar is a block element. If the width is not explicitly set, the control will assume its natural size.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Toolbar <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Toolbar;
        }
        /**
         * <p><p>Types of the Toolbar Design.</p><p>To preview the different combinations of <code>sap.m.ToolbarDesign</code> and <code>sap.m.ToolbarStyle</code>, see the <b>OverflowToolbar - Design and styling</b> sample of the <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a> control.</p></p>
         */
        export enum ToolbarDesign {
            /**
             * <p>The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.</p>
             */
            Auto = "Auto",
            /**
             * <p>The toolbar appears smaller than the regular size to show information(e.g: text, icon).</p>
             */
            Info = "Info",
            /**
             * <p>The toolbar has a solid background. Its content will be rendered in a standard way.</p>
             */
            Solid = "Solid",
            /**
             * <p>The toolbar and its content will be displayed transparent.</p>
             */
            Transparent = "Transparent",
        }
        /**
         * <p>Defines layout data for the <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a> items.</p><p><b>Note:</b> <code>ToolbarLayoutData</code> should not be used together with <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarSpacer">sap.m.ToolbarSpacer</a>.</p>
         */
        export class ToolbarLayoutData extends sap.ui.core.LayoutData {
            /**
             * <p>Constructor for a new <code>ToolbarLayoutData</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.ToolbarLayoutData/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the toolbar item.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>maxWidth</code></p>
             */
            getMaxWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinWidth" href="#/api/sap.m.ToolbarLayoutData/methods/getMinWidth">minWidth</a>.</p><p>Sets the minimum width of the toolbar item.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>minWidth</code></p>
             */
            getMinWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShrinkable" href="#/api/sap.m.ToolbarLayoutData/methods/getShrinkable">shrinkable</a>.</p><p>Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.</p><p>Note: Nested layout controls should not be shrinkable.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>shrinkable</code></p>
             */
            getShrinkable(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxWidth" href="#/api/sap.m.ToolbarLayoutData/methods/getMaxWidth">maxWidth</a>.</p><p>Sets the maximum width of the toolbar item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sMaxWidth <p>New value for property <code>maxWidth</code></p>
             * @returns sap.m.ToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): sap.m.ToolbarLayoutData;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMinWidth" href="#/api/sap.m.ToolbarLayoutData/methods/getMinWidth">minWidth</a>.</p><p>Sets the minimum width of the toolbar item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {sap.ui.core.CSSSize} sMinWidth <p>New value for property <code>minWidth</code></p>
             * @returns sap.m.ToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMinWidth(sMinWidth: sap.ui.core.CSSSize): sap.m.ToolbarLayoutData;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShrinkable" href="#/api/sap.m.ToolbarLayoutData/methods/getShrinkable">shrinkable</a>.</p><p>Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.</p><p>Note: Nested layout controls should not be shrinkable.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bShrinkable <p>New value for property <code>shrinkable</code></p>
             * @returns sap.m.ToolbarLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShrinkable(bShrinkable: boolean): sap.m.ToolbarLayoutData;
        }
        /**
         * <p>Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a> item.</p>
         */
        export class ToolbarSeparator extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ToolbarSeparator</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/constructor">sap.ui.core.Control</a> can be used.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Sets the behavior of the <code>ToolbarSeparator</code> inside an <code>OverflowToolbar</code> configuration.</p>
             * @returns any <p>Configuration information for the <code>sap.m.IOverflowToolbarContent</code> interface.</p>
             */
            getOverflowToolbarConfig(): any;
        }
        /**
         * <p>Adds horizontal space between the items used within a <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a>.</p><p><b>Note:</b> <code>ToolbarSpacer</code> should not be used together with <a target="_self" class="jsdoclink" href="#/api/sap.m.ToolbarLayoutData">sap.m.ToolbarLayoutData</a>.</p>
         */
        export class ToolbarSpacer extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ToolbarSpacer</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ToolbarSpacer/methods/getWidth">width</a>.</p><p>Defines the width of the horizontal space. Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items. This feature can be used to push next item to the edge of the toolbar.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.ToolbarSpacer/methods/getWidth">width</a>.</p><p>Defines the width of the horizontal space. Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items. This feature can be used to push next item to the edge of the toolbar.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.ToolbarSpacer <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.ToolbarSpacer;
        }
        /**
         * <p><p>Types of visual styles for the <a target="_self" class="jsdoclink" href="#/api/sap.m.Toolbar">sap.m.Toolbar</a>.</p><p><b>Note:</b> Keep in mind that the styles are theme-dependent and can differ based on the currently used theme.</p><p>To preview the different combinations of <code>sap.m.ToolbarDesign</code> and <code>sap.m.ToolbarStyle</code>, see the <b>OverflowToolbar - Design and styling</b> sample of the <a target="_self" class="jsdoclink" href="#/api/sap.m.OverflowToolbar">sap.m.OverflowToolbar</a> control.</p></p>
         */
        export enum ToolbarStyle {
            /**
             * <p>Simplified visual style dependent on the used theme.</p><p><b>Note:</b> For the Belize themes, the <code>sap.m.Toolbar</code> is displayed with no border.</p>
             */
            Clear = "Clear",
            /**
             * <p>Default visual style dependent on the used theme.</p>
             */
            Standard = "Standard",
        }
        /**
         * <p>The <code>Tree</code> control provides a tree structure for displaying data in a hierarchy. <b>Note:</b> Growing feature is not supported by <code>Tree</code>.</p>
         */
        export class Tree extends sap.m.ListBase {
            /**
             * <p>Constructor for a new Tree.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="toggleOpenState" href="#/api/sap.m.Tree/events/toggleOpenState">toggleOpenState</a> event of this <code>sap.m.Tree</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Tree</code> itself.</p><p>Fired when an item has been expanded or collapsed by user interaction.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Tree</code> itself</p>
             * @returns sap.m.Tree <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachToggleOpenState(oData: any, fnFunction: Function, oListener?: any): sap.m.Tree;
            /**
             * <p>Collapses one or multiple items.</p>
             * @param {number | number[]} vParam <p>The index or indices of the tree items to be collapsed</p>
             * @returns sap.m.Tree <p>A reference to the Tree control</p>
             */
            collapse(vParam: number | number[]): sap.m.Tree;
            /**
             * <p>Collapses all nodes.</p>
             * @returns sap.m.Tree <p>A reference to the Tree control</p>
             */
            collapseAll(): sap.m.Tree;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="toggleOpenState" href="#/api/sap.m.Tree/events/toggleOpenState">toggleOpenState</a> event of this <code>sap.m.Tree</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Tree <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachToggleOpenState(fnFunction: Function, oListener?: any): sap.m.Tree;
            /**
             * <p>Expands one or multiple items. Note that items that are hidden at the time of calling this API can't be expanded.</p>
             * @param {number | number[]} vParam <p>The index or indices of the item to be expanded</p>
             * @returns sap.m.Tree <p>A reference to the Tree control</p>
             */
            expand(vParam: number | number[]): sap.m.Tree;
            /**
             * <p>Defines the level to which the tree is expanded. The function can be used to define the initial expanding state. An alternative way to define the initial expanding state is to set the parameter <code>numberOfExpandedLevels</code> of the binding.</p><p>Example: <pre>
              oTree.bindItems({
                 path: "...",
                 parameters: {
                    numberOfExpandedLevels: 1
                 }
              });
            </pre></p>
             * @param {number} iLevel <p>The level to which the data is expanded</p>
             * @returns sap.m.Tree <p>A reference to the Tree control</p>
             */
            expandToLevel(iLevel: number): sap.m.Tree;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="toggleOpenState" href="#/api/sap.m.Tree/events/toggleOpenState">toggleOpenState</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Tree <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireToggleOpenState(mParameters?: any): sap.m.Tree;
        }
        /**
         * <p>The <code>sap.m.TreeItemBase</code> contains the basic features of all specific tree items.</p>
         */
        export class TreeItemBase extends sap.m.ListItemBase {
            /**
             * <p>Constructor for a new TreeItemBase.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets the expanding information of the node.</p>
             * @returns Boolean 
             */
            getExpanded(): Boolean;
            /**
             * <p>Gets the context of the node.</p>
             * @returns any 
             */
            getItemNodeContext(): any;
            /**
             * <p>Gets the node level in the hierarchy.</p>
             * @returns number 
             */
            getLevel(): number;
            /**
             * <p>Gets the parent node control.</p>
             * @returns sap.m.TreeItemBase|undefined 
             */
            getParentNode(): sap.m.TreeItemBase | undefined;
            /**
             * <p>Gets the context of the parent node control.</p>
             * @returns any 
             */
            getParentNodeContext(): any;
            /**
             * <p>Determines if the node is a leaf.</p>
             * @returns boolean 
             */
            isLeaf(): boolean;
            /**
             * <p>Checks if the node is the top level node.</p>
             * @returns boolean 
             */
            isTopLevel(): boolean;
        }
        /**
         * <p>This control allows you to upload single or multiple files from your devices (desktop, tablet or phone) and attach them to the application.</p><p>The consuming application needs to take into account that the consistency checks of the model during the upload of the file need to be performed, for example, if the user is editing or deleting a file. <br> As of version 1.62, there is an <a target="_self" class="jsdoclink" href="#/api/sap.m.upload.UploadSet">sap.m.upload.UploadSet</a> control available that is based on this control. <a target="_self" class="jsdoclink" href="#/api/sap.m.upload.UploadSet">sap.m.upload.UploadSet</a> provides enhanced handling of headers and requests, unified behavior of instant and deferred uploads, as well as improved progress indication.</p>
         */
        export class UploadCollection extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new UploadCollection.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some headerParameter to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p>
             * @param {sap.m.UploadCollectionParameter} oHeaderParameter <p>The headerParameter to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter): sap.m.UploadCollection;
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p>
             * @param {sap.m.UploadCollectionItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.UploadCollectionItem): sap.m.UploadCollection;
            /**
             * <p>Adds some parameter to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p>
             * @param {sap.m.UploadCollectionParameter} oParameter <p>The parameter to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addParameter(oParameter: sap.m.UploadCollectionParameter): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.UploadCollection/events/beforeUploadStarts">beforeUploadStarts</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachBeforeUploadStarts(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.UploadCollection/events/change">change</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control. Limitation: parameters and headerParameters are not supported by Internet Explorer 9.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileDeleted" href="#/api/sap.m.UploadCollection/events/fileDeleted">fileDeleted</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when an uploaded attachment is selected and the Delete button is pressed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFileDeleted(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filenameLengthExceed" href="#/api/sap.m.UploadCollection/events/filenameLengthExceed">filenameLengthExceed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFilenameLengthExceed(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileRenamed" href="#/api/sap.m.UploadCollection/events/fileRenamed">fileRenamed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when the file name is changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFileRenamed(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceed" href="#/api/sap.m.UploadCollection/events/fileSizeExceed">fileSizeExceed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application). This event is not supported by Internet Explorer 9.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFileSizeExceed(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.UploadCollection/events/selectionChange">selectionChange</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>Fires when selection is changed via user interaction inside the control.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachSelectionChange(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="typeMissmatch" href="#/api/sap.m.UploadCollection/events/typeMissmatch">typeMissmatch</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachTypeMissmatch(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadComplete" href="#/api/sap.m.UploadCollection/events/uploadComplete">uploadComplete</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered as soon as the upload request is completed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUploadComplete(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.UploadCollection/events/uploadTerminated">uploadTerminated</a> event of this <code>sap.m.UploadCollection</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.</p><p>The event is triggered as soon as the upload request was terminated by the user.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachUploadTerminated(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.UploadCollection;
            /**
             * <p>Destroys all the headerParameters in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyHeaderParameters(): sap.m.UploadCollection;
            /**
             * <p>Destroys the infoToolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.UploadCollection/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyInfoToolbar(): sap.m.UploadCollection;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.UploadCollection;
            /**
             * <p>Destroys all the parameters in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyParameters(): sap.m.UploadCollection;
            /**
             * <p>Destroys the toolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.UploadCollection/methods/getToolbar">toolbar</a>.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyToolbar(): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.UploadCollection/events/beforeUploadStarts">beforeUploadStarts</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachBeforeUploadStarts(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.UploadCollection/events/change">change</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachChange(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileDeleted" href="#/api/sap.m.UploadCollection/events/fileDeleted">fileDeleted</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFileDeleted(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filenameLengthExceed" href="#/api/sap.m.UploadCollection/events/filenameLengthExceed">filenameLengthExceed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFilenameLengthExceed(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileRenamed" href="#/api/sap.m.UploadCollection/events/fileRenamed">fileRenamed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFileRenamed(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceed" href="#/api/sap.m.UploadCollection/events/fileSizeExceed">fileSizeExceed</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFileSizeExceed(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.UploadCollection/events/selectionChange">selectionChange</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachSelectionChange(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="typeMissmatch" href="#/api/sap.m.UploadCollection/events/typeMissmatch">typeMissmatch</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachTypeMissmatch(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadComplete" href="#/api/sap.m.UploadCollection/events/uploadComplete">uploadComplete</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUploadComplete(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.UploadCollection/events/uploadTerminated">uploadTerminated</a> event of this <code>sap.m.UploadCollection</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachUploadTerminated(fnFunction: Function, oListener?: any): sap.m.UploadCollection;
            /**
             * <p>Downloads the given item. This function delegates to <a target="_self" class="jsdoclink" href="#/api/sap.m.UploadCollectionItem/methods/download">uploadCollectionItem.download</a>.</p>
             * @param {sap.m.UploadCollectionItem} uploadCollectionItem <p>The item to download. This parameter is mandatory.</p>
             * @param {boolean} askForLocation <p>Decides whether to ask for a location to download or not.</p>
             * @returns boolean <p>True if the download has started successfully. False if the download couldn't be started.</p>
             */
            downloadItem(uploadCollectionItem: sap.m.UploadCollectionItem, askForLocation: boolean): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.UploadCollection/events/beforeUploadStarts">beforeUploadStarts</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireBeforeUploadStarts(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.UploadCollection/events/change">change</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireChange(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileDeleted" href="#/api/sap.m.UploadCollection/events/fileDeleted">fileDeleted</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFileDeleted(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filenameLengthExceed" href="#/api/sap.m.UploadCollection/events/filenameLengthExceed">filenameLengthExceed</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFilenameLengthExceed(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileRenamed" href="#/api/sap.m.UploadCollection/events/fileRenamed">fileRenamed</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFileRenamed(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceed" href="#/api/sap.m.UploadCollection/events/fileSizeExceed">fileSizeExceed</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFileSizeExceed(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChange" href="#/api/sap.m.UploadCollection/events/selectionChange">selectionChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireSelectionChange(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="typeMissmatch" href="#/api/sap.m.UploadCollection/events/typeMissmatch">typeMissmatch</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireTypeMissmatch(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadComplete" href="#/api/sap.m.UploadCollection/events/uploadComplete">uploadComplete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUploadComplete(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.UploadCollection/events/uploadTerminated">uploadTerminated</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireUploadTerminated(mParameters?: any): sap.m.UploadCollection;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileType" href="#/api/sap.m.UploadCollection/methods/getFileType">fileType</a>.</p><p>Defines the allowed file types for the upload. The chosen files will be checked against an array of file types. If at least one file does not fit the file type requirements, the upload is prevented. Example: ["jpg", "png", "bmp"].</p>
             * @returns string[] <p>Value of property <code>fileType</code></p>
             */
            getFileType(): string[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p><p>Specifies the header parameters for the FileUploader that are submitted only with XHR requests. Header parameters are not supported by Internet Explorer 8 and 9.</p>
             * @returns sap.m.UploadCollectionParameter[] 
             */
            getHeaderParameters(): sap.m.UploadCollectionParameter[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.UploadCollection/methods/getInfoToolbar">infoToolbar</a>.</p><p>Specifies the info toolbar for filtering information. Sorting information will not displayed.</p>
             * @returns sap.m.Toolbar 
             */
            getInfoToolbar(): sap.m.Toolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInstantUpload" href="#/api/sap.m.UploadCollection/methods/getInstantUpload">instantUpload</a>.</p><p>If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>instantUpload</code></p>
             */
            getInstantUpload(): boolean;
            /**
             * <p>Provides access to the internally used request headers to allow adding them to the "Access-Control-Allow-Headers" header parameter if needed.</p>
             * @returns string[] <p>An array of request header strings</p>
             */
            getInternalRequestHeaderNames(): string[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p><p>Uploaded items.</p>
             * @returns sap.m.UploadCollectionItem[] 
             */
            getItems(): sap.m.UploadCollectionItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaximumFilenameLength" href="#/api/sap.m.UploadCollection/methods/getMaximumFilenameLength">maximumFilenameLength</a>.</p><p>Specifies the maximum length of a file name. If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.</p>
             * @returns number <p>Value of property <code>maximumFilenameLength</code></p>
             */
            getMaximumFilenameLength(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaximumFileSize" href="#/api/sap.m.UploadCollection/methods/getMaximumFileSize">maximumFileSize</a>.</p><p>Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit. This property is not supported by Internet Explorer 8 and 9.</p>
             * @returns number <p>Value of property <code>maximumFileSize</code></p>
             */
            getMaximumFileSize(): number;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.m.UploadCollection/methods/getMimeType">mimeType</a>.</p><p>Defines the allowed MIME types of files to be uploaded. The chosen files will be checked against an array of MIME types. If at least one file does not fit the MIME type requirements, the upload is prevented. This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].</p>
             * @returns string[] <p>Value of property <code>mimeType</code></p>
             */
            getMimeType(): string[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.UploadCollection/methods/getMode">mode</a>.</p><p>Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster). Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface. sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None. In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.</p><p>Default value is <code>None</code>.</p>
             * @returns sap.m.ListMode <p>Value of property <code>mode</code></p>
             */
            getMode(): sap.m.ListMode;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiple" href="#/api/sap.m.UploadCollection/methods/getMultiple">multiple</a>.</p><p>Lets the user select multiple files from the same folder and then upload them. Internet Explorer 8 and 9 do not support this property. Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.</p><p>If multiple property is set to false, the control shows an error message if more than one file is chosen for drag & drop.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>multiple</code></p>
             */
            getMultiple(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataDescription" href="#/api/sap.m.UploadCollection/methods/getNoDataDescription">noDataDescription</a>.</p><p>Allows you to set your own text for the 'No data' description label.</p>
             * @returns string <p>Value of property <code>noDataDescription</code></p>
             */
            getNoDataDescription(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.UploadCollection/methods/getNoDataText">noDataText</a>.</p><p>Allows you to set your own text for the 'No data' text label.</p>
             * @returns string <p>Value of property <code>noDataText</code></p>
             */
            getNoDataText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberOfAttachmentsText" href="#/api/sap.m.UploadCollection/methods/getNumberOfAttachmentsText">numberOfAttachmentsText</a>.</p><p>Sets the title text in the toolbar of the list of attachments. To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length". If a new title is set, the default is deactivated. The default value is set to language-dependent "Attachments (n)".</p>
             * @returns string <p>Value of property <code>numberOfAttachmentsText</code></p>
             */
            getNumberOfAttachmentsText(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p><p>Specifies the parameters for the FileUploader that are rendered as a hidden input field.</p>
             * @returns sap.m.UploadCollectionParameter[] 
             */
            getParameters(): sap.m.UploadCollectionParameter[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSameFilenameAllowed" href="#/api/sap.m.UploadCollection/methods/getSameFilenameAllowed">sameFilenameAllowed</a>.</p><p>Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>sameFilenameAllowed</code></p>
             */
            getSameFilenameAllowed(): boolean;
            /**
             * <p>Retrieves the currently selected UploadCollectionItem.</p>
             * @returns sap.m.UploadCollectionItem|null <p>The currently selected item or null</p>
             */
            getSelectedItem(): sap.m.UploadCollectionItem | null;
            /**
             * <p>Returns an array containing the selected UploadCollectionItems.</p>
             * @returns sap.m.UploadCollectionItem[] <p>Array of all selected items</p>
             */
            getSelectedItems(): sap.m.UploadCollectionItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSeparators" href="#/api/sap.m.UploadCollection/methods/getShowSeparators">showSeparators</a>.</p><p>Defines whether separators are shown between list items.</p><p>Default value is <code>All</code>.</p>
             * @returns sap.m.ListSeparators <p>Value of property <code>showSeparators</code></p>
             */
            getShowSeparators(): sap.m.ListSeparators;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTerminationEnabled" href="#/api/sap.m.UploadCollection/methods/getTerminationEnabled">terminationEnabled</a>.</p><p>If true, the button that is used to terminate the instant file upload gets visible. The button normally appears when a file is being uploaded.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>terminationEnabled</code></p>
             */
            getTerminationEnabled(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.UploadCollection/methods/getToolbar">toolbar</a>.</p><p>Specifies the toolbar.</p>
             * @returns sap.m.OverflowToolbar 
             */
            getToolbar(): sap.m.OverflowToolbar;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadButtonInvisible" href="#/api/sap.m.UploadCollection/methods/getUploadButtonInvisible">uploadButtonInvisible</a>.</p><p>If true, the button used for uploading files is invisible.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>uploadButtonInvisible</code></p>
             */
            getUploadButtonInvisible(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadEnabled" href="#/api/sap.m.UploadCollection/methods/getUploadEnabled">uploadEnabled</a>.</p><p>Enables the upload of a file.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>uploadEnabled</code></p>
             */
            getUploadEnabled(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.UploadCollection/methods/getUploadUrl">uploadUrl</a>.</p><p>Specifies the URL where the uploaded files have to be stored.</p><p>Default value is <code>../../../upload</code>.</p>
             * @returns string <p>Value of property <code>uploadUrl</code></p>
             */
            getUploadUrl(): string;
            /**
             * <p>Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.UploadCollectionParameter} oHeaderParameter <p>The headerParameter whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter): number;
            /**
             * <p>Checks for the provided <code>sap.m.UploadCollectionItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.UploadCollectionItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.UploadCollectionItem): number;
            /**
             * <p>Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.UploadCollectionParameter} oParameter <p>The parameter whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfParameter(oParameter: sap.m.UploadCollectionParameter): number;
            /**
             * <p>Inserts a headerParameter into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p>
             * @param {sap.m.UploadCollectionParameter} oHeaderParameter <p>The headerParameter to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the headerParameter should be inserted at; for a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value greater than the current size of the aggregation, the headerParameter is inserted at the last position</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertHeaderParameter(oHeaderParameter: sap.m.UploadCollectionParameter, iIndex: number): sap.m.UploadCollection;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p>
             * @param {sap.m.UploadCollectionItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.UploadCollectionItem, iIndex: number): sap.m.UploadCollection;
            /**
             * <p>Inserts a parameter into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p>
             * @param {sap.m.UploadCollectionParameter} oParameter <p>The parameter to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the parameter should be inserted at; for a negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value greater than the current size of the aggregation, the parameter is inserted at the last position</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertParameter(oParameter: sap.m.UploadCollectionParameter, iIndex: number): sap.m.UploadCollection;
            /**
             * <p>Opens the FileUploader dialog. When an UploadCollectionItem is provided, this method can be used to update a file with a new version. In this case, the upload progress can be sequenced using the events: beforeUploadStarts, uploadComplete and uploadTerminated. For this use, multiple properties from the UploadCollection have to be set to false. If no UploadCollectionItem is provided, only the dialog opens and no further configuration of the UploadCollection is needed.</p>
             * @param {sap.m.UploadCollectionItem} item <p>The item to update with a new version. This parameter is mandatory.</p>
             * @returns sap.m.UploadCollection <p>this to allow method chaining</p>
             */
            openFileDialog(item: sap.m.UploadCollectionItem): sap.m.UploadCollection;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.UploadCollectionParameter[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllHeaderParameters(): sap.m.UploadCollectionParameter[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.UploadCollectionItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.UploadCollectionItem[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.UploadCollectionParameter[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllParameters(): sap.m.UploadCollectionParameter[];
            /**
             * <p>Removes a headerParameter from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderParameters" href="#/api/sap.m.UploadCollection/methods/getHeaderParameters">headerParameters</a>.</p>
             * @param {number | string | sap.m.UploadCollectionParameter} vHeaderParameter <p>The headerParameter to remove or its index or id</p>
             * @returns sap.m.UploadCollectionParameter <p>The removed headerParameter or <code>null</code></p>
             */
            removeHeaderParameter(vHeaderParameter: number | string | sap.m.UploadCollectionParameter): sap.m.UploadCollectionParameter;
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.UploadCollectionItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.UploadCollectionItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.UploadCollectionItem): sap.m.UploadCollectionItem;
            /**
             * <p>Removes a parameter from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.m.UploadCollection/methods/getParameters">parameters</a>.</p>
             * @param {number | string | sap.m.UploadCollectionParameter} vParameter <p>The parameter to remove or its index or id</p>
             * @returns sap.m.UploadCollectionParameter <p>The removed parameter or <code>null</code></p>
             */
            removeParameter(vParameter: number | string | sap.m.UploadCollectionParameter): sap.m.UploadCollectionParameter;
            /**
             * <p>Select all items in "MultiSelection" mode.</p>
             * @returns sap.m.UploadCollection <p>this to allow method changing</p>
             */
            selectAll(): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileType" href="#/api/sap.m.UploadCollection/methods/getFileType">fileType</a>.</p><p>Defines the allowed file types for the upload. The chosen files will be checked against an array of file types. If at least one file does not fit the file type requirements, the upload is prevented. Example: ["jpg", "png", "bmp"].</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string[]} sFileType <p>New value for property <code>fileType</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFileType(sFileType: string[]): sap.m.UploadCollection;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInfoToolbar" href="#/api/sap.m.UploadCollection/methods/getInfoToolbar">infoToolbar</a>.</p>
             * @param {sap.m.Toolbar} oInfoToolbar <p>The infoToolbar to set</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInfoToolbar(oInfoToolbar: sap.m.Toolbar): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInstantUpload" href="#/api/sap.m.UploadCollection/methods/getInstantUpload">instantUpload</a>.</p><p>If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bInstantUpload <p>New value for property <code>instantUpload</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setInstantUpload(bInstantUpload: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaximumFilenameLength" href="#/api/sap.m.UploadCollection/methods/getMaximumFilenameLength">maximumFilenameLength</a>.</p><p>Specifies the maximum length of a file name. If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} iMaximumFilenameLength <p>New value for property <code>maximumFilenameLength</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaximumFilenameLength(iMaximumFilenameLength: number): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaximumFileSize" href="#/api/sap.m.UploadCollection/methods/getMaximumFileSize">maximumFileSize</a>.</p><p>Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit. This property is not supported by Internet Explorer 8 and 9.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {number} fMaximumFileSize <p>New value for property <code>maximumFileSize</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMaximumFileSize(fMaximumFileSize: number): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.m.UploadCollection/methods/getMimeType">mimeType</a>.</p><p>Defines the allowed MIME types of files to be uploaded. The chosen files will be checked against an array of MIME types. If at least one file does not fit the MIME type requirements, the upload is prevented. This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string[]} sMimeType <p>New value for property <code>mimeType</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMimeType(sMimeType: string[]): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMode" href="#/api/sap.m.UploadCollection/methods/getMode">mode</a>.</p><p>Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster). Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface. sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None. In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
             * @param {sap.m.ListMode} sMode <p>New value for property <code>mode</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMode(sMode: sap.m.ListMode): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiple" href="#/api/sap.m.UploadCollection/methods/getMultiple">multiple</a>.</p><p>Lets the user select multiple files from the same folder and then upload them. Internet Explorer 8 and 9 do not support this property. Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.</p><p>If multiple property is set to false, the control shows an error message if more than one file is chosen for drag & drop.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bMultiple <p>New value for property <code>multiple</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMultiple(bMultiple: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataDescription" href="#/api/sap.m.UploadCollection/methods/getNoDataDescription">noDataDescription</a>.</p><p>Allows you to set your own text for the 'No data' description label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNoDataDescription <p>New value for property <code>noDataDescription</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNoDataDescription(sNoDataDescription: string): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.UploadCollection/methods/getNoDataText">noDataText</a>.</p><p>Allows you to set your own text for the 'No data' text label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNoDataText <p>New value for property <code>noDataText</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNoDataText(sNoDataText: string): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNumberOfAttachmentsText" href="#/api/sap.m.UploadCollection/methods/getNumberOfAttachmentsText">numberOfAttachmentsText</a>.</p><p>Sets the title text in the toolbar of the list of attachments. To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length". If a new title is set, the default is deactivated. The default value is set to language-dependent "Attachments (n)".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sNumberOfAttachmentsText <p>New value for property <code>numberOfAttachmentsText</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNumberOfAttachmentsText(sNumberOfAttachmentsText: string): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSameFilenameAllowed" href="#/api/sap.m.UploadCollection/methods/getSameFilenameAllowed">sameFilenameAllowed</a>.</p><p>Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSameFilenameAllowed <p>New value for property <code>sameFilenameAllowed</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSameFilenameAllowed(bSameFilenameAllowed: boolean): sap.m.UploadCollection;
            /**
             * <p>Selects or deselects the given list item.</p>
             * @param {sap.m.UploadCollectionItem} uploadCollectionItem <p>The item whose selection is to be changed. This parameter is mandatory.</p>
             * @param {boolean} select <p>The selection state of the item. Default value is true.</p>
             * @returns sap.m.UploadCollection <p>this to allow method chaining</p>
             */
            setSelectedItem(uploadCollectionItem: sap.m.UploadCollectionItem, select: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets an UploadCollectionItem to be selected by ID. In single selection mode, the method removes the previous selection.</p>
             * @param {string} id <p>The ID of the item whose selection is to be changed.</p>
             * @param {boolean} select <p>The selection state of the item. Default value is true.</p>
             * @returns sap.m.UploadCollection <p>this to allow method chaining</p>
             */
            setSelectedItemById(id: string, select: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSeparators" href="#/api/sap.m.UploadCollection/methods/getShowSeparators">showSeparators</a>.</p><p>Defines whether separators are shown between list items.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>All</code>.</p>
             * @param {sap.m.ListSeparators} sShowSeparators <p>New value for property <code>showSeparators</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setShowSeparators(sShowSeparators: sap.m.ListSeparators): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTerminationEnabled" href="#/api/sap.m.UploadCollection/methods/getTerminationEnabled">terminationEnabled</a>.</p><p>If true, the button that is used to terminate the instant file upload gets visible. The button normally appears when a file is being uploaded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bTerminationEnabled <p>New value for property <code>terminationEnabled</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTerminationEnabled(bTerminationEnabled: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.UploadCollection/methods/getToolbar">toolbar</a>.</p>
             * @param {sap.m.OverflowToolbar} oToolbar <p>The toolbar to set</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setToolbar(oToolbar: sap.m.OverflowToolbar): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadButtonInvisible" href="#/api/sap.m.UploadCollection/methods/getUploadButtonInvisible">uploadButtonInvisible</a>.</p><p>If true, the button used for uploading files is invisible.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bUploadButtonInvisible <p>New value for property <code>uploadButtonInvisible</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUploadButtonInvisible(bUploadButtonInvisible: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadEnabled" href="#/api/sap.m.UploadCollection/methods/getUploadEnabled">uploadEnabled</a>.</p><p>Enables the upload of a file.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bUploadEnabled <p>New value for property <code>uploadEnabled</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUploadEnabled(bUploadEnabled: boolean): sap.m.UploadCollection;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.UploadCollection/methods/getUploadUrl">uploadUrl</a>.</p><p>Specifies the URL where the uploaded files have to be stored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>../../../upload</code>.</p>
             * @param {string} sUploadUrl <p>New value for property <code>uploadUrl</code></p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUploadUrl(sUploadUrl: string): sap.m.UploadCollection;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.UploadCollection/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.UploadCollection <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.UploadCollection;
            /**
             * <p>Starts the upload for all selected files.</p>
             */
            upload(): void;
        }
        /**
         * <p>Defines a structure of the element of the 'items' aggregation.</p>
         */
        export class UploadCollectionItem extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new UploadCollectionItem</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, will be generated automatically if no ID is provided.</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some attribute to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.UploadCollectionItem;
            /**
             * <p>Adds some marker to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addMarker(oMarker: sap.m.ObjectMarker): sap.m.UploadCollectionItem;
            /**
             * <p>Adds some status to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p>
             * @param {sap.m.ObjectStatus} oStatus <p>The status to add; if empty, nothing is inserted</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addStatus(oStatus: sap.m.ObjectStatus): sap.m.UploadCollectionItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deletePress" href="#/api/sap.m.UploadCollectionItem/events/deletePress">deletePress</a> event of this <code>sap.m.UploadCollectionItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollectionItem</code> itself.</p><p>When a deletePress event handler is attached to the item and the user presses the delete button, this event is triggered. If this event is triggered, it overwrites the default delete behavior of UploadCollection and the fileDeleted event of UploadCollection is not triggered.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollectionItem</code> itself</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachDeletePress(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.UploadCollectionItem/events/press">press</a> event of this <code>sap.m.UploadCollectionItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.UploadCollectionItem</code> itself.</p><p>This event is triggered when the user presses the filename link. If this event is provided, it overwrites the default behavior of opening the file.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollectionItem</code> itself</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindAttributes(oBindingInfo: any): sap.m.UploadCollectionItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindMarkers(oBindingInfo: any): sap.m.UploadCollectionItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindStatuses(oBindingInfo: any): sap.m.UploadCollectionItem;
            /**
             * <p>Destroys all the attributes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyAttributes(): sap.m.UploadCollectionItem;
            /**
             * <p>Destroys all the markers in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyMarkers(): sap.m.UploadCollectionItem;
            /**
             * <p>Destroys all the statuses in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyStatuses(): sap.m.UploadCollectionItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deletePress" href="#/api/sap.m.UploadCollectionItem/events/deletePress">deletePress</a> event of this <code>sap.m.UploadCollectionItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachDeletePress(fnFunction: Function, oListener?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.UploadCollectionItem/events/press">press</a> event of this <code>sap.m.UploadCollectionItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachPress(fnFunction: Function, oListener?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Downloads the item. The sap.ui.core.util.File method is used here. For further details on this method, see {sap.ui.core.util.File.save}.</p>
             * @param {boolean} askForLocation <p>Decides whether to ask for a location to download or not.</p>
             * @returns boolean <p><code>true</code> if download is possible, otherwise <code>false</code></p>
             */
            download(askForLocation: boolean): boolean;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="deletePress" href="#/api/sap.m.UploadCollectionItem/events/deletePress">deletePress</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireDeletePress(mParameters?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.UploadCollectionItem/events/press">press</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected firePress(mParameters?: any): sap.m.UploadCollectionItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelForPicture" href="#/api/sap.m.UploadCollectionItem/methods/getAriaLabelForPicture">ariaLabelForPicture</a>.</p><p>Aria label for the icon (or for the image).</p>
             * @returns string <p>Value of property <code>ariaLabelForPicture</code></p>
             */
            getAriaLabelForPicture(): string;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p><p>Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size' attributes are displayed after an item has been uploaded. Additionally, the Active property of sap.m.ObjectAttribute is supported.<br> Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this attribute, two attributes with the same title are displayed as these properties get displayed as an attribute. Example: An application passes the property ‘contributor’ with the value ‘A’ and the aggregation attributes ‘contributor’: ‘B’. As a result, the attributes ‘contributor’:’A’ and ‘contributor’:’B’ are displayed. To make sure the title does not appear twice, check if one of the properties is filled.</p>
             * @returns sap.m.ObjectAttribute[] 
             */
            getAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDocumentId" href="#/api/sap.m.UploadCollectionItem/methods/getDocumentId">documentId</a>.</p><p>Specifies a unique identifier of the file (created by the application).</p>
             * @returns string <p>Value of property <code>documentId</code></p>
             */
            getDocumentId(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableDelete" href="#/api/sap.m.UploadCollectionItem/methods/getEnableDelete">enableDelete</a>.</p><p>Enables/Disables the Delete button. If the value is true, the Delete button is enabled and the delete function can be used. If the value is false, the delete function is not available.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enableDelete</code></p>
             */
            getEnableDelete(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableEdit" href="#/api/sap.m.UploadCollectionItem/methods/getEnableEdit">enableEdit</a>.</p><p>Enables/Disables the Edit button. If the value is true, the Edit button is enabled and the edit function can be used. If the value is false, the edit function is not available.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>enableEdit</code></p>
             */
            getEnableEdit(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileName" href="#/api/sap.m.UploadCollectionItem/methods/getFileName">fileName</a>.</p><p>Specifies the name of the uploaded file.</p>
             * @returns string <p>Value of property <code>fileName</code></p>
             */
            getFileName(): string;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileUploader" href="#/api/sap.m.UploadCollectionItem/methods/getFileUploader">fileUploader</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getFileUploader(): sap.ui.core.ID;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p><p>Markers of an uploaded item Markers will be displayed after an item has been uploaded But not in Edit mode</p>
             * @returns sap.m.ObjectMarker[] 
             */
            getMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.m.UploadCollectionItem/methods/getMimeType">mimeType</a>.</p><p>Specifies the MIME type of the file.</p>
             * @returns string <p>Value of property <code>mimeType</code></p>
             */
            getMimeType(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.UploadCollectionItem/methods/getSelected">selected</a>.</p><p>Defines the selected state of the UploadCollectionItem.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p><p>Statuses of an uploaded item Statuses will be displayed after an item has been uploaded</p>
             * @returns sap.m.ObjectStatus[] 
             */
            getStatuses(): sap.m.ObjectStatus[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThumbnailUrl" href="#/api/sap.m.UploadCollectionItem/methods/getThumbnailUrl">thumbnailUrl</a>.</p><p>Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.</p>
             * @returns string <p>Value of property <code>thumbnailUrl</code></p>
             */
            getThumbnailUrl(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.UploadCollectionItem/methods/getUrl">url</a>.</p><p>Specifies the URL where the file is located. If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.</p>
             * @returns string <p>Value of property <code>url</code></p>
             */
            getUrl(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleDelete" href="#/api/sap.m.UploadCollectionItem/methods/getVisibleDelete">visibleDelete</a>.</p><p>Show/Hide the Delete button. If the value is true, the Delete button is visible. If the value is false, the Delete button is not visible.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visibleDelete</code></p>
             */
            getVisibleDelete(): boolean;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleEdit" href="#/api/sap.m.UploadCollectionItem/methods/getVisibleEdit">visibleEdit</a>.</p><p>Show/Hide the Edit button. If the value is true, the Edit button is visible. If the value is false, the Edit button is not visible.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>visibleEdit</code></p>
             */
            getVisibleEdit(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfMarker(oMarker: sap.m.ObjectMarker): number;
            /**
             * <p>Checks for the provided <code>sap.m.ObjectStatus</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ObjectStatus} oStatus <p>The status whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfStatus(oStatus: sap.m.ObjectStatus): number;
            /**
             * <p>Inserts a attribute into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p>
             * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the attribute should be inserted at; for a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.UploadCollectionItem;
            /**
             * <p>Inserts a marker into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p>
             * @param {sap.m.ObjectMarker} oMarker <p>The marker to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the marker should be inserted at; for a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted at the last position</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertMarker(oMarker: sap.m.ObjectMarker, iIndex: number): sap.m.UploadCollectionItem;
            /**
             * <p>Inserts a status into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p>
             * @param {sap.m.ObjectStatus} oStatus <p>The status to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the status should be inserted at; for a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted at the last position</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertStatus(oStatus: sap.m.ObjectStatus, iIndex: number): sap.m.UploadCollectionItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectAttribute[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllAttributes(): sap.m.ObjectAttribute[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectMarker[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllMarkers(): sap.m.ObjectMarker[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ObjectStatus[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllStatuses(): sap.m.ObjectStatus[];
            /**
             * <p>Removes a attribute from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a>.</p>
             * @param {number | string | sap.m.ObjectAttribute} vAttribute <p>The attribute to remove or its index or id</p>
             * @returns sap.m.ObjectAttribute <p>The removed attribute or <code>null</code></p>
             */
            removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;
            /**
             * <p>Removes a marker from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a>.</p>
             * @param {number | string | sap.m.ObjectMarker} vMarker <p>The marker to remove or its index or id</p>
             * @returns sap.m.ObjectMarker <p>The removed marker or <code>null</code></p>
             */
            removeMarker(vMarker: number | string | sap.m.ObjectMarker): sap.m.ObjectMarker;
            /**
             * <p>Removes a status from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a>.</p>
             * @param {number | string | sap.m.ObjectStatus} vStatus <p>The status to remove or its index or id</p>
             * @returns sap.m.ObjectStatus <p>The removed status or <code>null</code></p>
             */
            removeStatus(vStatus: number | string | sap.m.ObjectStatus): sap.m.ObjectStatus;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelForPicture" href="#/api/sap.m.UploadCollectionItem/methods/getAriaLabelForPicture">ariaLabelForPicture</a>.</p><p>Aria label for the icon (or for the image).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sAriaLabelForPicture <p>New value for property <code>ariaLabelForPicture</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setAriaLabelForPicture(sAriaLabelForPicture: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDocumentId" href="#/api/sap.m.UploadCollectionItem/methods/getDocumentId">documentId</a>.</p><p>Specifies a unique identifier of the file (created by the application).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sDocumentId <p>New value for property <code>documentId</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setDocumentId(sDocumentId: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableDelete" href="#/api/sap.m.UploadCollectionItem/methods/getEnableDelete">enableDelete</a>.</p><p>Enables/Disables the Delete button. If the value is true, the Delete button is enabled and the delete function can be used. If the value is false, the delete function is not available.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnableDelete <p>New value for property <code>enableDelete</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableDelete(bEnableDelete: boolean): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableEdit" href="#/api/sap.m.UploadCollectionItem/methods/getEnableEdit">enableEdit</a>.</p><p>Enables/Disables the Edit button. If the value is true, the Edit button is enabled and the edit function can be used. If the value is false, the edit function is not available.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bEnableEdit <p>New value for property <code>enableEdit</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableEdit(bEnableEdit: boolean): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileName" href="#/api/sap.m.UploadCollectionItem/methods/getFileName">fileName</a>.</p><p>Specifies the name of the uploaded file.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sFileName <p>New value for property <code>fileName</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFileName(sFileName: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileUploader" href="#/api/sap.m.UploadCollectionItem/methods/getFileUploader">fileUploader</a>.</p>
             * @param {sap.ui.core.ID | sap.ui.unified.FileUploader} oFileUploader <p>ID of an element which becomes the new target of this fileUploader association; alternatively, an element instance may be given</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFileUploader(oFileUploader: sap.ui.core.ID | sap.ui.unified.FileUploader): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.m.UploadCollectionItem/methods/getMimeType">mimeType</a>.</p><p>Specifies the MIME type of the file.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sMimeType <p>New value for property <code>mimeType</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMimeType(sMimeType: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.UploadCollectionItem/methods/getSelected">selected</a>.</p><p>Defines the selected state of the UploadCollectionItem.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThumbnailUrl" href="#/api/sap.m.UploadCollectionItem/methods/getThumbnailUrl">thumbnailUrl</a>.</p><p>Specifies the URL where the thumbnail of the file is located. This can also be an SAPUI5 icon URL.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sThumbnailUrl <p>New value for property <code>thumbnailUrl</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setThumbnailUrl(sThumbnailUrl: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.UploadCollectionItem/methods/getUrl">url</a>.</p><p>Specifies the URL where the file is located. If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sUrl <p>New value for property <code>url</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setUrl(sUrl: string): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleDelete" href="#/api/sap.m.UploadCollectionItem/methods/getVisibleDelete">visibleDelete</a>.</p><p>Show/Hide the Delete button. If the value is true, the Delete button is visible. If the value is false, the Delete button is not visible.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisibleDelete <p>New value for property <code>visibleDelete</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisibleDelete(bVisibleDelete: boolean): sap.m.UploadCollectionItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleEdit" href="#/api/sap.m.UploadCollectionItem/methods/getVisibleEdit">visibleEdit</a>.</p><p>Show/Hide the Edit button. If the value is true, the Edit button is visible. If the value is false, the Edit button is not visible.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bVisibleEdit <p>New value for property <code>visibleEdit</code></p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setVisibleEdit(bVisibleEdit: boolean): sap.m.UploadCollectionItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.UploadCollectionItem/methods/getAttributes">attributes</a> from model data.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindAttributes(): sap.m.UploadCollectionItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.UploadCollectionItem/methods/getMarkers">markers</a> from model data.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindMarkers(): sap.m.UploadCollectionItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.UploadCollectionItem/methods/getStatuses">statuses</a> from model data.</p>
             * @returns sap.m.UploadCollectionItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindStatuses(): sap.m.UploadCollectionItem;
        }
        /**
         * <p>Defines a structure of the element of the 'parameters' aggregation.</p>
         */
        export class UploadCollectionParameter extends sap.ui.core.Element {
            /**
             * <p>Constructor for a new UploadCollectionParameter.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.UploadCollectionParameter/methods/getName">name</a>.</p><p>Specifies the name of the parameter.</p>
             * @returns string <p>Value of property <code>name</code></p>
             */
            getName(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.UploadCollectionParameter/methods/getValue">value</a>.</p><p>Specifies the value of the parameter.</p>
             * @returns string <p>Value of property <code>value</code></p>
             */
            getValue(): string;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.m.UploadCollectionParameter/methods/getName">name</a>.</p><p>Specifies the name of the parameter.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sName <p>New value for property <code>name</code></p>
             * @returns sap.m.UploadCollectionParameter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setName(sName: string): sap.m.UploadCollectionParameter;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.m.UploadCollectionParameter/methods/getValue">value</a>.</p><p>Specifies the value of the parameter.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
             * @param {string} sValue <p>New value for property <code>value</code></p>
             * @returns sap.m.UploadCollectionParameter <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValue(sValue: string): sap.m.UploadCollectionParameter;
        }
        /**
         * <p>Used to create a customizable toolbar for the UploadCollection. A FileUploader instance is required in the toolbar and will be placed by the application.</p>
         */
        export class UploadCollectionToolbarPlaceholder extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new UploadCollectionToolbarPlaceholder.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/constructor">sap.ui.core.Control</a> can be used.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p><p>States of the upload process for <a target="_self" class="jsdoclink" href="#/api/sap.m.UploadCollectionItem">sap.m.UploadCollectionItem</a>.</p></p>
         */
        export enum UploadState {
            /**
             * <p>The file has been uploaded successfuly.</p>
             */
            Complete = "Complete",
            /**
             * <p>The file cannot be uploaded due to an error.</p>
             */
            Error = "Error",
            /**
             * <p>The file is awaiting an explicit command to start being uploaded.</p>
             */
            Ready = "Ready",
            /**
             * <p>The file is currently being uploaded.</p>
             */
            Uploading = "Uploading",
        }
        /**
         * <p><p>Enumeration of possible value color settings.</p></p>
         */
        export enum ValueColor {
            /**
             * <p>Critical value color.</p>
             */
            Critical = "Critical",
            /**
             * <p>Error value color.</p>
             */
            Error = "Error",
            /**
             * <p>Good value color.</p>
             */
            Good = "Good",
            /**
             * <p>Neutral value color.</p>
             */
            Neutral = "Neutral",
        }
        /**
         * <p>The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control, as it is just a specialized FlexBox control.<br> <br> <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.<br><br><span>Documentation links:</span><ul><li><a target="_blank" href="https://www.w3.org/TR/css-flexbox-1/">https://www.w3.org/TR/css-flexbox-1/</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li><li><a target="_blank" href="https://www.w3.org/TR/css-flexbox-1/#propdef-justify-content">https://www.w3.org/TR/css-flexbox-1/#propdef-justify-content</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li><li><a target="_blank" href="https://www.w3.org/TR/css-flexbox-1/#propdef-flex-direction">https://www.w3.org/TR/css-flexbox-1/#propdef-flex-direction</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li><li><a target="_blank" href="https://www.w3schools.com/css/css3_flexbox.asp#flex-direction">https://www.w3schools.com/css/css3_flexbox.asp#flex-direction</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/></li></ul></p>
         */
        export class VBox extends sap.m.FlexBox {
            /**
             * <p>Constructor for a new VBox.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p><p>Types for the placement of message Popover control.</p></p>
         */
        export enum VerticalPlacementType {
            /**
             * <p>Popover will be placed at the bottom of the reference control.</p>
             */
            Bottom = "Bottom",
            /**
             * <p>Popover will be placed at the top of the reference control.</p>
             */
            Top = "Top",
            /**
             * <p>Popover will be placed at the top or bottom of the reference control.</p>
             */
            Vertical = "Vertical",
        }
        /**
         * <p>The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.</p>
         */
        export class ViewSettingsCustomItem extends sap.m.ViewSettingsItem {
            /**
             * <p>Constructor for a new ViewSettingsCustomItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Destroys the customControl in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomControl" href="#/api/sap.m.ViewSettingsCustomItem/methods/getCustomControl">customControl</a>.</p>
             * @returns sap.m.ViewSettingsCustomItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomControl(): sap.m.ViewSettingsCustomItem;
            /**
             * <p>Internally the control is handled as a managed object instead of an aggregation because this control is sometimes aggregated in other controls like a popover or a dialog.</p>
             * @returns sap.ui.core.Control <p>oControl a control used for filtering purposes</p>
             */
            getCustomControl(): sap.ui.core.Control;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterCount" href="#/api/sap.m.ViewSettingsCustomItem/methods/getFilterCount">filterCount</a>.</p><p>The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.</p><p>Default value is <code>0</code>.</p>
             * @returns number <p>Value of property <code>filterCount</code></p>
             */
            getFilterCount(): number;
            /**
             * <p>Internally the control is handled as a managed object instead of an aggregation as this control is sometimes aggregated in other controls like a popover or a dialog.</p>
             * @param {sap.ui.core.Control} oControl <p>A control used for filtering purposes</p>
             * @returns sap.m.ViewSettingsCustomItem <p>this pointer for chaining</p>
             */
            setCustomControl(oControl: sap.ui.core.Control): sap.m.ViewSettingsCustomItem;
            /**
             * <p>Sets the filterCount without invalidating the control as it is never rendered directly.</p>
             * @param {number} iValue <p>The new value for property filterCount</p>
             * @returns sap.m.ViewSettingsItem <p>this pointer for chaining</p>
             */
            setFilterCount(iValue: number): sap.m.ViewSettingsItem;
        }
        /**
         * <p>The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.</p>
         */
        export class ViewSettingsCustomTab extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new ViewSettingsCustomTab.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.ViewSettingsCustomTab <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.ViewSettingsCustomTab;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p>
             * @returns sap.m.ViewSettingsCustomTab <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.ViewSettingsCustomTab;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p><p>The content of this Custom tab</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ViewSettingsCustomTab/methods/getIcon">icon</a>.</p><p>Custom tab button icon</p><p>Default value is <code>sap-icon://competitor</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ViewSettingsCustomTab/methods/getTitle">title</a>.</p><p>Custom tab title</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.ViewSettingsCustomTab <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.ViewSettingsCustomTab;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.ViewSettingsCustomTab/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.ViewSettingsCustomTab/methods/getIcon">icon</a>.</p><p>Custom tab button icon</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>sap-icon://competitor</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.ViewSettingsCustomTab <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.ViewSettingsCustomTab;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ViewSettingsCustomTab/methods/getTitle">title</a>.</p><p>Custom tab title</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.ViewSettingsCustomTab <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.ViewSettingsCustomTab;
        }
        /**
         * <p>Helps the user to sort, filter, or group data within a (master) <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> or a <a target="_self" class="jsdoclink" href="#/api/sap.m.Table">sap.m.Table</a>. The dialog is triggered by icon buttons in the table toolbar. Each button shows a dropdown list icon.</p><h3>Overview</h3><p>The <code>ViewSettingsDialog</code> is a composite control, consisting of a modal <a target="_self" class="jsdoclink" href="#/api/sap.m.Popover">sap.m.Popover</a> and several internal lists. There are three different tabs (Sort, Group, Filter) in the dialog that can be activated by filling the respective associations. If only one association is filled, the other tabs are automatically hidden. The selected options can be used to create sorters and filters for the table.</p><p><b>Note:</b> If the app does not offer all three sorting, filtering, and grouping operations, but only one of these (such as sort), we recommend placing the icon button directly in the toolbar. Do not place sort, filter, or group buttons in the footer toolbar if they refer to a table. Place group, sort, and filter buttons in the footer toolbar if they refer to a master list.</p><h3>Usage</h3><p><i>When to use?</i> <ul><li>If you need to allow the user to sort line items in a manageable list or table (up to 20 columns)</li> <li>If you need to offer custom filter settings in a manageable list or table (up to 20 columns)</li> <li>If you need to allow the user to group line items in a manageable list or table (up to 20 columns)</li></ul></p><p><i>When not to use?</i> <ul><li>If you have complex tables (more than 20 columns)</li> <li>If you need to rearrange columns within your table (use the <a target="_self" class="jsdoclink" href="#/api/sap.m.TablePersoDialog">sap.m.TablePersoDialog</a> instead)</li> <li>If you need very specific sort, filter, or column sorting options within complex tables (use the <a target="_self" class="jsdoclink" href="#/api/sap.m.P13nDialog">sap.m.P13nDialog</a> instead)</li></ul></p><h3>Responsive behavior</h3><p>The popover dialog appears as a modal window on desktop and tablet screen sizes, but full screen on smartphones.</p>
         */
        export class ViewSettingsDialog extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new <code>ViewSettingsDialog</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Overwrites the aggregation setter in order to have ID validation logic as some strings are reserved for the predefined tabs.</p>
             * @param {any} oCustomTab <p>The custom tab to be added</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            addCustomTab(oCustomTab: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Adds some filterItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a>.</p>
             * @param {sap.m.ViewSettingsItem} oFilterItem <p>The filterItem to add; if empty, nothing is inserted</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addFilterItem(oFilterItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;
            /**
             * <p>Adds a group item and sets the association to reflect the selected state.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The item to be added to the group items</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            addGroupItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;
            /**
             * <p>Adds a preset filter item and sets the association to reflect the selected state.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The selected item or a string with the key</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            addPresetFilterItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;
            /**
             * <p>Adds a sort item and sets the association to reflect the selected state.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The item to be added to the aggregation</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            addSortItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.ViewSettingsDialog/events/cancel">cancel</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.</p><p>Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachCancel(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.ViewSettingsDialog/events/confirm">confirm</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.</p><p>Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page. </br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachConfirm(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailPageOpened" href="#/api/sap.m.ViewSettingsDialog/events/filterDetailPageOpened">filterDetailPageOpened</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.</p><p>Fired when the filter detail page is opened.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFilterDetailPageOpened(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="resetFilters" href="#/api/sap.m.ViewSettingsDialog/events/resetFilters">resetFilters</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.</p><p>Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachResetFilters(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindCustomTabs(oBindingInfo: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindFilterItems(oBindingInfo: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindGroupItems(oBindingInfo: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindPresetFilterItems(oBindingInfo: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindSortItems(oBindingInfo: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Destroys all the customTabs in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyCustomTabs(): sap.m.ViewSettingsDialog;
            /**
             * <p>Destroys all the filterItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a>.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyFilterItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Destroys all the groupItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyGroupItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Destroys all the presetFilterItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyPresetFilterItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Destroys all the sortItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroySortItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.ViewSettingsDialog/events/cancel">cancel</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachCancel(fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.ViewSettingsDialog/events/confirm">confirm</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachConfirm(fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailPageOpened" href="#/api/sap.m.ViewSettingsDialog/events/filterDetailPageOpened">filterDetailPageOpened</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFilterDetailPageOpened(fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="resetFilters" href="#/api/sap.m.ViewSettingsDialog/events/resetFilters">resetFilters</a> event of this <code>sap.m.ViewSettingsDialog</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachResetFilters(fnFunction: Function, oListener?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="cancel" href="#/api/sap.m.ViewSettingsDialog/events/cancel">cancel</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireCancel(mParameters?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="confirm" href="#/api/sap.m.ViewSettingsDialog/events/confirm">confirm</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireConfirm(mParameters?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailPageOpened" href="#/api/sap.m.ViewSettingsDialog/events/filterDetailPageOpened">filterDetailPageOpened</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFilterDetailPageOpened(mParameters?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="resetFilters" href="#/api/sap.m.ViewSettingsDialog/events/resetFilters">resetFilters</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireResetFilters(mParameters?: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>.</p><p>The list of all the custom tabs.</p>
             * @returns sap.m.ViewSettingsCustomTab[] 
             */
            getCustomTabs(): sap.m.ViewSettingsCustomTab[];
            /**
             * <p>Forward method to the inner dialog method: getDomRef.</p>
             * @returns HTMLElement <p>The Element's DOM Element sub DOM Element or null</p>
             */
            getDomRef(): HTMLElement;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a>.</p><p>The list of items with key and value that can be filtered on (for example, a list of columns for a table). A filterItem is associated with one or more detail filters.</p><p><b>Note:</b> It is recommended to use the <code>sap.m.ViewSettingsFilterItem</code> as it fits best at the filter page.</p>
             * @returns sap.m.ViewSettingsItem[] 
             */
            getFilterItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSearchOperator" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterSearchOperator">filterSearchOperator</a>.</p><p>Provides a string filter operator which is used when the user searches items in filter details page. Possible operators are: <code>AnyWordStartsWith</code>, <code>Contains</code>, <code>StartsWith</code>, <code>Equals</code>. This property will be ignored if a custom callback is provided through <code>setFilterSearchCallback</code> method.</p><p>Default value is <code>StartsWith</code>.</p>
             * @returns sap.m.StringFilterOperator <p>Value of property <code>filterSearchOperator</code></p>
             */
            getFilterSearchOperator(): sap.m.StringFilterOperator;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupDescending" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupDescending">groupDescending</a>.</p><p>Determines whether the group order is descending or ascending (default).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>groupDescending</code></p>
             */
            getGroupDescending(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>.</p><p>The list of items with key and value that can be grouped on (for example, a list of columns for a table).</p>
             * @returns sap.m.ViewSettingsItem[] 
             */
            getGroupItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>.</p><p>The list of preset filter items with key and value that allows the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.</p>
             * @returns sap.m.ViewSettingsItem[] 
             */
            getPresetFilterItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.</p>
             * @returns any <p>An object with item and sub-item keys</p>
             */
            getSelectedFilterCompoundKeys(): any;
            /**
             * <p>Returns the selected filters as an array of ViewSettingsItems.</p><p>It can be used to create matching sorters and filters to apply the selected settings to the data.</p>
             * @returns sap.m.ViewSettingsItem[] <p>An array of selected filter items</p>
             */
            getSelectedFilterItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets the filter string in format: "filter name (subfilter1 name, subfilter2 name, ...), ...". For custom and preset filters it will only add the filter name to the resulting string.</p>
             * @returns string <p>The selected filter string</p>
             */
            getSelectedFilterString(): string;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedGroupItem" href="#/api/sap.m.ViewSettingsDialog/methods/getSelectedGroupItem">selectedGroupItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedGroupItem(): sap.ui.core.ID;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedPresetFilterItem" href="#/api/sap.m.ViewSettingsDialog/methods/getSelectedPresetFilterItem">selectedPresetFilterItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedPresetFilterItem(): sap.ui.core.ID;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedSortItem" href="#/api/sap.m.ViewSettingsDialog/methods/getSelectedSortItem">selectedSortItem</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getSelectedSortItem(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortDescending" href="#/api/sap.m.ViewSettingsDialog/methods/getSortDescending">sortDescending</a>.</p><p>Determines whether the sort order is descending or ascending (default).</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>sortDescending</code></p>
             */
            getSortDescending(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>.</p><p>The list of items with key and value that can be sorted over (for example, a list of columns for a table).</p>
             * @returns sap.m.ViewSettingsItem[] 
             */
            getSortItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.ViewSettingsDialog/methods/getTitle">title</a>.</p><p>Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Forward method to the inner dialog method: hasStyleClass.</p>
             * @returns boolean <p>true if the class is set, false otherwise</p>
             */
            hasStyleClass(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsCustomTab</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsCustomTab} oCustomTab <p>The customTab whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfCustomTab(oCustomTab: sap.m.ViewSettingsCustomTab): number;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsItem} oFilterItem <p>The filterItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfFilterItem(oFilterItem: sap.m.ViewSettingsItem): number;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsItem} oGroupItem <p>The groupItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfGroupItem(oGroupItem: sap.m.ViewSettingsItem): number;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsItem} oPresetFilterItem <p>The presetFilterItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfPresetFilterItem(oPresetFilterItem: sap.m.ViewSettingsItem): number;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsItem} oSortItem <p>The sortItem whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfSortItem(oSortItem: sap.m.ViewSettingsItem): number;
            /**
             * <p>Inserts a customTab into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>.</p>
             * @param {sap.m.ViewSettingsCustomTab} oCustomTab <p>The customTab to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the customTab should be inserted at; for a negative value of <code>iIndex</code>, the customTab is inserted at position 0; for a value greater than the current size of the aggregation, the customTab is inserted at the last position</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertCustomTab(oCustomTab: sap.m.ViewSettingsCustomTab, iIndex: number): sap.m.ViewSettingsDialog;
            /**
             * <p>Inserts a filterItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a>.</p>
             * @param {sap.m.ViewSettingsItem} oFilterItem <p>The filterItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the filterItem should be inserted at; for a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value greater than the current size of the aggregation, the filterItem is inserted at the last position</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertFilterItem(oFilterItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;
            /**
             * <p>Inserts a groupItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>.</p>
             * @param {sap.m.ViewSettingsItem} oGroupItem <p>The groupItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the groupItem should be inserted at; for a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value greater than the current size of the aggregation, the groupItem is inserted at the last position</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertGroupItem(oGroupItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;
            /**
             * <p>Inserts a presetFilterItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>.</p>
             * @param {sap.m.ViewSettingsItem} oPresetFilterItem <p>The presetFilterItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the presetFilterItem should be inserted at; for a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value greater than the current size of the aggregation, the presetFilterItem is inserted at the last position</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertPresetFilterItem(oPresetFilterItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;
            /**
             * <p>Inserts a sortItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>.</p>
             * @param {sap.m.ViewSettingsItem} oSortItem <p>The sortItem to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the sortItem should be inserted at; for a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value greater than the current size of the aggregation, the sortItem is inserted at the last position</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertSortItem(oSortItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsDialog;
            /**
             * <p>Opens the ViewSettingsDialog relative to the parent control.</p>
             * @param {string} sPageId <p>The ID of the initial page to be opened in the dialog. The available values are "sort", "group", "filter" or IDs of custom tabs.</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            open(sPageId?: string): sap.m.ViewSettingsDialog;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ViewSettingsCustomTab[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllCustomTabs(): sap.m.ViewSettingsCustomTab[];
            /**
             * <p>Removes all filter Items and resets the remembered page if it was a filter detail page and all of its filter items are being removed.</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            removeAllFilterItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ViewSettingsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllGroupItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ViewSettingsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllPresetFilterItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ViewSettingsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSortItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Removes a customTab from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a>.</p>
             * @param {number | string | sap.m.ViewSettingsCustomTab} vCustomTab <p>The customTab to remove or its index or id</p>
             * @returns sap.m.ViewSettingsCustomTab <p>The removed customTab or <code>null</code></p>
             */
            removeCustomTab(vCustomTab: number | string | sap.m.ViewSettingsCustomTab): sap.m.ViewSettingsCustomTab;
            /**
             * <p>Removes a filter Item and resets the remembered page if it was the filter detail page of the removed filter.</p>
             * @param {number | sap.m.ViewSettingsFilterItem | string} vFilterItem <p>The filter item's index, or the item itself, or its id</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            removeFilterItem(vFilterItem: number | sap.m.ViewSettingsFilterItem | string): sap.m.ViewSettingsDialog;
            /**
             * <p>Removes a groupItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a>.</p>
             * @param {number | string | sap.m.ViewSettingsItem} vGroupItem <p>The groupItem to remove or its index or id</p>
             * @returns sap.m.ViewSettingsItem <p>The removed groupItem or <code>null</code></p>
             */
            removeGroupItem(vGroupItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;
            /**
             * <p>Removes a presetFilterItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a>.</p>
             * @param {number | string | sap.m.ViewSettingsItem} vPresetFilterItem <p>The presetFilterItem to remove or its index or id</p>
             * @returns sap.m.ViewSettingsItem <p>The removed presetFilterItem or <code>null</code></p>
             */
            removePresetFilterItem(vPresetFilterItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;
            /**
             * <p>Removes a sortItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a>.</p>
             * @param {number | string | sap.m.ViewSettingsItem} vSortItem <p>The sortItem to remove or its index or id</p>
             * @returns sap.m.ViewSettingsItem <p>The removed sortItem or <code>null</code></p>
             */
            removeSortItem(vSortItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;
            /**
             * <p>Forward the busy state setting to the internal dialog instance. Needed because of the not-bullet proof implementation of setBusy in sap.ui.core.Control</p>
             * @param {boolean} bBusy <p>The busy state flag</p>
             * @returns sap.m.ViewSettingsDialog <p>this Instance for chaining</p>
             */
            setBusy(bBusy: boolean): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets a callback that will check the ViewSettingsItem's text against the search query. If a callback is set, <code>filterSearchOperator</code> property will be ignored, as it serves the same purpose.</p>
             * @param {Function} fnTest <p>A function that accepts two parameters fnTest({string} query, {string} value) and returns boolean if the value satisfies the query.</p>
             * @returns sap.m.ViewSettingsDialog <p>this instance for chaining</p>
             */
            setFilterSearchCallback(fnTest: Function): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterSearchOperator" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterSearchOperator">filterSearchOperator</a>.</p><p>Provides a string filter operator which is used when the user searches items in filter details page. Possible operators are: <code>AnyWordStartsWith</code>, <code>Contains</code>, <code>StartsWith</code>, <code>Equals</code>. This property will be ignored if a custom callback is provided through <code>setFilterSearchCallback</code> method.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>StartsWith</code>.</p>
             * @param {sap.m.StringFilterOperator} sFilterSearchOperator <p>New value for property <code>filterSearchOperator</code></p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setFilterSearchOperator(sFilterSearchOperator: sap.m.StringFilterOperator): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupDescending" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupDescending">groupDescending</a>.</p><p>Determines whether the group order is descending or ascending (default).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bGroupDescending <p>New value for property <code>groupDescending</code></p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setGroupDescending(bGroupDescending: boolean): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.</p>
             * @param {any} oSelectedFilterKeys <p>A configuration object with filter item and sub item keys in the format: { parent_key: { key: boolean, key2: boolean, ...}, ... }. Setting boolean to true will set the filter to true, false or omitting an entry will set the filter to false. It can be used to set the dialog state based on presets.</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            setSelectedFilterCompoundKeys(oSelectedFilterKeys: any): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets the selected group item (either by key or by item).</p>
             * @param {sap.m.ViewSettingsItem | string} vItemOrKey <p>The selected item or the item's key string</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            setSelectedGroupItem(vItemOrKey: sap.m.ViewSettingsItem | string): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets the selected preset filter item.</p>
             * @param {sap.m.ViewSettingsItem | string | null} vItemOrKey <p>The selected item or the item's key string</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            setSelectedPresetFilterItem(vItemOrKey: sap.m.ViewSettingsItem | string | null): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets the selected sort item (either by key or by item).</p>
             * @param {sap.m.ViewSettingsItem | string} vItemOrKey <p>The selected item or the item's key string</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            setSelectedSortItem(vItemOrKey: sap.m.ViewSettingsItem | string): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortDescending" href="#/api/sap.m.ViewSettingsDialog/methods/getSortDescending">sortDescending</a>.</p><p>Determines whether the sort order is descending or ascending (default).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSortDescending <p>New value for property <code>sortDescending</code></p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSortDescending(bSortDescending: boolean): sap.m.ViewSettingsDialog;
            /**
             * <p>Sets the title of the internal dialog.</p>
             * @param {string} sTitle <p>The title text for the dialog</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            setTitle(sTitle: string): sap.m.ViewSettingsDialog;
            /**
             * <p>Forward method to the inner dialog method: toggleStyleClass.</p>
             * @returns sap.m.ViewSettingsDialog <p>this pointer for chaining</p>
             */
            toggleStyleClass(): sap.m.ViewSettingsDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomTabs" href="#/api/sap.m.ViewSettingsDialog/methods/getCustomTabs">customTabs</a> from model data.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindCustomTabs(): sap.m.ViewSettingsDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getFilterItems">filterItems</a> from model data.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindFilterItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupItems" href="#/api/sap.m.ViewSettingsDialog/methods/getGroupItems">groupItems</a> from model data.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindGroupItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPresetFilterItems" href="#/api/sap.m.ViewSettingsDialog/methods/getPresetFilterItems">presetFilterItems</a> from model data.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindPresetFilterItems(): sap.m.ViewSettingsDialog;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSortItems" href="#/api/sap.m.ViewSettingsDialog/methods/getSortItems">sortItems</a> from model data.</p>
             * @returns sap.m.ViewSettingsDialog <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindSortItems(): sap.m.ViewSettingsDialog;
        }
        /**
         * <p>A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog. It is derived from a core Item, but does not support the base class properties like textDirection and enabled. Setting these properties will not have any effects.</p>
         */
        export class ViewSettingsFilterItem extends sap.m.ViewSettingsItem {
            /**
             * <p>Constructor for a new ViewSettingsFilterItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The item to add; if empty, nothing is inserted</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addItem(oItem: sap.m.ViewSettingsItem): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailItemsAggregationChange" href="#/api/sap.m.ViewSettingsFilterItem/events/filterDetailItemsAggregationChange">filterDetailItemsAggregationChange</a> event of this <code>sap.m.ViewSettingsFilterItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsFilterItem</code> itself.</p><p>Let the outside world know that the filter detail aggregation was changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsFilterItem</code> itself</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachFilterDetailItemsAggregationChange(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
             * @param {any} oBindingInfo <p>The binding information</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            bindItems(oBindingInfo: any): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyItems(): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailItemsAggregationChange" href="#/api/sap.m.ViewSettingsFilterItem/events/filterDetailItemsAggregationChange">filterDetailItemsAggregationChange</a> event of this <code>sap.m.ViewSettingsFilterItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachFilterDetailItemsAggregationChange(fnFunction: Function, oListener?: any): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="filterDetailItemsAggregationChange" href="#/api/sap.m.ViewSettingsFilterItem/events/filterDetailItemsAggregationChange">filterDetailItemsAggregationChange</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireFilterDetailItemsAggregationChange(mParameters?: any): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p><p>Items with key and value that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.</p>
             * @returns sap.m.ViewSettingsItem[] 
             */
            getItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelect" href="#/api/sap.m.ViewSettingsFilterItem/methods/getMultiSelect">multiSelect</a>.</p><p>If set to (true), multi selection will be allowed for the items aggregation.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>multiSelect</code></p>
             */
            getMultiSelect(): boolean;
            /**
             * <p>Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The item whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfItem(oItem: sap.m.ViewSettingsItem): number;
            /**
             * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p>
             * @param {sap.m.ViewSettingsItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertItem(oItem: sap.m.ViewSettingsItem, iIndex: number): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.m.ViewSettingsItem[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllItems(): sap.m.ViewSettingsItem[];
            /**
             * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a>.</p>
             * @param {number | string | sap.m.ViewSettingsItem} vItem <p>The item to remove or its index or id</p>
             * @returns sap.m.ViewSettingsItem <p>The removed item or <code>null</code></p>
             */
            removeItem(vItem: number | string | sap.m.ViewSettingsItem): sap.m.ViewSettingsItem;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelect" href="#/api/sap.m.ViewSettingsFilterItem/methods/getMultiSelect">multiSelect</a>.</p><p>If set to (true), multi selection will be allowed for the items aggregation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bMultiSelect <p>New value for property <code>multiSelect</code></p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setMultiSelect(bMultiSelect: boolean): sap.m.ViewSettingsFilterItem;
            /**
             * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.ViewSettingsFilterItem/methods/getItems">items</a> from model data.</p>
             * @returns sap.m.ViewSettingsFilterItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            unbindItems(): sap.m.ViewSettingsFilterItem;
        }
        /**
         * <p>ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog. It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects. Apps should use the core Item's property <code>key/</code> and provide a unique value for it. Not providing a key may lead to unexpected behavior of the sap.m.ViewSettingsDialog.</p>
         */
        export class ViewSettingsItem extends sap.ui.core.Item {
            /**
             * <p>Constructor for a new ViewSettingsItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
             * @param {any} mSettings <p>initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.ViewSettingsItem/events/itemPropertyChanged">itemPropertyChanged</a> event of this <code>sap.m.ViewSettingsItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.ViewSettingsItem</code> itself.</p><p>Let the outside world know that some of its properties has changed.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsItem</code> itself</p>
             * @returns sap.m.ViewSettingsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachItemPropertyChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.ViewSettingsItem;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.ViewSettingsItem/events/itemPropertyChanged">itemPropertyChanged</a> event of this <code>sap.m.ViewSettingsItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.ViewSettingsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachItemPropertyChanged(fnFunction: Function, oListener?: any): sap.m.ViewSettingsItem;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="itemPropertyChanged" href="#/api/sap.m.ViewSettingsItem/events/itemPropertyChanged">itemPropertyChanged</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.ViewSettingsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireItemPropertyChanged(mParameters?: any): sap.m.ViewSettingsItem;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.ViewSettingsItem/methods/getSelected">selected</a>.</p><p>Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>selected</code></p>
             */
            getSelected(): boolean;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelected" href="#/api/sap.m.ViewSettingsItem/methods/getSelected">selected</a>.</p><p>Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bSelected <p>New value for property <code>selected</code></p>
             * @returns sap.m.ViewSettingsItem <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setSelected(bSelected: boolean): sap.m.ViewSettingsItem;
        }
        /**
         * <p>Enables users to accomplish a single goal which consists of multiple dependable sub-tasks. </p><h3>Overview</h3><p> The sap.m.Wizard helps users complete a complex and unfamiliar task by dividing it into sections and guiding the user through it. The wizard has two main areas - a navigation area at the top showing the step sequence and a content area below it. </p><h3>Structure</h3><h4>Navigation Area</h4><p> The top most area of the wizard is occupied by the navigation area. It shows the sequence of <a target="_self" class="jsdoclink" href="#/api/sap.m.WizardStep">wizard steps</a>. <ul> <li>The minimum number of steps is 3 and the maximum is 8 and are stored in the <code>steps</code> aggregation.</li> <li>Steps can be branching depending on choices the user made in their input - this is set by the <code>enableBranching</code> property. </li> <li>Steps can have different visual representations - numbers or icons. You can add labels for better readability </li> </ul> </p><h4>Content</h4><p> The content occupies the main part of the page. It can hold any type of input controls. The content is kept in <a target="_self" class="jsdoclink" href="#/api/sap.m.WizardStep">wizard steps</a>. </p><h4>Next Step Button</h4><p> The next step button is displayed below the content. It can be hidden by setting <code>showNextButton</code> to <code>false</code> and displayed, for example, only after the user has filled all mandatory fields. </p><h3>Usage</h3><h4>When to use:</h4><p> When the user has to accomplish a long or unfamiliar task. </p><h4>When not to use:</h4><p> When the user has to accomplish a routine task that is clear and familiar. When the task has only two steps or less. </p><h3>Responsive Behavior</h3><p> On mobile devices the steps in the StepNavigator are grouped together and overlap. Tapping on them will show a popover to select the step to navigate to.</p>
         */
        export class Wizard extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new Wizard.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds a new step to the Wizard.</p>
             * @param {sap.m.WizardStep} wizardStep <p>New WizardStep to add to the Wizard</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining</p>
             */
            addStep(wizardStep: sap.m.WizardStep): sap.m.Wizard;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.Wizard/events/complete">complete</a> event of this <code>sap.m.Wizard</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Wizard</code> itself.</p><p>The complete event is fired when the user clicks the finish button of the Wizard. The finish button is only available on the last step of the Wizard.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachComplete(oData: any, fnFunction: Function, oListener?: any): sap.m.Wizard;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="stepActivate" href="#/api/sap.m.Wizard/events/stepActivate">stepActivate</a> event of this <code>sap.m.Wizard</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.Wizard</code> itself.</p><p>The StepActivated event is fired every time a new step is activated.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachStepActivate(oData: any, fnFunction: Function, oListener?: any): sap.m.Wizard;
            /**
             * <p>Destroys all aggregated steps in the Wizard.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            destroySteps(): sap.m.Wizard;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.Wizard/events/complete">complete</a> event of this <code>sap.m.Wizard</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachComplete(fnFunction: Function, oListener?: any): sap.m.Wizard;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="stepActivate" href="#/api/sap.m.Wizard/events/stepActivate">stepActivate</a> event of this <code>sap.m.Wizard</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachStepActivate(fnFunction: Function, oListener?: any): sap.m.Wizard;
            /**
             * <p>Discards all progress done from the given step(incl.) to the end of the wizard. The verified state of the steps is returned to the initial provided.</p>
             * @param {sap.m.WizardStep} step <p>The step after which the progress is discarded.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            discardProgress(step: sap.m.WizardStep): sap.m.Wizard;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.Wizard/events/complete">complete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireComplete(mParameters?: any): sap.m.Wizard;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="stepActivate" href="#/api/sap.m.Wizard/events/stepActivate">stepActivate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireStepActivate(mParameters?: any): sap.m.Wizard;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCurrentStep" href="#/api/sap.m.Wizard/methods/getCurrentStep">currentStep</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getCurrentStep(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableBranching" href="#/api/sap.m.Wizard/methods/getEnableBranching">enableBranching</a>.</p><p>Enables the branching functionality of the Wizard. Branching gives the developer the ability to define multiple routes a user is able to take based on the input in the current step. It is up to the developer to programatically check for what is the input in the current step and set a concrete next step amongs the available subsequent steps. Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code> associations of the WizardStep control are ignored.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>enableBranching</code></p>
             */
            getEnableBranching(): boolean;
            /**
             * <p>Returns the finish button text which will be rendered.</p>
             * @returns string <p>The text which will be rendered in the finish button.</p>
             */
            getFinishButtonText(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Wizard/methods/getHeight">height</a>.</p><p>Determines the height of the Wizard.</p><p>Default value is <code>100%</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * <p>Returns the number of the last activated step in the Wizard.</p>
             * @returns number <p>The last activated step.</p>
             */
            getProgress(): number;
            /**
             * <p>Returns the last activated step in the Wizard.</p>
             * @returns sap.m.WizardStep <p>Pointer to the control instance for chaining.</p>
             */
            getProgressStep(): sap.m.WizardStep;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNextButton" href="#/api/sap.m.Wizard/methods/getShowNextButton">showNextButton</a>.</p><p>Controls the visibility of the next button. The developers can choose to control the flow of the steps either through the API (with <code>nextStep</code> and <code>previousStep</code> methods) or let the user click the next button, and control it with <code>validateStep</code> or <code>invalidateStep</code> methods.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>showNextButton</code></p>
             */
            getShowNextButton(): boolean;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSteps" href="#/api/sap.m.Wizard/methods/getSteps">steps</a>.</p><p>The wizard steps to be included in the content of the control.</p>
             * @returns sap.m.WizardStep[] 
             */
            getSteps(): sap.m.WizardStep[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Wizard/methods/getWidth">width</a>.</p><p>Determines the width of the Wizard.</p><p>Default value is <code>auto</code>.</p>
             * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * <p>Goes to the given step. The step must already be activated and visible. You can't use this method on steps that haven't been reached yet.</p>
             * @param {sap.m.WizardStep} oStep <p>The step to go to.</p>
             * @param {boolean} bFocusFirstStepElement <p>Defines whether the focus should be changed to the first element.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            goToStep(oStep: sap.m.WizardStep, bFocusFirstStepElement: boolean): sap.m.Wizard;
            /**
             * <p>Checks for the provided <code>sap.m.WizardStep</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSteps" href="#/api/sap.m.Wizard/methods/getSteps">steps</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.m.WizardStep} oStep <p>The step whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfStep(oStep: sap.m.WizardStep): number;
            /**
             * <p>Invalidates the given step.</p>
             * @param {sap.m.WizardStep} step <p>The step to be invalidated.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            invalidateStep(step: sap.m.WizardStep): sap.m.Wizard;
            /**
             * <p>Validates the current step, and moves one step further.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            nextStep(): sap.m.Wizard;
            /**
             * <p>Discards the current step and goes one step back.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            previousStep(): sap.m.Wizard;
            /**
             * <p>Removes all steps from the Wizard.</p>
             * @returns sap.m.WizardStep[] <p>Pointer to the Steps that were removed.</p>
             */
            removeAllSteps(): sap.m.WizardStep[];
            /**
             * <p>Sets association currentStep to the given step.</p>
             * @param {sap.m.WizardStep | String} stepId <p>The step of the wizard that will be currently activated (meaning the last step)</p>
             * @returns sap.m.Wizard <p>Reference to the control instance for chaining.</p>
             */
            setCurrentStep(stepId: sap.m.WizardStep | String): sap.m.Wizard;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableBranching" href="#/api/sap.m.Wizard/methods/getEnableBranching">enableBranching</a>.</p><p>Enables the branching functionality of the Wizard. Branching gives the developer the ability to define multiple routes a user is able to take based on the input in the current step. It is up to the developer to programatically check for what is the input in the current step and set a concrete next step amongs the available subsequent steps. Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code> associations of the WizardStep control are ignored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bEnableBranching <p>New value for property <code>enableBranching</code></p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setEnableBranching(bEnableBranching: boolean): sap.m.Wizard;
            /**
             * <p>Sets the text for the finish button. By default it is "Review".</p>
             * @param {string} value <p>The text of the finish button.</p>
             * @returns sap.m.Wizard <p>Reference to the control instance for chaining.</p>
             */
            setFinishButtonText(value: string): sap.m.Wizard;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.m.Wizard/methods/getHeight">height</a>.</p><p>Determines the height of the Wizard.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
             * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setHeight(sHeight: sap.ui.core.CSSSize): sap.m.Wizard;
            /**
             * <p>Sets the visibility of the next button.</p>
             * @param {boolean} value <p>True to show the button or false to hide it.</p>
             * @returns sap.m.Wizard <p>Reference to the control instance for chaining.</p>
             */
            setShowNextButton(value: boolean): sap.m.Wizard;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.m.Wizard/methods/getWidth">width</a>.</p><p>Determines the width of the Wizard.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>auto</code>.</p>
             * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
             * @returns sap.m.Wizard <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setWidth(sWidth: sap.ui.core.CSSSize): sap.m.Wizard;
            /**
             * <p>Validates the given step.</p>
             * @param {sap.m.WizardStep} step <p>The step to be validated.</p>
             * @returns sap.m.Wizard <p>Pointer to the control instance for chaining.</p>
             */
            validateStep(step: sap.m.WizardStep): sap.m.Wizard;
        }
        /**
         * <p>A container control used to aggregate user input controls as part of an sap.m.Wizard. </p><h3>Overview</h3><p> WizardStep gives the developer the ability to validate, invalidate the step and define subsequent steps. The WizardStep control control is supposed to be used only as an aggregation of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Wizard">Wizard</a> control, and should not be used as a standalone one. </p><h3>Structure</h3><p> <ul> <li>Each wizard step has a title. Additionally it can have an icon.</li> <li>Each wizard step can be validated by setting the <code>validated</code> property. This action will trigger the rendering of the Next step button.</li> <li>If the execution needs to branch after a given step, you should set all possible next steps in the <code>subsequentSteps</code> aggregation.</p>
         */
        export class WizardStep extends sap.ui.core.Control {
            /**
             * <p>Constructor for a new WizardStep.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
             * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
             * @param {any} mSettings <p>Initial settings for the new control</p>
             */
            constructor(sId?: string, mSettings?: any);
            /**
             * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addContent(oContent: sap.ui.core.Control): sap.m.WizardStep;
            /**
             * <p>Adds some subsequentStep into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubsequentSteps" href="#/api/sap.m.WizardStep/methods/getSubsequentSteps">subsequentSteps</a>.</p>
             * @param {sap.ui.core.ID | sap.m.WizardStep} vSubsequentStep <p>The subsequentSteps to add; if empty, nothing is inserted</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            addSubsequentStep(vSubsequentStep: sap.ui.core.ID | sap.m.WizardStep): sap.m.WizardStep;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activate" href="#/api/sap.m.WizardStep/events/activate">activate</a> event of this <code>sap.m.WizardStep</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.</p><p>This event is fired on next step activation from the Wizard.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachActivate(oData: any, fnFunction: Function, oListener?: any): sap.m.WizardStep;
            /**
             * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.WizardStep/events/complete">complete</a> event of this <code>sap.m.WizardStep</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.</p><p>This event is fired after the user presses the Next button in the Wizard, or on <code>nextStep</code> method call from the app developer.</p>
             * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
             * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
             * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            attachComplete(oData: any, fnFunction: Function, oListener?: any): sap.m.WizardStep;
            /**
             * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            destroyContent(): sap.m.WizardStep;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activate" href="#/api/sap.m.WizardStep/events/activate">activate</a> event of this <code>sap.m.WizardStep</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachActivate(fnFunction: Function, oListener?: any): sap.m.WizardStep;
            /**
             * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.WizardStep/events/complete">complete</a> event of this <code>sap.m.WizardStep</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
             * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
             * @param {any} oListener <p>Context object on which the given function had to be called</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            detachComplete(fnFunction: Function, oListener?: any): sap.m.WizardStep;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="activate" href="#/api/sap.m.WizardStep/events/activate">activate</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireActivate(mParameters?: any): sap.m.WizardStep;
            /**
             * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="complete" href="#/api/sap.m.WizardStep/events/complete">complete</a> to attached listeners.</p>
             * @param {any} mParameters <p>Parameters to pass along with the event</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            protected fireComplete(mParameters?: any): sap.m.WizardStep;
            /**
             * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p><p>The content of the Wizard Step.</p>
             * @returns sap.ui.core.Control[] 
             */
            getContent(): sap.ui.core.Control[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.WizardStep/methods/getIcon">icon</a>.</p><p>Determines the icon that is displayed for this step. The icon is visualized in the progress navigation part of the Wizard control. <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have this property defined, otherwise the default numbering will be displayed.</p><p>Default value is <code>empty string</code>.</p>
             * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
             */
            getIcon(): sap.ui.core.URI;
            /**
             * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNextStep" href="#/api/sap.m.WizardStep/methods/getNextStep">nextStep</a>, or <code>null</code>.</p>
             * @returns sap.ui.core.ID 
             */
            getNextStep(): sap.ui.core.ID;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOptional" href="#/api/sap.m.WizardStep/methods/getOptional">optional</a>.</p><p>Indicates whether or not the step is optional. When a step is optional an "(Optional)" label is displayed under the step's title.</p><p>Default value is <code>false</code>.</p>
             * @returns boolean <p>Value of property <code>optional</code></p>
             */
            getOptional(): boolean;
            /**
             * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubsequentSteps" href="#/api/sap.m.WizardStep/methods/getSubsequentSteps">subsequentSteps</a>.</p>
             * @returns sap.ui.core.ID[] 
             */
            getSubsequentSteps(): sap.ui.core.ID[];
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.WizardStep/methods/getTitle">title</a>.</p><p>Determines the title of the step. The title is visualized in the Wizard control.</p><p>Default value is <code>empty string</code>.</p>
             * @returns string <p>Value of property <code>title</code></p>
             */
            getTitle(): string;
            /**
             * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidated" href="#/api/sap.m.WizardStep/methods/getValidated">validated</a>.</p><p>Indicates whether or not the step is validated. When a step is validated a Next button is visualized in the Wizard control.</p><p>Default value is <code>true</code>.</p>
             * @returns boolean <p>Value of property <code>validated</code></p>
             */
            getValidated(): boolean;
            /**
             * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
             * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
             * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
             */
            indexOfContent(oContent: sap.ui.core.Control): number;
            /**
             * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p>
             * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
             * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.WizardStep;
            /**
             * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
             * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllContent(): sap.ui.core.Control[];
            /**
             * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubsequentSteps" href="#/api/sap.m.WizardStep/methods/getSubsequentSteps">subsequentSteps</a>.</p>
             * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
             */
            removeAllSubsequentSteps(): sap.ui.core.ID[];
            /**
             * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.WizardStep/methods/getContent">content</a>.</p>
             * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
             * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
             */
            removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
            /**
             * <p>Removes an subsequentStep from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubsequentSteps" href="#/api/sap.m.WizardStep/methods/getSubsequentSteps">subsequentSteps</a>.</p>
             * @param {number | sap.ui.core.ID | sap.m.WizardStep} vSubsequentStep <p>The subsequentStep to be removed or its index or ID</p>
             * @returns sap.ui.core.ID <p>The removed subsequentStep or <code>null</code></p>
             */
            removeSubsequentStep(vSubsequentStep: number | sap.ui.core.ID | sap.m.WizardStep): sap.ui.core.ID;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.m.WizardStep/methods/getIcon">icon</a>.</p><p>Determines the icon that is displayed for this step. The icon is visualized in the progress navigation part of the Wizard control. <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have this property defined, otherwise the default numbering will be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setIcon(sIcon: sap.ui.core.URI): sap.m.WizardStep;
            /**
             * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNextStep" href="#/api/sap.m.WizardStep/methods/getNextStep">nextStep</a>.</p>
             * @param {sap.ui.core.ID | sap.m.WizardStep} oNextStep <p>ID of an element which becomes the new target of this nextStep association; alternatively, an element instance may be given</p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setNextStep(oNextStep: sap.ui.core.ID | sap.m.WizardStep): sap.m.WizardStep;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOptional" href="#/api/sap.m.WizardStep/methods/getOptional">optional</a>.</p><p>Indicates whether or not the step is optional. When a step is optional an "(Optional)" label is displayed under the step's title.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
             * @param {boolean} bOptional <p>New value for property <code>optional</code></p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setOptional(bOptional: boolean): sap.m.WizardStep;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.WizardStep/methods/getTitle">title</a>.</p><p>Determines the title of the step. The title is visualized in the Wizard control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
             * @param {string} sTitle <p>New value for property <code>title</code></p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setTitle(sTitle: string): sap.m.WizardStep;
            /**
             * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValidated" href="#/api/sap.m.WizardStep/methods/getValidated">validated</a>.</p><p>Indicates whether or not the step is validated. When a step is validated a Next button is visualized in the Wizard control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
             * @param {boolean} bValidated <p>New value for property <code>validated</code></p>
             * @returns sap.m.WizardStep <p>Reference to <code>this</code> in order to allow method chaining</p>
             */
            setValidated(bValidated: boolean): sap.m.WizardStep;
        }
        /**
         * <p><p>Available wrapping types for text controls that can be wrapped that enable you to display the text as hyphenated.</p><p>For more information about text hyphenation, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.hyphenation.Hyphenation">sap.ui.core.hyphenation.Hyphenation</a> and <a target="_self" href="#/topic/6322164936f047de941ec522b95d7b70">Text Controls Hyphenation</a>.</p></p>
         */
        export enum WrappingType {
            /**
             * <p>Hyphenation will be used to break words on syllables where possible.</p>
             */
            Hyphenated = "Hyphenated",
            /**
             * <p>Normal text wrapping will be used. Words won't break based on hyphenation.</p>
             */
            Normal = "Normal",
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Helper for rendering themable background.</p></p>
         */
        namespace BackgroundHelper {
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Helper for Images.</p></p>
         */
        namespace ImageHelper {
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Suggestion helper for <code>sap.m.Input</code> fields when used with an OData model.</p><p>Creates a multi-column suggest list for an <code>sap.m.Input</code> field based on a <code>ValueList</code> annotation. The <code>ValueList</code> annotation will be resolved via the binding information of the input field.</p><p>If the annotation describes multiple input parameters, the suggest provider will resolve all of these relative to the context of the input field and use them for the suggest query. The suggest provider will write all values that are described as output parameters back to the model (relative to the context of the input field). This can only be done if the model runs in "TwoWay" binding mode. Both features can be switched off via the <code>bResolveInput/bResolveOutput</code> parameter of the suggest function.</p></p>
         */
        namespace InputODataSuggestProvider {
            /**
             * @param {sap.ui.base.Event} oEvent 
             * @param {boolean} bResolveInput <p>SuggestProvider resolves all input parameters for the data query</p>
             * @param {boolean} bResolveOutput <p>SuggestProvider writes back all output parameters.</p>
             * @param {number} iLength <p>If iLength is provided only these number of entries will be requested.</p>
             */
            function suggest(oEvent: sap.ui.base.Event, bResolveInput: boolean, bResolveOutput: boolean, iLength: number): void;
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Provides methods to manage instances. This is specifically designed for managing the opened Popover, Dialog, ActionSheet, and it's possible to close all of the opened Popover, Dialog, ActionSheet in history handling.</p><p>Example: <pre>
          sap.ui.define([
             "sap/m/InstanceManager"
          ], function(InstanceManager) {
            ...
            InstanceManager.closeAllPopovers();
            ...
          });
        </pre></p></p>
         */
        namespace InstanceManager {
            /**
             * <p>Closes all of the open dialogs.</p>
             * @param {Function} fnCallback 
             * @returns any <p>Enable method chaining.</p>
             */
            function closeAllDialogs(fnCallback: Function): any;
            /**
             * <p>Closes all open lightboxes.</p>
             * @returns any <p>Enable method chaining.</p>
             */
            function closeAllLightBoxes(): any;
            /**
             * <p>Closes all open popovers.</p>
             * @returns any <p>Enable method chaining.</p>
             */
            function closeAllPopovers(): any;
            /**
             * <p>Gets all of the open dialogs. If there's no dialog open, an empty array is returned.</p>
             * @returns sap.ui.core.Control[] <p>The open dialogs.</p>
             */
            function getOpenDialogs(): sap.ui.core.Control[];
            /**
             * <p>Gets all of the open LightBoxes. If there's no dialog open, an empty array is returned.</p>
             * @returns sap.m.LightBox[] <p>The opened LightBoxes.</p>
             */
            function getOpenLightBoxes(): sap.m.LightBox[];
            /**
             * <p>Gets all of the open popovers. If there's no popover open, an empty array is returned.</p>
             * @returns sap.ui.core.Control[] <p>The open popovers.</p>
             */
            function getOpenPopovers(): sap.ui.core.Control[];
            /**
             * <p>Returns true if there's at least one dialog managed in the predefined dialog category, otherwise it returns false.</p>
             * @returns boolean <p>Whether there's dialog(s) open.</p>
             */
            function hasOpenDialog(): boolean;
            /**
             * <p>Returns true if there's at least one LightBox managed in the predefined lightbox category, otherwise it returns false.</p>
             * @returns boolean <p>Whether there's LightBox(es) is/are open.</p>
             */
            function hasOpenLightBox(): boolean;
            /**
             * <p>Returns true if there's at least one popover managed in the predefined popover category, otherwise it returns false.</p>
             * @returns boolean <p>Whether there's popover(s) open.</p>
             */
            function hasOpenPopover(): boolean;
            /**
             * <p>Checks if the given dialog instance is managed under the dialog category. For dialog instances, managed means the dialog is open.</p><p>This function is specially provided for customized controls which doesn't have the possibility to check whether it's open. If the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen() method on the instance is preferred to be called than this function.</p>
             * @param {sap.ui.core.Control} oDialog <p>The dialog that is checked for the openness.</p>
             * @returns boolean <p>Whether the given dialog is open.</p>
             */
            function isDialogOpen(oDialog: sap.ui.core.Control): boolean;
            /**
             * <p>Check if the given LightBox instance is managed under the LightBox category. For LightBox instances, 'managed' means the LightBox is open.</p><p>This function is specially intended for controls that don't provide a way to check whether they're open. If the given lightbox is an instance of <code>sap.m.LightBox</code>, its <code>isOpen()</code> should be called instead of this function.</p>
             * @param {sap.m.LightBox} oLightBox <p>The LightBox that is checked.</p>
             * @returns boolean <p>Whether the given popover is open.</p>
             */
            function isLightBoxOpen(oLightBox: sap.m.LightBox): boolean;
            /**
             * <p>Check if the given popover instance is managed under the popover category. For popover instances, managed means the popover is open.</p><p>This function is specially provided for customized controls which doesn't have the possibility to check whether it's open. If the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen() method on the instance is preferred to be called than this function.</p>
             * @param {sap.ui.core.Control} oPopover <p>The popover that is checked for the openness.</p>
             * @returns boolean <p>Whether the given popover is open.</p>
             */
            function isPopoverOpen(oPopover: sap.ui.core.Control): boolean;
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Provides easier methods to create sap.m.Dialog with type sap.m.DialogType.Message, such as standard alerts, confirmation dialogs, or arbitrary message dialogs.</p><p>As <code>MessageBox</code> is a static class, a <code>sap.ui.require("sap/m/MessageBox");</code> statement must be explicitly executed before the class can be used. MessageBox provides several functions. <ul> <li>show() - open a generic MessageBox. You can customize its contents thought the options described below in function option section.</li> <li>alert(), confirm(), error(), information(), success() and warning() - predefined templates of MessageBoxes of the corresponding type with predefined action buttons and icon. Only the recommended options are documented for those functions. </ul> <b>NOTE:</b> All options of show() are available for the other template functions as well, but it is recommended to use show() only in more specific scenarios. Example: <pre>
            sap.ui.define(["sap/m/MessageBox"], function(MessageBox) {
                MessageBox.show(
                    "This message should appear in the message box.", {
                        icon: MessageBox.Icon.INFORMATION,
                        title: "My message box title",
                        actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                        onClose: function(oAction) { / * do something * / }
                    }
                );
            });
        </pre></p><br><br>References: <ul><li><a target="_blank" href="https://experience.sap.com/fiori-design-web/message-box">Message Box</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
        title="Information published on SAP site" class="sapUISDKExternalLink"/></li></ul></p>
         */
        namespace MessageBox {
            /**
             * <p>Displays an alert dialog with the given message and an OK button (no icons).</p><p><pre>
            sap.m.MessageBox.alert("This message should appear in the alert", {
                title: "Alert",                                      // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>If a callback is given, it is called after the alert dialog has been closed by the user via the OK button. The callback is called with the following signature:</p><p><pre>
              function (oAction)
            </pre></p><p>where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.</p><p>The alert dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the alert dialog.</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function alert(vMessage: string, mOptions?: any): void;
            /**
             * <p>Displays a confirmation dialog with the given message, a QUESTION icon, an OK button and a Cancel button. If a callback is given, it is called after the confirmation box has been closed by the user with one of the buttons.</p><p><pre>
            sap.m.MessageBox.confirm("This message should appear in the confirmation", {
                title: "Confirm",                                    // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The callback is called with the following signature</p><p><pre>
              function(oAction)
            </pre></p><p>where oAction is set by one of the following three values: 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped. 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped. 3. null: Confirm dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code></p><p>The confirmation dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the confirmation dialog</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function confirm(vMessage: string, mOptions?: any): void;
            /**
             * <p>Displays an error dialog with the given message, an ERROR icon, a CLOSE button.. If a callback is given, it is called after the error box has been closed by the user with one of the buttons.</p><p><pre>
            sap.m.MessageBox.error("This message should appear in the error message box", {
                title: "Error",                                      // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The callback is called with the following signature</p><p><pre>
              function (oAction)
            </pre></p><p>The error dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the error dialog.</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function error(vMessage: string, mOptions?: any): void;
            /**
             * <p>Displays an information dialog with the given message, an INFO icon, an OK button. If a callback is given, it is called after the info box has been closed by the user with one of the buttons.</p><p><pre>
            sap.m.MessageBox.information("This message should appear in the information message box", {
                title: "Information",                                // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The callback is called with the following signature * <pre>
              function (oAction)
            </pre></p><p>The information dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the information dialog</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function information(vMessage: string, mOptions?: any): void;
            /**
             * <p>Creates and displays an sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts. After the user has tapped a button, the <code>onClose</code> function is invoked when given.</p><p>The only mandatory parameter is <code>vMessage</code>. Either a string with the corresponding text or even a layout control could be provided.</p><p><pre>
            sap.m.MessageBox.show("This message should appear in the message box", {
                icon: sap.m.MessageBox.Icon.NONE,                    // default
                title: "",                                           // default
                actions: sap.m.MessageBox.Action.OK,                 // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The created dialog is executed asynchronously. When it has been created and registered for rendering, this function returns without waiting for a user reaction.</p><p>When applications have to react on the users choice, they have to provide a callback function and postpone any reaction on the user choice until that callback is triggered.</p><p>The signature of the callback is</p><p>function (oAction);</p><p>where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button, an sap.m.MessageBox.Action.Close is returned.</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function show(vMessage: string, mOptions?: any): void;
            /**
             * <p>Displays a success dialog with the given message, a SUCCESS icon, an OK button. If a callback is given, it is called after the success box has been closed by the user with one of the buttons.</p><p><pre>
            sap.m.MessageBox.success("This message should appear in the success message box", {
                title: "Success",                                    // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The callback is called with the following signature</p><p><pre>
              function(oAction)
            </pre></p><p>The success dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the success dialog</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function success(vMessage: string, mOptions?: any): void;
            /**
             * <p>Displays a warning dialog with the given message, a WARNING icon, an OK button. If a callback is given, it is called after the warning box has been closed by the user with one of the buttons.</p><p><pre>
            sap.m.MessageBox.warning("This message should appear in the warning message box", {
                title: "Warning",                                    // default
                onClose: null,                                       // default
                styleClass: "",                                      // default
                initialFocus: null,                                  // default
                textDirection: sap.ui.core.TextDirection.Inherit     // default
            });
            </pre></p><p>The callback is called with the following signature * <pre>
              function (oAction)
            </pre></p><p>The warning dialog opened by this method is processed asynchronously. Applications have to use <code>fnCallback</code> to continue work after the user closed the warning dialog</p>
             * @param {string} vMessage <p>Message to be displayed in the alert dialog. The usage of sap.core.Control as vMessage is deprecated since version 1.30.4.</p>
             * @param {any} mOptions <p>Other options (optional)</p>
             */
            function warning(vMessage: string, mOptions?: any): void;
            /**
             * <p><p>Enumeration of supported actions in a MessageBox.</p><p>Each action is represented as a button in the message box. The values of this enumeration are used for both, specifying the set of allowed actions as well as reporting back the user choice.</p></p>
             */
            export enum Action {
                /**
                 * <p>Adds an "Abort" button to the message box.</p>
                 */
                ABORT = "ABORT",
                /**
                 * <p>Adds a "Cancel" button to the message box.</p>
                 */
                CANCEL = "CANCEL",
                /**
                 * <p>Adds a "Close" button to the message box.</p>
                 */
                CLOSE = "CLOSE",
                /**
                 * <p>Adds a "Delete" button to the message box.</p>
                 */
                DELETE = "DELETE",
                /**
                 * <p>Adds an "Ignore" button to the message box.</p>
                 */
                IGNORE = "IGNORE",
                /**
                 * <p>Adds a "No" button to the message box.</p>
                 */
                NO = "NO",
                /**
                 * <p>Adds an "OK" button to the message box.</p>
                 */
                OK = "OK",
                /**
                 * <p>Adds a "Retry" button to the message box.</p>
                 */
                RETRY = "RETRY",
                /**
                 * <p>Adds a "Yes" button to the message box.</p>
                 */
                YES = "YES",
            }
            /**
             * <p><p>Enumeration of the pre-defined icons that can be used in a MessageBox.</p></p>
             */
            export enum Icon {
                /**
                 * <p>Shows the error icon in the message box.</p>
                 */
                ERROR = "ERROR",
                /**
                 * <p>Shows the information icon in the message box.</p>
                 */
                INFORMATION = "INFORMATION",
                /**
                 * <p>Shows no icon in the message box.</p>
                 */
                NONE = "NONE",
                /**
                 * <p>Shows the question icon in the message box.</p>
                 */
                QUESTION = "QUESTION",
                /**
                 * <p>Shows the success icon in the message box.</p>
                 */
                SUCCESS = "SUCCESS",
                /**
                 * <p>Shows the warning icon in the message box.</p>
                 */
                WARNING = "WARNING",
            }
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>A small, non-disruptive popup for messages. </p></p><h3>Overview</h3><p><p> A message toast is a small, non-disruptive popup for success or information messages that disappears automatically after a few seconds. Toasts automatically disappear after a timeout unless the user moves the mouse over the toast or taps on it. </p></p><h4>Notes:</h4><p><p> <ul> <li>If the configured message contains HTML code or script tags, those will be escaped.</li> <li>Line breaks (\r\n, \n\r, \r, \n) will be visualized.</li> <li>Only one message toast can be shown at a time in the same place.</li> </ul> </p></p><h4>Example:</h4><p><p> Here is an example of a MessageToast with all default options: <pre>
        sap.m.MessageToast.show("This message should appear in the message toast", {
            duration: 3000,                  // default
            width: "15em",                   // default
            my: "center bottom",             // default
            at: "center bottom",             // default
            of: window,                      // default
            offset: "0 0",                   // default
            collision: "fit fit",            // default
            onClose: null,                   // default
            autoClose: true,                 // default
            animationTimingFunction: "ease", // default
            animationDuration: 1000,         // default
            closeOnBrowserNavigation: true   // default
        });
        </pre> </p></p><h3>Usage</h3><h4>When to use:</h4><p><p> <ul> <li>You want to display a short success of information message.</li> <li>You do not want to interrupt users while they are performing an action.</li> <li>You want to confirm a successful action.</li> </ul> </p></p><h4>When not to use:</h4><p><p> <ul> <li>You want to display an error or warning message.</li> <li>You want to interrupt users while they are performing an action.</li> <li>You want to make sure that users read the message before they leave the page.</li> <li>You want users to be able to copy some part of the message text. (In this case, show a success <a target="_self" class="jsdoclink" href="#/api/sap.m.Dialog">Message Dialog</a>.)</li> </ul> </p></p><h3>Responsive Behavior</h3><p><p> The message toast has the same behavior on all devices. However, you can adjust the width of the control, for example, for use on a desktop device.</p><br><br>References: <ul><li><a target="_blank" href="https://experience.sap.com/fiori-design-web/message-toast">Message Toast</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
        title="Information published on SAP site" class="sapUISDKExternalLink"/></li></ul></p>
         */
        namespace MessageToast {
            /**
             * <p>Creates and displays a simple message toast notification message with the given text, and optionally other options.</p><p>The only mandatory parameter is <code>sMessage</code>.</p>
             * @param {string} sMessage <p>The message to be displayed.</p>
             * @param {any} mOptions <p>Object which can contain all other options. Not all entries in this object are required. This property is optional.</p>
             */
            function show(sMessage: string, mOptions?: any): void;
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Helper for Popups.</p></p>
         */
        namespace PopupHelper {
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>Touch helper.</p></p>
         */
        namespace touch {
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>URL (Uniform Resource Locator) Helper.</p><p>This helper can be used to trigger a native application (e.g. email, sms, phone) from the browser. That means we are restricted of browser or application implementation. e.g. <ul> <li>Some browsers do not let you pass more than 2022 characters in the URL</li> <li>MAPI (Outlook) limit is 2083, max. path under Internet Explorer is 2048</li> <li>Different Internet Explorer versions have a different limitation (IE9 approximately 1000 characters)</li> <li>MS mail app under Windows 8 cuts mail links after approximately 100 characters</li> <li>Safari gets a confirmation from user before opening a native application and can block other triggers if the user cancels it</li> <li>Some mail applications(Outlook) do not respect all encodings (e.g. Cyrillic texts are not encoded correctly)</li> </ul></p><p><b>Note:</b> all the given limitation lengths are for URL encoded text (e.g a space character will be encoded as "%20").</p><br><br>References: <ul></ul></p>
         */
        namespace URLHelper {
            /**
             * <p>Adds an event listener for the <code>redirect</code> event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>The object that wants to be notified when the event occurs.</p>
             * @returns any <p>The URLHelper instance</p>
             */
            function attachRedirect(fnFunction: Function, oListener?: any): any;
            /**
             * <p>Detach an already registered listener of the <code>redirect</code> event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>The object, that wants to be notified, when the event occurs.</p>
             * @returns any <p>The URLHelper instance</p>
             */
            function detachRedirect(fnFunction: Function, oListener?: any): any;
            /**
             * <p>Builds Email URI from given parameter. Trims spaces from email addresses.</p>
             * @param {string} sEmail <p>Destination email address</p>
             * @param {string} sSubject <p>Subject of the email address</p>
             * @param {string} sBody <p>Default message text</p>
             * @param {string} sCC <p>Carbon Copy email address</p>
             * @param {string} sBCC <p>Blind carbon copy email address</p>
             * @returns string <p>Email URI using the <code>mailto:</code> scheme</p>
             */
            function normalizeEmail(sEmail?: string, sSubject?: string, sBody?: string, sCC?: string, sBCC?: string): string;
            /**
             * <p>Sanitizes the given telephone number and returns a URI using the <code>sms:</code> scheme.</p>
             * @param {string} sTel <p>Telephone number</p>
             * @returns string <p>SMS URI using the <code>sms:</code> scheme</p>
             */
            function normalizeSms(sTel?: string): string;
            /**
             * <p>Sanitizes the given telephone number and returns a URI using the <code>tel:</code> scheme.</p>
             * @param {string} sTel <p>Telephone number</p>
             * @returns string <p>Telephone URI using the <code>tel:</code> scheme</p>
             */
            function normalizeTel(sTel?: string): string;
            /**
             * <p>Redirects to the given URL.</p><p>This method fires "redirect" event before opening the URL.</p>
             * @param {string} sURL <p>Uniform resource locator</p>
             * @param {boolean} bNewWindow <p>Opens URL in a new browser window or tab. Please note that, opening a new window/tab can be ignored by browsers (e.g. on Windows Phone) or by popup blockers. NOTE: On Windows Phone the URL will be enforced to open in the same window if opening in a new window/tab fails (because of a known system restriction on cross-window communications). Use sap.m.Link instead (with blank target) if you necessarily need to open URL in a new window.</p>
             */
            function redirect(sURL: string, bNewWindow?: boolean): void;
            /**
             * <p>Trigger email application to send email. Trims spaces from email addresses.</p>
             * @param {string} sEmail <p>Destination email address</p>
             * @param {string} sSubject <p>Subject of the email address</p>
             * @param {string} sBody <p>Default message text</p>
             * @param {string} sCC <p>Carbon Copy email address</p>
             * @param {string} sBCC <p>Blind carbon copy email address</p>
             */
            function triggerEmail(sEmail?: string, sSubject?: string, sBody?: string, sCC?: string, sBCC?: string): void;
            /**
             * <p>Trigger SMS application to send SMS to given telephone number.</p>
             * @param {string} sTel <p>Telephone number</p>
             */
            function triggerSms(sTel?: string): void;
            /**
             * <p>Trigger telephone app to call the given telephone number.</p>
             * @param {string} sTel <p>Telephone number</p>
             */
            function triggerTel(sTel?: string): void;
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         * <p><p>A string type that represents CSS color values, sap.m.ValueColor or less parameter values.</p><p>Allowed values are <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">sap.ui.core.CSSColor</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.ValueColor">sap.m.ValueColor</a> or a less parameter name (string). In case the less parameter color cannot be determined, the validation fails. You need to check if less parameters are supported on control level. An empty string is also allowed and has the same effect as setting no color.</p></p>
         */
        export type ValueCSSColor = string;
    }
}
/**
 */
declare namespace sap {
}
declare namespace sap {
    namespace m {
        /**
         */
        namespace routing {
            /**
             * <p>This class will attach to the Events of a provided router and add the views created by it to a <a target="_self" class="jsdoclink" href="#/api/sap.m.SplitContainer">sap.m.SplitContainer</a> or a <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">sap.m.NavContainer</a> Control, if this is the target control of the route.</br> If the targetControl is no <a target="_self" class="jsdoclink" href="#/api/sap.m.SplitContainer">sap.m.SplitContainer</a> or a <a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">sap.m.NavContainer</a>, It will only close the dialogs, according to the property value.</br> </br> When a navigation is triggered, this class will try to determine the transition of the pages based on the history.</br> Eg: if a user presses browser back, it will show a backwards animation.</br> </br> The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register on the RouteMatched event of the Router, the visual navigation did not take place yet.</br> </br> Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a masterPage.</br> If you want this case to always show a backwards transition, you should specify a "viewLevel" property on your Route.</br> The viewLevel has to be an integer. The Master should have a lower number than the detail.</br> These levels should represent the user process of your application and they do not have to match the container structure of your Routes.</br> If the user navigates between views with the same viewLevel, the history is asked for the direction.</br> </br> You can specify a property "transition" in a route to define which transition will be applied when navigating. If it is not defined, the nav container will take its default transition. </br> You can also specify "transitionParameters" on a Route, to give the transition parameters.</br> </br> preservePageInSplitContainer is deprecated since 1.28 since Targets make this parameter obsolete. If you want to preserve the current view when navigating, but you want to navigate to it when nothing is displayed in the navContainer, you can set preservePageInSplitContainer = true</br> When the route that has this flag directly matches the pattern, the view will still be switched by the splitContainer. </br><br><br><span>Documentation links:</span><ul><li><a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">sap.m.NavContainer</a></li></ul></p>
             */
            export class RouteMatchedHandler extends sap.ui.base.Object {
                /**
                 * <p>Instantiates a RouteMatchedHandler.</p>
                 * @param {sap.ui.core.routing.Router} router <p>A router that creates views</br></p>
                 * @param {boolean} closeDialogs <p>the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.</p>
                 */
                constructor(router: sap.ui.core.routing.Router, closeDialogs: boolean);
                /**
                 * <p>Removes the routeMatchedHandler from the Router</p>
                 * @returns sap.m.routing.RouteMatchedHandler <p>for chaining</p>
                 */
                destroy(): sap.m.routing.RouteMatchedHandler;
                /**
                 * <p>Gets if a navigation should close dialogs</p>
                 * @returns boolean <p>a flag indication if dialogs will be closed</p>
                 */
                getCloseDialogs(): boolean;
                /**
                 * <p>Sets if a navigation should close dialogs</p>
                 * @param {boolean} bCloseDialogs <p>close dialogs if true</p>
                 * @returns sap.m.routing.RouteMatchedHandler <p>for chaining</p>
                 */
                setCloseDialogs(bCloseDialogs: boolean): sap.m.routing.RouteMatchedHandler;
            }
            /**
             * <p>SAPUI5 mobile <code>Router</code>. The difference to the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router">sap.ui.core.routing.Router</a> are the <code>viewLevel</code>, <code>transition</code>, and <code>transitionParameters</code> properties that you can specify in every Route or Target created by this router.</p>
             */
            export class Router extends sap.ui.core.routing.Router {
                /**
                 * <p>Constructor for a new <code>sap.m.routing.Router</code>. See <code><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router">sap.ui.core.routing.Router</a></code> for the constructor arguments.</p>
                 * @param {any | object[]} oRoutes <p>may contain many Route configurations as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Route/constructor">sap.ui.core.routing.Route#constructor</a>.<br/> Each of the routes contained in the array/object will be added to the router.<br/></p><p>One way of defining routes is an array: <pre>
                [
                    //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
                    {
                        name: "firstRoute"
                        pattern : "usefulPattern"
                    },
                    //Will create a route called 'anotherRoute'
                    {
                        name: "anotherRoute"
                        pattern : "anotherPattern"
                    },
                    //Will create a route for a nested component with the prefix 'componentPrefix'
                    {
                        pattern: "componentPattern",
                        name: "componentRoute",
                        target: [
                             {
                                 name: "subComponent",
                                 prefix: "componentPrefix"
                             }
                        ]
                    }
                ]
                </pre></p><p>The alternative way of defining routes is an Object.<br/> If you choose this way, the name attribute is the name of the property. <pre>
                {
                    //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
                    firstRoute : {
                        pattern : "usefulPattern"
                    },
                    //Will create a route called 'anotherRoute'
                    anotherRoute : {
                        pattern : "anotherPattern"
                    },
                    //Will create a route for a nested component with the prefix 'componentPrefix'
                    componentRoute{
                        pattern: "componentPattern",
                        target: [
                             {
                                 name: "subComponent",
                                 prefix: "componentPrefix"
                             }
                        ]
                    }
                }
                </pre> The values that may be provided are the same as in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Route/constructor">sap.ui.core.routing.Route#constructor</a></p>
                 * @param {any} oConfig <p>Default values for route configuration - also takes the same parameters as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Target/constructor">sap.ui.core.routing.Target#constructor</a>.<br/> This config will be used for routes and for targets, used in the router<br/> Eg: if the config object specifies : <pre>
                <code>
                { viewType : "XML" }
                </code>
                </pre> The targets look like this: <pre>
                {
                    xmlTarget : {
                        ...
                    },
                    jsTarget : {
                        viewType : "JS"
                        ...
                    },
                    componentTarget: {
                        type: "Component",
                        name: "subComponent",
                        id: "mySubComponent",
                        options: {
                            // the Component configuration:
                            manifest: true
                            ...
                        },
                        controlId: "myRootView",
                        controlAggregation: "content"
                    }
                }
                </pre> Then the effective config will look like this: <pre>
                {
                    xmlTarget : {
                        viewType : "XML"
                        ...
                    },
                    jsTarget : {
                        viewType : "JS"
                        ...
                    },
                       componentTarget: {
                        type: "Component",
                        name: "subComponent",
                        id: "mySubComponent",
                        options: {
                            // the Component configuration:
                            manifest: true
                            ...
                        },
                        controlId: "myRootView",
                        controlAggregation: "content"
                    }
                }
                </pre></p><p>Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.<br/></p>
                 * @param {sap.ui.core.UIComponent} oOwner <p>the Component of all the views that will be created by this Router,<br/> will get forwarded to the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Views/constructor">sap.ui.core.routing.Views#constructor</a>.<br/> If you are using the componentMetadata to define your routes you should skip this parameter.<br/></p>
                 * @param {any} oTargetsConfig <p>the target configuration, see <a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets/constructor">sap.m.routing.Targets#constructor</a> documentation (the options object).<br/> You should use Targets to create and display views. The route should only contain routing relevant properties.<br/> <b>Example:</b> <pre>
                <code>
                    new Router(
                    // Routes
                    [
                        {
                            // no view creation related properties are in the route
                            name: "startRoute",
                            //no hash
                            pattern: "",
                            // you can find this target in the targetConfig
                            target: "welcome"
                        }
                    ],
                    // Default values shared by routes and Targets
                    {
                        viewNamespace: "my.application.namespace",
                        viewType: "XML"
                    },
                    // You should only use this constructor when you are not using a router with a component.
                    // Please use the metadata of a component to define your routes and targets.
                    // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
                    null,
                    // Target config
                    {
                         //same name as in the route called 'startRoute'
                         welcome: {
                             // All properties for creating and placing a view go here or in the config
                             viewName: "Welcome",
                             controlId: "app",
                             controlAggregation: "pages"
                         }
                    })
                </code>
                </pre></p>
                 */
                constructor(oRoutes?: any | object[], oConfig?: any, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: any);
                /**
                 * <p>Returns the TargetHandler instance.</p>
                 * @returns sap.m.routing.TargetHandler <p>the TargetHandler instance</p>
                 */
                getTargetHandler(): sap.m.routing.TargetHandler;
            }
            /**
             * <p>Used for closing dialogs and showing transitions in <code>NavContainers</code> when targets are displayed.</p><p><b>Note:</b> You should not create an own instance of this class. It is created when using <code><a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Router">sap.m.routing.Router</a></code> or <code><a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets">sap.m.routing.Targets</a></code>. You may use the <code><a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setCloseDialogs" href="#/api/sap.m.routing.TargetHandler/methods/setCloseDialogs">#setCloseDialogs</a></code> function to specify if dialogs should be closed on displaying other views.</p>
             */
            export class TargetHandler extends sap.ui.base.Object {
                /**
                 * <p>Constructor for a new <code>TargetHandler</code>.</p>
                 * @param {boolean} closeDialogs <p>Closes all open dialogs before navigating, if set to <code>true</code> (default). If set to <code>false</code>, it will just navigate without closing dialogs.</p>
                 */
                constructor(closeDialogs: boolean);
                /**
                 * <p>Gets if a navigation should close dialogs.</p>
                 * @returns boolean <p>A flag indication if dialogs will be closed.</p>
                 */
                getCloseDialogs(): boolean;
                /**
                 * <p>Sets if a navigation should close dialogs.</p>
                 * @param {boolean} bCloseDialogs <p>Close dialogs if <code>true</code></p>
                 * @returns sap.m.routing.TargetHandler <p>For chaining</p>
                 */
                setCloseDialogs(bCloseDialogs: boolean): sap.m.routing.TargetHandler;
            }
            /**
             * <p>Provides a convenient way for placing views into the correct containers of your app.</p><p>The mobile extension of <code>Targets</code> also handles the triggering of page navigation when the target control is an <code><a target="_self" class="jsdoclink" href="#/api/sap.m.SplitContainer">sap.m.SplitContainer</a></code>, an <code><a target="_self" class="jsdoclink" href="#/api/sap.m.NavContainer">sap.m.NavContainer</a></code> or a control which extends one of these. Other controls are also allowed, but the extra parameters <code>viewLevel</code>, <code>transition</code> and <code>transitionParameters</code> are ignored and it behaves as <code><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets">sap.ui.core.routing.Targets</a></code>.</p><p>When a target is displayed, dialogs will be closed. To change this use <code><a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTargetHandler" href="#/api/sap.m.routing.Targets/methods/getTargetHandler">#getTargetHandler</a></code> and <code><a target="_self" class="jsdoclink" href="#/api/sap.m.routing.TargetHandler/methods/setCloseDialogs">sap.m.routing.TargetHandler#setCloseDialogs</a></code>.</p>
             */
            export class Targets extends sap.ui.core.routing.Targets {
                /**
                 * <p>Constructor for a new <code>Targets</code> class.</p>
                 * @param {any} oOptions undefined
                 */
                constructor(oOptions: any);
                /**
                 * <p>Returns the TargetHandler instance.</p>
                 * @returns sap.m.routing.TargetHandler <p>the TargetHandler instance</p>
                 */
                getTargetHandler(): sap.m.routing.TargetHandler;
            }
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         */
        namespace semantic {
            /**
             * <p>An AddAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MasterPage/methods/addAction">sap.m.semantic.MasterPage#addAction</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FullscreenPage/methods/addAction">sap.m.semantic.FullscreenPage#addAction</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DetailPage/methods/addAction">sap.m.semantic.DetailPage#addAction</a></p>
             */
            export class AddAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new AddAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A CancelAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class CancelAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new CancelAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A DeleteAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class DeleteAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new DeleteAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A DetailPage is a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ShareMenuPage">sap.m.semantic.ShareMenuPage</a> that supports semantic content of the following types:</p><p><ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.AddAction">sap.m.semantic.AddAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MainAction">sap.m.semantic.MainAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.PositiveAction">sap.m.semantic.PositiveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.NegativeAction">sap.m.semantic.NegativeAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ForwardAction">sap.m.semantic.ForwardAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.EditAction">sap.m.semantic.EditAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SaveAction">sap.m.semantic.SaveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DeleteAction">sap.m.semantic.DeleteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.CancelAction">sap.m.semantic.CancelAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FlagAction">sap.m.semantic.FlagAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FavoriteAction">sap.m.semantic.FavoriteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.OpenInAction">sap.m.semantic.OpenInAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DiscussInJamAction">sap.m.semantic.DiscussInJamAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ShareInJamAction">sap.m.semantic.ShareInJamAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SendEmailAction">sap.m.semantic.SendEmailAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SendMessageAction">sap.m.semantic.SendMessageAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.PrintAction">sap.m.semantic.PrintAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MessagesIndicator">sap.m.semantic.MessagesIndicator</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.DraftIndicator">sap.m.DraftIndicator</a></li> </ul></p>
             */
            export class DetailPage extends sap.m.semantic.ShareMenuPage {
                /**
                 * <p>Constructor for a new DetailPage</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Destroys the addAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.DetailPage/methods/getAddAction">addAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyAddAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the cancelAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.DetailPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCancelAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the deleteAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.DetailPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDeleteAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the discussInJamAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDiscussInJamAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the draftIndicator in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getDraftIndicator">draftIndicator</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDraftIndicator(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the editAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.DetailPage/methods/getEditAction">editAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyEditAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the favoriteAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.DetailPage/methods/getFavoriteAction">favoriteAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyFavoriteAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the flagAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.DetailPage/methods/getFlagAction">flagAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyFlagAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the forwardAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.DetailPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyForwardAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the mainAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.DetailPage/methods/getMainAction">mainAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMainAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the messagesIndicator in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMessagesIndicator(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the negativeAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.DetailPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyNegativeAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the openInAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.DetailPage/methods/getOpenInAction">openInAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyOpenInAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the pagingAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.DetailPage/methods/getPagingAction">pagingAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPagingAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the positiveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.DetailPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPositiveAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the printAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.DetailPage/methods/getPrintAction">printAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPrintAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the saveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAction">saveAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySaveAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the saveAsTileAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySaveAsTileAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the sendEmailAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendEmailAction">sendEmailAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySendEmailAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the sendMessageAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendMessageAction">sendMessageAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySendMessageAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Destroys the shareInJamAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getShareInJamAction">shareInJamAction</a>.</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyShareInJamAction(): sap.m.semantic.DetailPage;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.DetailPage/methods/getAddAction">addAction</a>.</p><p>Add action</p>
                 * @returns sap.m.semantic.AddAction 
                 */
                getAddAction(): sap.m.semantic.AddAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.DetailPage/methods/getCancelAction">cancelAction</a>.</p><p>Cancel action</p>
                 * @returns sap.m.semantic.CancelAction 
                 */
                getCancelAction(): sap.m.semantic.CancelAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.DetailPage/methods/getDeleteAction">deleteAction</a>.</p><p>Delete action</p>
                 * @returns sap.m.semantic.DeleteAction 
                 */
                getDeleteAction(): sap.m.semantic.DeleteAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p><p>DiscussInJam action</p>
                 * @returns sap.m.semantic.DiscussInJamAction 
                 */
                getDiscussInJamAction(): sap.m.semantic.DiscussInJamAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getDraftIndicator">draftIndicator</a>.</p><p>DraftIndicator</p>
                 * @returns sap.m.DraftIndicator 
                 */
                getDraftIndicator(): sap.m.DraftIndicator;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.DetailPage/methods/getEditAction">editAction</a>.</p><p>Edit action</p>
                 * @returns sap.m.semantic.EditAction 
                 */
                getEditAction(): sap.m.semantic.EditAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.DetailPage/methods/getFavoriteAction">favoriteAction</a>.</p><p>Favorite action</p>
                 * @returns sap.m.semantic.FavoriteAction 
                 */
                getFavoriteAction(): sap.m.semantic.FavoriteAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.DetailPage/methods/getFlagAction">flagAction</a>.</p><p>Flag action</p>
                 * @returns sap.m.semantic.FlagAction 
                 */
                getFlagAction(): sap.m.semantic.FlagAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.DetailPage/methods/getForwardAction">forwardAction</a>.</p><p>Negative action</p>
                 * @returns sap.m.semantic.ForwardAction 
                 */
                getForwardAction(): sap.m.semantic.ForwardAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.DetailPage/methods/getMainAction">mainAction</a>.</p><p>Main action</p>
                 * @returns sap.m.semantic.MainAction 
                 */
                getMainAction(): sap.m.semantic.MainAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getMessagesIndicator">messagesIndicator</a>.</p><p>MessagesIndicator</p>
                 * @returns sap.m.semantic.MessagesIndicator 
                 */
                getMessagesIndicator(): sap.m.semantic.MessagesIndicator;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.DetailPage/methods/getNegativeAction">negativeAction</a>.</p><p>Negative action</p>
                 * @returns sap.m.semantic.NegativeAction 
                 */
                getNegativeAction(): sap.m.semantic.NegativeAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.DetailPage/methods/getOpenInAction">openInAction</a>.</p><p>OpenIn action</p>
                 * @returns sap.m.semantic.OpenInAction 
                 */
                getOpenInAction(): sap.m.semantic.OpenInAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.DetailPage/methods/getPagingAction">pagingAction</a>.</p><p>Paging action</p>
                 * @returns sap.m.PagingButton 
                 */
                getPagingAction(): sap.m.PagingButton;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.DetailPage/methods/getPositiveAction">positiveAction</a>.</p><p>Positive action</p>
                 * @returns sap.m.semantic.PositiveAction 
                 */
                getPositiveAction(): sap.m.semantic.PositiveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.DetailPage/methods/getPrintAction">printAction</a>.</p><p>Print action</p>
                 * @returns sap.m.semantic.PrintAction 
                 */
                getPrintAction(): sap.m.semantic.PrintAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAction">saveAction</a>.</p><p>Save action</p>
                 * @returns sap.m.semantic.SaveAction 
                 */
                getSaveAction(): sap.m.semantic.SaveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p><p>SaveAsTile button</p>
                 * @returns sap.m.Button 
                 */
                getSaveAsTileAction(): sap.m.Button;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendEmailAction">sendEmailAction</a>.</p><p>SendEmail action</p>
                 * @returns sap.m.semantic.SendEmailAction 
                 */
                getSendEmailAction(): sap.m.semantic.SendEmailAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendMessageAction">sendMessageAction</a>.</p><p>SendMessage action</p>
                 * @returns sap.m.semantic.SendMessageAction 
                 */
                getSendMessageAction(): sap.m.semantic.SendMessageAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getShareInJamAction">shareInJamAction</a>.</p><p>ShareInJam action</p>
                 * @returns sap.m.semantic.ShareInJamAction 
                 */
                getShareInJamAction(): sap.m.semantic.ShareInJamAction;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.DetailPage/methods/getAddAction">addAction</a>.</p>
                 * @param {sap.m.semantic.AddAction} oAddAction <p>The addAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.DetailPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @param {sap.m.semantic.CancelAction} oCancelAction <p>The cancelAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.DetailPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @param {sap.m.semantic.DeleteAction} oDeleteAction <p>The deleteAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p>
                 * @param {sap.m.semantic.DiscussInJamAction} oDiscussInJamAction <p>The discussInJamAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDiscussInJamAction(oDiscussInJamAction: sap.m.semantic.DiscussInJamAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getDraftIndicator">draftIndicator</a>.</p>
                 * @param {sap.m.DraftIndicator} oDraftIndicator <p>The draftIndicator to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.DetailPage/methods/getEditAction">editAction</a>.</p>
                 * @param {sap.m.semantic.EditAction} oEditAction <p>The editAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.DetailPage/methods/getFavoriteAction">favoriteAction</a>.</p>
                 * @param {sap.m.semantic.FavoriteAction} oFavoriteAction <p>The favoriteAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFavoriteAction(oFavoriteAction: sap.m.semantic.FavoriteAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.DetailPage/methods/getFlagAction">flagAction</a>.</p>
                 * @param {sap.m.semantic.FlagAction} oFlagAction <p>The flagAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFlagAction(oFlagAction: sap.m.semantic.FlagAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.DetailPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @param {sap.m.semantic.ForwardAction} oForwardAction <p>The forwardAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.DetailPage/methods/getMainAction">mainAction</a>.</p>
                 * @param {sap.m.semantic.MainAction} oMainAction <p>The mainAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.DetailPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator <p>The messagesIndicator to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.DetailPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @param {sap.m.semantic.NegativeAction} oNegativeAction <p>The negativeAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.DetailPage/methods/getOpenInAction">openInAction</a>.</p>
                 * @param {sap.m.semantic.OpenInAction} oOpenInAction <p>The openInAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setOpenInAction(oOpenInAction: sap.m.semantic.OpenInAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.DetailPage/methods/getPagingAction">pagingAction</a>.</p>
                 * @param {sap.m.PagingButton} oPagingAction <p>The pagingAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPagingAction(oPagingAction: sap.m.PagingButton): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.DetailPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @param {sap.m.semantic.PositiveAction} oPositiveAction <p>The positiveAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.DetailPage/methods/getPrintAction">printAction</a>.</p>
                 * @param {sap.m.semantic.PrintAction} oPrintAction <p>The printAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPrintAction(oPrintAction: sap.m.semantic.PrintAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAction">saveAction</a>.</p>
                 * @param {sap.m.semantic.SaveAction} oSaveAction <p>The saveAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.DetailPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p>
                 * @param {sap.m.Button} oSaveAsTileAction <p>The saveAsTileAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendEmailAction">sendEmailAction</a>.</p>
                 * @param {sap.m.semantic.SendEmailAction} oSendEmailAction <p>The sendEmailAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSendEmailAction(oSendEmailAction: sap.m.semantic.SendEmailAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.DetailPage/methods/getSendMessageAction">sendMessageAction</a>.</p>
                 * @param {sap.m.semantic.SendMessageAction} oSendMessageAction <p>The sendMessageAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSendMessageAction(oSendMessageAction: sap.m.semantic.SendMessageAction): sap.m.semantic.DetailPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.DetailPage/methods/getShareInJamAction">shareInJamAction</a>.</p>
                 * @param {sap.m.semantic.ShareInJamAction} oShareInJamAction <p>The shareInJamAction to set</p>
                 * @returns sap.m.semantic.DetailPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShareInJamAction(oShareInJamAction: sap.m.semantic.ShareInJamAction): sap.m.semantic.DetailPage;
            }
            /**
             * <p>A DiscussInJamAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class DiscussInJamAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new DiscussInJamAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>An EditAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class EditAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new EditAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A FavoriteAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class FavoriteAction extends sap.m.semantic.SemanticToggleButton {
                /**
                 * <p>Constructor for a new FavoriteAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A FilterAction is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> control enhanced with styling according to the semantics of a common "Filter" action.</p><p>A FilterAction cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>Your app should listen to the <code>press</code> event of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterAction">sap.m.semantic.FilterAction</a> in order to trigger the display of the filtering options.</p><p>If your filtering options are a simple list of items and require single choice only, then you can consider using a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterSelect">sap.m.semantic.FilterSelect</a> instead.</p>
             */
            export class FilterAction extends sap.m.semantic.SemanticButton implements sap.m.semantic.IFilter {
                /**
                 * <p>Constructor for a new FilterAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A FilterSelect is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a> control enhanced with styling according to the semantics of a common "Filter" acton.</p><p>A FilterSelect cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>The filtering options should be added to the <code>items</code> aggregation of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterSelect">sap.m.semantic.FilterSelect</a> and will be displayed as a pop-up list with support for single-item selection. If this simple popup list is not sufficient for your use case, you can implement your own custom dialog by using <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterAction">sap.m.semantic.FilterAction</a> to trigger the dialog opening.</p>
             */
            export class FilterSelect extends sap.m.semantic.SemanticSelect implements sap.m.semantic.IFilter {
                /**
                 * <p>Constructor for a new FilterSelect.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A FlagAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class FlagAction extends sap.m.semantic.SemanticToggleButton {
                /**
                 * <p>Constructor for a new FlagAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A ForwardAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class ForwardAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new ForwardAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A FullscreenPage is a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ShareMenuPage">sap.m.semantic.ShareMenuPage</a> that supports semantic content of the following types:</p><p><ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.AddAction">sap.m.semantic.AddAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MainAction">sap.m.semantic.MainAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.PositiveAction">sap.m.semantic.PositiveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.NegativeAction">sap.m.semantic.NegativeAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ForwardAction">sap.m.semantic.ForwardAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.EditAction">sap.m.semantic.EditAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SaveAction">sap.m.semantic.SaveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DeleteAction">sap.m.semantic.DeleteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.CancelAction">sap.m.semantic.CancelAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FlagAction">sap.m.semantic.FlagAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FavoriteAction">sap.m.semantic.FavoriteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.OpenInAction">sap.m.semantic.OpenInAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DiscussInJamAction">sap.m.semantic.DiscussInJamAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ShareInJamAction">sap.m.semantic.ShareInJamAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SendEmailAction">sap.m.semantic.SendEmailAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SendMessageAction">sap.m.semantic.SendMessageAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.PrintAction">sap.m.semantic.PrintAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MessagesIndicator">sap.m.semantic.MessagesIndicator</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.DraftIndicator">sap.m.DraftIndicator</a></li> </ul></p>
             */
            export class FullscreenPage extends sap.m.semantic.ShareMenuPage {
                /**
                 * <p>Constructor for a new FullscreenPage</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Destroys the addAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getAddAction">addAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyAddAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the cancelAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCancelAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the deleteAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDeleteAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the discussInJamAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDiscussInJamAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the draftIndicator in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getDraftIndicator">draftIndicator</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDraftIndicator(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the editAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getEditAction">editAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyEditAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the favoriteAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFavoriteAction">favoriteAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyFavoriteAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the flagAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFlagAction">flagAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyFlagAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the forwardAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyForwardAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the mainAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getMainAction">mainAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMainAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the messagesIndicator in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMessagesIndicator(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the negativeAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyNegativeAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the openInAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getOpenInAction">openInAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyOpenInAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the pagingAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPagingAction">pagingAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPagingAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the positiveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPositiveAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the printAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPrintAction">printAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPrintAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the saveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAction">saveAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySaveAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the saveAsTileAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySaveAsTileAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the sendEmailAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendEmailAction">sendEmailAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySendEmailAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the sendMessageAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendMessageAction">sendMessageAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySendMessageAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Destroys the shareInJamAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getShareInJamAction">shareInJamAction</a>.</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyShareInJamAction(): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getAddAction">addAction</a>.</p><p>Add action</p>
                 * @returns sap.m.semantic.AddAction 
                 */
                getAddAction(): sap.m.semantic.AddAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getCancelAction">cancelAction</a>.</p><p>Cancel action</p>
                 * @returns sap.m.semantic.CancelAction 
                 */
                getCancelAction(): sap.m.semantic.CancelAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDeleteAction">deleteAction</a>.</p><p>Delete action</p>
                 * @returns sap.m.semantic.DeleteAction 
                 */
                getDeleteAction(): sap.m.semantic.DeleteAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p><p>DiscussInJam action</p>
                 * @returns sap.m.semantic.DiscussInJamAction 
                 */
                getDiscussInJamAction(): sap.m.semantic.DiscussInJamAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getDraftIndicator">draftIndicator</a>.</p><p>DraftIndicator</p>
                 * @returns sap.m.DraftIndicator 
                 */
                getDraftIndicator(): sap.m.DraftIndicator;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getEditAction">editAction</a>.</p><p>Edit action</p>
                 * @returns sap.m.semantic.EditAction 
                 */
                getEditAction(): sap.m.semantic.EditAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFavoriteAction">favoriteAction</a>.</p><p>Favorite action</p>
                 * @returns sap.m.semantic.FavoriteAction 
                 */
                getFavoriteAction(): sap.m.semantic.FavoriteAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFlagAction">flagAction</a>.</p><p>Flag action</p>
                 * @returns sap.m.semantic.FlagAction 
                 */
                getFlagAction(): sap.m.semantic.FlagAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getForwardAction">forwardAction</a>.</p><p>Negative action</p>
                 * @returns sap.m.semantic.ForwardAction 
                 */
                getForwardAction(): sap.m.semantic.ForwardAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getMainAction">mainAction</a>.</p><p>Main action</p>
                 * @returns sap.m.semantic.MainAction 
                 */
                getMainAction(): sap.m.semantic.MainAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getMessagesIndicator">messagesIndicator</a>.</p><p>MessagesIndicator</p>
                 * @returns sap.m.semantic.MessagesIndicator 
                 */
                getMessagesIndicator(): sap.m.semantic.MessagesIndicator;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getNegativeAction">negativeAction</a>.</p><p>Negative action</p>
                 * @returns sap.m.semantic.NegativeAction 
                 */
                getNegativeAction(): sap.m.semantic.NegativeAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getOpenInAction">openInAction</a>.</p><p>OpenIn action</p>
                 * @returns sap.m.semantic.OpenInAction 
                 */
                getOpenInAction(): sap.m.semantic.OpenInAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPagingAction">pagingAction</a>.</p><p>Paging action</p>
                 * @returns sap.m.PagingButton 
                 */
                getPagingAction(): sap.m.PagingButton;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPositiveAction">positiveAction</a>.</p><p>Positive action</p>
                 * @returns sap.m.semantic.PositiveAction 
                 */
                getPositiveAction(): sap.m.semantic.PositiveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPrintAction">printAction</a>.</p><p>Print action</p>
                 * @returns sap.m.semantic.PrintAction 
                 */
                getPrintAction(): sap.m.semantic.PrintAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAction">saveAction</a>.</p><p>Save action</p>
                 * @returns sap.m.semantic.SaveAction 
                 */
                getSaveAction(): sap.m.semantic.SaveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p><p>SaveAsTile button</p>
                 * @returns sap.m.Button 
                 */
                getSaveAsTileAction(): sap.m.Button;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendEmailAction">sendEmailAction</a>.</p><p>SendEmail action</p>
                 * @returns sap.m.semantic.SendEmailAction 
                 */
                getSendEmailAction(): sap.m.semantic.SendEmailAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendMessageAction">sendMessageAction</a>.</p><p>SendMessage action</p>
                 * @returns sap.m.semantic.SendMessageAction 
                 */
                getSendMessageAction(): sap.m.semantic.SendMessageAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getShareInJamAction">shareInJamAction</a>.</p><p>ShareInJam action</p>
                 * @returns sap.m.semantic.ShareInJamAction 
                 */
                getShareInJamAction(): sap.m.semantic.ShareInJamAction;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getAddAction">addAction</a>.</p>
                 * @param {sap.m.semantic.AddAction} oAddAction <p>The addAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @param {sap.m.semantic.CancelAction} oCancelAction <p>The cancelAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @param {sap.m.semantic.DeleteAction} oDeleteAction <p>The deleteAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDiscussInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getDiscussInJamAction">discussInJamAction</a>.</p>
                 * @param {sap.m.semantic.DiscussInJamAction} oDiscussInJamAction <p>The discussInJamAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDiscussInJamAction(oDiscussInJamAction: sap.m.semantic.DiscussInJamAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDraftIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getDraftIndicator">draftIndicator</a>.</p>
                 * @param {sap.m.DraftIndicator} oDraftIndicator <p>The draftIndicator to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getEditAction">editAction</a>.</p>
                 * @param {sap.m.semantic.EditAction} oEditAction <p>The editAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFavoriteAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFavoriteAction">favoriteAction</a>.</p>
                 * @param {sap.m.semantic.FavoriteAction} oFavoriteAction <p>The favoriteAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFavoriteAction(oFavoriteAction: sap.m.semantic.FavoriteAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFlagAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getFlagAction">flagAction</a>.</p>
                 * @param {sap.m.semantic.FlagAction} oFlagAction <p>The flagAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFlagAction(oFlagAction: sap.m.semantic.FlagAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @param {sap.m.semantic.ForwardAction} oForwardAction <p>The forwardAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getMainAction">mainAction</a>.</p>
                 * @param {sap.m.semantic.MainAction} oMainAction <p>The mainAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.FullscreenPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator <p>The messagesIndicator to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @param {sap.m.semantic.NegativeAction} oNegativeAction <p>The negativeAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenInAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getOpenInAction">openInAction</a>.</p>
                 * @param {sap.m.semantic.OpenInAction} oOpenInAction <p>The openInAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setOpenInAction(oOpenInAction: sap.m.semantic.OpenInAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPagingAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPagingAction">pagingAction</a>.</p>
                 * @param {sap.m.PagingButton} oPagingAction <p>The pagingAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPagingAction(oPagingAction: sap.m.PagingButton): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @param {sap.m.semantic.PositiveAction} oPositiveAction <p>The positiveAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPrintAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getPrintAction">printAction</a>.</p>
                 * @param {sap.m.semantic.PrintAction} oPrintAction <p>The printAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPrintAction(oPrintAction: sap.m.semantic.PrintAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAction">saveAction</a>.</p>
                 * @param {sap.m.semantic.SaveAction} oSaveAction <p>The saveAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAsTileAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSaveAsTileAction">saveAsTileAction</a>.</p>
                 * @param {sap.m.Button} oSaveAsTileAction <p>The saveAsTileAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendEmailAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendEmailAction">sendEmailAction</a>.</p>
                 * @param {sap.m.semantic.SendEmailAction} oSendEmailAction <p>The sendEmailAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSendEmailAction(oSendEmailAction: sap.m.semantic.SendEmailAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSendMessageAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getSendMessageAction">sendMessageAction</a>.</p>
                 * @param {sap.m.semantic.SendMessageAction} oSendMessageAction <p>The sendMessageAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSendMessageAction(oSendMessageAction: sap.m.semantic.SendMessageAction): sap.m.semantic.FullscreenPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShareInJamAction" href="#/api/sap.m.semantic.FullscreenPage/methods/getShareInJamAction">shareInJamAction</a>.</p>
                 * @param {sap.m.semantic.ShareInJamAction} oShareInJamAction <p>The shareInJamAction to set</p>
                 * @returns sap.m.semantic.FullscreenPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShareInJamAction(oShareInJamAction: sap.m.semantic.ShareInJamAction): sap.m.semantic.FullscreenPage;
            }
            /**
             * <p>A GroupAction is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> control enhanced with styling according to the semantics of a common "Group" action.</p><p>A GroupAction cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>Your app should listen to the <code>press</code> event of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupAction">sap.m.semantic.GroupAction</a> in order to trigger the display of the grouping options.</p><p>If your grouping options are a simple list of items and require single choice only, then you can consider using a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupSelect">sap.m.semantic.GroupSelect</a> instead.</p>
             */
            export class GroupAction extends sap.m.semantic.SemanticButton implements sap.m.semantic.IGroup {
                /**
                 * <p>Constructor for a new GroupAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A GroupSelect is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a> control enhanced with styling according to the semantics of a common "Group" acton.</p><p>A GroupSelect cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>The grouping options should be added to the <code>items</code> aggregation of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupSelect">sap.m.semantic.GroupSelect</a> and will be displayed as a pop-up list with support for single-item selection. If this simple popup list is not sufficient for your use case, you can implement your own custom dialog by using <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupAction">sap.m.semantic.GroupAction</a> to trigger the dialog opening.</p>
             */
            export class GroupSelect extends sap.m.semantic.SemanticSelect implements sap.m.semantic.IGroup {
                /**
                 * <p>Constructor for a new GroupSelect.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p><p>Marker interface for controls which are suitable as items of the filter aggregation of sap.m.Semantic.MasterPage.</p></p>
             */
            export interface IFilter {
            }
            /**
             * <p><p>Marker interface for controls which are suitable as items of the group aggregation of sap.m.Semantic.MasterPage.</p></p>
             */
            export interface IGroup {
            }
            /**
             * <p><p>Marker interface for controls which are suitable as items of the sort aggregation of sap.m.Semantic.MasterPage.</p></p>
             */
            export interface ISort {
            }
            /**
             * <p>A MainAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class MainAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new MainAction.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.MainAction/methods/getText">text</a>.</p><p>Button text</p>
                 * @returns string <p>Value of property <code>text</code></p>
                 */
                getText(): string;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.MainAction/methods/getText">text</a>.</p><p>Button text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sText <p>New value for property <code>text</code></p>
                 * @returns sap.m.semantic.MainAction <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setText(sText: string): sap.m.semantic.MainAction;
            }
            /**
             * <p>A MasterPage is a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a> that supports semantic content of the following types:</p><p><ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.AddAction">sap.m.semantic.AddAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MainAction">sap.m.semantic.MainAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.PositiveAction">sap.m.semantic.PositiveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.NegativeAction">sap.m.semantic.NegativeAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.ForwardAction">sap.m.semantic.ForwardAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.EditAction">sap.m.semantic.EditAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SaveAction">sap.m.semantic.SaveAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.DeleteAction">sap.m.semantic.DeleteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.CancelAction">sap.m.semantic.CancelAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MultiSelectAction">sap.m.semantic.MultiSelectAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FlagAction">sap.m.semantic.FlagAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FavoriteAction">sap.m.semantic.FavoriteAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortAction">sap.m.semantic.SortAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortSelect">sap.m.semantic.SortSelect</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterAction">sap.m.semantic.FilterAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.FilterSelect">sap.m.semantic.FilterSelect</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupAction">sap.m.semantic.GroupAction</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.GroupSelect">sap.m.semantic.GroupSelect</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.MessagesIndicator">sap.m.semantic.MessagesIndicator</a></li> </ul></p>
             */
            export class MasterPage extends sap.m.semantic.SemanticPage {
                /**
                 * <p>Constructor for a new MasterPage</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Destroys the addAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.MasterPage/methods/getAddAction">addAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyAddAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the cancelAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.MasterPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCancelAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the deleteAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.MasterPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyDeleteAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the editAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.MasterPage/methods/getEditAction">editAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyEditAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the filter in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilter" href="#/api/sap.m.semantic.MasterPage/methods/getFilter">filter</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyFilter(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the forwardAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.MasterPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyForwardAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the group in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroup" href="#/api/sap.m.semantic.MasterPage/methods/getGroup">group</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyGroup(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the mainAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.MasterPage/methods/getMainAction">mainAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMainAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the messagesIndicator in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.MasterPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMessagesIndicator(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the multiSelectAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelectAction" href="#/api/sap.m.semantic.MasterPage/methods/getMultiSelectAction">multiSelectAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMultiSelectAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the negativeAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.MasterPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyNegativeAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the positiveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.MasterPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyPositiveAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the saveAction in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.MasterPage/methods/getSaveAction">saveAction</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySaveAction(): sap.m.semantic.MasterPage;
                /**
                 * <p>Destroys the sort in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSort" href="#/api/sap.m.semantic.MasterPage/methods/getSort">sort</a>.</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySort(): sap.m.semantic.MasterPage;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.MasterPage/methods/getAddAction">addAction</a>.</p><p>Add action</p>
                 * @returns sap.m.semantic.AddAction 
                 */
                getAddAction(): sap.m.semantic.AddAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.MasterPage/methods/getCancelAction">cancelAction</a>.</p><p>Cancel action</p>
                 * @returns sap.m.semantic.CancelAction 
                 */
                getCancelAction(): sap.m.semantic.CancelAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.MasterPage/methods/getDeleteAction">deleteAction</a>.</p><p>Delete action</p>
                 * @returns sap.m.semantic.DeleteAction 
                 */
                getDeleteAction(): sap.m.semantic.DeleteAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.MasterPage/methods/getEditAction">editAction</a>.</p><p>Edit action</p>
                 * @returns sap.m.semantic.EditAction 
                 */
                getEditAction(): sap.m.semantic.EditAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilter" href="#/api/sap.m.semantic.MasterPage/methods/getFilter">filter</a>.</p><p>Filter action</p>
                 * @returns sap.m.semantic.IFilter 
                 */
                getFilter(): sap.m.semantic.IFilter;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.MasterPage/methods/getForwardAction">forwardAction</a>.</p><p>Forward action</p>
                 * @returns sap.m.semantic.ForwardAction 
                 */
                getForwardAction(): sap.m.semantic.ForwardAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroup" href="#/api/sap.m.semantic.MasterPage/methods/getGroup">group</a>.</p><p>Group action</p>
                 * @returns sap.m.semantic.IGroup 
                 */
                getGroup(): sap.m.semantic.IGroup;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.MasterPage/methods/getMainAction">mainAction</a>.</p><p>Main action</p>
                 * @returns sap.m.semantic.MainAction 
                 */
                getMainAction(): sap.m.semantic.MainAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.MasterPage/methods/getMessagesIndicator">messagesIndicator</a>.</p><p>MessagesIndicator</p>
                 * @returns sap.m.semantic.MessagesIndicator 
                 */
                getMessagesIndicator(): sap.m.semantic.MessagesIndicator;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelectAction" href="#/api/sap.m.semantic.MasterPage/methods/getMultiSelectAction">multiSelectAction</a>.</p><p>MultiSelect action</p>
                 * @returns sap.m.semantic.MultiSelectAction 
                 */
                getMultiSelectAction(): sap.m.semantic.MultiSelectAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.MasterPage/methods/getNegativeAction">negativeAction</a>.</p><p>Negative action</p>
                 * @returns sap.m.semantic.NegativeAction 
                 */
                getNegativeAction(): sap.m.semantic.NegativeAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.MasterPage/methods/getPositiveAction">positiveAction</a>.</p><p>Positive action</p>
                 * @returns sap.m.semantic.PositiveAction 
                 */
                getPositiveAction(): sap.m.semantic.PositiveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.MasterPage/methods/getSaveAction">saveAction</a>.</p><p>Save action</p>
                 * @returns sap.m.semantic.SaveAction 
                 */
                getSaveAction(): sap.m.semantic.SaveAction;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSort" href="#/api/sap.m.semantic.MasterPage/methods/getSort">sort</a>.</p><p>Sort action</p>
                 * @returns sap.m.semantic.ISort 
                 */
                getSort(): sap.m.semantic.ISort;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAddAction" href="#/api/sap.m.semantic.MasterPage/methods/getAddAction">addAction</a>.</p>
                 * @param {sap.m.semantic.AddAction} oAddAction <p>The addAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setAddAction(oAddAction: sap.m.semantic.AddAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCancelAction" href="#/api/sap.m.semantic.MasterPage/methods/getCancelAction">cancelAction</a>.</p>
                 * @param {sap.m.semantic.CancelAction} oCancelAction <p>The cancelAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setCancelAction(oCancelAction: sap.m.semantic.CancelAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDeleteAction" href="#/api/sap.m.semantic.MasterPage/methods/getDeleteAction">deleteAction</a>.</p>
                 * @param {sap.m.semantic.DeleteAction} oDeleteAction <p>The deleteAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDeleteAction(oDeleteAction: sap.m.semantic.DeleteAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEditAction" href="#/api/sap.m.semantic.MasterPage/methods/getEditAction">editAction</a>.</p>
                 * @param {sap.m.semantic.EditAction} oEditAction <p>The editAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEditAction(oEditAction: sap.m.semantic.EditAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFilter" href="#/api/sap.m.semantic.MasterPage/methods/getFilter">filter</a>.</p>
                 * @param {sap.m.semantic.IFilter} oFilter <p>The filter to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFilter(oFilter: sap.m.semantic.IFilter): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getForwardAction" href="#/api/sap.m.semantic.MasterPage/methods/getForwardAction">forwardAction</a>.</p>
                 * @param {sap.m.semantic.ForwardAction} oForwardAction <p>The forwardAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setForwardAction(oForwardAction: sap.m.semantic.ForwardAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroup" href="#/api/sap.m.semantic.MasterPage/methods/getGroup">group</a>.</p>
                 * @param {sap.m.semantic.IGroup} oGroup <p>The group to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setGroup(oGroup: sap.m.semantic.IGroup): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMainAction" href="#/api/sap.m.semantic.MasterPage/methods/getMainAction">mainAction</a>.</p>
                 * @param {sap.m.semantic.MainAction} oMainAction <p>The mainAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMainAction(oMainAction: sap.m.semantic.MainAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMessagesIndicator" href="#/api/sap.m.semantic.MasterPage/methods/getMessagesIndicator">messagesIndicator</a>.</p>
                 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator <p>The messagesIndicator to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMessagesIndicator(oMessagesIndicator: sap.m.semantic.MessagesIndicator): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultiSelectAction" href="#/api/sap.m.semantic.MasterPage/methods/getMultiSelectAction">multiSelectAction</a>.</p>
                 * @param {sap.m.semantic.MultiSelectAction} oMultiSelectAction <p>The multiSelectAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMultiSelectAction(oMultiSelectAction: sap.m.semantic.MultiSelectAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNegativeAction" href="#/api/sap.m.semantic.MasterPage/methods/getNegativeAction">negativeAction</a>.</p>
                 * @param {sap.m.semantic.NegativeAction} oNegativeAction <p>The negativeAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setNegativeAction(oNegativeAction: sap.m.semantic.NegativeAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPositiveAction" href="#/api/sap.m.semantic.MasterPage/methods/getPositiveAction">positiveAction</a>.</p>
                 * @param {sap.m.semantic.PositiveAction} oPositiveAction <p>The positiveAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPositiveAction(oPositiveAction: sap.m.semantic.PositiveAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSaveAction" href="#/api/sap.m.semantic.MasterPage/methods/getSaveAction">saveAction</a>.</p>
                 * @param {sap.m.semantic.SaveAction} oSaveAction <p>The saveAction to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSaveAction(oSaveAction: sap.m.semantic.SaveAction): sap.m.semantic.MasterPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSort" href="#/api/sap.m.semantic.MasterPage/methods/getSort">sort</a>.</p>
                 * @param {sap.m.semantic.ISort} oSort <p>The sort to set</p>
                 * @returns sap.m.semantic.MasterPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSort(oSort: sap.m.semantic.ISort): sap.m.semantic.MasterPage;
            }
            /**
             * <p>A MessagesIndicator button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class MessagesIndicator extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new MessagesIndicator.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A MultiSelectAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class MultiSelectAction extends sap.m.semantic.SemanticToggleButton {
                /**
                 * <p>Constructor for a new MultiSelectAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A NegativeAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class NegativeAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new NegativeAction.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
                 * @param {any} mSettings <p>custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.NegativeAction/methods/getText">text</a>.</p><p>Button text</p>
                 * @returns string <p>Value of property <code>text</code></p>
                 */
                getText(): string;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.NegativeAction/methods/getText">text</a>.</p><p>Button text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sText <p>New value for property <code>text</code></p>
                 * @returns sap.m.semantic.NegativeAction <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setText(sText: string): sap.m.semantic.NegativeAction;
            }
            /**
             * <p>An OpenInAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class OpenInAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new OpenInAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A PositiveAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class PositiveAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new PositiveAction.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
                 * @param {any} mSettings <p>custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.PositiveAction/methods/getText">text</a>.</p><p>Button text</p>
                 * @returns string <p>Value of property <code>text</code></p>
                 */
                getText(): string;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.m.semantic.PositiveAction/methods/getText">text</a>.</p><p>Button text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sText <p>New value for property <code>text</code></p>
                 * @returns sap.m.semantic.PositiveAction <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setText(sText: string): sap.m.semantic.PositiveAction;
            }
            /**
             * <p>A PrintAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class PrintAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new PrintAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A SaveAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class SaveAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new SaveAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A semantic button is either a <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticOverflowToolbarButton">sap.m.semantic.SemanticOverflowToolbarButton</a> , eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export abstract class SemanticButton extends sap.m.semantic.SemanticControl {
                /**
                 * <p>Constructor for a new SemanticButton.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.semantic.SemanticButton/events/press">press</a> event of this <code>sap.m.semantic.SemanticButton</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.semantic.SemanticButton</code> itself.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Button/events/press">sap.m.Button#event:press</a></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticButton</code> itself</p>
                 * @returns sap.m.semantic.SemanticButton <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachPress(oData: any, fnFunction: Function, oListener?: any): sap.m.semantic.SemanticButton;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.semantic.SemanticButton/events/press">press</a> event of this <code>sap.m.semantic.SemanticButton</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.semantic.SemanticButton <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachPress(fnFunction: Function, oListener?: any): sap.m.semantic.SemanticButton;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.m.semantic.SemanticButton/events/press">press</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.semantic.SemanticButton <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected firePress(mParameters?: any): sap.m.semantic.SemanticButton;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.semantic.SemanticButton/methods/getEnabled">enabled</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Button/methods/enabled">sap.m.Button#enabled</a></p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>enabled</code></p>
                 */
                getEnabled(): boolean;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.semantic.SemanticButton/methods/getEnabled">enabled</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Button/methods/enabled">sap.m.Button#enabled</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
                 * @returns sap.m.semantic.SemanticButton <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEnabled(bEnabled: boolean): sap.m.semantic.SemanticButton;
            }
            /**
             * <p>A semantic control is an abstraction for either a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticButton">sap.m.semantic.SemanticButton</a> or <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticSelect">sap.m.semantic.SemanticSelect</a> , eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export abstract class SemanticControl extends sap.ui.core.Element {
                /**
                 * <p>Constructor for a new SemanticControl.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
                 * @param {any} mSettings <p>initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Implementation of a commonly used function that adapts <code>sap.ui.core.Element</code> to provide DOM reference for opening popovers.</p>
                 * @returns HTMLElement <p>The DOM reference of the actual wrapped control</p>
                 */
                getPopupAnchorDomRef(): HTMLElement;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.semantic.SemanticControl/methods/getVisible">visible</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/visible">sap.ui.core.Control#visible</a></p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>visible</code></p>
                 */
                getVisible(): boolean;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.m.semantic.SemanticControl/methods/getVisible">visible</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/visible">sap.ui.core.Control#visible</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
                 * @returns sap.m.semantic.SemanticControl <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setVisible(bVisible: boolean): sap.m.semantic.SemanticControl;
            }
            /**
             * <p>An enhanced <a target="_self" class="jsdoclink" href="#/api/sap.m.Page">sap.m.Page</a>, that can contain controls with semantic meaning, see <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticControl">sap.m.semantic.SemanticControl</a>.</p><p><b>Note:</b> This control implements the SAP Fiori 1.0 design guidelines. For SAP Fiori 2.0, see the <a target="_self" class="jsdoclink" href="#/api/sap.f.semantic.SemanticPage">sap.f.semantic.SemanticPage</a>.</p><h3>Overview</h3><p>The main functionality of the <code>SemanticPage</code> is to predefine the placement, behavior and styles of the page elements.</p><p>Content specified in the semantic aggregations will be automatically positioned in dedicated sections of the footer or the header of the page.</p><h3>Structure</h3><p>The semantics of the content are the following: <ul> <li>Visual properties (for example, <code>AddAction</code> will be styled as an icon button)</li> <li>Position in the page (UX guidelines specify that some buttons should be in the header only, while others are in the footer or the "share" menu, so we do the correct positioning)</li> <li>Sequence order (UX guidelines define a specific sequence order of semantic controls with respect to each other)</li> <li>Default localized tooltip for icon-only buttons</li> <li>Overflow behavior (UX guidelines define which buttons are allowed to go to the overflow of the toolbar when the screen gets narrower). For icon buttons, we ensure that the text label of the button appears when the button is in overflow, as specified by UX.</li> <li>Screen reader support (invisible text for reading the semantic type)</li> </ul></p><p>In addition to the predefined semantic controls, the <code>SemanticPage</code> can host also custom app controls. It preserves most of the API of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Page">sap.m.Page</a> for specifying page content.</p><h3>Usage</h3><p>The app developer only has to specify the action type, and the required styling and positioning are automatically added.<br><br><span>Documentation links:</span><ul><li><a target="_self" href="#/topic/84f3d52f492648d5b594e4f45dca7727">Semantic Pages</a></li></ul></p>
             */
            export abstract class SemanticPage extends sap.ui.core.Control {
                /**
                 * <p>Constructor for a new <code>SemanticPage</code>.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p>
                 * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addContent(oContent: sap.ui.core.Control): sap.m.semantic.SemanticPage;
                /**
                 * <p>Adds some customFooterContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p>
                 * @param {sap.m.Button} oCustomFooterContent <p>The customFooterContent to add; if empty, nothing is inserted</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addCustomFooterContent(oCustomFooterContent: sap.m.Button): sap.m.semantic.SemanticPage;
                /**
                 * <p>Adds some customHeaderContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p>
                 * @param {sap.m.Button} oCustomHeaderContent <p>The customHeaderContent to add; if empty, nothing is inserted</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addCustomHeaderContent(oCustomHeaderContent: sap.m.Button): sap.m.semantic.SemanticPage;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.semantic.SemanticPage/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.semantic.SemanticPage</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.semantic.SemanticPage</code> itself.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/navButtonPress">sap.m.Page#navButtonPress</a></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticPage</code> itself</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachNavButtonPress(oData: any, fnFunction: Function, oListener?: any): sap.m.semantic.SemanticPage;
                /**
                 * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyContent(): sap.m.semantic.SemanticPage;
                /**
                 * <p>Destroys all the customFooterContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCustomFooterContent(): sap.m.semantic.SemanticPage;
                /**
                 * <p>Destroys all the customHeaderContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCustomHeaderContent(): sap.m.semantic.SemanticPage;
                /**
                 * <p>Destroys the landmarkInfo in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.semantic.SemanticPage/methods/getLandmarkInfo">landmarkInfo</a>.</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyLandmarkInfo(): sap.m.semantic.SemanticPage;
                /**
                 * <p>Destroys the subHeader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.semantic.SemanticPage/methods/getSubHeader">subHeader</a>.</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroySubHeader(): sap.m.semantic.SemanticPage;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.semantic.SemanticPage/events/navButtonPress">navButtonPress</a> event of this <code>sap.m.semantic.SemanticPage</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachNavButtonPress(fnFunction: Function, oListener?: any): sap.m.semantic.SemanticPage;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="navButtonPress" href="#/api/sap.m.semantic.SemanticPage/events/navButtonPress">navButtonPress</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireNavButtonPress(mParameters?: any): sap.m.semantic.SemanticPage;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.semantic.SemanticPage/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the backgound color of the page. For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/backgroundDesign">sap.m.Page#backgroundDesign</a>.</p><p>Default value is <code>Standard</code>.</p>
                 * @returns sap.m.PageBackgroundDesign <p>Value of property <code>backgroundDesign</code></p>
                 */
                getBackgroundDesign(): sap.m.PageBackgroundDesign;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/content">sap.m.Page#content</a></p>
                 * @returns sap.ui.core.Control[] 
                 */
                getContent(): sap.ui.core.Control[];
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p><p>Custom footer buttons</p>
                 * @returns sap.m.Button[] 
                 */
                getCustomFooterContent(): sap.m.Button[];
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p><p>Custom header buttons</p>
                 * @returns sap.m.Button[] 
                 */
                getCustomHeaderContent(): sap.m.Button[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableScrolling" href="#/api/sap.m.semantic.SemanticPage/methods/getEnableScrolling">enableScrolling</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/enableScrolling">sap.m.Page#enableScrolling</a></p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>enableScrolling</code></p>
                 */
                getEnableScrolling(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFloatingFooter" href="#/api/sap.m.semantic.SemanticPage/methods/getFloatingFooter">floatingFooter</a>.</p><p>Determines whether the floating footer behavior is enabled. If set to <code>true</code>, the content is visible when it's underneath the footer.</p><p>Default value is <code>false</code>.</p>
                 * @returns boolean <p>Value of property <code>floatingFooter</code></p>
                 */
                getFloatingFooter(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.semantic.SemanticPage/methods/getLandmarkInfo">landmarkInfo</a>.</p><p>Accessible landmark settings to be applied to the containers of the <code>sap.m.Page</code> control.</p><p>If not set, no landmarks will be written.</p>
                 * @returns sap.m.PageAccessibleLandmarkInfo 
                 */
                getLandmarkInfo(): sap.m.PageAccessibleLandmarkInfo;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSemanticRuleSet" href="#/api/sap.m.semantic.SemanticPage/methods/getSemanticRuleSet">semanticRuleSet</a>.</p><p>Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.</p><p>Default value is <code>Classic</code>.</p>
                 * @returns sap.m.semantic.SemanticRuleSetType <p>Value of property <code>semanticRuleSet</code></p>
                 */
                getSemanticRuleSet(): sap.m.semantic.SemanticRuleSetType;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowFooter" href="#/api/sap.m.semantic.SemanticPage/methods/getShowFooter">showFooter</a>.</p><p>Hides or shows the page footer</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>showFooter</code></p>
                 */
                getShowFooter(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.semantic.SemanticPage/methods/getShowNavButton">showNavButton</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/showNavButton">sap.m.Page#showNavButton</a></p><p>Default value is <code>false</code>.</p>
                 * @returns boolean <p>Value of property <code>showNavButton</code></p>
                 */
                getShowNavButton(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubHeader" href="#/api/sap.m.semantic.SemanticPage/methods/getShowSubHeader">showSubHeader</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/showSubHeader">sap.m.Page#showSubHeader</a></p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>showSubHeader</code></p>
                 */
                getShowSubHeader(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.semantic.SemanticPage/methods/getSubHeader">subHeader</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/subHeader">sap.m.Page#subHeader</a></p>
                 * @returns sap.m.IBar 
                 */
                getSubHeader(): sap.m.IBar;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.semantic.SemanticPage/methods/getTitle">title</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/title">sap.m.Page#title</a></p>
                 * @returns string <p>Value of property <code>title</code></p>
                 */
                getTitle(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.semantic.SemanticPage/methods/getTitleLevel">titleLevel</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/titleLevel">sap.m.Page#titleLevel</a></p><p>Default value is <code>Auto</code>.</p>
                 * @returns sap.ui.core.TitleLevel <p>Value of property <code>titleLevel</code></p>
                 */
                getTitleLevel(): sap.ui.core.TitleLevel;
                /**
                 * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfContent(oContent: sap.ui.core.Control): number;
                /**
                 * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.Button} oCustomFooterContent <p>The customFooterContent whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfCustomFooterContent(oCustomFooterContent: sap.m.Button): number;
                /**
                 * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.Button} oCustomHeaderContent <p>The customHeaderContent whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfCustomHeaderContent(oCustomHeaderContent: sap.m.Button): number;
                /**
                 * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p>
                 * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.m.semantic.SemanticPage;
                /**
                 * <p>Inserts a customFooterContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p>
                 * @param {sap.m.Button} oCustomFooterContent <p>The customFooterContent to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the customFooterContent should be inserted at; for a negative value of <code>iIndex</code>, the customFooterContent is inserted at position 0; for a value greater than the current size of the aggregation, the customFooterContent is inserted at the last position</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertCustomFooterContent(oCustomFooterContent: sap.m.Button, iIndex: number): sap.m.semantic.SemanticPage;
                /**
                 * <p>Inserts a customHeaderContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p>
                 * @param {sap.m.Button} oCustomHeaderContent <p>The customHeaderContent to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the customHeaderContent should be inserted at; for a negative value of <code>iIndex</code>, the customHeaderContent is inserted at position 0; for a value greater than the current size of the aggregation, the customHeaderContent is inserted at the last position</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertCustomHeaderContent(oCustomHeaderContent: sap.m.Button, iIndex: number): sap.m.semantic.SemanticPage;
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllContent(): sap.ui.core.Control[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllCustomFooterContent(): sap.m.Button[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllCustomHeaderContent(): sap.m.Button[];
                /**
                 * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.m.semantic.SemanticPage/methods/getContent">content</a>.</p>
                 * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
                 * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
                 */
                removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
                /**
                 * <p>Removes a customFooterContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomFooterContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomFooterContent">customFooterContent</a>.</p>
                 * @param {number | string | sap.m.Button} vCustomFooterContent <p>The customFooterContent to remove or its index or id</p>
                 * @returns sap.m.Button <p>The removed customFooterContent or <code>null</code></p>
                 */
                removeCustomFooterContent(vCustomFooterContent: number | string | sap.m.Button): sap.m.Button;
                /**
                 * <p>Removes a customHeaderContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomHeaderContent" href="#/api/sap.m.semantic.SemanticPage/methods/getCustomHeaderContent">customHeaderContent</a>.</p>
                 * @param {number | string | sap.m.Button} vCustomHeaderContent <p>The customHeaderContent to remove or its index or id</p>
                 * @returns sap.m.Button <p>The removed customHeaderContent or <code>null</code></p>
                 */
                removeCustomHeaderContent(vCustomHeaderContent: number | string | sap.m.Button): sap.m.Button;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundDesign" href="#/api/sap.m.semantic.SemanticPage/methods/getBackgroundDesign">backgroundDesign</a>.</p><p>Determines the backgound color of the page. For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/backgroundDesign">sap.m.Page#backgroundDesign</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Standard</code>.</p>
                 * @param {sap.m.PageBackgroundDesign} sBackgroundDesign <p>New value for property <code>backgroundDesign</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setBackgroundDesign(sBackgroundDesign: sap.m.PageBackgroundDesign): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnableScrolling" href="#/api/sap.m.semantic.SemanticPage/methods/getEnableScrolling">enableScrolling</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/enableScrolling">sap.m.Page#enableScrolling</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bEnableScrolling <p>New value for property <code>enableScrolling</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEnableScrolling(bEnableScrolling: boolean): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFloatingFooter" href="#/api/sap.m.semantic.SemanticPage/methods/getFloatingFooter">floatingFooter</a>.</p><p>Determines whether the floating footer behavior is enabled. If set to <code>true</code>, the content is visible when it's underneath the footer.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
                 * @param {boolean} bFloatingFooter <p>New value for property <code>floatingFooter</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFloatingFooter(bFloatingFooter: boolean): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLandmarkInfo" href="#/api/sap.m.semantic.SemanticPage/methods/getLandmarkInfo">landmarkInfo</a>.</p>
                 * @param {sap.m.PageAccessibleLandmarkInfo} oLandmarkInfo <p>The landmarkInfo to set</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setLandmarkInfo(oLandmarkInfo: sap.m.PageAccessibleLandmarkInfo): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSemanticRuleSet" href="#/api/sap.m.semantic.SemanticPage/methods/getSemanticRuleSet">semanticRuleSet</a>.</p><p>Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Classic</code>.</p>
                 * @param {sap.m.semantic.SemanticRuleSetType} sSemanticRuleSet <p>New value for property <code>semanticRuleSet</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSemanticRuleSet(sSemanticRuleSet: sap.m.semantic.SemanticRuleSetType): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowFooter" href="#/api/sap.m.semantic.SemanticPage/methods/getShowFooter">showFooter</a>.</p><p>Hides or shows the page footer</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bShowFooter <p>New value for property <code>showFooter</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShowFooter(bShowFooter: boolean): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowNavButton" href="#/api/sap.m.semantic.SemanticPage/methods/getShowNavButton">showNavButton</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/showNavButton">sap.m.Page#showNavButton</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
                 * @param {boolean} bShowNavButton <p>New value for property <code>showNavButton</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShowNavButton(bShowNavButton: boolean): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowSubHeader" href="#/api/sap.m.semantic.SemanticPage/methods/getShowSubHeader">showSubHeader</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/showSubHeader">sap.m.Page#showSubHeader</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bShowSubHeader <p>New value for property <code>showSubHeader</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShowSubHeader(bShowSubHeader: boolean): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSubHeader" href="#/api/sap.m.semantic.SemanticPage/methods/getSubHeader">subHeader</a>.</p>
                 * @param {sap.m.IBar} oSubHeader <p>The subHeader to set</p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSubHeader(oSubHeader: sap.m.IBar): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitle" href="#/api/sap.m.semantic.SemanticPage/methods/getTitle">title</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/title">sap.m.Page#title</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sTitle <p>New value for property <code>title</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setTitle(sTitle: string): sap.m.semantic.SemanticPage;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTitleLevel" href="#/api/sap.m.semantic.SemanticPage/methods/getTitleLevel">titleLevel</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Page/methods/titleLevel">sap.m.Page#titleLevel</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
                 * @param {sap.ui.core.TitleLevel} sTitleLevel <p>New value for property <code>titleLevel</code></p>
                 * @returns sap.m.semantic.SemanticPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): sap.m.semantic.SemanticPage;
            }
            /**
             * <p><p>Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.</p></p>
             */
            export enum SemanticRuleSetType {
                /**
                 * <p>The default ruleset type, for which the Share Menu is always in the footer of the page.</p>
                 */
                Classic = "Classic",
                /**
                 * <p>Offers an optimized user experience, with displaying the Share Menu in the header, rather than the footer, for Fullscreen mode.</p>
                 */
                Optimized = "Optimized",
            }
            /**
             * <p>A semantic select is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a> eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export abstract class SemanticSelect extends sap.m.semantic.SemanticControl {
                /**
                 * <p>Constructor for a new SemanticSelect.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p>
                 * @param {sap.ui.core.Item} oItem <p>The item to add; if empty, nothing is inserted</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addItem(oItem: sap.ui.core.Item): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.semantic.SemanticSelect/events/change">change</a> event of this <code>sap.m.semantic.SemanticSelect</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.semantic.SemanticSelect</code> itself.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/events/change">sap.m.Select#event:change</a></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticSelect</code> itself</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachChange(oData: any, fnFunction: Function, oListener?: any): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
                 * @param {any} oBindingInfo <p>The binding information</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                bindItems(oBindingInfo: any): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyItems(): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.semantic.SemanticSelect/events/change">change</a> event of this <code>sap.m.semantic.SemanticSelect</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachChange(fnFunction: Function, oListener?: any): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.m.semantic.SemanticSelect/events/change">change</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireChange(mParameters?: any): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.semantic.SemanticSelect/methods/getEnabled">enabled</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/methods/getEnabled">sap.m.Select#getEnabled</a></p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>enabled</code></p>
                 */
                getEnabled(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/methods/getItems">sap.m.Select#getItems</a></p>
                 * @returns sap.ui.core.Item[] 
                 */
                getItems(): sap.ui.core.Item[];
                /**
                 * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.semantic.SemanticSelect/methods/getSelectedItem">selectedItem</a>, or <code>null</code>.</p>
                 * @returns sap.ui.core.ID 
                 */
                getSelectedItem(): sap.ui.core.ID;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.semantic.SemanticSelect/methods/getSelectedKey">selectedKey</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/methods/getSelectedKey">sap.m.Select#getSelectedKey</a></p><p>Default value is <code>empty string</code>.</p>
                 * @returns string <p>Value of property <code>selectedKey</code></p>
                 */
                getSelectedKey(): string;
                /**
                 * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.ui.core.Item} oItem <p>The item whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfItem(oItem: sap.ui.core.Item): number;
                /**
                 * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p>
                 * @param {sap.ui.core.Item} oItem <p>The item to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertItem(oItem: sap.ui.core.Item, iIndex: number): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllItems(): sap.ui.core.Item[];
                /**
                 * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a>.</p>
                 * @param {number | string | sap.ui.core.Item} vItem <p>The item to remove or its index or id</p>
                 * @returns sap.ui.core.Item <p>The removed item or <code>null</code></p>
                 */
                removeItem(vItem: number | string | sap.ui.core.Item): sap.ui.core.Item;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.m.semantic.SemanticSelect/methods/getEnabled">enabled</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/methods/getEnabled">sap.m.Select#getEnabled</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEnabled(bEnabled: boolean): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedItem" href="#/api/sap.m.semantic.SemanticSelect/methods/getSelectedItem">selectedItem</a>.</p>
                 * @param {sap.ui.core.ID | sap.ui.core.Item} oSelectedItem <p>ID of an element which becomes the new target of this selectedItem association; alternatively, an element instance may be given</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSelectedItem(oSelectedItem: sap.ui.core.ID | sap.ui.core.Item): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSelectedKey" href="#/api/sap.m.semantic.SemanticSelect/methods/getSelectedKey">selectedKey</a>.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.m.Select/methods/getSelectedKey">sap.m.Select#getSelectedKey</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
                 * @param {string} sSelectedKey <p>New value for property <code>selectedKey</code></p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setSelectedKey(sSelectedKey: string): sap.m.semantic.SemanticSelect;
                /**
                 * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.semantic.SemanticSelect/methods/getItems">items</a> from model data.</p>
                 * @returns sap.m.semantic.SemanticSelect <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                unbindItems(): sap.m.semantic.SemanticSelect;
            }
            /**
             * <p>A SemanticToggleButton is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export abstract class SemanticToggleButton extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new SemanticToggleButton.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPressed" href="#/api/sap.m.semantic.SemanticToggleButton/methods/getPressed">pressed</a>.</p><p>The property is “true” when the control is toggled. The default state of this property is "false".</p><p>Default value is <code>false</code>.</p>
                 * @returns boolean <p>Value of property <code>pressed</code></p>
                 */
                getPressed(): boolean;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPressed" href="#/api/sap.m.semantic.SemanticToggleButton/methods/getPressed">pressed</a>.</p><p>The property is “true” when the control is toggled. The default state of this property is "false".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
                 * @param {boolean} bPressed <p>New value for property <code>pressed</code></p>
                 * @returns sap.m.semantic.SemanticToggleButton <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setPressed(bPressed: boolean): sap.m.semantic.SemanticToggleButton;
            }
            /**
             * <p>A SendEmailAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class SendEmailAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new SendEmailAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A SendMessageAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class SendMessageAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new SendMessageAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A ShareInJamAction button has default semantic-specific properties and is eligible for aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p>
             */
            export class ShareInJamAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new ShareInJamAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A ShareMenuPage is a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a> with support for "share" menu in the footer.</p>
             */
            export class ShareMenuPage extends sap.m.semantic.SemanticPage {
                /**
                 * <p>Constructor for a new ShareMenuPage</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
                 * @param {any} mSettings <p>initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Adds some customShareMenuContent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p>
                 * @param {sap.m.Button} oCustomShareMenuContent <p>The customShareMenuContent to add; if empty, nothing is inserted</p>
                 * @returns sap.m.semantic.ShareMenuPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): sap.m.semantic.ShareMenuPage;
                /**
                 * <p>Destroys all the customShareMenuContent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p>
                 * @returns sap.m.semantic.ShareMenuPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyCustomShareMenuContent(): sap.m.semantic.ShareMenuPage;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p><p>Custom share menu buttons</p>
                 * @returns sap.m.Button[] 
                 */
                getCustomShareMenuContent(): sap.m.Button[];
                /**
                 * <p>Checks for the provided <code>sap.m.Button</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.Button} oCustomShareMenuContent <p>The customShareMenuContent whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): number;
                /**
                 * <p>Inserts a customShareMenuContent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p>
                 * @param {sap.m.Button} oCustomShareMenuContent <p>The customShareMenuContent to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the customShareMenuContent should be inserted at; for a negative value of <code>iIndex</code>, the customShareMenuContent is inserted at position 0; for a value greater than the current size of the aggregation, the customShareMenuContent is inserted at the last position</p>
                 * @returns sap.m.semantic.ShareMenuPage <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button, iIndex: number): sap.m.semantic.ShareMenuPage;
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.Button[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllCustomShareMenuContent(): sap.m.Button[];
                /**
                 * <p>Removes a customShareMenuContent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomShareMenuContent" href="#/api/sap.m.semantic.ShareMenuPage/methods/getCustomShareMenuContent">customShareMenuContent</a>.</p>
                 * @param {number | string | sap.m.Button} vCustomShareMenuContent <p>The customShareMenuContent to remove or its index or id</p>
                 * @returns sap.m.Button <p>The removed customShareMenuContent or <code>null</code></p>
                 */
                removeCustomShareMenuContent(vCustomShareMenuContent: number | string | sap.m.Button): sap.m.Button;
            }
            /**
             * <p>A SortAction is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Button">sap.m.Button</a> control enhanced with styling according to the semantics of a common "Sort" action.</p><p>A SortAction cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>Your app should listen to the <code>press</code> event of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortAction">sap.m.semantic.SortAction</a> in order to trigger the display of the sorting options.</p><p>If your sorting options are a simple list of items and require single choice only, then you can consider using a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortSelect">sap.m.semantic.SortSelect</a> instead.</p>
             */
            export class SortAction extends sap.m.semantic.SemanticButton {
                /**
                 * <p>Constructor for a new SortAction.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
            /**
             * <p>A SortSelect is a <a target="_self" class="jsdoclink" href="#/api/sap.m.Select">sap.m.Select</a> control enhanced with styling according to the semantics of a common "Sort" acton.</p><p>A SortSelect cannot be used independently but only as aggregation content of a <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SemanticPage">sap.m.semantic.SemanticPage</a>.</p><p>The sorting options should be added to the <code>items</code> aggregation of <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortSelect">sap.m.semantic.SortSelect</a> and will be displayed as a pop-up list with support for single-item selection. If this simple popup list is not sufficient for your use case, you can implement your own custom dialog by using <a target="_self" class="jsdoclink" href="#/api/sap.m.semantic.SortAction">sap.m.semantic.SortAction</a> to trigger the dialog opening.</p>
             */
            export class SortSelect extends sap.m.semantic.SemanticSelect {
                /**
                 * <p>Constructor for a new SortSelect.</p>
                 * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
                 * @param {any} mSettings <p>Custom initial settings for the new control</p>
                 */
                constructor(sId?: string, mSettings?: any);
            }
        }
    }
}
declare namespace sap {
    namespace m {
        /**
         */
        namespace upload {
            /**
             * <p>A basic implementation for uploading and downloading one or multiple files.</p>
             */
            export class Uploader extends sap.ui.core.Element {
                /**
                 * <p>Starts function for uploading one file object to given url. Returns promise that resolves when the upload is finished or rejects when the upload fails.</p>
                 * @param {File | Blob} oFile <p>File or Blob object to be uploaded.</p>
                 * @param {string} sUrl <p>Upload Url.</p>
                 * @param {sap.ui.core.Item[]} aHeaderFields <p>Collection of request header fields to be send along.</p>
                 * @returns Promise<any> <p>Promise that resolves when the upload is finished or rejects when the upload fails.</p>
                 */
                static uploadFile(oFile: File | Blob, sUrl: string, aHeaderFields?: sap.ui.core.Item[]): Promise<any>;
                /**
                 * <p>Constructor for a new Uploader.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 */
                constructor();
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadAborted" href="#/api/sap.m.upload.Uploader/events/uploadAborted">uploadAborted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.Uploader</code> itself.</p><p>The event is fired when an XHR request reports its abortion.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.Uploader</code> itself</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadAborted(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.Uploader/events/uploadCompleted">uploadCompleted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.Uploader</code> itself.</p><p>The event is fired when an XHR request reports successful completion of upload process.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.Uploader</code> itself</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadCompleted(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadProgressed" href="#/api/sap.m.upload.Uploader/events/uploadProgressed">uploadProgressed</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.Uploader</code> itself.</p><p>The event is fired every time an XHR request reports progress in uploading.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.Uploader</code> itself</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadProgressed(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadStarted" href="#/api/sap.m.upload.Uploader/events/uploadStarted">uploadStarted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.Uploader</code> itself.</p><p>The event is fired just after the POST request was sent.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.Uploader</code> itself</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadStarted(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadAborted" href="#/api/sap.m.upload.Uploader/events/uploadAborted">uploadAborted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadAborted(fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.Uploader/events/uploadCompleted">uploadCompleted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadCompleted(fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadProgressed" href="#/api/sap.m.upload.Uploader/events/uploadProgressed">uploadProgressed</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadProgressed(fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadStarted" href="#/api/sap.m.upload.Uploader/events/uploadStarted">uploadStarted</a> event of this <code>sap.m.upload.Uploader</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadStarted(fnFunction: Function, oListener?: any): sap.m.upload.Uploader;
                /**
                 * <p>Starts the process of downloading a file.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>Item representing the file to be downloaded.</p>
                 * @param {sap.ui.core.Item[]} aHeaderFields <p>List of header fields to be added to the GET request.</p>
                 * @param {boolean} bAskForLocation <p>True if the location to where download the file should be first queried by a browser dialog.</p>
                 * @returns boolean <p>True if the download process successfully</p>
                 */
                downloadItem(oItem: sap.m.upload.UploadSetItem, aHeaderFields: sap.ui.core.Item[], bAskForLocation: boolean): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadAborted" href="#/api/sap.m.upload.Uploader/events/uploadAborted">uploadAborted</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadAborted(mParameters?: any): sap.m.upload.Uploader;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.Uploader/events/uploadCompleted">uploadCompleted</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadCompleted(mParameters?: any): sap.m.upload.Uploader;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadProgressed" href="#/api/sap.m.upload.Uploader/events/uploadProgressed">uploadProgressed</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadProgressed(mParameters?: any): sap.m.upload.Uploader;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadStarted" href="#/api/sap.m.upload.Uploader/events/uploadStarted">uploadStarted</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadStarted(mParameters?: any): sap.m.upload.Uploader;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDownloadUrl" href="#/api/sap.m.upload.Uploader/methods/getDownloadUrl">downloadUrl</a>.</p><p>URL where the next file is going to be download from.</p>
                 * @returns string <p>Value of property <code>downloadUrl</code></p>
                 */
                getDownloadUrl(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.upload.Uploader/methods/getUploadUrl">uploadUrl</a>.</p><p>URL where the next file is going to be uploaded to.</p>
                 * @returns string <p>Value of property <code>uploadUrl</code></p>
                 */
                getUploadUrl(): string;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDownloadUrl" href="#/api/sap.m.upload.Uploader/methods/getDownloadUrl">downloadUrl</a>.</p><p>URL where the next file is going to be download from.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sDownloadUrl <p>New value for property <code>downloadUrl</code></p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setDownloadUrl(sDownloadUrl: string): sap.m.upload.Uploader;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.upload.Uploader/methods/getUploadUrl">uploadUrl</a>.</p><p>URL where the next file is going to be uploaded to.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sUploadUrl <p>New value for property <code>uploadUrl</code></p>
                 * @returns sap.m.upload.Uploader <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUploadUrl(sUploadUrl: string): sap.m.upload.Uploader;
                /**
                 * <p>Attempts to terminate the process of uploading the specified file.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>Item representing the file whose ongoing upload process is to be terminated.</p>
                 */
                terminateItem(oItem: sap.m.upload.UploadSetItem): void;
                /**
                 * <p>Starts the process of uploading the specified file.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>Item representing the file to be uploaded.</p>
                 * @param {sap.ui.core.Item[]} aHeaderFields <p>Collection of request header fields to be send along.</p>
                 */
                uploadItem(oItem: sap.m.upload.UploadSetItem, aHeaderFields?: sap.ui.core.Item[]): void;
            }
            /**
             * <p>This control allows you to upload one or more files from your devices (desktop, tablet, or phone) and attach them to your application.<br> This control builds on the <a target="_self" class="jsdoclink" href="#/api/sap.m.UploadCollection">sap.m.UploadCollection</a> control, providing better handling of headers and requests, unified behavior of instant and deferred uploads, as well as improved progress indication.</p>
             */
            export class UploadSet extends sap.ui.core.Control {
                /**
                 * <p>Constructor for a new UploadSet.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>id for the new control, generated automatically if no id is given.</p>
                 * @param {any} mSettings <p>Initial settings for the new control.</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Adds some headerField to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p>
                 * @param {sap.ui.core.Item} oHeaderField <p>The headerField to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addHeaderField(oHeaderField: sap.ui.core.Item): sap.m.upload.UploadSet;
                /**
                 * <p>Adds some incompleteItem to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p>
                 * @param {sap.m.upload.UploadSetItem} oIncompleteItem <p>The incompleteItem to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addIncompleteItem(oIncompleteItem: sap.m.upload.UploadSetItem): sap.m.upload.UploadSet;
                /**
                 * <p>Adds some item to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>The item to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addItem(oItem: sap.m.upload.UploadSetItem): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterItemAdded" href="#/api/sap.m.upload.UploadSet/events/afterItemAdded">afterItemAdded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired when a new file is added to the set of items to be uploaded.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachAfterItemAdded(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemAdded" href="#/api/sap.m.upload.UploadSet/events/beforeItemAdded">beforeItemAdded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired just before a new file is added to the set of items to be uploaded.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachBeforeItemAdded(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemEdited" href="#/api/sap.m.upload.UploadSet/events/beforeItemEdited">beforeItemEdited</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired when the edit button is clicked for an item and no other item is being edited at the same time. <br>If there is another item that has unsaved changes, the editing of the clicked item cannot be started.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachBeforeItemEdited(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemRemoved" href="#/api/sap.m.upload.UploadSet/events/beforeItemRemoved">beforeItemRemoved</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired just before the confirmation dialog for 'Remove' action is displayed.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachBeforeItemRemoved(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.upload.UploadSet/events/beforeUploadStarts">beforeUploadStarts</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired right before the upload process begins.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachBeforeUploadStarts(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadTermination" href="#/api/sap.m.upload.UploadSet/events/beforeUploadTermination">beforeUploadTermination</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired right before the upload is terminated.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachBeforeUploadTermination(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileNameLengthExceeded" href="#/api/sap.m.upload.UploadSet/events/fileNameLengthExceeded">fileNameLengthExceeded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired in either of the following cases: <ul> <li>When a file that is selected to be uploaded fails to meet the file name length restriction specified in the <code>maxFileNameLength</code> property.</li> <li>When the file name length restriction changes, and the file to be uploaded fails to meet the new restriction.</li> </ul></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachFileNameLengthExceeded(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceeded" href="#/api/sap.m.upload.UploadSet/events/fileSizeExceeded">fileSizeExceeded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired in either of the following cases: <ul> <li>When a file that is selected to be uploaded fails to meet the file size restriction specified in the <code>maxFileSize</code> property.</li> <li>When the file size restriction changes, and the file to be uploaded fails to meet the new restriction.</li> </ul></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachFileSizeExceeded(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/fileTypeMismatch">fileTypeMismatch</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired in either of the following cases: <ul> <li>When a file that is selected to be uploaded fails to meet the file type restriction (<code>fileType</code> property).</li> <li>When the file type restriction changes, and the file to be uploaded fails to meet the new restriction.</li> </ul></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachFileTypeMismatch(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="mediaTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/mediaTypeMismatch">mediaTypeMismatch</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired in either of the following cases: <ul> <li>When a file that is selected to be uploaded fails to meet the media type restriction specified in the <code>mediaTypes</code> property.</li> <li>When the media type restriction changes, and the file to be uploaded fails to meet the new restriction.</li> </ul></p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachMediaTypeMismatch(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChanged" href="#/api/sap.m.upload.UploadSet/events/selectionChanged">selectionChanged</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired simultaneously with the respective event in the inner <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> control.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachSelectionChanged(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.UploadSet/events/uploadCompleted">uploadCompleted</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired right after the upload process is finished.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadCompleted(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.upload.UploadSet/events/uploadTerminated">uploadTerminated</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSet</code> itself.</p><p>This event is fired right after the upload is terminated.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSet</code> itself</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachUploadTerminated(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Destroys all the headerFields in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyHeaderFields(): sap.m.upload.UploadSet;
                /**
                 * <p>Destroys all the incompleteItems in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyIncompleteItems(): sap.m.upload.UploadSet;
                /**
                 * <p>Destroys all the items in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyItems(): sap.m.upload.UploadSet;
                /**
                 * <p>Destroys the toolbar in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.upload.UploadSet/methods/getToolbar">toolbar</a>.</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyToolbar(): sap.m.upload.UploadSet;
                /**
                 * <p>Destroys the uploader in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploader" href="#/api/sap.m.upload.UploadSet/methods/getUploader">uploader</a>.</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyUploader(): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterItemAdded" href="#/api/sap.m.upload.UploadSet/events/afterItemAdded">afterItemAdded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachAfterItemAdded(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemAdded" href="#/api/sap.m.upload.UploadSet/events/beforeItemAdded">beforeItemAdded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachBeforeItemAdded(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemEdited" href="#/api/sap.m.upload.UploadSet/events/beforeItemEdited">beforeItemEdited</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachBeforeItemEdited(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemRemoved" href="#/api/sap.m.upload.UploadSet/events/beforeItemRemoved">beforeItemRemoved</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachBeforeItemRemoved(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.upload.UploadSet/events/beforeUploadStarts">beforeUploadStarts</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachBeforeUploadStarts(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadTermination" href="#/api/sap.m.upload.UploadSet/events/beforeUploadTermination">beforeUploadTermination</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachBeforeUploadTermination(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileNameLengthExceeded" href="#/api/sap.m.upload.UploadSet/events/fileNameLengthExceeded">fileNameLengthExceeded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachFileNameLengthExceeded(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceeded" href="#/api/sap.m.upload.UploadSet/events/fileSizeExceeded">fileSizeExceeded</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachFileSizeExceeded(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/fileTypeMismatch">fileTypeMismatch</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachFileTypeMismatch(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="mediaTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/mediaTypeMismatch">mediaTypeMismatch</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachMediaTypeMismatch(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChanged" href="#/api/sap.m.upload.UploadSet/events/selectionChanged">selectionChanged</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachSelectionChanged(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.UploadSet/events/uploadCompleted">uploadCompleted</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadCompleted(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.upload.UploadSet/events/uploadTerminated">uploadTerminated</a> event of this <code>sap.m.upload.UploadSet</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachUploadTerminated(fnFunction: Function, oListener?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterItemAdded" href="#/api/sap.m.upload.UploadSet/events/afterItemAdded">afterItemAdded</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireAfterItemAdded(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemAdded" href="#/api/sap.m.upload.UploadSet/events/beforeItemAdded">beforeItemAdded</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireBeforeItemAdded(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemEdited" href="#/api/sap.m.upload.UploadSet/events/beforeItemEdited">beforeItemEdited</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireBeforeItemEdited(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeItemRemoved" href="#/api/sap.m.upload.UploadSet/events/beforeItemRemoved">beforeItemRemoved</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireBeforeItemRemoved(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadStarts" href="#/api/sap.m.upload.UploadSet/events/beforeUploadStarts">beforeUploadStarts</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireBeforeUploadStarts(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeUploadTermination" href="#/api/sap.m.upload.UploadSet/events/beforeUploadTermination">beforeUploadTermination</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireBeforeUploadTermination(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileNameLengthExceeded" href="#/api/sap.m.upload.UploadSet/events/fileNameLengthExceeded">fileNameLengthExceeded</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireFileNameLengthExceeded(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileSizeExceeded" href="#/api/sap.m.upload.UploadSet/events/fileSizeExceeded">fileSizeExceeded</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireFileSizeExceeded(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="fileTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/fileTypeMismatch">fileTypeMismatch</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireFileTypeMismatch(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="mediaTypeMismatch" href="#/api/sap.m.upload.UploadSet/events/mediaTypeMismatch">mediaTypeMismatch</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireMediaTypeMismatch(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="selectionChanged" href="#/api/sap.m.upload.UploadSet/events/selectionChanged">selectionChanged</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireSelectionChanged(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadCompleted" href="#/api/sap.m.upload.UploadSet/events/uploadCompleted">uploadCompleted</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadCompleted(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="uploadTerminated" href="#/api/sap.m.upload.UploadSet/events/uploadTerminated">uploadTerminated</a> to attached listeners.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                protected fireUploadTerminated(mParameters?: any): sap.m.upload.UploadSet;
                /**
                 * <p>Returns an instance of the default <code>sap.ui.unified.FileUploader</code> used for adding files using the operating system's open file dialog, so that it can be customized, for example made invisible or assigned a different icon.</p>
                 * @returns sap.ui.unified.FileUploader <p>Instance of the default <code>sap.ui.unified.FileUploader</code>.</p>
                 */
                getDefaultFileUploader(): sap.ui.unified.FileUploader;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileTypes" href="#/api/sap.m.upload.UploadSet/methods/getFileTypes">fileTypes</a>.</p><p>Allowed file types for files to be uploaded. <br>If this property is not set, any file can be uploaded.</p>
                 * @returns string[] <p>Value of property <code>fileTypes</code></p>
                 */
                getFileTypes(): string[];
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p><p>Header fields to be included in the header section of an XHR request.</p>
                 * @returns sap.ui.core.Item[] 
                 */
                getHeaderFields(): sap.ui.core.Item[];
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p><p>Items representing files yet to be uploaded.</p>
                 * @returns sap.m.upload.UploadSetItem[] 
                 */
                getIncompleteItems(): sap.m.upload.UploadSetItem[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInstantUpload" href="#/api/sap.m.upload.UploadSet/methods/getInstantUpload">instantUpload</a>.</p><p>Defines whether the upload process should be triggered as soon as the file is added.<br> If set to <code>false</code>, no upload is triggered when a file is added.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>instantUpload</code></p>
                 */
                getInstantUpload(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p><p>Items representing files that have already been uploaded.</p>
                 * @returns sap.m.upload.UploadSetItem[] 
                 */
                getItems(): sap.m.upload.UploadSetItem[];
                /**
                 * <p>Provides access to the instance of the inner <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> control, so that it can be customized.</p>
                 * @returns sap.m.List <p>The inner <a target="_self" class="jsdoclink" href="#/api/sap.m.List">sap.m.List</a> control.</p>
                 */
                getList(): sap.m.List;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxFileNameLength" href="#/api/sap.m.upload.UploadSet/methods/getMaxFileNameLength">maxFileNameLength</a>.</p><p>Maximum length of names of files to be uploaded. <br>If set to <code>null</code> or <code>0</code>, any files can be uploaded, regardless of their names length.</p>
                 * @returns number <p>Value of property <code>maxFileNameLength</code></p>
                 */
                getMaxFileNameLength(): number;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxFileSize" href="#/api/sap.m.upload.UploadSet/methods/getMaxFileSize">maxFileSize</a>.</p><p>Size limit in megabytes for files to be uploaded. <br>If set to <code>null</code> or <code>0</code>, files of any size can be uploaded.</p>
                 * @returns number <p>Value of property <code>maxFileSize</code></p>
                 */
                getMaxFileSize(): number;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMediaTypes" href="#/api/sap.m.upload.UploadSet/methods/getMediaTypes">mediaTypes</a>.</p><p>Allowed media types for files to be uploaded. <br>If this property is not set, any file can be uploaded.</p>
                 * @returns string[] <p>Value of property <code>mediaTypes</code></p>
                 */
                getMediaTypes(): string[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataDescription" href="#/api/sap.m.upload.UploadSet/methods/getNoDataDescription">noDataDescription</a>.</p><p>Defines custom text for the 'No data' description label.</p>
                 * @returns string <p>Value of property <code>noDataDescription</code></p>
                 */
                getNoDataDescription(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.upload.UploadSet/methods/getNoDataText">noDataText</a>.</p><p>Defines custom text for the 'No data' text label.</p>
                 * @returns string <p>Value of property <code>noDataText</code></p>
                 */
                getNoDataText(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcons" href="#/api/sap.m.upload.UploadSet/methods/getShowIcons">showIcons</a>.</p><p>Defines whether file icons should be displayed.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>showIcons</code></p>
                 */
                getShowIcons(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTerminationEnabled" href="#/api/sap.m.upload.UploadSet/methods/getTerminationEnabled">terminationEnabled</a>.</p><p>Defines whether it is allowed to terminate the upload process.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>terminationEnabled</code></p>
                 */
                getTerminationEnabled(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.upload.UploadSet/methods/getToolbar">toolbar</a>.</p><p>Main toolbar of the <code>UploadSet</code> control.</p>
                 * @returns sap.m.OverflowToolbar 
                 */
                getToolbar(): sap.m.OverflowToolbar;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadEnabled" href="#/api/sap.m.upload.UploadSet/methods/getUploadEnabled">uploadEnabled</a>.</p><p>Defines whether the upload action is allowed.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>uploadEnabled</code></p>
                 */
                getUploadEnabled(): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploader" href="#/api/sap.m.upload.UploadSet/methods/getUploader">uploader</a>.</p><p>Defines the uploader to be used. If not specified, the default implementation is used.</p>
                 * @returns sap.m.upload.Uploader 
                 */
                getUploader(): sap.m.upload.Uploader;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.upload.UploadSet/methods/getUploadUrl">uploadUrl</a>.</p><p>URL where the uploaded files will be stored.</p>
                 * @returns string <p>Value of property <code>uploadUrl</code></p>
                 */
                getUploadUrl(): string;
                /**
                 * <p>Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.ui.core.Item} oHeaderField <p>The headerField whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfHeaderField(oHeaderField: sap.ui.core.Item): number;
                /**
                 * <p>Checks for the provided <code>sap.m.upload.UploadSetItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.upload.UploadSetItem} oIncompleteItem <p>The incompleteItem whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfIncompleteItem(oIncompleteItem: sap.m.upload.UploadSetItem): number;
                /**
                 * <p>Checks for the provided <code>sap.m.upload.UploadSetItem</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>The item whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfItem(oItem: sap.m.upload.UploadSetItem): number;
                /**
                 * <p>Inserts a headerField into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p>
                 * @param {sap.ui.core.Item} oHeaderField <p>The headerField to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the headerField should be inserted at; for a negative value of <code>iIndex</code>, the headerField is inserted at position 0; for a value greater than the current size of the aggregation, the headerField is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertHeaderField(oHeaderField: sap.ui.core.Item, iIndex: number): sap.m.upload.UploadSet;
                /**
                 * <p>Inserts a incompleteItem into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p>
                 * @param {sap.m.upload.UploadSetItem} oIncompleteItem <p>The incompleteItem to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the incompleteItem should be inserted at; for a negative value of <code>iIndex</code>, the incompleteItem is inserted at position 0; for a value greater than the current size of the aggregation, the incompleteItem is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertIncompleteItem(oIncompleteItem: sap.m.upload.UploadSetItem, iIndex: number): sap.m.upload.UploadSet;
                /**
                 * <p>Inserts a item into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p>
                 * @param {sap.m.upload.UploadSetItem} oItem <p>The item to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the item should be inserted at; for a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size of the aggregation, the item is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertItem(oItem: sap.m.upload.UploadSetItem, iIndex: number): sap.m.upload.UploadSet;
                /**
                 * <p>Attaches all necessary handlers to the given uploader instance, so that the progress and status of the upload can be displayed and monitored.</p>
                 * @param {sap.m.upload.Uploader} oUploader <p>Instance of <code>sap.m.upload.Uploader</code> to which the default request handlers are attached.</p>
                 */
                registerUploaderEvents(oUploader: sap.m.upload.Uploader): void;
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.ui.core.Item[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllHeaderFields(): sap.ui.core.Item[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.upload.UploadSetItem[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllIncompleteItems(): sap.m.upload.UploadSetItem[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.upload.UploadSetItem[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllItems(): sap.m.upload.UploadSetItem[];
                /**
                 * <p>Removes a headerField from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeaderFields" href="#/api/sap.m.upload.UploadSet/methods/getHeaderFields">headerFields</a>.</p>
                 * @param {number | string | sap.ui.core.Item} vHeaderField <p>The headerField to remove or its index or id</p>
                 * @returns sap.ui.core.Item <p>The removed headerField or <code>null</code></p>
                 */
                removeHeaderField(vHeaderField: number | string | sap.ui.core.Item): sap.ui.core.Item;
                /**
                 * <p>Removes a incompleteItem from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIncompleteItems" href="#/api/sap.m.upload.UploadSet/methods/getIncompleteItems">incompleteItems</a>.</p>
                 * @param {number | string | sap.m.upload.UploadSetItem} vIncompleteItem <p>The incompleteItem to remove or its index or id</p>
                 * @returns sap.m.upload.UploadSetItem <p>The removed incompleteItem or <code>null</code></p>
                 */
                removeIncompleteItem(vIncompleteItem: number | string | sap.m.upload.UploadSetItem): sap.m.upload.UploadSetItem;
                /**
                 * <p>Removes a item from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getItems" href="#/api/sap.m.upload.UploadSet/methods/getItems">items</a>.</p>
                 * @param {number | string | sap.m.upload.UploadSetItem} vItem <p>The item to remove or its index or id</p>
                 * @returns sap.m.upload.UploadSetItem <p>The removed item or <code>null</code></p>
                 */
                removeItem(vItem: number | string | sap.m.upload.UploadSetItem): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileTypes" href="#/api/sap.m.upload.UploadSet/methods/getFileTypes">fileTypes</a>.</p><p>Allowed file types for files to be uploaded. <br>If this property is not set, any file can be uploaded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string[]} sFileTypes <p>New value for property <code>fileTypes</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFileTypes(sFileTypes: string[]): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getInstantUpload" href="#/api/sap.m.upload.UploadSet/methods/getInstantUpload">instantUpload</a>.</p><p>Defines whether the upload process should be triggered as soon as the file is added.<br> If set to <code>false</code>, no upload is triggered when a file is added.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bInstantUpload <p>New value for property <code>instantUpload</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setInstantUpload(bInstantUpload: boolean): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxFileNameLength" href="#/api/sap.m.upload.UploadSet/methods/getMaxFileNameLength">maxFileNameLength</a>.</p><p>Maximum length of names of files to be uploaded. <br>If set to <code>null</code> or <code>0</code>, any files can be uploaded, regardless of their names length.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {number} iMaxFileNameLength <p>New value for property <code>maxFileNameLength</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMaxFileNameLength(iMaxFileNameLength: number): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMaxFileSize" href="#/api/sap.m.upload.UploadSet/methods/getMaxFileSize">maxFileSize</a>.</p><p>Size limit in megabytes for files to be uploaded. <br>If set to <code>null</code> or <code>0</code>, files of any size can be uploaded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {number} fMaxFileSize <p>New value for property <code>maxFileSize</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMaxFileSize(fMaxFileSize: number): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMediaTypes" href="#/api/sap.m.upload.UploadSet/methods/getMediaTypes">mediaTypes</a>.</p><p>Allowed media types for files to be uploaded. <br>If this property is not set, any file can be uploaded.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string[]} sMediaTypes <p>New value for property <code>mediaTypes</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMediaTypes(sMediaTypes: string[]): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataDescription" href="#/api/sap.m.upload.UploadSet/methods/getNoDataDescription">noDataDescription</a>.</p><p>Defines custom text for the 'No data' description label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sNoDataDescription <p>New value for property <code>noDataDescription</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setNoDataDescription(sNoDataDescription: string): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoDataText" href="#/api/sap.m.upload.UploadSet/methods/getNoDataText">noDataText</a>.</p><p>Defines custom text for the 'No data' text label.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sNoDataText <p>New value for property <code>noDataText</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setNoDataText(sNoDataText: string): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getShowIcons" href="#/api/sap.m.upload.UploadSet/methods/getShowIcons">showIcons</a>.</p><p>Defines whether file icons should be displayed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bShowIcons <p>New value for property <code>showIcons</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setShowIcons(bShowIcons: boolean): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTerminationEnabled" href="#/api/sap.m.upload.UploadSet/methods/getTerminationEnabled">terminationEnabled</a>.</p><p>Defines whether it is allowed to terminate the upload process.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bTerminationEnabled <p>New value for property <code>terminationEnabled</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setTerminationEnabled(bTerminationEnabled: boolean): sap.m.upload.UploadSet;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getToolbar" href="#/api/sap.m.upload.UploadSet/methods/getToolbar">toolbar</a>.</p>
                 * @param {sap.m.OverflowToolbar} oToolbar <p>The toolbar to set</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setToolbar(oToolbar: sap.m.OverflowToolbar): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadEnabled" href="#/api/sap.m.upload.UploadSet/methods/getUploadEnabled">uploadEnabled</a>.</p><p>Defines whether the upload action is allowed.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bUploadEnabled <p>New value for property <code>uploadEnabled</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUploadEnabled(bUploadEnabled: boolean): sap.m.upload.UploadSet;
                /**
                 * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploader" href="#/api/sap.m.upload.UploadSet/methods/getUploader">uploader</a>.</p>
                 * @param {sap.m.upload.Uploader} oUploader <p>The uploader to set</p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUploader(oUploader: sap.m.upload.Uploader): sap.m.upload.UploadSet;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadUrl" href="#/api/sap.m.upload.UploadSet/methods/getUploadUrl">uploadUrl</a>.</p><p>URL where the uploaded files will be stored.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sUploadUrl <p>New value for property <code>uploadUrl</code></p>
                 * @returns sap.m.upload.UploadSet <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUploadUrl(sUploadUrl: string): sap.m.upload.UploadSet;
                /**
                 * <p>Starts uploading all files that comply with the restrictions defined in the <code>fileTypes</code>, <code>maxFileNameLength</code>, <code>maxFileSize</code>, and <code>mediaTypes</code> properties. <br>This method works only when the <code>uploadEnabled</code> property is set to <code>true</code>.</p>
                 */
                upload(): void;
                /**
                 * <p>Starts uploading the file if it complies with the restrictions defined in the <code>fileTypes</code>, <code>maxFileNameLength</code>, <code>maxFileSize</code>, and <code>mediaTypes</code> properties. <br>This method works only when the <code>uploadEnabled</code> property is set to <code>true</code>.</p>
                 * @param {any} oItem <p>File to upload.</p>
                 */
                uploadItem(oItem: any): void;
            }
            /**
             * <p>Item that represents one file to be uploaded using the <a target="_self" class="jsdoclink" href="#/api/sap.m.upload.UploadSet">sap.m.upload.UploadSet</a> control.</p>
             */
            export class UploadSetItem extends sap.ui.core.Element {
                /**
                 * <p>Constructor for a new UploadSetItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
                 * @param {string} sId <p>ID for the new control, will be generated automatically if no ID is provided.</p>
                 * @param {any} mSettings <p>Initial settings for the new control.</p>
                 */
                constructor(sId?: string, mSettings?: any);
                /**
                 * <p>Adds some attribute to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p>
                 * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addAttribute(oAttribute: sap.m.ObjectAttribute): sap.m.upload.UploadSetItem;
                /**
                 * <p>Adds some marker to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p>
                 * @param {sap.m.ObjectMarker} oMarker <p>The marker to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addMarker(oMarker: sap.m.ObjectMarker): sap.m.upload.UploadSetItem;
                /**
                 * <p>Adds some status to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p>
                 * @param {sap.m.ObjectStatus} oStatus <p>The status to add; if empty, nothing is inserted</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                addStatus(oStatus: sap.m.ObjectStatus): sap.m.upload.UploadSetItem;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="openPressed" href="#/api/sap.m.upload.UploadSetItem/events/openPressed">openPressed</a> event of this <code>sap.m.upload.UploadSetItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSetItem</code> itself.</p><p>This event is fired when an open action is invoked on an item.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSetItem</code> itself</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachOpenPressed(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSetItem;
                /**
                 * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removePressed" href="#/api/sap.m.upload.UploadSetItem/events/removePressed">removePressed</a> event of this <code>sap.m.upload.UploadSetItem</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.m.upload.UploadSetItem</code> itself.</p><p>This event is fired when a remove action is invoked on an item.</p>
                 * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
                 * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
                 * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.m.upload.UploadSetItem</code> itself</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                attachRemovePressed(oData: any, fnFunction: Function, oListener?: any): sap.m.upload.UploadSetItem;
                /**
                 * <p>Destroys all the attributes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyAttributes(): sap.m.upload.UploadSetItem;
                /**
                 * <p>Destroys all the markers in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyMarkers(): sap.m.upload.UploadSetItem;
                /**
                 * <p>Destroys all the statuses in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                destroyStatuses(): sap.m.upload.UploadSetItem;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="openPressed" href="#/api/sap.m.upload.UploadSetItem/events/openPressed">openPressed</a> event of this <code>sap.m.upload.UploadSetItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachOpenPressed(fnFunction: Function, oListener?: any): sap.m.upload.UploadSetItem;
                /**
                 * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removePressed" href="#/api/sap.m.upload.UploadSetItem/events/removePressed">removePressed</a> event of this <code>sap.m.upload.UploadSetItem</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
                 * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
                 * @param {any} oListener <p>Context object on which the given function had to be called</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                detachRemovePressed(fnFunction: Function, oListener?: any): sap.m.upload.UploadSetItem;
                /**
                 * <p>Downloads the item. Only possible when the item has a valid URL specified in the <code>url</code> property.</p>
                 * @param {boolean} bAskForLocation <p>Whether to ask for a location where to download the file or not.</p>
                 * @returns boolean <p><code>true</code> if download is possible, <code>false</code> otherwise.</p>
                 */
                download(bAskForLocation: boolean): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="openPressed" href="#/api/sap.m.upload.UploadSetItem/events/openPressed">openPressed</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireOpenPressed(mParameters?: any): boolean;
                /**
                 * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="removePressed" href="#/api/sap.m.upload.UploadSetItem/events/removePressed">removePressed</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
                 * @param {any} mParameters <p>Parameters to pass along with the event</p>
                 * @returns boolean <p>Whether or not to prevent the default action</p>
                 */
                protected fireRemovePressed(mParameters?: any): boolean;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p><p>Attributes of the item.</p>
                 * @returns sap.m.ObjectAttribute[] 
                 */
                getAttributes(): sap.m.ObjectAttribute[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabledEdit" href="#/api/sap.m.upload.UploadSetItem/methods/getEnabledEdit">enabledEdit</a>.</p><p>Enables or disables the edit button.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>enabledEdit</code></p>
                 */
                getEnabledEdit(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabledRemove" href="#/api/sap.m.upload.UploadSetItem/methods/getEnabledRemove">enabledRemove</a>.</p><p>Enables or disables the remove button.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>enabledRemove</code></p>
                 */
                getEnabledRemove(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileName" href="#/api/sap.m.upload.UploadSetItem/methods/getFileName">fileName</a>.</p><p>Specifies the name of the uploaded file.</p>
                 * @returns string <p>Value of property <code>fileName</code></p>
                 */
                getFileName(): string;
                /**
                 * <p>Returns file object.</p>
                 * @returns File|Blob <p>File object.</p>
                 */
                getFileObject(): File | Blob;
                /**
                 * <p>Returns list item.</p>
                 * @returns sap.m.CustomListItem <p>List item.</p>
                 */
                getListItem(): sap.m.CustomListItem;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p><p>Markers of the item.</p>
                 * @returns sap.m.ObjectMarker[] 
                 */
                getMarkers(): sap.m.ObjectMarker[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMediaType" href="#/api/sap.m.upload.UploadSetItem/methods/getMediaType">mediaType</a>.</p><p>Specifies the MIME type of the file.</p>
                 * @returns string <p>Value of property <code>mediaType</code></p>
                 */
                getMediaType(): string;
                /**
                 * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p><p>Statuses of the item.</p>
                 * @returns sap.m.ObjectStatus[] 
                 */
                getStatuses(): sap.m.ObjectStatus[];
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThumbnailUrl" href="#/api/sap.m.upload.UploadSetItem/methods/getThumbnailUrl">thumbnailUrl</a>.</p><p>Specifies the URL where the thumbnail of the file is located. Can also be set to an SAPUI5 icon URL.</p>
                 * @returns string <p>Value of property <code>thumbnailUrl</code></p>
                 */
                getThumbnailUrl(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadState" href="#/api/sap.m.upload.UploadSetItem/methods/getUploadState">uploadState</a>.</p><p>State of the item relevant to its upload process.</p>
                 * @returns sap.m.UploadState <p>Value of property <code>uploadState</code></p>
                 */
                getUploadState(): sap.m.UploadState;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.upload.UploadSetItem/methods/getUrl">url</a>.</p><p>Specifies the URL where the file is located. <br>If the application doesn't provide a value for this property, the icon and the file name are not clickable in <a target="_self" class="jsdoclink" href="#/api/sap.m.upload.UploadSet">sap.m.upload.UploadSet</a>.</p>
                 * @returns string <p>Value of property <code>url</code></p>
                 */
                getUrl(): string;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleEdit" href="#/api/sap.m.upload.UploadSetItem/methods/getVisibleEdit">visibleEdit</a>.</p><p>Shows or hides the edit button.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>visibleEdit</code></p>
                 */
                getVisibleEdit(): boolean;
                /**
                 * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleRemove" href="#/api/sap.m.upload.UploadSetItem/methods/getVisibleRemove">visibleRemove</a>.</p><p>Shows or hides the remove button.</p><p>Default value is <code>true</code>.</p>
                 * @returns boolean <p>Value of property <code>visibleRemove</code></p>
                 */
                getVisibleRemove(): boolean;
                /**
                 * <p>Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfAttribute(oAttribute: sap.m.ObjectAttribute): number;
                /**
                 * <p>Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.ObjectMarker} oMarker <p>The marker whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfMarker(oMarker: sap.m.ObjectMarker): number;
                /**
                 * <p>Checks for the provided <code>sap.m.ObjectStatus</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>. and returns its index if found or -1 otherwise.</p>
                 * @param {sap.m.ObjectStatus} oStatus <p>The status whose index is looked for</p>
                 * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
                 */
                indexOfStatus(oStatus: sap.m.ObjectStatus): number;
                /**
                 * <p>Inserts a attribute into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p>
                 * @param {sap.m.ObjectAttribute} oAttribute <p>The attribute to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the attribute should be inserted at; for a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertAttribute(oAttribute: sap.m.ObjectAttribute, iIndex: number): sap.m.upload.UploadSetItem;
                /**
                 * <p>Inserts a marker into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p>
                 * @param {sap.m.ObjectMarker} oMarker <p>The marker to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the marker should be inserted at; for a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value greater than the current size of the aggregation, the marker is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertMarker(oMarker: sap.m.ObjectMarker, iIndex: number): sap.m.upload.UploadSetItem;
                /**
                 * <p>Inserts a status into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p>
                 * @param {sap.m.ObjectStatus} oStatus <p>The status to insert; if empty, nothing is inserted</p>
                 * @param {number} iIndex <p>The <code>0</code>-based index the status should be inserted at; for a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted at the last position</p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                insertStatus(oStatus: sap.m.ObjectStatus, iIndex: number): sap.m.upload.UploadSetItem;
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.ObjectAttribute[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllAttributes(): sap.m.ObjectAttribute[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.ObjectMarker[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllMarkers(): sap.m.ObjectMarker[];
                /**
                 * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
                 * @returns sap.m.ObjectStatus[] <p>An array of the removed elements (might be empty)</p>
                 */
                removeAllStatuses(): sap.m.ObjectStatus[];
                /**
                 * <p>Removes a attribute from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.m.upload.UploadSetItem/methods/getAttributes">attributes</a>.</p>
                 * @param {number | string | sap.m.ObjectAttribute} vAttribute <p>The attribute to remove or its index or id</p>
                 * @returns sap.m.ObjectAttribute <p>The removed attribute or <code>null</code></p>
                 */
                removeAttribute(vAttribute: number | string | sap.m.ObjectAttribute): sap.m.ObjectAttribute;
                /**
                 * <p>Removes a marker from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMarkers" href="#/api/sap.m.upload.UploadSetItem/methods/getMarkers">markers</a>.</p>
                 * @param {number | string | sap.m.ObjectMarker} vMarker <p>The marker to remove or its index or id</p>
                 * @returns sap.m.ObjectMarker <p>The removed marker or <code>null</code></p>
                 */
                removeMarker(vMarker: number | string | sap.m.ObjectMarker): sap.m.ObjectMarker;
                /**
                 * <p>Removes a status from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getStatuses" href="#/api/sap.m.upload.UploadSetItem/methods/getStatuses">statuses</a>.</p>
                 * @param {number | string | sap.m.ObjectStatus} vStatus <p>The status to remove or its index or id</p>
                 * @returns sap.m.ObjectStatus <p>The removed status or <code>null</code></p>
                 */
                removeStatus(vStatus: number | string | sap.m.ObjectStatus): sap.m.ObjectStatus;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabledEdit" href="#/api/sap.m.upload.UploadSetItem/methods/getEnabledEdit">enabledEdit</a>.</p><p>Enables or disables the edit button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bEnabledEdit <p>New value for property <code>enabledEdit</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEnabledEdit(bEnabledEdit: boolean): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabledRemove" href="#/api/sap.m.upload.UploadSetItem/methods/getEnabledRemove">enabledRemove</a>.</p><p>Enables or disables the remove button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bEnabledRemove <p>New value for property <code>enabledRemove</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setEnabledRemove(bEnabledRemove: boolean): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileName" href="#/api/sap.m.upload.UploadSetItem/methods/getFileName">fileName</a>.</p><p>Specifies the name of the uploaded file.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sFileName <p>New value for property <code>fileName</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setFileName(sFileName: string): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMediaType" href="#/api/sap.m.upload.UploadSetItem/methods/getMediaType">mediaType</a>.</p><p>Specifies the MIME type of the file.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sMediaType <p>New value for property <code>mediaType</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setMediaType(sMediaType: string): sap.m.upload.UploadSetItem;
                /**
                 * <p>Set current progress.</p>
                 * @param {number} iProgress <p>Current progress.</p>
                 * @returns sap.m.upload.UploadSetItem <p>Returns instance for chaining.</p>
                 */
                setProgress(iProgress: number): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getThumbnailUrl" href="#/api/sap.m.upload.UploadSetItem/methods/getThumbnailUrl">thumbnailUrl</a>.</p><p>Specifies the URL where the thumbnail of the file is located. Can also be set to an SAPUI5 icon URL.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sThumbnailUrl <p>New value for property <code>thumbnailUrl</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setThumbnailUrl(sThumbnailUrl: string): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUploadState" href="#/api/sap.m.upload.UploadSetItem/methods/getUploadState">uploadState</a>.</p><p>State of the item relevant to its upload process.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {sap.m.UploadState} sUploadState <p>New value for property <code>uploadState</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUploadState(sUploadState: sap.m.UploadState): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.m.upload.UploadSetItem/methods/getUrl">url</a>.</p><p>Specifies the URL where the file is located. <br>If the application doesn't provide a value for this property, the icon and the file name are not clickable in <a target="_self" class="jsdoclink" href="#/api/sap.m.upload.UploadSet">sap.m.upload.UploadSet</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
                 * @param {string} sUrl <p>New value for property <code>url</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setUrl(sUrl: string): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleEdit" href="#/api/sap.m.upload.UploadSetItem/methods/getVisibleEdit">visibleEdit</a>.</p><p>Shows or hides the edit button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bVisibleEdit <p>New value for property <code>visibleEdit</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setVisibleEdit(bVisibleEdit: boolean): sap.m.upload.UploadSetItem;
                /**
                 * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisibleRemove" href="#/api/sap.m.upload.UploadSetItem/methods/getVisibleRemove">visibleRemove</a>.</p><p>Shows or hides the remove button.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
                 * @param {boolean} bVisibleRemove <p>New value for property <code>visibleRemove</code></p>
                 * @returns sap.m.upload.UploadSetItem <p>Reference to <code>this</code> in order to allow method chaining</p>
                 */
                setVisibleRemove(bVisibleRemove: boolean): sap.m.upload.UploadSetItem;
            }
        }
    }
}
