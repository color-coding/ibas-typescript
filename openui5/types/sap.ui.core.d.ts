/**
 * @license
 * Copyright Color-Coding Studio. All Rights Reserved.
 *
 * Use of this source code is governed by an Apache License, Version 2.0
 * that can be found in the LICENSE file at http://www.apache.org/licenses/LICENSE-2.0
 */
/**
 * <p><p>Root namespace for JavaScript functionality provided by SAP SE.</p><p>The <code>sap</code> namespace is automatically registered with the OpenAjax hub if it exists.</p></p>
 */
declare namespace sap {
}
declare namespace sap {
  /**
   * <p><p>The <code>sap.ui</code> namespace is the central OpenAjax compliant entry point for UI related JavaScript functionality provided by SAP.</p></p>
   */
  namespace ui {
    /**
     * <p>Defines a JavaScript module with its ID, its dependencies and a module export value or factory.</p><p>The typical and only suggested usage of this method is to have one single, top level call to <code>sap.ui.define</code> in one JavaScript resource (file). When a module is requested by its module ID for the first time, the corresponding resource is determined from the ID and the current <a target="_self" class="jsdoclink" href="#/api/sap.ui.loader/methods/sap.ui.loader.config">configuration</a>. The resource will be loaded and executed which in turn will execute the top level <code>sap.ui.define</code> call.</p><p>If the module ID was omitted from that call, it will be substituted by the ID that was used to request the module. As a preparation step, the dependencies as well as their transitive dependencies, will be loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was given as <code>vFactory</code>, that value will be the module value. If a function was given, that function will be called (providing the module exports of the declared dependencies as parameters to the function) and its return value will be used as module export value. The framework internally associates the resulting value with the module ID and provides it to the original requester of the module. Whenever the module is requested again, the same export value will be returned (modules are executed only once).</p><p><i>Example:</i><br> The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js', it can be requested with the ID 'sap/mylib/SomeClass'. <pre>
      sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
    
        // create a new class
        var SomeClass = function() {};
    
        // add methods to its prototype
        SomeClass.prototype.foo = function() {
    
            // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
            var mSettings = Helper.foo();
    
            // create and return an sap.m.Bar (using its local name 'Bar')
            return new Bar(mSettings);
    
        }
    
        // return the class as module value
        return SomeClass;
    
      });
    </pre></p><p>In another module or in an application HTML page, the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.require" href="#/api/sap.ui/methods/sap.ui.require">sap.ui.require</a> API can be used to load the sap/mylib/Something module and to work with it:</p><p><pre>
    sap.ui.require(['sap/mylib/Something'], function(Something) {
    
      // instantiate a Something and call foo() on it
      new Something().foo();
    
    });
    </pre></p><h3>Module Name Syntax</h3><p><code>sap.ui.define</code> uses a simplified variant of the <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.getResourcePath">unified resource name</a> syntax for the module's own name as well as for its dependencies. The only difference to that syntax is, that for <code>sap.ui.define</code> and <code>sap.ui.require</code>, the extension (which always would be '.js') has to be omitted. Both methods always add this extension internally.</p><p>As a convenience, the name of a dependency can start with the segment './' which will be replaced by the name of the package that contains the currently defined module (relative name).</p><p>It is best practice to omit the name of the defined module (first parameter) and to use relative names for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming of packages and allows to map them to a different namespace.</p><h3>Dependency to Modules</h3><p>If a dependencies array is given, each entry represents the name of another module that the currently defined module depends on. All dependency modules are loaded before the export of the currently defined module is determined. The module export of each dependency module will be provided as a parameter to a factory function, the order of the parameters will match the order of the modules in the dependencies array.</p><p><b>Note:</b> The order in which the dependency modules are <i>executed</i> is <b>not</b> defined by the order in the dependencies array! The execution order is affected by dependencies <i>between</i> the dependency modules as well as by their current state (whether a module already has been loaded or not). Neither module implementations nor dependents that require a module set must make any assumption about the execution order (other than expressed by their dependencies).</p><p><b>Note:</b> A static module export (a literal provided to <code>sap.ui.define</code>) cannot depend on the module exports of the dependency modules as it has to be calculated before the dependencies are resolved. As an alternative, modules can define a factory function, calculate a static export value in that function, potentially based on the dependencies, and return the result as module export value. The same approach must be taken when the module export is supposed to be a function.</p><h3>Asynchronous Contract</h3><p><code>sap.ui.define</code> is designed to support real Asynchronous Module Definitions (AMD) in future, although it internally still might use synchronous module loading, depending on configuration and context. However, callers of <code>sap.ui.define</code> must never rely on any synchronous behavior that they might observe in a specific test scenario.</p><p>For example, callers of <code>sap.ui.define</code> must not use the module export value immediately after invoking <code>sap.ui.define</code>:</p><p><pre>
      // COUNTER EXAMPLE HOW __NOT__ TO DO IT
    
      // define a class Something as AMD module
      sap.ui.define('Something', [], function() {
        var Something = function() {};
        return Something;
      });
    
      // DON'T DO THAT!
      // accessing the class _synchronously_ after sap.ui.define was called
      new Something();
    
    </pre></p><p>Applications that need to ensure synchronous module definition or synchronous loading of dependencies <b>MUST</b> use the deprecated legacy APIs <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.declare">jQuery.sap.declare</a> and <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.require">jQuery.sap.require</a>.</p><h3>(No) Global References</h3><p>To be in line with AMD best practices, modules defined with <code>sap.ui.define</code> should not make any use of global variables if those variables are also available as module exports. Instead, they should add dependencies to those modules and use the corresponding parameter of the factory function to access the module exports.</p><p>As the current programming model and the documentation of UI5 heavily rely on global names, there will be a transition phase where UI5 enables AMD modules and local references to module exports in parallel to the old global names. The fourth parameter of <code>sap.ui.define</code> has been added to support that transition phase. When this parameter is set to true, the framework provides two additional features</p><p><ol> <li>Before the factory function is called, the existence of the global parent namespace for the current module is ensured</li> <li>The module export returned by the module's factory function will be automatically exported under the global name which is derived from the ID of the module</li> </ol></p><p>The parameter lets the framework know whether any of those two operations is needed or not. In future versions of UI5, a central configuration option is planned to suppress those 'exports'.</p><h3>Third Party Modules</h3><p> Although third party modules don't use UI5 APIs, they still can be listed as dependencies in a <code>sap.ui.define</code> call. They will be requested and executed like UI5 modules, but to make their exports available, so called <em>shims</em> have to be defined.</p><p>Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now it is necessary to fully support UI5 applications that rely on global names for such modules.</p><p>For third-party modules that UI5 delivers (e.g. those in namespace <code>sap/ui/thirdparty/</code>), the necessary shims are defined by UI5 itself by executing the private module <code>ui5loader-autoconfig.js</code> during bootstrap.</p><p>Example: <pre>
      // module 'Something' wants to use third party library 'URI.js'
      // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
      // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value
      // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js
      sap.ui.loader.config({
        shim: {
          'sap/ui/thirdparty/URI': {
             amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders
             exports: 'URI' // name of the global variable under which URI.js exports its module value
          }
        }
      });
    
      // now the module can be retrieved like other modules
      sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
    
        new URIModuleValue(...); // same as the global 'URI' name: new URI(...)
    
        ...
      });
    </pre></p><h3>Differences to Standard AMD</h3><p>The current implementation of <code>sap.ui.define</code> differs from the AMD specification (https://github.com/amdjs/amdjs-api) or from concrete AMD loaders like <code>requireJS</code> in several aspects: <ul> <li>The name <code>sap.ui.define</code> is different from the plain <code>define</code>. This has two reasons: first, it avoids the impression that <code>sap.ui.define</code> is an exact implementation of an AMD loader. And second, it allows the coexistence of an AMD loader (e.g. requireJS) and <code>sap.ui.define</code> in one application as long as UI5 or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect methods <code>define</code> and <code>require</code> to be available. Modules that use Unified Module Definition (UMD) syntax, can be loaded, but only when no AMD loader is present or when they expose their export also to the global namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them using the <code>amd:true</code> flag (see example above)</li> <li>Depending on configuration and the current context, <code>sap.ui.define</code> loads the dependencies of a module either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications that need to ensure synchronous loading of dependencies <b>MUST</b> use the deprecated legacy APIs like <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.require">jQuery.sap.require</a>.</li> <li><code>sap.ui.define</code> does not support plugins to use other file types, formats or protocols. It is not planned to support this in future</li> <li><code>sap.ui.define</code> does not support absolute URLs as module names (dependencies) nor does it allow module names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered that points to that URL (or to a prefix of it).</li> <li><code>sap.ui.define</code> does <b>not</b> support the 'sugar' of requireJS where CommonJS style dependency declarations using <code>sap.ui.require("something")</code> are automagically converted into <code>sap.ui.define</code> dependencies before executing the factory function.</li> </ul></p><h3>Limitations, Design Considerations</h3><p> <ul> <li><b>Limitation</b>: as dependency management is not supported for Non-UI5 modules, the only way to ensure proper execution order for such modules currently is to rely on the order in the dependency array. Obviously, this only works as long as <code>sap.ui.define</code> uses synchronous loading. It will be enhanced when asynchronous loading is implemented.</li> <li>It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout of 0). But this would have invalidated the current migration scenario where a sync <code>jQuery.sap.require</code> call can load a <code>sap.ui.define</code>'ed module. If the module definition would not execute synchronously, the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)</li> <li>A single file must not contain multiple calls to <code>sap.ui.define</code>. Multiple calls currently are only supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of how this works might be changed in future implementations and are not part of the API contract</li> </ul><br><br>References: <ul><li>https://github.com/amdjs/amdjs-api</li></ul></p>
     * @param {string} sModuleName <p>ID of the module in simplified resource name syntax. When omitted, the loader determines the ID from the request.</p>
     * @param {string[]} aDependencies <p>List of dependencies of the module</p>
     * @param {Function | any} vFactory <p>The module export value or a function that calculates that value</p>
     * @param {boolean} bExport <p>Whether an export to global names is required - should be used by SAP-owned code only</p>
     */
    function define(sModuleName: string, aDependencies: string[], vFactory: Function | any, bExport?: boolean): void;
    /**
     * <p>Retrieve the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core">SAPUI5 Core</a> instance for the current window.</p>
     * @returns sap.ui.core.Core <p>the API of the current SAPUI5 Core instance.</p>
     */
    function getCore(): sap.ui.core.Core;
    /**
     * <p>Resolves one or more module dependencies.</p><h3>Synchronous Retrieval of a Single Module Export Value (Probing)</h3><p>When called with a single string, that string is assumed to be the ID of an already loaded module and the export of that module is returned. If the module has not been loaded yet, or if it is a Non-UI5 module (e.g. third-party module) without a shim, <code>undefined</code> is returned.</p><p>This signature variant allows synchronous access to module exports without initiating module loading.</p><p>Sample: <pre>
      var JSONModel = sap.ui.require("sap/ui/model/json/JSONModel");
    </pre></p><p>For modules that are known to be UI5 modules, this signature variant can be used to check whether the module has been loaded.</p><h3>Asynchronous Loading of Multiple Modules</h3><p>If an array of strings is given and (optionally) a callback function, then the strings are interpreted as module IDs and the corresponding modules (and their transitive dependencies) are loaded. Then the callback function will be called asynchronously. The module exports of the specified modules will be provided as parameters to the callback function in the same order in which they appeared in the dependencies array.</p><p>The return value for the asynchronous use case is <code>undefined</code>.</p><p><pre>
      sap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel,UIComponent) {
    
        var MyComponent = UIComponent.extend('MyComponent', {
          ...
        });
        ...
    
      });
    </pre></p><p>This method uses the same variation of the <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.getResourcePath">unified resource name</a> syntax that <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.define">sap.ui.define</a> uses: module names are specified without the implicit extension '.js'. Relative module names are not supported.</p>
     * @param {string | string[]} vDependencies <p>Dependency (dependencies) to resolve</p>
     * @param {Function} fnCallback <p>Callback function to execute after resolving an array of dependencies</p>
     * @param {Function} fnErrback <p>Callback function to execute if an error was detected while loading the dependencies or executing the factory function. Note that due to browser limitations not all errors will be reported via this callback. In general, module loading is designed for the non-error case. Error handling is not complete.</p>
     * @returns any|undefined <p>A single module export value (sync probing variant) or undefined (async loading variant)</p>
     */
    function require(vDependencies: string | string[], fnCallback?: Function, fnErrback?: Function): any | undefined;
    /**
     * <p>Calculates a URL from the provided resource name.</p><p>The calculation takes any configured ID mappings or resource paths into account (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.loader/methods/sap.ui.loader.config">config options map and paths</a>. It also supports relative segments such as <code>./</code> and <code>../</code> within the path, but not at its beginning. If relative navigation would cross the root namespace (e.g. <code>sap.ui.require.toUrl("../")</code>) or when the resource name starts with a slash or with a relative segment, an error is thrown.</p><p><b>Note:</b> <code>toUrl</code> does not resolve the returned URL; whether it is an absolute URL or a relative URL depends on the configured <code>baseUrl</code> and <code>paths</code>.<br><br>References: <ul><li>https://github.com/amdjs/amdjs-api/wiki/require#requiretourlstring-</li></ul></p>
     * @param {string} sName <p>Name of a resource e.g. <code>'app/data.json'</code></p>
     * @returns string <p>Path to the resource, e.g. <code>'/home/app/data.json'</code></p>
     */
    function toUrl(sName: string): string;
    /**
     */
    namespace test {
      /**
       * <p>One Page Acceptance testing.</p>
       */
      export class Opa {
        /**
         * <p>Waits until all waitFor calls are done.</p>
         * @returns any <p>If the waiting was successful, the promise will be resolved. If not it will be rejected</p>
         */
        static emptyQueue(): any;
        /**
         * <p>Extends and overwrites default values of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa">sap.ui.test.Opa.config</a> field. Sample usage: <pre>
            <code>
                var oOpa = new Opa();
        
                // this statement will time out after 15 seconds and poll every 400ms
                // those two values come from the defaults of sap.ui.test.Opa.config
                oOpa.waitFor({
                });
        
                // All wait for statements added after this will take other defaults
                Opa.extendConfig({
                    timeout: 10,
                    pollingInterval: 100
                });
        
                // this statement will time out after 10 seconds and poll every 100 ms
                oOpa.waitFor({
                });
        
                // this statement will time out after 20 seconds and poll every 100 ms
                oOpa.waitFor({
                    timeout: 20;
                });
            </code>
        </pre></p>
         * @param {any} options <p>The values to be added to the existing config</p>
         */
        static extendConfig(options: any): void;
        /**
         * <p>Gives access to a singleton object you can save values in. Same as <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/getContext">sap.ui.test.Opa#getContext</a></p>
         * @returns any <p>the context object</p>
         */
        static getContext(): any;
        /**
         * <p>Reset Opa.config to its default values. All of the global values can be overwritten in an individual waitFor call.</p><p>The default values are: <ul> <li>arrangements: A new Opa instance</li> <li>actions: A new Opa instance</li> <li>assertions: A new Opa instance</li> <li>timeout : 15 seconds, 0 for infinite timeout</li> <li>pollingInterval: 400 milliseconds</li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li> <li> executionDelay: 0 or 50 (depending on the browser). The value is a number representing milliseconds. The executionDelay will slow down the execution of every single waitFor statement to be delayed by the number of milliseconds. This does not effect the polling interval it just adds an initial pause. Use this parameter to slow down OPA when you want to watch your test during development or checking the UI of your app. It is not recommended to use this parameter in any automated test executions. </li> <li>asyncPolling: false</li> </ul></p>
         */
        static resetConfig(): void;
        /**
         * <p>Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements registered by <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/waitFor">sap.ui.test.Opa#waitFor</a> will not be invoked anymore and the promise returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="emptyQueue" href="#/api/sap.ui.test.Opa/methods/emptyQueue">sap.ui.test.Opa.emptyQueue</a> will be rejected When it is called inside of a check in <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/waitFor">sap.ui.test.Opa#waitFor</a> the success function of this waitFor will not be called.</p>
         */
        static stopQueue(): void;
        /**
         * <p>This class will help you write acceptance tests in one page or single page applications. You can wait for certain conditions to be met.</p>
         * @param {any} extensionObject <p>An object containing properties and functions. The newly created Opa will be extended by these properties and functions using jQuery.extend.</p>
         */
        constructor(extensionObject?: any);
        /**
         * <p>A map of QUnit-style assertions to be used in an opaTest. Contains all methods available on QUnit.assert for the running QUnit version. Available assertions are: ok, equal, propEqual, deepEqual, strictEqual and their negative counterparts.</p><p>For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.opaQunit">sap.ui.test.opaQunit</a>.</p>
         */
        assert: { [key: string]: any };
        /**
         * <p>The global configuration of Opa. All of the global values can be overwritten in an individual <code>waitFor</code> call. The default values are: <ul> <li>arrangements: A new Opa instance</li> <li>actions: A new Opa instance</li> <li>assertions: A new Opa instance</li> <li>timeout : 15 seconds, 0 for infinite timeout</li> <li>pollingInterval: 400 milliseconds</li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li> <li>asyncPolling: false</li> </ul> You can either directly manipulate the config, or extend it using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="extendConfig" href="#/api/sap.ui.test.Opa/methods/extendConfig">sap.ui.test.Opa.extendConfig</a>.</p>
         */
        config: any;
        /**
         * <p>Calls the static emptyQueue function in the Opa namespace <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="emptyQueue" href="#/api/sap.ui.test.Opa/methods/emptyQueue">sap.ui.test.Opa.emptyQueue</a></p>
         */
        emptyQueue(): void;
        /**
         * <p>Calls the static extendConfig function in the Opa namespace <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="extendConfig" href="#/api/sap.ui.test.Opa/methods/extendConfig">sap.ui.test.Opa.extendConfig</a></p>
         */
        extendConfig(): void;
        /**
         * <p>Gives access to a singleton object you can save values in. This object will only be created once and it will never be destroyed. That means you can use it to save values you need in multiple separated tests.</p>
         * @returns any <p>the context object</p>
         */
        getContext(): any;
        /**
         * <p>Schedule a promise on the OPA queue.The promise will be executed in order with all waitFors - any subsequent waitFor will be executed after the promise is done. The promise is not directly chained, but instead its result is awaited in a new waitFor statement. This means that any "thenable" should be acceptable.</p>
         * @param {any | Promise<any>} oPromise <p>promise to schedule on the OPA queue</p>
         * @returns any <p>promise which is the result of a <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="waitFor" href="#/api/sap.ui.test.Opa/methods/waitFor">sap.ui.test.Opa.waitFor</a></p>
         */
        iWaitForPromise(oPromise: any | Promise<any>): any;
        /**
         * <p>Queues up a waitFor command for Opa. The Queue will not be emptied until <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="emptyQueue" href="#/api/sap.ui.test.Opa/methods/emptyQueue">sap.ui.test.Opa.emptyQueue</a> is called. If you are using <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.opaQunit">sap.ui.test.opaQunit</a>, emptyQueue will be called by the wrapped tests.</p><p>If you are using Opa5, waitFor takes additional parameters. They can be found here: <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5#waitFor</a>. Waits for a check condition to return true, in which case a success function will be called. If the timeout is reached before the check returns true, an error function will be called.</p>
         * @param {any} options <p>These contain check, success and error functions</p>
         * @returns any <p>A promise that gets resolved on success. If an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        waitFor(options: any): any;
      }
      /**
       * <p>UI5 extension of the OPA framework.</p><p>Helps you when writing tests for UI5 apps. Provides convenience to wait and retrieve for UI5 controls without relying on global IDs. Makes it easy to wait until your UI is in the state you need for testing, for example waiting for back-end data.</p>
       */
      export class Opa5 extends sap.ui.base.Object {
        /**
         * <p>Create a page object configured as arrangement, action and assertion to the Opa.config. Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help to structure your tests.</p>
         * @param {{ [key: string]: any }} mPageObjects 
         * @returns { [key: string]: any } <p>mPageObject The created page object. It will look like this: <pre><code>
         {
          &lt;your-page-object-name&gt; : {
              actions: // an instance of baseClass or Opa5 with all the actions defined above
              assertions: // an instance of baseClass or Opa5 with all the assertions defined above
          }
         }
        </code></pre></p>
         */
        static createPageObjects(mPageObjects: { [key: string]: any }): { [key: string]: any };
        /**
         * <p>Waits until all waitFor calls are done See <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/emptyQueue">sap.ui.test.Opa.emptyQueue</a> for the description</p>
         * @returns any <p>If the waiting was successful, the promise will be resolved. If not it will be rejected</p>
         */
        static emptyQueue(): any;
        /**
         * <p>Extends and overwrites default values of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa.config">sap.ui.test.Opa.config</a>. Most frequent usecase: <pre>
            <code>
                // Every waitFor will append this namespace in front of your viewName
                Opa5.extendConfig({
                   viewNamespace: "namespace.of.my.views."
                });
        
                var oOpa = new Opa5();
        
                // Looks for a control with the id "myButton" in a View with the name "namespace.of.my.views.Detail"
                oOpa.waitFor({
                     id: "myButton",
                     viewName: "Detail"
                });
        
                // Looks for a control with the id "myList" in a View with the name "namespace.of.my.views.Master"
                oOpa.waitFor({
                     id: "myList",
                     viewName: "Master"
                });
            </code>
        </pre></p><p>Sample usage: <pre>
            <code>
                var oOpa = new Opa5();
        
                // this statement will  will time out after 15 seconds and poll every 400ms.
                // those two values come from the defaults of {@link sap.ui.test.Opa.config}.
                oOpa.waitFor({
                });
        
                // All wait for statements added after this will take other defaults
                Opa5.extendConfig({
                    timeout: 10,
                    pollingInterval: 100
                });
        
                // this statement will time out after 10 seconds and poll every 100 ms
                oOpa.waitFor({
                });
        
                // this statement will time out after 20 seconds and poll every 100 ms
                oOpa.waitFor({
                    timeout: 20;
                });
            </code>
        </pre></p>
         * @param {any} options <p>The values to be added to the existing config</p>
         */
        static extendConfig(options: any): void;
        /**
         * <p>Gives access to a singleton object you can save values in. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/getContext">sap.ui.test.Opa.getContext</a> for the description</p>
         * @returns any <p>the context object</p>
         */
        static getContext(): any;
        /**
         * <p>Returns the HashChanger object in the current context. If an iframe is launched, it will return the iframe's HashChanger.</p>
         * @returns sap.ui.core.routing.HashChanger <p>The HashChanger instance</p>
         */
        static getHashChanger(): sap.ui.core.routing.HashChanger;
        /**
         * <p>Returns the jQuery object in the current context. If an iframe is launched, it will return the iframe's jQuery object.</p>
         * @returns any <p>The jQuery object</p>
         */
        static getJQuery(): any;
        /**
         * <p>Returns the Opa plugin used for retrieving controls. If an iframe is launched, it will return the iframe's plugin.</p>
         * @returns sap.ui.test.OpaPlugin <p>The plugin instance</p>
         */
        static getPlugin(): sap.ui.test.OpaPlugin;
        /**
         * <p>Return particular test lib config object. This method is intended to be used by test libraries to access their configuration provided by the test in the testLibs section in <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/sap.ui.test.Opa5.extendConfig">sap.ui.test.Opa5.extendConfig</a></p>
         * @param {string} sTestLibName <p>test library name</p>
         * @returns any <p>this test library config object or empty object if configuration is not provided</p>
         */
        static getTestLibConfig(sTestLibName: string): any;
        /**
         * <p>Returns the QUnit utils object in the current context. If an iframe is launched, it will return the iframe's QUnit utils.</p>
         * @returns sap.ui.test.qunit <p>The QUnit utils</p>
         */
        static getUtils(): any;
        /**
         * <p>Returns the window object in the current context. If an iframe is launched, it will return the iframe's window.</p>
         * @returns Window <p>The window of the iframe</p>
         */
        static getWindow(): Window;
        /**
         * <p>Starts an app in an iframe. Only works reliably if running on the same server.</p>
         * @param {string | any} vSourceOrOptions <p>The source URL of the iframe or, since 1.53, you can provide a startup configuration object as the only parameter.</p>
         * @param {number} iTimeout <p>The timeout for loading the iframe in seconds - default is 80.</p>
         * @param {boolean} autoWait <p>Since 1.53, activates autoWait while the application is starting up. This allows more time for application startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless of the global autoWait value, to prevent issues in existing tests.</p>
         * @param {string | number} width <p>Since 1.57, sets a fixed width for the iframe.</p>
         * @param {string | number} height <p>Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window dimensions.</p>
         * @returns any <p>A promise that gets resolved on success</p>
         */
        static iStartMyAppInAFrame(vSourceOrOptions: string | any, iTimeout?: number, autoWait?: boolean, width?: string | number, height?: string | number): any;
        /**
         * <p>Removes the iframe from the DOM and removes all the references to its objects. Use <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/hasAppStartedInAFrame">sap.ui.test.Opa5#hasAppStartedInAFrame</a> to ensure that an iframe has been started and teardown can be safely performed.</p>
         * @returns any <p>A promise that gets resolved on success. If no iframe has been created or an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        static iTeardownMyAppFrame(): any;
        /**
         * <p>Resets Opa.config to its default values. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5#waitFor</a> for the description Default values for OPA5 are: <ul> <li>viewNamespace: empty string</li> <li>arrangements: instance of OPA5</li> <li>actions: instance of OPA5</li> <li>assertions: instance of OPA5</li> <li>visible: true</li> <li>enabled: false</li> <li>timeout : 15 seconds, 0 for infinite timeout</li> <li>pollingInterval: 400 milliseconds</li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li> <li>autoWait: false - since 1.42</li> <li>appParams: object with URI parameters for the tested app - since 1.48</li> </ul></p>
         */
        static resetConfig(): void;
        /**
         * <p>Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements registered by <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5#waitFor</a> will not be invoked anymore and the promise returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/sap.ui.test.Opa5.emptyQueue">sap.ui.test.Opa5.emptyQueue</a> will be rejected. When its called inside of a check in <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5#waitFor</a> the success function of this waitFor will not be called.</p>
         */
        static stopQueue(): void;
        /**
         */
        constructor();
        /**
         * <p>A map of QUnit-style assertions to be used in an opaTest. Contains all methods available on QUnit.assert for the running QUnit version. Available assertions are: ok, equal, propEqual, deepEqual, strictEqual and their negative counterparts. You can define custom OPA5 assertions in the extensions section of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.test.Opa5.extendConfig" href="#/api/sap.ui.test.Opa5/methods/sap.ui.test.Opa5.extendConfig">sap.ui.test.Opa5.extendConfig</a></p><p>Example usage: oOpa5.waitFor({ success: function () { Opa5.assert.ok(true, "Should be true"); } });</p><p>For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.opaQunit">sap.ui.test.opaQunit</a>.</p>
         */
        assert: { [key: string]: any };
        /**
         * <p>Checks if the application has been started using <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyAppInAFrame">sap.ui.test.Opa5#iStartMyAppInAFrame</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyUIComponent">sap.ui.test.Opa5#iStartMyUIComponent</a></p>
         * @returns boolean <p>A boolean indicating whether the application has been started regardless of how it was started</p>
         */
        hasAppStarted(): boolean;
        /**
         * <p>Checks if the application has been started using <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyAppInAFrame">sap.ui.test.Opa5#iStartMyAppInAFrame</a></p>
         * @returns boolean <p>A boolean indicating whether the application has been started in an iframe</p>
         */
        hasAppStartedInAFrame(): boolean;
        /**
         * <p>Checks if the application has been started using <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyUIComponent">sap.ui.test.Opa5#iStartMyUIComponent</a></p>
         * @returns boolean <p>A boolean indicating whether the application has been started as a UIComponent</p>
         */
        hasUIComponentStarted(): boolean;
        /**
         * <p>Starts an app in an iframe. Only works reliably if running on the same server.</p>
         * @param {string | any} vSourceOrOptions <p>The source URL of the iframe or, since 1.53, you can provide a startup configuration object as the only parameter.</p>
         * @param {number} iTimeout <p>The timeout for loading the iframe in seconds - default is 80</p>
         * @param {boolean} autoWait <p>Since 1.53, activates autoWait while the application is starting up. This allows more time for application startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless of the global autoWait value, to prevent issues in existing tests.</p>
         * @param {string | number} width <p>Since 1.57, sets a fixed width for the iframe.</p>
         * @param {string | number} height <p>Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window dimensions.</p>
         * @returns any <p>A promise that gets resolved on success</p>
         */
        iStartMyAppInAFrame(vSourceOrOptions: string | any, iTimeout?: number, autoWait?: boolean, width?: string | number, height?: string | number): any;
        /**
         * <p>Starts a UIComponent.</p>
         * @param {any} oOptions <p>An Object that contains the configuration for starting up a UIComponent.</p>
         * @returns any <p>A promise that gets resolved on success.</p>
         */
        iStartMyUIComponent(oOptions: any): any;
        /**
         * <p>Tears down the started application regardless of how it was started. Removes the iframe launched by <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyAppInAFrame">sap.ui.test.Opa5#iStartMyAppInAFrame</a> or destroys the UIComponent launched by <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/iStartMyUIComponent">sap.ui.test.Opa5#iStartMyUIComponent</a>. This function is designed to make the test's teardown independent of the startup. Use <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/hasAppStarted">sap.ui.test.Opa5#hasAppStarted</a> to ensure that the application has been started and teardown can be safely performed.</p>
         * @returns any <p>A promise that gets resolved on success. If nothing has been started or an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        iTeardownMyApp(): any;
        /**
         * <p>Removes the iframe from the DOM and removes all the references to its objects Use <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/hasAppStartedInAFrame">sap.ui.test.Opa5#hasAppStartedInAFrame</a> to ensure that an iframe has been started and teardown can be safely performed.</p>
         * @returns any <p>A promise that gets resolved on success. If no iframe has been created or an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        iTeardownMyAppFrame(): any;
        /**
         * <p>Destroys the UIComponent and removes the div from the dom like all the references on its objects. Use <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/hasUIComponentStarted">sap.ui.test.Opa5#hasUIComponentStarted</a> to ensure that a UIComponent has been started and teardown can be safely performed.</p>
         * @returns any <p>a promise that gets resolved on success. If no UIComponent has been started or an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        iTeardownMyUIComponent(): any;
        /**
         * <p>Schedule a promise on the OPA5 queue.The promise will be executed in order with all waitFors - any subsequent waitFor will be executed after the promise is done. The promise is not directly chained, but instead its result is awaited in a new waitFor statement. This means that any "thenable" should be acceptable.</p>
         * @param {any | Promise<any>} oPromise <p>promise to schedule on the OPA5 queue</p>
         * @returns any <p>promise which is the result of a <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="waitFor" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5.waitFor</a></p>
         */
        iWaitForPromise(oPromise: any | Promise<any>): any;
        /**
         * <p>Takes the same parameters as <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa/methods/waitFor">sap.ui.test.Opa#waitFor</a>. Also allows you to specify additional parameters:</p>
         * @param {any} options <p>An Object containing conditions for waiting and callbacks</p>
         * @returns any <p>A promise that gets resolved on success. If an error occurs, the promise is rejected with the options object. A detailed error message containing the stack trace and Opa logs is available in options.errorMessage.</p>
         */
        waitFor(options: any): any;
      }
      /**
       * <p>OPA extension interface.</p>
       */
      export class OpaExtension extends sap.ui.base.Object {
        /**
         * <p>OPA extension interface.</p>
         */
        constructor();
      }
      /**
       * <p>A Plugin to search UI5 controls.</p>
       */
      export class OpaPlugin extends sap.ui.base.Object {
        /**
         */
        constructor();
        /**
         * <p>Gets all the controls or elements of a certain type that are currently instantiated. If the type is omitted, all controls and elements are returned.</p>
         * @param {Function} fnConstructorType <p>the control type, e.g: sap.m.CheckBox</p>
         * @param {string} sControlType <p>optional control type name, e.g: "sap.m.CheckBox"</p>
         * @returns any[] <p>an array of the found controls (can be empty)</p>
         */
        getAllControls(fnConstructorType?: Function, sControlType?: string): any[];
        /**
         * <p>Find a control by its global ID</p>
         * @param {any} oOptions <p>a map of match conditions. Must contain an id property</p>
         * @param {undefined} oOptions <p>must contain ID property of type string, regex or array of strings; optionally it can contain a controlType property.</p>
         * @returns sap.ui.core.Element|sap.ui.core.Element[] <p>all matching controls <ul> <li>if a oOptions.id is a string, will return the single matching control or null if no controls match</li> <li>otherwise, will return an array of matching controls, or an empty array, if no controls match</li> </ul></p>
         */
        getControlByGlobalId(oOptions: any | undefined): sap.ui.core.Element | sap.ui.core.Element[];
        /**
         * <p>Gets the constructor function of a certain controlType</p>
         * @param {string} sControlType <p>the name of the type eg: "sap.m.Button"</p>
         * @returns null|function <p>When the type is loaded, the contstructor is returned, if it is a lazy stub or not yet loaded, null will be returned and there will be a log entry.</p>
         */
        getControlConstructor(sControlType: string): null | Function;
        /**
         * <p>Gets a control inside the view (same as calling oView.byId) Returns all matching controls inside a view (also nested views and their children).<br/> The view can be specified by viewName, viewNamespace, viewId, and any combination of three. eg : { id : "foo" } will search globally for a control with the ID foo<br/> eg : { id : "foo" , viewName : "bar" } will search for a control with the ID foo inside the view with the name bar<br/> eg : { viewName : "bar" } will return all the controls inside the view with the name bar<br/> eg : { viewName : "bar", controlType : sap.m.Button } will return all the Buttons inside a view with the name bar<br/> eg : { viewName : "bar", viewNamespace : "baz." } will return all the Controls in the view with the name baz.bar<br/> eg : { viewId : "viewBar" } will return all the controls inside the view with the ID viewBar<br/></p>
         * @param {any} oOptions <p>can contain a viewName, viewNamespace, viewId, fragmentId, id and controlType properties. oOptions.id can be string, array or regular expression</p>
         * @returns sap.ui.core.Element|sap.ui.core.Element[]|null <p>If oOptions.id is a string, will return the control with such an ID or null.<br/> If the view is not found or no control matches the given criteria, will return an empty array <br/> Otherwise, will return an array of matching controls</p>
         */
        getControlInView(oOptions: any): sap.ui.core.Element | sap.ui.core.Element[] | null;
        /**
         * <p>Find a control matching the provided options autowait and Interactable matcher will be enforced if neccessary</p>
         * @param {any} oOptions <p>a map of options used to describe the control you are looking for.</p>
         * @returns sap.ui.core.Element|sap.ui.core.Element[]|null <p><ul> <li>if a oOptions.id is a string, will return the single matching control or null if no controls match</li> <li>otherwise, will return an array of matching controls, or an empty array, if no controls match</li> </ul></p>
         */
        getMatchingControls(oOptions?: any): sap.ui.core.Element | sap.ui.core.Element[] | null;
        /**
         * <p>Returns the view with a specific name. The result should be a unique view. If there are multiple visible views with that name, none will be returned.</p>
         * @param {string} sViewName <p>the name of the view</p>
         * @returns sap.ui.core.mvc.View <p>or undefined</p>
         */
        getView(sViewName: string): sap.ui.core.mvc.View;
      }
      /**
       * <p>Page Object Factory.</p>
       */
      export class PageObjectFactory extends sap.ui.base.Object {
        /**
         */
        constructor();
      }
      /**
       * <p>Record-and-replay implementation for OPA5.</p>
       */
      export class RecordReplay extends sap.ui.base.Object {
        /**
         * <p>Find the best control selector for a DOM element. A selector uniquely represents a single element. The 'best' selector is the one with which it is most likely to uniquely identify a control with the least possible inspection of the control tree.</p>
         * @param {any} oOptions <p>Options to influence the generation of the selector</p>
         * @returns any <p>Promise for control selector or error</p>
         */
        static findControlSelectorByDOMElement(oOptions: any): any | any;
        /**
         * <p>Find DOM element representation of a control specified by a selector object.</p>
         * @param {any} oOptions <p>Options for the search</p>
         * @returns any <p>Promise to be resolved with DOM element or rejected with Error when no suitable representation can be found</p>
         */
        static findDOMElementByControlSelector(oOptions: any): any | any;
        /**
         * <p>Interact with specific control.</p>
         * @param {any} oOptions <p>Options for the interaction</p>
         * @returns any <p>Promise to be resolved when the interaction is done or rejected if interaction is not possible</p>
         */
        static interactWithControl(oOptions: any): any | any;
        /**
         * <p>Wait for UI5 to complete processing, poll until all asynchronous work is finished, or timeout.</p>
         * @param {any} oOptions <p>Override default wait options like polling timeout and interval</p>
         * @returns any <p>Promise to be resolved when UI5 is awaited, or rejected if timeout is reached The promise will be rejected with an error containing a stringified list of pending work.</p>
         */
        static waitForUI5(oOptions: any): any | any;
        /**
         */
        constructor();
      }
      namespace RecordReplay {
        /**
         * <p><p>Control selector plain object description.</p><p>All matchers are combined when used in a single selector Listed in descending order of preference</p></p>
         */
        export interface ControlSelector {
          /**
           * <p>ID of a control (global or within viewName, if viewName is defined)</p>
           */
          id: string | RegExp;
          /**
           * <p>Name of the control's view parent</p>
           */
          viewName: string;
          /**
           * <p>Fully qualified control class name in dot notation, eg: "sap.m.ObjectHeader"</p>
           */
          controlType: string;
          /**
           * <p>Binding path matcher, <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.matchers.BindingPath">sap.ui.test.matchers.BindingPath</a></p>
           */
          bindingPath: any;
          /**
           * <p>I18N Text matcher, <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.matchers.I18NText">sap.ui.test.matchers.I18NText</a></p>
           */
          I18NText: any;
          /**
           * <p>Label matcher, <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.matchers.LabelFor">sap.ui.test.matchers.LabelFor</a></p>
           */
          labelFor: any;
          /**
           * <p>Properties matcher, <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.matchers.Properties">sap.ui.test.matchers.Properties</a></p>
           */
          properties: any;
        }
        /**
         * <p><p>Interaction types.</p><p>Values correspond to OPA5 built-in actions <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.actions">sap.ui.test.actions</a>.</p></p>
         */
        export enum InteractionType {
          /**
           */
          EnterText = "EnterText",
          /**
           */
          Press = "Press",
        }
      }
      /**
       */
      namespace actions {
        /**
         * <p>Actions for Opa5 - needs to implement an executeOn function that should simulate a user interaction on a control</p>
         */
        export abstract class Action extends sap.ui.base.ManagedObject {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           */
          constructor();
          /**
           * <p>Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter Should be overwritten by subclasses</p>
           * @param {sap.ui.core.Control} element <p>the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element">sap.ui.core.Element</a> or a control (extends element) the action will be executed on</p>
           */
          protected executeOn(element: sap.ui.core.Control): void;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIdSuffix" href="#/api/sap.ui.test.actions.Action/methods/getIdSuffix">idSuffix</a>.</p><p>Use this only if the target property or the default of the action does not work for your control. The id suffix of the DOM Element the press action will be executed on. For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element. But some controls have multiple DOM elements that could be target of your Action. Then you should set this property. For a detailed documentation of the suffix see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/%24">sap.ui.core.Element#$</a></p>
           * @returns string <p>Value of property <code>idSuffix</code></p>
           */
          getIdSuffix(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIdSuffix" href="#/api/sap.ui.test.actions.Action/methods/getIdSuffix">idSuffix</a>.</p><p>Use this only if the target property or the default of the action does not work for your control. The id suffix of the DOM Element the press action will be executed on. For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element. But some controls have multiple DOM elements that could be target of your Action. Then you should set this property. For a detailed documentation of the suffix see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/%24">sap.ui.core.Element#$</a></p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sIdSuffix <p>New value for property <code>idSuffix</code></p>
           * @returns sap.ui.test.actions.Action <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setIdSuffix(sIdSuffix: string): sap.ui.test.actions.Action;
        }
        /**
         * <p>The <code>EnterText</code> action is used to simulate a user entering texts to inputs. <code>EnterText</code> will be executed on a control's focus dom ref. Supported controls are (for other controls this action still might work): <ul> <li><code>sap.m.Input</code></li> <li><code>sap.m.SearchField</code></li> <li><code>sap.m.TextArea</code></li> </ul></p>
         */
        export class EnterText extends sap.ui.test.actions.Action {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           */
          constructor();
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getClearTextFirst" href="#/api/sap.ui.test.actions.EnterText/methods/getClearTextFirst">clearTextFirst</a>.</p><p>If it is set to <code>false</code>, the current text of the control will be preserved. By default, the current text of the control will be cleared. When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied. This will trigger a <code>liveChange</code> event on the input with an empty value.</p><p>Default value is <code>true</code>.</p>
           * @returns boolean <p>Value of property <code>clearTextFirst</code></p>
           */
          getClearTextFirst(): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeepFocus" href="#/api/sap.ui.test.actions.EnterText/methods/getKeepFocus">keepFocus</a>.</p><p>Default value is <code>false</code>.</p>
           * @returns boolean <p>Value of property <code>keepFocus</code></p>
           */
          getKeepFocus(): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.test.actions.EnterText/methods/getText">text</a>.</p><p>The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.</p>
           * @returns string <p>Value of property <code>text</code></p>
           */
          getText(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getClearTextFirst" href="#/api/sap.ui.test.actions.EnterText/methods/getClearTextFirst">clearTextFirst</a>.</p><p>If it is set to <code>false</code>, the current text of the control will be preserved. By default, the current text of the control will be cleared. When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied. This will trigger a <code>liveChange</code> event on the input with an empty value.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
           * @param {boolean} bClearTextFirst <p>New value for property <code>clearTextFirst</code></p>
           * @returns sap.ui.test.actions.EnterText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setClearTextFirst(bClearTextFirst: boolean): sap.ui.test.actions.EnterText;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKeepFocus" href="#/api/sap.ui.test.actions.EnterText/methods/getKeepFocus">keepFocus</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
           * @param {boolean} bKeepFocus <p>New value for property <code>keepFocus</code></p>
           * @returns sap.ui.test.actions.EnterText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setKeepFocus(bKeepFocus: boolean): sap.ui.test.actions.EnterText;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.test.actions.EnterText/methods/getText">text</a>.</p><p>The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sText <p>New value for property <code>text</code></p>
           * @returns sap.ui.test.actions.EnterText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setText(sText: string): sap.ui.test.actions.EnterText;
        }
        /**
         * <p>The <code>Press</code> action is used to simulate a press interaction with a control. Most controls are supported, for example buttons, links, list items, tables, filters, and form controls.</p><p>The <code>Press</code> action targets a special DOM element representing the control. This DOM element can be customized.</p><p>For most most controls (even custom ones), the DOM focus reference is an appropriate choice. You can choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID suffix to the Press constructor, or by defining a control adapter.</p><p>There are some basic controls for which OPA5 has defined <code>Press</code> control adapters. For more information, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.actions.Press.controlAdapters">sap.ui.test.actions.Press.controlAdapters</a>.</p>
         */
        export class Press extends sap.ui.test.actions.Action {
          /**
           */
          constructor();
        }
      }
      /**
       */
      namespace gherkin {
        /**
         * <p><p>Provides utility functions for formatting 2D arrays of strings (such as the raw data loaded from a Gherkin feature file) into a more useful format such as an array of objects or a single object. Also handles normalization of the raw strings.</p></p>
         */
        namespace dataTableUtils {
          /**
           * <p>Takes the inputed 2D array "aData" and returns an equivalent object. Each row of data is expected to be a property-value pair. To create nested objects, add extra columns to the data. E.g. <pre>
           [
             ["Name", "Alice"],
             ["Mass", "135 lbs"],
             ["Telephone Number", "Home", "123-456-7890"],
             ["Telephone Number", "Work", "123-456-0987"]
           ]
          </pre> For each data row, the right-most element becomes a property value, and everything else is a property name. The property names get normalized according to the strategy defined by the parameter "vNorm". E.g. using camelCase strategy <pre>
            {
              name: "Alice",
              mass: "135 lbs",
              telephoneNumber: {
                home: "123-456-7890",
                work: "123-456-0987"
              }
            }
          </pre></p>
           * @param {string[]} aData <p>the 2D array of strings to be converted</p>
           * @param {string | Function} vNorm <p>the normalization function to use to normalize property names. Can also be a string with values "titleCase", "pascalCase", "camelCase", "hyphenated" or "none".</p>
           * @returns any <p>- an object equivalent to the input data, with property names normalized</p>
           */
          function toObject(aData: string[], vNorm?: string | Function): any;
          /**
           * <p>Takes the inputed 2D array "aData" and returns an equivalent array of objects. The data is expected to have a header row, with each subsequent row being an entity, and each column being a property of that entity. E.g. <pre>
            [
              ["Their Name",  "Their Age"],
              ["Alice",       "16"],
              ["Bob",         "22"]
            ]
          </pre></p><p>The data's column headers become the returned objects' property names. The property names get normalized according to the strategy defined by the parameter "vNorm". E.g. using hyphenation strategy this is returned: <pre>
            [
              {their-name: "Alice", their-age: "16"},
              {their-name: "Bob", their-age: "22"}
            ]
          </pre></p>
           * @param {string[]} aData <p>the 2D array of strings to be converted, with a header row</p>
           * @param {string | Function} vNorm <p>the normalization function to use to normalize property names. Can also be a String with values "titleCase", "pascalCase", "camelCase", "hyphenated" or "none".</p>
           * @returns object[] <p>- an array of objects equivalent to the input data, with property names normalized</p>
           */
          function toTable(aData: string[], vNorm?: string | Function): object[];
          /**
           * <p><p>A simple object containing a series of normalization functions that change a string according to a particular strategy. All strategies do the following normalization as a minimum:</p><p><ul> <li>Trim spaces off the string on both sides. For example: <code>" hello "</code> becomes <code>"hello"</code>.</li> <li>Assume that dashes and underscores are analogs for a space. For example: <code>"sold-to party"</code> and <code>"sold to party"</code> are equivalent, and would both convert to the camelCase <code>"soldToParty"</code>.</li> <li>Trim multiple spaces between words. For example: <code>"hello____world"</code> becomes <code>"hello world"</code>.</li> <li>Remove any characters that are not alphanumeric or whitespace. For example: <code>"(hello)"</code> becomes <code>"hello"</code>.</li> </ul></p></p>
           */
          namespace normalization {
            /**
             * <p>For example: "First Name" -> "firstName"</p>
             * @param {string} sString <p>the string to normalize</p>
             * @returns string <p>the normalized input string with all words after the first capitalized and all spaces removed</p>
             */
            function camelCase(sString: string): string;
            /**
             * <p>For example: "First Name" -> "first-name"</p>
             * @param {string} sString <p>the string to normalize</p>
             * @returns string <p>the normalized input string changed to lower case and with space between words replaced by a hyphen ("-")</p>
             */
            function hyphenated(sString: string): string;
            /**
             * <p>For example: "First Name" -> "First Name"</p>
             * @param {string} sString <p>the string to normalize</p>
             * @returns string <p>the original unchanged input string</p>
             */
            function none(sString: string): string;
            /**
             * <p>For example: "first name" -> "FirstName"</p>
             * @param {string} sString <p>the string to normalize</p>
             * @returns string <p>the normalized input string with all words capitalized and all spaces removed</p>
             */
            function pascalCase(sString: string): string;
            /**
             * <p>For example: "first name" -> "First Name"</p>
             * @param {string} sString <p>the string to normalize</p>
             * @returns string <p>the normalized input string with all words capitalized</p>
             */
            function titleCase(sString: string): string;
          }
        }
        /**
         * <p><p>Dynamically generates and executes Opa5 tests based on a Gherkin feature file and step definitions.</p><p>Logs activity to Opa5, and some debug information to the console with the prefix "[GHERKIN]"</p></p>
         */
        namespace opa5TestHarness {
          /**
           * <p>Dynamically generates Opa5 tests</p><p>If a test step is missing and args.generateMissingSteps is true then the Gherkin step will be converted into Opa Page Object code and executed. The text will be converted to camelCase and have any non-alphanumeric character removed. Here are two pertinent examples:</p><p>(1) The simple step "Given I start my app" will be converted into the call "Given.iStartMyApp();"</p><p>(2) The step "Then on page 1: I should see the page 1 text" will become the call "Then.onPage1.iShouldSeeThePage1Text();"</p><p>Chaining function calls, such as "Then.iStartMyApp().and.iCloseMyApp()" is not possible at this time.</p>
           * @param {any} args <p>the arguments to the function</p>
           */
          function test(args: any): void;
        }
        /**
         * <p><p>Dynamically generates and executes QUnit tests based on a Gherkin feature file and step definitions</p><p>Logs activity to QUnit, and some debug information to the console with the prefix "[GHERKIN]"</p></p>
         */
        namespace qUnitTestHarness {
          /**
           * <p>Dynamically generates and executes QUnit tests</p>
           * @param {any} args <p>the arguments to the function</p>
           */
          function test(args: any): void;
        }
        /**
         * <p>Provides the interface between human and machine since a Gherkin feature file is human-readable and the computer does not know how to execute its steps.</p><p>It defines what each step in the Gherkin feature file will actually do when it is executed.</p>
         */
        export abstract class StepDefinitions extends sap.ui.base.Object {
          /**
           * <p>Meant to be implemented/overridden by a child object. Specifically, the functions "init" and "closeApplication" need to be overridden.</p>
           */
          constructor();
          /**
           * <p>Closes the application and cleans up any mess made by the tests. To avoid erroneous exceptions during test execution, make sure that it is safe to run this method even if the application was never started.</p>
           */
          closeApplication(): void;
          /**
           * <p>Registers the step definitions by calling the method "register".<br><br>References: <ul><li>#register</li></ul></p>
           */
          init(): void;
          /**
           * <p>Registers a step definition.</p>
           * @param {RegExp} rRegex <p>the regular expression that matches the feature file step (with leading "Given", "When", "Then", "But" or "*" removed). E.g. if the feature file has the step "Then I should be served a coffee" it will be truncated to "I should be served a coffee" and tested against "rRegex" to check for a match. The simple regular expression /^I should be served a coffee$/i would match this text. The regular expression can specify capturing groups, which will be passed as parameters to "fnFunc".</p>
           * @param {Function} fnFunc <p>the function to execute in the event that the regular expression matches. Receives regular expression capturing groups as parameters in the same order that they are specified in the regular expression. If a data table is specified for the step, it will be passed as an additional final parameter. At execution time, all functions within a particular scenario will execute within the same "this" context.</p>
           */
          register(rRegex: RegExp, fnFunc: Function): void;
        }
      }
      /**
       */
      namespace matchers {
        /**
         * <p>Checks if an aggregation contains at least one item that has a property set to a certain value.</p>
         */
        export class AggregationContainsPropertyEqual extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAggregationName" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getAggregationName">aggregationName</a>.</p><p>The Name of the aggregation that is used for matching.</p>
           * @returns string <p>Value of property <code>aggregationName</code></p>
           */
          getAggregationName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getPropertyName">propertyName</a>.</p><p>The Name of the property that is used for matching.</p>
           * @returns string <p>Value of property <code>propertyName</code></p>
           */
          getPropertyName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyValue" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getPropertyValue">propertyValue</a>.</p><p>The value of the Property that is used for matching.</p>
           * @returns any <p>Value of property <code>propertyValue</code></p>
           */
          getPropertyValue(): any;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAggregationName" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getAggregationName">aggregationName</a>.</p><p>The Name of the aggregation that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sAggregationName <p>New value for property <code>aggregationName</code></p>
           * @returns sap.ui.test.matchers.AggregationContainsPropertyEqual <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setAggregationName(sAggregationName: string): sap.ui.test.matchers.AggregationContainsPropertyEqual;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getPropertyName">propertyName</a>.</p><p>The Name of the property that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sPropertyName <p>New value for property <code>propertyName</code></p>
           * @returns sap.ui.test.matchers.AggregationContainsPropertyEqual <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPropertyName(sPropertyName: string): sap.ui.test.matchers.AggregationContainsPropertyEqual;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyValue" href="#/api/sap.ui.test.matchers.AggregationContainsPropertyEqual/methods/getPropertyValue">propertyValue</a>.</p><p>The value of the Property that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {any} oPropertyValue <p>New value for property <code>propertyValue</code></p>
           * @returns sap.ui.test.matchers.AggregationContainsPropertyEqual <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPropertyValue(oPropertyValue: any): sap.ui.test.matchers.AggregationContainsPropertyEqual;
        }
        /**
         * <p>Checks if an aggregation is empty.</p>
         */
        export class AggregationEmpty extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new AggregationEmptyMatcher</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationEmpty/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationEmpty/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.test.matchers.AggregationEmpty <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.test.matchers.AggregationEmpty;
        }
        /**
         * <p>Checks if an aggregation contains at least one entry.</p>
         */
        export class AggregationFilled extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new AggregationFilledMatcher</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationFilled/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationFilled/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.test.matchers.AggregationFilled <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.test.matchers.AggregationFilled;
        }
        /**
         * <p>Checks if an aggregation contains a specified number of entries.</p>
         */
        export class AggregationLengthEquals extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new AggregationLengthEqualsMatcher</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLength" href="#/api/sap.ui.test.matchers.AggregationLengthEquals/methods/getLength">length</a>.</p><p>The length that aggregation <code>name</code> should have.</p>
           * @returns number <p>Value of property <code>length</code></p>
           */
          getLength(): number;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationLengthEquals/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLength" href="#/api/sap.ui.test.matchers.AggregationLengthEquals/methods/getLength">length</a>.</p><p>The length that aggregation <code>name</code> should have.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {number} iLength <p>New value for property <code>length</code></p>
           * @returns sap.ui.test.matchers.AggregationLengthEquals <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setLength(iLength: number): sap.ui.test.matchers.AggregationLengthEquals;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.AggregationLengthEquals/methods/getName">name</a>.</p><p>The name of the aggregation that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.test.matchers.AggregationLengthEquals <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.test.matchers.AggregationLengthEquals;
        }
        /**
         * <p>Checks if a control has a defined ancestor.</p>
         */
        export class Ancestor {
          /**
           * @param {any | string} vAncestor <p>the ancestor control to check, if undefined, validates every control to true. Can be a control or a control ID</p>
           * @param {boolean} bDirect <p>specifies if the ancestor should be a direct ancestor (parent)</p>
           */
          constructor(vAncestor: any | string, bDirect?: boolean);
        }
        /**
         * <p>Checks if a control has a binding context with the exact same binding path.</p><p>As of version 1.60, comparison is strict and can include one or more binding criteria: <ul> <li>context path (matches children of bound controls, eg: items in a table)</li> <li>property path (matches controls with no context and a single bound property, eg: Text with binding for property text)</li> <li>context path + property path (matches children of bound controls, where the child has a binding for a certain property within the context)</li> </ul></p><p><b>Note:</b> Before version 1.60, the only available criteria is binding context path.</p>
         */
        export class BindingPath extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>Map/JSON-object with initial settings for the new BindingPath.</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.BindingPath/methods/getModelName">modelName</a>.</p><p>The name of the binding model that is used for matching.</p>
           * @returns string <p>Value of property <code>modelName</code></p>
           */
          getModelName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPath" href="#/api/sap.ui.test.matchers.BindingPath/methods/getPath">path</a>.</p><p>The value of the binding context path that is used for matching.</p>
           * @returns string <p>Value of property <code>path</code></p>
           */
          getPath(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyPath" href="#/api/sap.ui.test.matchers.BindingPath/methods/getPropertyPath">propertyPath</a>.</p><p>The value of the binding property path that is used for matching. If (context) path is also set, propertyPath will be assumed to be relative to the binding context path</p>
           * @returns string <p>Value of property <code>propertyPath</code></p>
           */
          getPropertyPath(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.BindingPath/methods/getModelName">modelName</a>.</p><p>The name of the binding model that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sModelName <p>New value for property <code>modelName</code></p>
           * @returns sap.ui.test.matchers.BindingPath <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setModelName(sModelName: string): sap.ui.test.matchers.BindingPath;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPath" href="#/api/sap.ui.test.matchers.BindingPath/methods/getPath">path</a>.</p><p>The value of the binding context path that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sPath <p>New value for property <code>path</code></p>
           * @returns sap.ui.test.matchers.BindingPath <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPath(sPath: string): sap.ui.test.matchers.BindingPath;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyPath" href="#/api/sap.ui.test.matchers.BindingPath/methods/getPropertyPath">propertyPath</a>.</p><p>The value of the binding property path that is used for matching. If (context) path is also set, propertyPath will be assumed to be relative to the binding context path</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sPropertyPath <p>New value for property <code>propertyPath</code></p>
           * @returns sap.ui.test.matchers.BindingPath <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPropertyPath(sPropertyPath: string): sap.ui.test.matchers.BindingPath;
        }
        /**
         * <p>Checks if a control has a given descendant.</p>
         */
        export class Descendant {
          /**
           * @param {any | string} vDescendantControl <p>The descendant control to check. If undefined, it validates every control to true. Can be a control or a control ID</p>
           * @param {boolean} bDirect <p>specifies if the descendant should be a direct child</p>
           */
          constructor(vDescendantControl: any | string, bDirect?: boolean);
        }
        /**
         * <p>The I18NText matcher checks if a control property has the same value as a text from an I18N file.</p><p>The matcher automatically: <ul> <li> retrieves the text from the assigned 'i18n' model (name can be changed) </li> <li> checks that the I18N key does actually exist in the file </li> <li> checks if asynchronously loaded I18N have actually been loaded </li> </ul></p>
         */
        export class I18NText extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new I18NText</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.test.matchers.I18NText/methods/getKey">key</a>.</p><p>The key of the I18N text in the containing <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle">jQuery.sap.util.ResourceBundle</a>.</p>
           * @returns string <p>Value of property <code>key</code></p>
           */
          getKey(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.I18NText/methods/getModelName">modelName</a>.</p><p>The name of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.resource.ResourceModel">sap.ui.model.resource.ResourceModel</a> assigned to the control.</p><p>Default value is <code>i18n</code>.</p>
           * @returns string <p>Value of property <code>modelName</code></p>
           */
          getModelName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.ui.test.matchers.I18NText/methods/getParameters">parameters</a>.</p><p>The parameters for replacing the placeholders of the I18N text. See <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle/methods/getText">jQuery.sap.util.ResourceBundle#getText</a>.</p>
           * @returns any <p>Value of property <code>parameters</code></p>
           */
          getParameters(): any;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.I18NText/methods/getPropertyName">propertyName</a>.</p><p>The name of the control property to match the I18N text with.</p>
           * @returns string <p>Value of property <code>propertyName</code></p>
           */
          getPropertyName(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.test.matchers.I18NText/methods/getKey">key</a>.</p><p>The key of the I18N text in the containing <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle">jQuery.sap.util.ResourceBundle</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sKey <p>New value for property <code>key</code></p>
           * @returns sap.ui.test.matchers.I18NText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setKey(sKey: string): sap.ui.test.matchers.I18NText;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.I18NText/methods/getModelName">modelName</a>.</p><p>The name of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.resource.ResourceModel">sap.ui.model.resource.ResourceModel</a> assigned to the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>i18n</code>.</p>
           * @param {string} sModelName <p>New value for property <code>modelName</code></p>
           * @returns sap.ui.test.matchers.I18NText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setModelName(sModelName: string): sap.ui.test.matchers.I18NText;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.ui.test.matchers.I18NText/methods/getParameters">parameters</a>.</p><p>The parameters for replacing the placeholders of the I18N text. See <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle/methods/getText">jQuery.sap.util.ResourceBundle#getText</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {any} oParameters <p>New value for property <code>parameters</code></p>
           * @returns sap.ui.test.matchers.I18NText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setParameters(oParameters: any): sap.ui.test.matchers.I18NText;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.I18NText/methods/getPropertyName">propertyName</a>.</p><p>The name of the control property to match the I18N text with.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sPropertyName <p>New value for property <code>propertyName</code></p>
           * @returns sap.ui.test.matchers.I18NText <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPropertyName(sPropertyName: string): sap.ui.test.matchers.I18NText;
        }
        /**
         * <p>Checks if a control is currently able to take user interactions. OPA5 will automatically apply this matcher if you specify actions in <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.Opa5/methods/waitFor">sap.ui.test.Opa5#waitFor</a>. A control will be filtered out by this matcher when: <ul> <li> The control is invisible (using the visible matcher) </li> <li> The control or its parents are busy </li> <li> The control or its parents are not enabled </li> <li> The control is hidden behind a dialog </li> <li> The UIArea of the control needs new rendering </li> </ul> Since 1.53, Interactable no longer uses internal autoWait functionality. Interactable matcher might be made private in the near future. It is recommended to enable autoWait OPA option instead of using the Interactable matcher directly.</p>
         */
        export class Interactable extends sap.ui.test.matchers.Matcher {
          /**
           */
          constructor();
        }
        /**
         * <p>The LabelFor matcher checks if a given control has a label associated with it. For every Label on the page, the matcher checks if: <ul> <li> its labelFor association is to the given control </li> <li> its properties match a condition </li> </ul> Labels can be matched by: <ul> <li> text </li> <li> i18n key, modelName, parameters or propertyName. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.test.matchers.I18NText">sap.ui.test.matchers.I18NText</a> </li> <li> combination of text and key is not possible </li> </ul> Some control types cannot be in a labelFor association: <ul> <li> sap.ui.comp.navpopover.SmartLink </li> <li> sap.m.Link </li> <li> sap.m.Label </li> <li> sap.m.Text </li> </ul></p>
         */
        export class LabelFor extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new LabelFor</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.test.matchers.LabelFor/methods/getKey">key</a>.</p><p>The key of the I18N text in the containing <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle">jQuery.sap.util.ResourceBundle</a>.</p>
           * @returns string <p>Value of property <code>key</code></p>
           */
          getKey(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.LabelFor/methods/getModelName">modelName</a>.</p><p>The name of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.resource.ResourceModel">sap.ui.model.resource.ResourceModel</a> assigned to the control.</p><p>Default value is <code>i18n</code>.</p>
           * @returns string <p>Value of property <code>modelName</code></p>
           */
          getModelName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.ui.test.matchers.LabelFor/methods/getParameters">parameters</a>.</p><p>The parameters for replacing the placeholders of the I18N text. See <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle/methods/getText">jQuery.sap.util.ResourceBundle#getText</a>.</p>
           * @returns any <p>Value of property <code>parameters</code></p>
           */
          getParameters(): any;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.LabelFor/methods/getPropertyName">propertyName</a>.</p><p>The name of the control property to match the I18N text with.</p><p>Default value is <code>text</code>.</p>
           * @returns string <p>Value of property <code>propertyName</code></p>
           */
          getPropertyName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.test.matchers.LabelFor/methods/getText">text</a>.</p><p>The text of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a> which have the labelFor property.</p>
           * @returns string <p>Value of property <code>text</code></p>
           */
          getText(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.test.matchers.LabelFor/methods/getKey">key</a>.</p><p>The key of the I18N text in the containing <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle">jQuery.sap.util.ResourceBundle</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sKey <p>New value for property <code>key</code></p>
           * @returns sap.ui.test.matchers.LabelFor <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setKey(sKey: string): sap.ui.test.matchers.LabelFor;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getModelName" href="#/api/sap.ui.test.matchers.LabelFor/methods/getModelName">modelName</a>.</p><p>The name of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.resource.ResourceModel">sap.ui.model.resource.ResourceModel</a> assigned to the control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>i18n</code>.</p>
           * @param {string} sModelName <p>New value for property <code>modelName</code></p>
           * @returns sap.ui.test.matchers.LabelFor <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setModelName(sModelName: string): sap.ui.test.matchers.LabelFor;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParameters" href="#/api/sap.ui.test.matchers.LabelFor/methods/getParameters">parameters</a>.</p><p>The parameters for replacing the placeholders of the I18N text. See <a target="_self" class="jsdoclink" href="#/api/jQuery.sap.util.ResourceBundle/methods/getText">jQuery.sap.util.ResourceBundle#getText</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {any} oParameters <p>New value for property <code>parameters</code></p>
           * @returns sap.ui.test.matchers.LabelFor <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setParameters(oParameters: any): sap.ui.test.matchers.LabelFor;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropertyName" href="#/api/sap.ui.test.matchers.LabelFor/methods/getPropertyName">propertyName</a>.</p><p>The name of the control property to match the I18N text with.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>text</code>.</p>
           * @param {string} sPropertyName <p>New value for property <code>propertyName</code></p>
           * @returns sap.ui.test.matchers.LabelFor <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setPropertyName(sPropertyName: string): sap.ui.test.matchers.LabelFor;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.test.matchers.LabelFor/methods/getText">text</a>.</p><p>The text of the <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a> which have the labelFor property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sText <p>New value for property <code>text</code></p>
           * @returns sap.ui.test.matchers.LabelFor <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setText(sText: string): sap.ui.test.matchers.LabelFor;
        }
        /**
         * <p>Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control instance as parameter</p>
         */
        export abstract class Matcher extends sap.ui.base.ManagedObject {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject</a> can be used.</p>
           */
          constructor();
          /**
           * <p>Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter.</p><p>Should be overwritten by subclasses</p>
           * @param {sap.ui.core.Control} oControl <p>the control that is checked by the matcher</p>
           * @returns boolean <p>true if the Control is matching the condition of the matcher</p>
           */
          protected isMatching(oControl: sap.ui.core.Control): boolean;
        }
        /**
         * <p>Checks if a control's properties have the provided values - all properties have to match their values.</p>
         */
        export class Properties {
          /**
           * @param {any} oProperties <p>the object with the properties to be checked. Example: <pre>
          // Would filter for an enabled control with the text "Accept".
          new Properties({
              // The property text has the exact value "Accept"
              text: "Accept",
              // The property enabled also has to be true
              enabled: true
          })
          </pre> If the value is a RegExp, it tests the RegExp with the value. RegExp only works with string properties.</p>
           */
          constructor(oProperties: any);
        }
        /**
         * <p>Checks if a property has the exact same value.</p>
         */
        export class PropertyStrictEquals extends sap.ui.test.matchers.Matcher {
          /**
           * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new PropertyStrictEquals</p>
           */
          constructor(mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.PropertyStrictEquals/methods/getName">name</a>.</p><p>The Name of the property that is used for matching.</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.test.matchers.PropertyStrictEquals/methods/getValue">value</a>.</p><p>The value of the property that is used for matching.</p>
           * @returns any <p>Value of property <code>value</code></p>
           */
          getValue(): any;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.test.matchers.PropertyStrictEquals/methods/getName">name</a>.</p><p>The Name of the property that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.test.matchers.PropertyStrictEquals <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.test.matchers.PropertyStrictEquals;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.test.matchers.PropertyStrictEquals/methods/getValue">value</a>.</p><p>The value of the property that is used for matching.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {any} oValue <p>New value for property <code>value</code></p>
           * @returns sap.ui.test.matchers.PropertyStrictEquals <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setValue(oValue: any): sap.ui.test.matchers.PropertyStrictEquals;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     * <p><p>SAPUI5 base classes</p></p>
     */
    namespace base {
      /**
       * <p>Represents the type of properties in a <code>ManagedObject</code> class.</p><p>Each type provides some metadata like its <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.base.DataType/methods/getName">qualified name</a> or its <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBaseType" href="#/api/sap.ui.base.DataType/methods/getBaseType">base type</a> in case of a derived type. Array types provide information about the allowed <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getComponentType" href="#/api/sap.ui.base.DataType/methods/getComponentType">type of components</a> in an array, enumeration types inform about the set of their allowed <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnumValues" href="#/api/sap.ui.base.DataType/methods/getEnumValues">keys and values</a>.</p><p>Each type has a method to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isValid" href="#/api/sap.ui.base.DataType/methods/isValid">check whether a value is valid</a> for a property of that type.</p><p>Already defined types can be looked up by calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.DataType.getType" href="#/api/sap.ui.base.DataType/methods/sap.ui.base.DataType.getType">DataType.getType</a>, new types can only be created by calling the factory method <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.DataType.createType" href="#/api/sap.ui.base.DataType/methods/sap.ui.base.DataType.createType">DataType.createType</a>, calling the constructor will throw an error.</p>
       */
      export class DataType {
        /**
         * <p>Derives a new type from a given base type.</p><p>Example:<br> <pre>
        
          var fooType = DataType.createType('foo', {
              isValid : function(vValue) {
                  return /^(foo(bar)?)$/.test(vValue);
              }
          }, DataType.getType('string'));
        
          fooType.isValid('foo'); // true
          fooType.isValid('foobar'); // true
          fooType.isValid('==foobar=='); // false
        
        </pre></p><p>If <code>mSettings</code> contains an implementation for <code>isValid</code>, then the validity check of the newly created type will first execute the check of the base type and then call the given <code>isValid</code> function.</p><p>Array types and enumeration types cannot be created with this method. They're created on-the-fly by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.DataType.getType" href="#/api/sap.ui.base.DataType/methods/sap.ui.base.DataType.getType">DataType.getType</a> when such a type is looked up.</p><p><b>Note:</b> The creation of new primitive types is not supported. When a type is created without a base type, it is automatically derived from the primitive type <code>any</code>.</p><p><b>Note:</b> If a type has to be used in classes tagged with <code>@ui5-metamodel</code>, then the implementation of <code>isValid</code> must exactly have the structure shown in the example above (single return statement, regular expression literal of the form <code>/^(...)$/</code>, calling <code>/regex/.test()</code> on the given value). Only the inner part of the regular expression literal can be different.</p>
         * @param {string} sName <p>Unique qualified name of the new type</p>
         * @param {any} mSettings <p>Settings for the new type</p>
         * @param {sap.ui.base.DataType | string} base <p>Base type for the new type</p>
         * @returns sap.ui.base.DataType <p>The newly created type object</p>
         */
        static createType(sName: string, mSettings?: any, base?: sap.ui.base.DataType | string): sap.ui.base.DataType;
        /**
         * <p>Looks up the type with the given name and returns it.</p><p>See <a target="_self" href="#/topic/ac56d92162ed47ff858fdf1ce26c18c4">Defining Control Properties</a> for a list of the built-in primitive types and their semantics.</p><p>The lookup consists of the following steps: <ul> <li>When a type with the given name is already known, it will be returned</li> <li>When the name ends with a pair of brackets (<code>[]</code>), a type with the name in front of the brackets (<code>name.slice(0,-2)</code>) will be looked up and an array type will be created with the looked-up type as its component type. If the component type is <code>undefined</code>, <code>undefined</code> will be returned</li> <li>When a global property exists with the same name as the type and when the value of that property is an instance of <code>DataType</code>, that instance will be returned</li> <li>When a global property exists with the same name as the type and when the value of that property is a plain object (its prototype is <code>Object</code>), then an enum type will be created, based on the keys and values in that object. The <code>parseValue</code> method of the type will accept any of the keys in the plain object and convert them to the corresponding value; <code>isValid</code> will accept any of the values from the plain object's keys. The <code>defaultValue</code> will be the value of the first key found in the plain object</li> <li>When a global property exist with any other, non-falsy value, a warning is logged and the primitive type 'any' is returned</li> <li>If no such global property exist, an error is logged and <code>undefined</code> is returned</li> </ul></p><p><b<Note:</b> UI Libraries and even components can introduce additional types. This method only checks for types that either have been defined already, or that describe arrays of values of an already defined type or types whose name matches the global name of a plain object (containing enum keys and values). This method doesn't try to load modules that might contain type definitions. So before being able to lookup and use a specific type, the module containing its definition has to be loaded. For that reason it is suggested that controls (or <code>ManagedObject</code> classes in general) declare a dependency to all modules (typically <code>some/lib/library.js</code> modules) that contain the type definitions needed by the specific control or class definition.</p>
         * @param {string} sTypeName <p>Qualified name of the type to retrieve</p>
         * @returns sap.ui.base.DataType|undefined <p>Type object or <code>undefined</code> when no such type has been defined yet</p>
         */
        static getType(sTypeName: string): sap.ui.base.DataType | undefined;
        /**
         * <p>The base type of this type or undefined if this is a primitive type.</p>
         * @returns sap.ui.base.DataType|undefined <p>Base type or <code>undefined</code></p>
         */
        getBaseType(): sap.ui.base.DataType | undefined;
        /**
         * <p>Returns the component type of this type or <code>undefined</code> if this is not an array type.</p>
         * @returns sap.ui.base.DataType|undefined <p>Component type or <code>undefined</code></p>
         */
        getComponentType(): sap.ui.base.DataType | undefined;
        /**
         * <p>The default value for this type. Each type must define a default value.</p>
         * @returns any <p>Default value of the data type. The type of the returned value must match the JavaScript type of the data type (a string for string types etc.)</p>
         */
        getDefaultValue(): any;
        /**
         * <p>Returns the object with keys and values from which this enum type was created or <code>undefined</code> if this is not an enum type.</p>
         * @returns any <p>Object with enum keys and values or <code>undefined</code></p>
         */
        getEnumValues(): any;
        /**
         * <p>The qualified name of the data type.</p>
         * @returns string <p>Name of the data type</p>
         */
        getName(): string;
        /**
         * <p>Returns the most basic (primitive) type that this type has been derived from.</p><p>If the type is a primitive type by itself, <code>this</code> is returned.</p>
         * @returns sap.ui.base.DataType <p>Primitive type of this type</p>
         */
        getPrimitiveType(): sap.ui.base.DataType;
        /**
         * <p>Whether this type is an array type.</p>
         * @returns boolean <p>Whether this type is an array type</p>
         */
        isArrayType(): boolean;
        /**
         * <p>Whether this type is an enumeration type.</p>
         * @returns boolean <p>Whether this type is an enum type</p>
         */
        isEnumType(): boolean;
        /**
         * <p>Checks whether the given value is valid for this type.</p><p>To be implemented by concrete types.</p>
         * @param {any} vValue <p>Value to be checked</p>
         * @returns boolean <p>Whether the given value is valid for this data type (without conversion)</p>
         */
        isValid(vValue: any): boolean;
        /**
         * <p>Normalizes the given value using the specified normalizer for this data type.</p><p>If no normalizer has been set, the original value is returned.</p>
         * @param {any} oValue <p>Value to be normalized</p>
         * @returns any <p>Normalized value</p>
         */
        normalize(oValue: any): any;
        /**
         * <p>Parses the given string value and converts it into the specific data type.</p>
         * @param {string} sValue <p>String representation for a value of this type</p>
         * @returns any <p>Value in the correct internal format</p>
         */
        parseValue(sValue: string): any;
        /**
         * <p>Set or unset a normalizer function to be used for values of this data type.</p><p>When a normalizer function has been set, it will be applied to values of this type whenever <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="normalize" href="#/api/sap.ui.base.DataType/methods/normalize">#normalize</a> is called. <code>ManagedObject.prototype.setProperty</code> calls the <code>normalize</code> method before setting a new value to a property (normalization is applied on-write, not on-read).</p><p>The <code>fnNormalize</code> function has the signature <pre>
          fnNormalize(value:any) : any
        </pre> It will be called with a value for this type and should return a normalized value (which also must be valid for the this type). There's no mean to reject a value. The <code>this</code> context of the function will be this type.</p><p>This method allows applications or application frameworks to plug-in a generic value normalization for a type, e.g. to convert all URLs in some app-specific way before they are applied to controls. It is not intended to break-out of the value range defined by a type.</p>
         * @param {Function} fnNormalizer <p>Function to apply for normalizing</p>
         */
        setNormalizer(fnNormalizer: Function): void;
      }
      /**
       * <p>An Event object consisting of an ID, a source and a map of parameters. Implements <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Poolable">sap.ui.base.Poolable</a> and therefore an event object in the event handler will be reset by <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ObjectPool">sap.ui.base.ObjectPool</a> after the event handler is done.</p>
       */
      export class Event extends sap.ui.base.Object {
        /**
         * <p>Creates an event with the given <code>sId</code>, linked to the provided <code>oSource</code> and enriched with the <code>mParameters</code>.</p>
         * @param {string} sId <p>The id of the event</p>
         * @param {sap.ui.base.EventProvider} oSource <p>The source of the event</p>
         * @param {any} mParameters <p>A map of parameters for this event</p>
         */
        constructor(sId: string, oSource: sap.ui.base.EventProvider, mParameters: any);
        /**
         * <p>Cancel bubbling of the event.</p><p><b>Note:</b> This function only has an effect if the bubbling of the event is supported by the event source.</p>
         */
        cancelBubble(): void;
        /**
         * <p>Returns the id of the event.</p>
         * @returns string <p>The id of the event</p>
         */
        getId(): string;
        /**
         * <p>Returns the value of the parameter with the given sName.</p>
         * @param {string} sName <p>The name of the parameter to return</p>
         * @returns any <p>The value for the named parameter</p>
         */
        getParameter(sName: string): any;
        /**
         * <p>Returns all parameter values of the event keyed by their names.</p>
         * @returns { [key: string]: any } <p>All parameters of the event keyed by name</p>
         */
        getParameters(): { [key: string]: any };
        /**
         * <p>Returns the event provider on which the event was fired.</p>
         * @returns sap.ui.base.EventProvider <p>The source of the event</p>
         */
        getSource(): sap.ui.base.EventProvider;
        /**
         * <p>Prevent the default action of this event.</p><p><b>Note:</b> This function only has an effect if preventing the default action of the event is supported by the event source.</p>
         */
        preventDefault(): void;
      }
      /**
       * <p>Provides eventing capabilities for objects like attaching or detaching event handlers for events which are notified when events are fired.</p>
       */
      export abstract class EventProvider extends sap.ui.base.Object {
        /**
         * <p>Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.</p><p><code>oClassInfo</code> might contain the same kind of information as described in <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">sap.ui.base.Object.extend</a>.</p>
         * @param {string} sClassName <p>Name of the class being created</p>
         * @param {any} oClassInfo <p>Object literal with information about the class</p>
         * @param {Function} FNMetaImpl <p>Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code></p>
         * @returns Function <p>Created class / constructor function</p>
         */
        static extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: Function): Function;
        /**
         * <p>Returns a metadata object for class sap.ui.base.EventProvider.</p>
         * @returns sap.ui.base.Metadata <p>Metadata object describing this class</p>
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * <p>Creates an instance of EventProvider.</p>
         */
        constructor();
        /**
         * <p>Attaches an event handler to the event with the given identifier.</p>
         * @param {string} sEventId <p>The identifier of the event to listen for</p>
         * @param {any} oData <p>An object that will be passed to the handler along with the event object when the event is fired</p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the event provider instance. The event object (<a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Event">sap.ui.base.Event</a>) is provided as first argument of the handler. Handlers must not change the content of the event. The second argument is the specified <code>oData</code> instance (if present).</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event provider.</p>
         * @returns sap.ui.base.EventProvider <p>Returns <code>this</code> to allow method chaining</p>
         */
        attachEvent(sEventId: string, oData: any, fnFunction: Function, oListener?: any): sap.ui.base.EventProvider;
        /**
         * <p>Attaches an event handler, called one time only, to the event with the given identifier.</p><p>When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.</p>
         * @param {string} sEventId <p>The identifier of the event to listen for</p>
         * @param {any} oData <p>An object that will be passed to the handler along with the event object when the event is fired</p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the event provider instance. The event object (<a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Event">sap.ui.base.Event</a>) is provided as first argument of the handler. Handlers must not change the content of the event. The second argument is the specified <code>oData</code> instance (if present).</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event provider.</p>
         * @returns sap.ui.base.EventProvider <p>Returns <code>this</code> to allow method chaining</p>
         */
        attachEventOnce(sEventId: string, oData: any, fnFunction: Function, oListener?: any): sap.ui.base.EventProvider;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Removes a previously attached event handler from the event with the given identifier.</p><p>The passed parameters must match those used for registration with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachEvent" href="#/api/sap.ui.base.EventProvider/methods/attachEvent">#attachEvent</a> beforehand.</p>
         * @param {string} sEventId <p>The identifier of the event to detach from</p>
         * @param {Function} fnFunction <p>The handler function to detach from the event</p>
         * @param {any} oListener <p>The object that wanted to be notified when the event occurred</p>
         * @returns sap.ui.base.EventProvider <p>Returns <code>this</code> to allow method chaining</p>
         */
        detachEvent(sEventId: string, fnFunction: Function, oListener?: any): sap.ui.base.EventProvider;
        /**
         * <p>Fires an <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Event">event</a> with the given settings and notifies all attached event handlers.</p>
         * @param {string} sEventId <p>The identifier of the event to fire</p>
         * @param {any} mParameters <p>The parameters which should be carried by the event</p>
         * @param {boolean} bAllowPreventDefault <p>Defines whether function <code>preventDefault</code> is supported on the fired event</p>
         * @param {boolean} bEnableEventBubbling <p>Defines whether event bubbling is enabled on the fired event. Set to <code>true</code> the event is also forwarded to the parent(s) of the event provider (<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEventingParent" href="#/api/sap.ui.base.EventProvider/methods/getEventingParent">#getEventingParent</a>) until the bubbling of the event is stopped or no parent is available anymore.</p>
         * @returns sap.ui.base.EventProvider|boolean <p>Returns <code>this</code> to allow method chaining. When <code>preventDefault</code> is supported on the fired event the function returns <code>true</code> if the default action should be executed, <code>false</code> otherwise.</p>
         */
        protected fireEvent(sEventId: string, mParameters?: any, bAllowPreventDefault?: boolean, bEnableEventBubbling?: boolean): sap.ui.base.EventProvider | boolean;
        /**
         * <p>Returns the parent in the eventing hierarchy of this object.</p><p>Per default this returns null, but if eventing is used in objects, which are hierarchically structured, this can be overwritten to make the object hierarchy visible to the eventing and enables the use of event bubbling within this object hierarchy.</p>
         * @returns sap.ui.base.EventProvider <p>The parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns whether there are any registered event handlers for the event with the given identifier.</p>
         * @param {string} sEventId <p>The identifier of the event</p>
         * @returns boolean <p>Whether there are any registered event handlers</p>
         */
        protected hasListeners(sEventId: string): boolean;
        /**
         * <p>Returns a string representation of this object.</p><p>In case there is no class or id information, a simple static string is returned. Subclasses should override this method.</p>
         * @returns string <p>A string description of this event provider</p>
         */
        toString(): string;
      }
      /**
       * <p>A class whose instances act as a facade for other objects.</p><p><b>Note:</b> If a class returns a facade in its constructor, only the defined functions will be visible, no internals of the class can be accessed.</p>
       */
      export class Interface {
        /**
         * <p>Constructs a facade for the given object, containing only the named methods.</p><p>For each method named in <code>aMethods</code>, a wrapper function will be added to the facade. When called, the wrapper function calls the method with the same name in the original <code>oObject</code>, passing all its call parameters to it without modification. A return value of the original method will be returned to the caller. Before returning it, values of type <code>sap.ui.base.Object</code> will be replaced by their facades, calling <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/getInterface">getInterface</a> on them.</p><p>It is possible to create different facades exposing different sets of methods for the same object, but as <code>getInterface</code> can only return one of those interfaces, the special handling of the return values doesn't support multiple facades per object.</p>
         * @param {sap.ui.base.Object} oObject <p>Object for which a facade should be created</p>
         * @param {string[]} aMethods <p>Names of the methods, that should be available in the new facade</p>
         */
        constructor(oObject: sap.ui.base.Object, aMethods: string[]);
      }
      /**
       * <p>Base Class that introduces some basic concepts, such as, state management and data binding.</p><p>New subclasses of ManagedObject are created with a call to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.ManagedObject.extend" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">ManagedObject.extend</a> and can make use of the following managed features:</p><h3>Properties</h3><p> Managed properties represent the state of a ManagedObject. They can store a single value of a simple data type (like 'string' or 'int'). They have a <i>name</i> (e.g. 'size') and methods to get the current value (<code>getSize</code>), or to set a new value (<code>setSize</code>). When a property is modified by calling the setter, the ManagedObject is marked as invalidated. A managed property can be bound against a property in a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model">sap.ui.model.Model</a> by using the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="bindProperty" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">#bindProperty</a> method. Updates to the model property will be automatically reflected in the managed property and - if TwoWay databinding is active, changes to the managed property will be reflected in the model. An existing binding can be removed by calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="unbindProperty" href="#/api/sap.ui.base.ManagedObject/methods/unbindProperty">#unbindProperty</a>.</p><p>If a ManagedObject is cloned, the clone will have the same values for its managed properties as the source of the clone - if the property wasn't bound. If it is bound, the property in the clone will be bound to the same model property as in the source.</p><p>Details about the declaration of a managed property, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">extend </a> method.</p><h3>Aggregations</h3><p> Managed aggregations can store one or more references to other ManagedObjects. They are a mean to control the lifecycle of the aggregated objects: one ManagedObject can be aggregated by at most one parent ManagedObject at any time. When a ManagedObject is destroyed, all aggregated objects are destroyed as well and the object itself is removed from its parent. That is, aggregations won't contain destroyed objects or null/undefined.</p><p>Aggregations have a <i>name</i> ('e.g 'header' or 'items'), a <i>cardinality</i> ('0..1' or '0..n') and are of a specific <i>type</i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the aggregated object for a specific aggregation of cardinality 0..1 (e.g. <code>setHeader</code>, <code>getHeader</code> for an aggregation named 'header'). For an aggregation of cardinality 0..n, there are methods to get all aggregated objects (<code>getItems</code>), to locate an object in the aggregation (e.g. <code>indexOfItem</code>), to add, insert or remove a single aggregated object (<code>addItem</code>, <code>insertItem</code>, <code>removeItem</code>) or to remove or destroy all objects from an aggregation (<code>removeAllItems</code>, <code>destroyItems</code>).</p><p>Details about the declaration of a managed aggregation, the metadata that describes the aggregation, and the set of methods that are automatically generated to access it, can be found in the documentation of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">extend</a> method.</p><p>Aggregations of cardinality 0..n can be bound to a collection in a model by using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="bindAggregation" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">#bindAggregation</a> (and unbound again using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="unbindAggregation" href="#/api/sap.ui.base.ManagedObject/methods/unbindAggregation">#unbindAggregation</a>). For each context in the model collection, a corresponding object will be created in the managed aggregation, either by cloning a template object or by calling a factory function.</p><p>Aggregations also control the databinding context of bound objects: by default, aggregated objects inherit all models and binding contexts from their parent object.</p><p>When a ManagedObject is cloned, all aggregated objects will be cloned as well - but only if they haven't been added by databinding. In that case, the aggregation in the clone will be bound to the same model collection.</p><h3>Associations</h3><p> Managed associations also form a relationship between objects, but they don't define a lifecycle for the associated objects. They even can 'break' in the sense that an associated object might have been destroyed already although it is still referenced in an association. For the same reason, the internal storage for associations are not direct object references but only the IDs of the associated target objects.</p><p>Associations have a <i>name</i> ('e.g 'initialFocus'), a <i>cardinality</i> ('0..1' or '0..n') and are of a specific <i>type</i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the associated object for a specific association of cardinality 0..1 (e.g. <code>setInitialFocus</code>, <code>getInitialFocus</code>). For an association of cardinality 0..n, there are methods to get all associated objects (<code>getRefItems</code>), to add, insert or remove a single associated object (<code>addRefItem</code>, <code>insertRefItem</code>, <code>removeRefItem</code>) or to remove all objects from an association (<code>removeAllRefItems</code>).</p><p>Details about the declaration of a managed association, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">extend</a> method.</p><p>Associations can't be bound to the model.</p><p>When a ManagedObject is cloned, the result for an association depends on the relationship between the associated target object and the root of the clone operation. If the associated object is part of the to-be-cloned object tree (reachable via aggregations from the root of the clone operation), then the cloned association will reference the clone of the associated object. Otherwise the association will reference the same object as in the original tree. When a ManagedObject is destroyed, other objects that are only associated, are not affected by the destroy operation.</p><h3>Events</h3><p> Managed events provide a mean for communicating important state changes to an arbitrary number of 'interested' listeners. Events have a <i>name</i> and (optionally) a set of <i>parameters</i>. For each event there will be methods to add or remove an event listener as well as a method to fire the event. (e.g. <code>attachChange</code>, <code>detachChange</code>, <code>fireChange</code> for an event named 'change').</p><p>Details about the declaration of managed events, the metadata that describes the event, and the set of methods that are automatically generated to access it, can be found in the documentation of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">extend</a> method.</p><p>When a ManagedObject is cloned, all listeners registered for any event in the clone source are also registered to the clone. Later changes are not reflected in any direction (neither from source to clone, nor vice versa).</p><p><a name="lowlevelapi"></p><h3>Low Level APIs:</h3><p></a> The prototype of ManagedObject provides several generic, low level APIs to manage properties, aggregations, associations, and events. These generic methods are solely intended for implementing higher level, non-generic methods that manage a single managed property etc. (e.g. a function <code>setSize(value)</code> that sets a new value for property 'size'). <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend">sap.ui.base.ManagedObject.extend</a> creates default implementations of those higher level APIs for all managed aspects. The implementation of a subclass then can override those default implementations with a more specific implementation, e.g. to implement a side effect when a specific property is set or retrieved. It is therefore important to understand that the generic low-level methods ARE NOT SUITABLE FOR GENERIC ACCESS to the state of a managed object, as that would bypass the overriding higher level methods and their side effects.</p>
       */
      export abstract class ManagedObject extends sap.ui.base.EventProvider {
        /**
         * <p>Creates a new ManagedObject from the given data.</p><p>If <code>vData</code> is a managed object already, that object is returned. If <code>vData</code> is an object (literal), then a new object is created with <code>vData</code> as settings. The type of the object is either determined by a property of name <code>Type</code> (capital 'T') in the <code>vData</code> or by a property <code>type</code> (lower case 't') in the <code>oKeyInfo</code> object. In both cases, the type can be specified by name (dot separated name of the class) or by the constructor function of the class.</p>
         * @param {sap.ui.base.ManagedObject | any} vData <p>the data to create the object from</p>
         * @param {any} oKeyInfo 
         * @param {any} oScope <p>Scope object to resolve types and formatters in bindings</p>
         */
        static create(vData: sap.ui.base.ManagedObject | any, oKeyInfo?: any, oScope?: any): void;
        /**
         * <p>Escapes the given value so it can be used in the constructor's settings object. Should be used when property values are initialized with static string values which could contain binding characters (curly braces).</p>
         * @param {any} vValue <p>Value to escape; only needs to be done for string values, but the call will work for all types</p>
         * @returns any <p>The given value, escaped for usage as static property value in the constructor's settings object (or unchanged, if not of type string)</p>
         */
        static escapeSettingsValue(vValue: any): any;
        /**
         * <p>Constructs and initializes a managed object with the given <code>sId</code> and settings.</p><p>If the optional <code>mSettings</code> are given, they must be a simple object that defines values for properties, aggregations, associations or events keyed by their name.</p><p><b>Valid Names and Value Ranges:</b></p><p>The property (key) names supported in the object literal are exactly the (case sensitive) names documented in the JSDoc for the properties, aggregations, associations and events of the current class and its base classes. Note that for 0..n aggregations and associations this name usually is the plural name, whereas it is the singular name in case of 0..1 relations.</p><p>If a key name is ambiguous for a specific managed object class (e.g. a property has the same name as an event), then this method prefers property, aggregation, association and event in that order. To resolve such ambiguities, the keys can be prefixed with <code>aggregation:</code>, <code>association:</code> or <code>event:</code> (such keys containing a colon (':') must be quoted to be valid Javascript).</p><p>The possible values for a setting depend on its kind: <ul> <li>for simple properties, the value has to match the documented type of the property (no type conversion occurs)</li> <li>for 0..1 aggregations, the value has to be an instance of the aggregated type</li> <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single instance</li> <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted</li> <li>for 0..n associations, an array of instances of the associated type or of IDs is accepted</li> <li>for events, either a function (event handler) is accepted or an array of length 2 where the first element is a function and the 2nd element is an object to invoke the method on; or an array of length 3, where the first element is an arbitrary payload object, the second one is a function and the 3rd one is an object to invoke the method on; or an array of arrays where each nested array has the 2 or 3 element structure described before (multiple listeners).</li> </ul></p><p>Each subclass should document the name and type of its supported settings in its constructor documentation.</p><p>Example usage: <pre>
        new Dialog({
           title: "Some title text",            // property of type "string"
           showHeader: true,                    // property of type "boolean"
           endButton: new Button(...),          // 0..1 aggregation
           content: [                           // 0..n aggregation
              new Input(...),
              new Input(...)
           ],
           afterClose: function(oEvent) { ... } // event handler function
        });
        </pre></p><p>Instead of static values and object instances, data binding expressions can be used, either embedded in a string or as a binding info object as described in <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="bindProperty" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">#bindProperty</a> or <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="bindAggregation" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">#bindAggregation</a>.</p><p>Example usage: <pre>
        new Dialog({
           title: "{/title}",       // embedded binding expression, points to a string property in the data model
           ...
           content: {               // binding info object
              path : "/inputItems", // points to a collection in the data model
              template : new Input(...)
           }
        });
        </pre></p><p>Note that when setting string values, any curly braces in those values need to be escaped, so they are not interpreted as binding expressions. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="escapeSettingsValue" href="#/api/sap.ui.base.ManagedObject/methods/escapeSettingsValue">#escapeSettingsValue</a> to do so.</p><p>Besides the settings documented below, ManagedObject itself supports the following special settings: <ul> <li><code>id : <i>sap.ui.core.ID</i></code> an ID for the new instance. Some subclasses (Element, Component) require the id to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component id must be unique across all Components). <li><code>models : <i>object</i></code> a map of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model">sap.ui.model.Model</a> instances keyed by their model name (alias). Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setModel(models[k], k);</code>.</li> <li><code>bindingContexts : <i>object</i></code> a map of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Context">sap.ui.model.Context</a> instances keyed by their model name. Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setBindingContext(bindingContexts[k], k);</code></li> <li><code>objectBindings : <i>object</i></code> a map of binding paths keyed by the corresponding model name. Each entry with key <i>k</i> in this object has the same effect as a call <code>this.bindObject(objectBindings[k], k);</code></li> <li><code>metadataContexts : <i>object</i></code> an array of single binding contexts keyed by the corresponding model or context name. The purpose of the <code>metadataContexts</code> special setting is to deduce as much information as possible from the binding context of the control in order to be able to predefine certain standard properties like e.g. <i>visible, enabled, tooltip,...</i></p><p>The structure is an array of single contexts, where a single context is a map containing the following keys: <ul> <li><code>path: <i>string (mandatory)</i></code> The path to the corresponding model property or object, e.g. '/Customers/Name'. A path can also be relative, e.g. 'Name'</li> <li><code>model: <i>string (optional)</i></code> The name of the model, in case there is no name then the undefined model is taken</li> <li><code>name: <i>string (optional)</i></code> A name for the context to used in templating phase</li> <li><code>kind: <i>string (optional)</i></code> The kind of the adapter, either <code>field</code> for single properties or <code>object</code> for structured contexts. <li><code>adapter: <i>string (optional)</i></code> The path to an interpretion class that dilivers control relevant data depending on the context, e.g. enabled, visible. If not supplied the OData meta data is interpreted.</li> </ul> The syntax for providing the <code>metadataContexts</code> is as follows: <code>{SINGLE_CONTEXT1},...,{SINGLE_CONTEXTn}</code> or for simplicity in case there is only one context <code>{SINGLE_CONTEXT}</code>.</p><p>Examples for such metadataContexts are: <ul> <li><code>{/Customers/Name}</code> a single part with an absolute path to the property <i>Name</i> of the <i>Customers</i> entity set in the default model</li> <li><code>{path: 'Customers/Name', model:'json'}</code> a single part with an absolute path to the property <i>Name</i> of the <i>Customers</i> entity set in a named model</li> <li><code>{parts: [{path: 'Customers/Name'},{path: 'editable', model: 'viewModel'}]}</code> a combination of single binding contexts, one context from the default model and one from the viewModel</li> </ul></li> </ul></p>
         * @param {string} sId <p>ID for the new managed object; generated automatically if no non-empty ID is given <b>Note:</b> this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
         * @param {any} mSettings <p>Optional map/JSON-object with initial property values, aggregated objects etc. for the new object</p>
         * @param {any} oScope <p>Scope object for resolving string based type and formatter references in bindings. When a scope object is given, <code>mSettings</code> cannot be omitted, at least <code>null</code> or an empty object literal must be given.</p>
         */
        constructor(sId?: string, mSettings?: any, oScope?: any);
        /**
         * <p>Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.</p><p>If the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1, then an Error is thrown (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateAggregation" href="#/api/sap.ui.base.ManagedObject/methods/validateAggregation">#validateAggregation</a>.</p><p>If the aggregation already has content, the new object will be added after the current content. If the new object was already contained in the aggregation, it will be moved to the end.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically add an object to an aggregation. Use the concrete method add<i>XYZ</i> for aggregation 'XYZ' or the generic <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="applySettings" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">#applySettings</a> instead.</p>
         * @param {string} sAggregationName <p>the string identifying the aggregation that <code>oObject</code> should be added to.</p>
         * @param {sap.ui.base.ManagedObject} oObject <p>the object to add; if empty, nothing is added</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject as well as the added child are not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected addAggregation(sAggregationName: string, oObject: sap.ui.base.ManagedObject, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Adds some object with the ID <code>sId</code> to the association identified by <code>sAssociationName</code> and marks this ManagedObject as changed.</p><p>This method does not avoid duplicates.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically add an object to an association. Use the concrete method add<i>XYZ</i> for association 'XYZ' or the generic <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="applySettings" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">#applySettings</a> instead.</p>
         * @param {string} sAssociationName <p>the string identifying the association the object should be added to.</p>
         * @param {string | sap.ui.base.ManagedObject} sId <p>the ID of the ManagedObject object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this managed object as well as the newly associated object are not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected addAssociation(sAssociationName: string, sId: string | sap.ui.base.ManagedObject, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Sets all the properties, aggregations, associations and event handlers as given in the object literal <code>mSettings</code>. If a property, aggregation, etc. is not listed in <code>mSettings</code>, then its value is not changed by this method.</p><p>For properties and 0..1 aggregations/associations, any given setting overwrites the current value. For 0..n aggregations, the given values are appended; event listeners are registered in addition to existing ones.</p><p>For the possible keys and values in <code>mSettings</code> see the general documentation in <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject">sap.ui.base.ManagedObject</a> or the specific documentation of the constructor of the concrete managed object class.</p>
         * @param {any} mSettings <p>the settings to apply to this managed object</p>
         * @param {any} oScope <p>Scope object to resolve types and formatters</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        applySettings(mSettings: any, oScope?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="formatError" href="#/api/sap.ui.base.ManagedObject/events/formatError">formatError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.</p><p>Fired when a new value for a bound property should have been propagated from the model, but formatting the value failed with an exception.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachFormatError(oData: any, fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="modelContextChange" href="#/api/sap.ui.base.ManagedObject/events/modelContextChange">modelContextChange</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.</p><p>Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachModelContextChange(oData: any, fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="parseError" href="#/api/sap.ui.base.ManagedObject/events/parseError">parseError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.</p><p>Fired when a new value for a bound property should have been propagated to the model, but parsing the value failed with an exception.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachParseError(oData: any, fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationError" href="#/api/sap.ui.base.ManagedObject/events/validationError">validationError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.</p><p>Fired when a new value for a bound property should have been propagated to the model, but validating the value failed with an exception.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachValidationError(oData: any, fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationSuccess" href="#/api/sap.ui.base.ManagedObject/events/validationSuccess">validationSuccess</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.</p><p>Fired after a new value for a bound property has been propagated to the model. Only fired, when the binding uses a data type.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachValidationSuccess(oData: any, fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Bind an aggregation to the model.</p><p>Whenever the corresponding model becomes available or changes (either via a call to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setModel" href="#/api/sap.ui.base.ManagedObject/methods/setModel">setModel</a> or propagated from a <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParent" href="#/api/sap.ui.base.ManagedObject/methods/getParent">parent</a>), its <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindList">bindList</a> method will be called to create a new <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding">ListBinding</a> with the configured binding options.</p><p>The bound aggregation will use the given template, clone it for each item which exists in the bound list and set the appropriate binding context.</p><p>This is a generic method which can be used to bind any aggregation to the model. A class may flag aggregations in its metadata with <code>bindable: "bindable"</code> to get typed <code>bind<i>Something</i></code> and <code>unbind<i>Something</i></code> methods for those aggregations.</p><p>Also see <a target="_self" href="#/topic/91f057786f4d1014b6dd926db0e91070">List Binding (Aggregation Binding)</a> in the documentation.</p><p>For more information on the <code>oBindingInfo.key</code> property and its usage, see <a target="_self" href="#/topic/7cdff73f308b4b10bdf7d83b7aba72e7">Extended Change Detection</a>.</p>
         * @param {string} sName <p>Name of a public aggregation to bind</p>
         * @param {any} oBindingInfo <p>Binding info</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        bindAggregation(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
        /**
         * <p>Bind the object to the referenced entity in the model.</p><p>The entity is used as the binding context to resolve bound properties or aggregations of the object itself and all of its children relatively to the given path. If a relative binding path is used, it will be evaluated anew whenever the parent context changes.</p><p>Whenever the corresponding model becomes available or changes (either via a call to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setModel" href="#/api/sap.ui.base.ManagedObject/methods/setModel">setModel</a> or propagated from a <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParent" href="#/api/sap.ui.base.ManagedObject/methods/getParent">parent</a>), its <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindContext">bindContext</a> method will be called to create a new <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ContextBinding">ContextBinding</a> with the configured binding options.</p><p>There is no difference between <code>bindObject</code> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/bindElement">bindElement</a>. Method <code>bindElement</code> was deprecated and renamed to <code>bindObject</code> when this kind of binding was no longer limited to <code>sap.ui.core.Element</code>s.</p><p>Also see <a target="_self" href="#/topic/91f05e8b6f4d1014b6dd926db0e91070">Context Binding</a> in the documentation.</p>
         * @param {any} oBindingInfo <p>An object describing the binding</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        bindObject(oBindingInfo: any): sap.ui.base.ManagedObject;
        /**
         * <p>Binds a property to the model.</p><p>Whenever the corresponding model becomes available or changes (either via a call to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setModel" href="#/api/sap.ui.base.ManagedObject/methods/setModel">setModel</a> or propagated from a <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getParent" href="#/api/sap.ui.base.ManagedObject/methods/getParent">parent</a>), its <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindProperty">bindProperty</a> method will be called to create a new <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.PropertyBinding">PropertyBinding</a> with the configured binding options.</p><p>The Setter for the given property will be called by the binding with the value retrieved from the data model. When the binding mode is <code>OneTime</code>, the property will be set only once. When it is <code>OneWay</code>, the property will be updated whenever the corresponding data in the model changes. In mode <code>TwoWay</code>, changes to the property (not originating in the model) will be reported back to the model (typical use case: user interaction changes the value of a control).</p><p>This is a generic method which can be used to bind any property to the model. A managed object may flag any property in its metadata with <code>bindable: "bindable"</code> to additionally provide named methods to bind and unbind the corresponding property.</p><p><b>Composite Binding</b><br> A composite property binding which combines data from multiple model paths can be declared using the <code>parts</code> parameter instead of <code>path</code>. The <code>formatter</code> function or a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeType">composite type</a> then can be used to combine the parts, Properties with a composite binding are also known as "calculated fields".</p><p>Example: <pre>
          oTxt.bindValue({
            parts: [
              {path: "/firstName", type: "sap.ui.model.type.String"},
              {path: "myModel2>/lastName"}
            ]
          });
        </pre></p><p>Note that a composite binding will be forced into mode <code>OneWay</code> when one of the binding parts is not in mode <code>TwoWay</code>.</p><p><b>Formatter Functions</b><br> When a formatter function is specified for the binding or for a binding part, it will be called with the value of the bound model property. After setting the initial property value, the formatter function will only be called again when the bound model property changes (simple property binding) or when at least one of the bound model properties changes (formatter function of a composite binding). Note that a binding only monitors the bound model data for changes. Dependencies of the formatter implementation to other model data is not known to the binding and changes won't be detected.</p><p>When the formatter for a property binding (simple or composite) is called, the managed object will be given as <code>this</code> context. For formatters of binding parts in a composite binding, this is not the case.</p><p>Also see <a target="_self" href="#/topic/91f0652b6f4d1014b6dd926db0e91070">Property Binding</a> in the documentation.</p>
         * @param {string} sName <p>Name of a public property to bind; public aggregations of cardinality 0..1 that have an alternative, simple type (e.g. "string" or "int") can also be bound with this method</p>
         * @param {any} oBindingInfo <p>Binding information</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        bindProperty(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
        /**
         * <p>Clones a tree of objects starting with the object on which clone is called first (root object).</p><p>The IDs within the newly created clone tree are derived from the original IDs by appending the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be unique across multiple clone calls).</p><p>The <code>oOptions</code> configuration object can have the following properties: <ul> <li>The boolean value <code>cloneChildren</code> specifies whether associations/aggregations will be cloned</li> <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li> </ul> Note: In case the configuration <code>oOptions</code> is specified, the default values <code>true</code> no longer apply, which means in case <code>cloneChildren</code> or <code>cloneBindings</code> is not specified, then this ia assumed to be <code>false</code> and associations/aggregations or bindings are not cloned.</p><p>For each cloned object the following settings are cloned based on the metadata of the object and the defined options: <ul> <li>all properties that are not bound. If <code>cloneBinding</code> is <code>false</code>, even these properties will be cloned; the values are used by reference, they are not cloned</li> <li>all aggregated objects that are not bound. If <code>cloneBinding</code> is <code>false</code>, even the ones that are bound will be cloned; they are all cloned recursively using the same <code>sIdSuffix</code></li> <li>all associated controls; when an association points to an object inside the cloned object tree, then the cloned association will be modified to that it points to the clone of the target object. When the association points to a managed object outside of the cloned object tree, then its target won't be changed.</li> <li>all models set via <code>setModel()</code>; used by reference </li> <li>all property and aggregation bindings (if <code>cloneBindings</code> is <code>true</code>); the pure binding information (path, model name) is cloned, but all other information like template control or factory function, data type or formatter function are copied by reference. The bindings themselves are created anew as they are specific for the combination (object, property, model). As a result, any later changes to a binding of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.</li> </ul></p><p>Each clone is created by first collecting the above mentioned settings and then creating a new instance with the normal constructor function. As a result, any side effects of mutator methods (<code>setProperty</code> etc.) or init hooks are repeated during clone creation. There is no need to override <code>clone()</code> just to reproduce these internal settings!</p><p>Custom controls however can override <code>clone()</code> to implement additional clone steps. They usually will first call <code>clone()</code> on the super class and then modify the returned clone accordingly.</p><p>Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>. It is determined automatically for the root object (and its non-existence also serves as an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.</p>
         * @param {string} sIdSuffix <p>a suffix to be appended to the cloned object ID</p>
         * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
         * @param {any} oOptions <p>Configuration object; when omitted, both properties default to <code>true</code>; when specified, undefined properties default to <code>false</code></p>
         * @returns sap.ui.base.ManagedObject <p>Reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         */
        destroy(bSuppressInvalidate?: boolean): void;
        /**
         * <p>Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and empties the aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically destroy all objects in an aggregation. Use the concrete method destroy<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the name of the aggregation</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected destroyAggregation(sAggregationName: string, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="formatError" href="#/api/sap.ui.base.ManagedObject/events/formatError">formatError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachFormatError(fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="modelContextChange" href="#/api/sap.ui.base.ManagedObject/events/modelContextChange">modelContextChange</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachModelContextChange(fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="parseError" href="#/api/sap.ui.base.ManagedObject/events/parseError">parseError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachParseError(fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationError" href="#/api/sap.ui.base.ManagedObject/events/validationError">validationError</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachValidationError(fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationSuccess" href="#/api/sap.ui.base.ManagedObject/events/validationSuccess">validationSuccess</a> event of this <code>sap.ui.base.ManagedObject</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachValidationSuccess(fnFunction: Function, oListener?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Searches and returns all aggregated objects that pass the given check function.</p><p>When the search is done recursively (<code>bRecursive === true</code>), it will be executed depth-first and ancestors will be added to the result array before their descendants.</p><p>If no check function is given, all aggregated objects will pass the check and be added to the result array.</p><p><b>Take care: this operation might be expensive.</b></p>
         * @param {boolean} bRecursive <p>Whether the whole aggregation tree should be searched</p>
         * @param {boolean} fnCondition <p>Objects for which this function returns a falsy value will not be added to the result array</p>
         * @returns sap.ui.base.ManagedObject[] <p>Array of aggregated objects that passed the check</p>
         */
        findAggregatedObjects(bRecursive: boolean, fnCondition?: boolean): sap.ui.base.ManagedObject[];
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="formatError" href="#/api/sap.ui.base.ManagedObject/events/formatError">formatError</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireFormatError(mParameters?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="modelContextChange" href="#/api/sap.ui.base.ManagedObject/events/modelContextChange">modelContextChange</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireModelContextChange(mParameters?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="parseError" href="#/api/sap.ui.base.ManagedObject/events/parseError">parseError</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireParseError(mParameters?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationError" href="#/api/sap.ui.base.ManagedObject/events/validationError">validationError</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireValidationError(mParameters?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationSuccess" href="#/api/sap.ui.base.ManagedObject/events/validationSuccess">validationSuccess</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireValidationSuccess(mParameters?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Returns the aggregated object(s) for the named aggregation of this ManagedObject.</p><p>If the aggregation does not contain any objects(s), the given <code>oDefaultForCreation</code> (or <code>null</code>) is set as new value of the aggregation and returned to the caller.</p><p><b>Note:</b> the need to specify a default value and the fact that it is stored as new value of a so far empty aggregation is recognized as a shortcoming of this API but can no longer be changed for compatibility reasons.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically read the content of an aggregation. Use the concrete method get<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the name of the aggregation</p>
         * @param {sap.ui.base.ManagedObject | any[]} oDefaultForCreation <p>the object that is used in case the current aggregation is empty</p>
         * @returns sap.ui.base.ManagedObject|Array <p>the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations</p>
         */
        protected getAggregation(sAggregationName: string, oDefaultForCreation: sap.ui.base.ManagedObject | any[]): sap.ui.base.ManagedObject | any[];
        /**
         * <p>Returns the content of the association with the given name.</p><p>For associations of cardinality 0..1, a single string with the ID of an associated object is returned (if any). For cardinality 0..n, an array with the IDs of the associated objects is returned.</p><p>If the association does not contain any objects(s), the given <code>oDefaultForCreation</code> is set as new value of the association and returned to the caller. The only supported values for <code>oDefaultForCreation</code> are <code>null</code> and <code>undefined</code> in the case of cardinality 0..1 and <code>null</code>, <code>undefined</code> or an empty array (<code>[]</code>) in case of cardinality 0..n. If the argument is omitted, <code>null</code> is used independently from the cardinality.</p><p><b>Note:</b> the need to specify a default value and the fact that it is stored as new value of a so far empty association is recognized as a shortcoming of this API but can no longer be changed for compatibility reasons.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically retrieve the content of an association. Use the concrete method get<i>XYZ</i> for association 'XYZ' instead.</p>
         * @param {string} sAssociationName <p>the name of the association</p>
         * @param {any} oDefaultForCreation <p>the object that is used in case the current aggregation is empty (only null or empty array allowed)</p>
         * @returns string|string[] <p>the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated</p>
         */
        protected getAssociation(sAssociationName: string, oDefaultForCreation: any): string | string[];
        /**
         * <p>Get the binding object for a specific aggregation/property</p>
         * @param {string} sName <p>the name of the property or aggregation</p>
         * @returns sap.ui.model.Binding <p>the binding for the given name</p>
         */
        getBinding(sName: string): sap.ui.model.Binding;
        /**
         * <p>Get the binding context of this object for the given model name.</p><p>If the object does not have a binding context set on itself and has no own model set, it will use the first binding context defined in its parent hierarchy.</p><p><b>Note:</b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul> Omitting the model name (or using the value <code>undefined</code>) is explicitly allowed and refers to the default model.</p><p><b>Note:</b> A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.</p>
         * @param {string} sModelName <p>the name of the model or <code>undefined</code></p>
         * @returns sap.ui.model.Context <p>The binding context of this object</p>
         */
        getBindingContext(sModelName?: string): sap.ui.model.Context;
        /**
         * <p>Returns the binding info for the given property or aggregation.</p><p>The binding info contains information about path, binding object, format options, sorter, filter etc. for the property or aggregation. As the binding object is only created when the model becomes available, the <code>binding</code> property may be undefined.</p>
         * @param {string} sName <p>Name of the property or aggregation</p>
         * @returns any <p>A binding info object, containing at least a <code>path</code> or <code>parts</code> property and, depending on the binding type, additional properties</p>
         */
        protected getBindingInfo(sName: string): any;
        /**
         * <p>Get the binding path for a specific aggregation/property</p>
         * @param {string} sName <p>the name of the property or aggregation</p>
         * @returns string <p>the binding path for the given name</p>
         */
        protected getBindingPath(sName: string): string;
        /**
         * <p>Returns the parent in the eventing hierarchy of this object.</p><p>Per default this returns null, but if eventing is used in objects, which are hierarchically structured, this can be overwritten to make the object hierarchy visible to the eventing and enables the use of event bubbling within this object hierarchy.</p>
         * @returns sap.ui.base.EventProvider <p>The parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns the parent managed object as new eventing parent to enable control event bubbling or <code>null</code> if this object hasn't been added to a parent yet.</p>
         * @returns sap.ui.base.EventProvider <p>the parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns the object's ID.</p><p>There is no guarantee or check or requirement for the ID of a <code>ManagedObject</code> to be unique. Only some subclasses of <code>ManagedObject</code> introduce this as a requirement, e.g. <code>Component</code> or <code>Element</code>. All elements existing in the same window at the same time must have different IDs. A new element will fail during construction when the given ID is already used by another element. But there might be a component with the same ID as an element or another <code>ManagedObject</code>.</p><p>For the same reason, there is no general lookup for <code>ManagedObject</code>s via their ID. Only for subclasses that enforce unique IDs, there might be lookup mechanisms (e.g. <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/byId">sap.ui.getCore().byId()</a> for elements).</p>
         * @returns string <p>The objects's ID.</p>
         */
        getId(): string;
        /**
         * <p>Get the model to be used for data bindings with the given model name. If the object does not have a model set on itself, it will use the first model defined in its parent hierarchy.</p><p>The name can be omitted to reference the default model or it must be a non-empty string.</p><p><b>Note:</b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul> Omitting the model name (or using the value <code>undefined</code>) is explicitly allowed and refers to the default model.</p>
         * @param {string | undefined} sModelName <p>name of the model to be retrieved</p>
         * @returns sap.ui.model.Model <p>oModel</p>
         */
        getModel(sModelName?: string | undefined): sap.ui.model.Model;
        /**
         * <p>Get the object binding object for a specific model.</p><p><b>Note:</b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul> Omitting the model name (or using the value <code>undefined</code>) is explicitly allowed and refers to the default model.</p>
         * @param {string} sModelName <p>Non-empty name of the model or <code>undefined</code></p>
         * @returns sap.ui.model.ContextBinding <p>Context binding for the given model name or <code>undefined</code></p>
         */
        getObjectBinding(sModelName?: string): sap.ui.model.ContextBinding;
        /**
         * <p>Returns the origin info for the value of the given property.</p><p>The origin info might contain additional information for translatable texts. The bookkeeping of this information is not active by default and must be activated by configuration. Even then, it might not be present for all properties and their values depending on where the value came form.</p>
         * @param {string} sPropertyName <p>the name of the property</p>
         * @returns any <p>a map of properties describing the origin of this property value or null</p>
         */
        getOriginInfo(sPropertyName: string): any;
        /**
         * <p>Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.</p><p>The parent returned by this method is the technical parent used for data binding, invalidation, rendering etc. It might differ from the object on which the application originally added this object (the so called 'API parent'): some composite controls internally use hidden controls or containers to store their children. This method will return the innermost container that technically contains this object as a child.</p><p><b>Example:</b></p><p>Assume that a <code>Dialog</code> internally uses a (hidden) <code>VerticalLayout</code> to store its content:</p><p><pre>
          Dialog (API parent)
           \__ VerticalLayout (hidden composite part)
              \__ Text (API child)
        </pre></p><p>If you add some content by calling the <code>Dialog.prototype.addContent</code> API, this will lead to the following observations:</p><p><pre>
          oDialog.addContent(oText);
          console.log(oText.getParent() === oDialog);  // false
          console.log(oText.getParent() instanceof VerticalLayout); // true
          console.log(oText.getParent().getParent() === oDialog); // true now, but might fail with later versions
        </pre></p><p>Technically, from API perspective, <code>oText</code> is added as a child to <code>Dialog</code>. But internally, the <code>Dialog</code> adds the child to the hidden <code>VerticalLayout</code> container. If you now call the <code>getParent</code> method of the child, you will get the internal <code>VerticalLayout</code> object and not the <code>Dialog</code> API parent.</p><p><b>Note: </b> The internal (hidden) structure of a composite control is not fixed and may be changed (see also our "Compatibility Rules"). Therefore, you should <b>never</b> rely on a specific structure or object being returned by <code>getParent</code>.</p><p><b>Note: </b> There is no API to determine the original API parent.</p>
         * @returns sap.ui.base.ManagedObject <p>The technical parent managed object or <code>null</code></p>
         */
        getParent(): sap.ui.base.ManagedObject;
        /**
         * <p>Returns the value for the property with the given <code>sPropertyName</code>.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically retrieve the value of a property. Use the concrete method get<i>XYZ</i> for property 'XYZ' instead.</p>
         * @param {string} sPropertyName <p>the name of the property</p>
         * @returns any <p>the value of the property</p>
         */
        protected getProperty(sPropertyName: string): any;
        /**
         * <p>Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).</p><p><b>Note:</b> A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.</p>
         * @returns boolean <p>whether a model reference exists or not</p>
         */
        hasModel(): boolean;
        /**
         * <p>Searches for the provided ManagedObject in the named aggregation and returns its 0-based index if found, or -1 otherwise. Returns -2 if the given named aggregation is of cardinality 0..1 and doesn't reference the given object.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically determine the position of an object in an aggregation. Use the concrete method indexOf<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the name of the aggregation</p>
         * @param {sap.ui.base.ManagedObject} oObject <p>the ManagedObject whose index is looked for.</p>
         * @returns number <p>the index of the provided managed object in the aggregation.</p>
         */
        protected indexOfAggregation(sAggregationName: string, oObject: sap.ui.base.ManagedObject): number;
        /**
         * <p>Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at position <code>iIndex</code>.</p><p>If the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1, then an Error is thrown (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateAggregation" href="#/api/sap.ui.base.ManagedObject/methods/validateAggregation">#validateAggregation</a>.</p><p>If the given index is out of range with respect to the current content of the aggregation, it is clipped to that range (0 for iIndex < 0, n for iIndex > n).</p><p>Please note that this method does not work as expected when an object is added that is already part of the aggregation. In order to change the index of an object inside an aggregation, first remove it, then insert it again.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically insert an object into an aggregation. Use the concrete method insert<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the string identifying the aggregation the managed object <code>oObject</code> should be inserted into.</p>
         * @param {sap.ui.base.ManagedObject} oObject <p>the ManagedObject to add; if empty, nothing is inserted.</p>
         * @param {number} iIndex <p>the <code>0</code>-based index the managed object should be inserted at; for a negative value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value greater than the current size of the aggregation, <code>oObject</code> is inserted at the last position</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject as well as the added child are not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected insertAggregation(sAggregationName: string, oObject: sap.ui.base.ManagedObject, iIndex: number, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>This triggers rerendering of itself and its children.</p><p>As <code>sap.ui.base.ManagedObject</code> "bubbles up" the invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.</p>
         */
        protected invalidate(): void;
        /**
         * <p>Find out whether a property or aggregation is bound</p>
         * @param {string} sName <p>the name of the property or aggregation</p>
         * @returns boolean <p>whether a binding exists for the given name</p>
         */
        isBound(sName: string): boolean;
        /**
         * <p>Returns whether rerendering is currently suppressed on this ManagedObject</p>
         * @returns undefined <p>boolean</p>
         */
        protected isInvalidateSuppressed(): undefined;
        /**
         * <p>Returns whether the given property value is initial and has not been explicitly set or bound. Even after setting the default value or setting null/undefined (which also causes the default value to be set), the property is no longer initial. A property can be reset to initial state by calling <code>resetProperty(sPropertyName)</code>.</p>
         * @param {string} sPropertyName <p>the name of the property</p>
         * @returns boolean <p>true if the property is initial</p>
         */
        protected isPropertyInitial(sPropertyName: string): boolean;
        /**
         * <p>This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding. In this case and if the aggregation is a tree node the overridden method should then return true. If true is returned the tree binding will be used instead of the list binding.</p>
         * @param {string} sName <p>the aggregation to bind (e.g. nodes for a tree managed object)</p>
         * @returns boolean <p>whether tree binding should be used or list binding. Default is false. Override method to change this behavior.</p>
         */
        protected isTreeBinding(sName: string): boolean;
        /**
         * <p>Generic method which is called, whenever messages for this object exist.</p>
         * @param {string} sName <p>The property name</p>
         * @param {any[]} aMessages <p>The messages</p>
         */
        protected propagateMessages(sName: string, aMessages: any[]): void;
        /**
         * <p>Generic method which can be called, when an aggregation needs to be refreshed. This method does not make any change on the aggregation, but just calls the <code>getContexts</code> method of the binding to trigger fetching of new data.</p><p>Subclasses should call this method only in the implementation of a named refresh method and for no other purposes. The framework might change the conditions under which the method is called and the method implementation might rely on those conditions.</p>
         * @param {string} sName <p>name of the aggregation to refresh</p>
         * @param {sap.ui.model.ChangeReason} sChangeReason <p>the change reason</p>
         */
        protected refreshAggregation(sName: string, sChangeReason: sap.ui.model.ChangeReason): void;
        /**
         * <p>Removes an object from the aggregation named <code>sAggregationName</code> with cardinality 0..n.</p><p>The removed object is not destroyed nor is it marked as changed.</p><p>If the given object is found in the aggregation, it is removed, it's parent relationship is unset and this ManagedObject is marked as changed. The removed object is returned as result of this method. If the object could not be found, <code>undefined</code> is returned.</p><p>This method must only be called for aggregations of cardinality 0..n. The only way to remove objects from a 0..1 aggregation is to set a <code>null</code> value for them.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically remove an object from an aggregation. Use the concrete method remove<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the string identifying the aggregation that the given object should be removed from</p>
         * @param {number | string | sap.ui.base.ManagedObject} vObject <p>the position or ID of the ManagedObject that should be removed or that ManagedObject itself; if <code>vObject</code> is invalid, a negative value or a value greater or equal than the current size of the aggregation, nothing is removed.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>the removed object or null</p>
         */
        protected removeAggregation(sAggregationName: string, vObject: number | string | sap.ui.base.ManagedObject, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Removes all objects from the 0..n-aggregation named <code>sAggregationName</code>.</p><p>The removed objects are not destroyed nor are they marked as changed.</p><p>Additionally, it clears the parent relationship of all removed objects, marks this ManagedObject as changed and returns an array with the removed objects.</p><p>If the aggregation did not contain any objects, an empty array is returned and this ManagedObject is not marked as changed.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically remove all objects from an aggregation. Use the concrete method removeAll<i>XYZ</i> for aggregation 'XYZ' instead.</p>
         * @param {string} sAggregationName <p>the name of the aggregation</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         * @returns any[] <p>an array of the removed elements (might be empty)</p>
         */
        protected removeAllAggregation(sAggregationName: string, bSuppressInvalidate?: boolean): any[];
        /**
         * <p>Removes all the objects in the 0..n-association named <code>sAssociationName</code> and returns an array with their IDs. This ManagedObject is marked as changed, if the association contained any objects.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically remove all object from an association. Use the concrete method removeAll<i>XYZ</i> for association 'XYZ' instead.</p>
         * @param {string} sAssociationName <p>the name of the association</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         * @returns any[] <p>an array with the IDs of the removed objects (might be empty)</p>
         */
        protected removeAllAssociation(sAssociationName: string, bSuppressInvalidate?: boolean): any[];
        /**
         * <p>Removes a <code>ManagedObject</code> from the association named <code>sAssociationName</code>.</p><p>If an object is removed, the ID of that object is returned and this <code>ManagedObject</code> is marked as changed. Otherwise <code>null</code> is returned.</p><p>If the same object was added multiple times to the same association, only a single occurrence of it will be removed by this method. If the object is not found or if the parameter can't be interpreted neither as a <code>ManagedObject</code> (or ID) nor as an index in the association, nothing will be removed. The same is true if an index is given and if that index is out of range for the association.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically remove an object from an association. Use the concrete method remove<i>XYZ</i> for association 'XYZ' instead.</p>
         * @param {string} sAssociationName <p>the string identifying the association the <code>ManagedObject</code> should be removed from.</p>
         * @param {number | string | sap.ui.base.ManagedObject} vObject <p>the position or ID of the <code>ManagedObject</code> to remove or the <code>ManagedObject</code> itself; if <code>vObject</code> is invalid input, a negative value or a value greater or equal than the current size of the association, nothing is removed</p>
         * @param {boolean} bSuppressInvalidate <p>if <code>true</code>, the managed object is not marked as changed</p>
         * @returns string|null <p>ID of the removed <code>ManagedObject</code> or <code>null</code></p>
         */
        protected removeAssociation(sAssociationName: string, vObject: number | string | sap.ui.base.ManagedObject, bSuppressInvalidate?: boolean): string | null;
        /**
         * <p>Resets the given property to the default value and also restores the "initial" state (like it has never been set).</p><p>As subclasses might have implemented side effects in the named setter <code>setXYZ</code> for property 'xyz', that setter is called with a value of <code>null</code>, which by convention restores the default value of the property. This is only done to notify subclasses, the internal state is anyhow reset.</p><p>When the property has not been modified so far, nothing will be done.</p>
         * @param {string} sPropertyName <p>Name of the property</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected resetProperty(sPropertyName: string): sap.ui.base.ManagedObject;
        /**
         * <p>Sets a new object in the named 0..1 aggregation of this ManagedObject and marks this ManagedObject as changed.</p><p>If the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..n, then an Error is thrown (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateAggregation" href="#/api/sap.ui.base.ManagedObject/methods/validateAggregation">#validateAggregation</a>.</p><p>If the new object is the same as the currently aggregated object, then the internal state is not modified and this ManagedObject is not marked as changed.</p><p>If the given object is different, the parent of a previously aggregated object is cleared (it must have been this ManagedObject before), the parent of the given object is set to this ManagedObject and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="invalidate" href="#/api/sap.ui.base.ManagedObject/methods/invalidate">#invalidate</a> is called for this object.</p><p>Note that this method does neither return nor destroy the previously aggregated object. This behavior is inherited by named set methods (see below) in subclasses. To avoid memory leaks, applications therefore should first get the aggregated object, keep a reference to it or destroy it, depending on their needs, and only then set a new object.</p><p>Note that ManagedObject only implements a single level of change tracking: if a first call to setAggregation recognizes a change, 'invalidate' is called. If another call to setAggregation reverts that change, invalidate() will be called again, the new status is not recognized as being 'clean' again.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically set an object in an aggregation. Use the concrete method set<i>XYZ</i> for aggregation 'XYZ' or the generic <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="applySettings" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">#applySettings</a> instead.</p>
         * @param {string} sAggregationName <p>name of an 0..1 aggregation</p>
         * @param {any} oObject <p>the managed object that is set as aggregated object</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected setAggregation(sAggregationName: string, oObject: any, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Sets the associated object for the given managed association of cardinality '0..1' and marks this ManagedObject as changed.</p><p>The associated object can either be given by itself or by its id. If <code>null</code> or <code>undefined</code> is given, the association is cleared.</p><p><b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically set an object in an association. Use the concrete method set<i>XYZ</i> for association 'XYZ' or the generic <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="applySettings" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">#applySettings</a> instead.</p>
         * @param {string} sAssociationName <p>name of the association</p>
         * @param {string | sap.ui.base.ManagedObject} sId <p>the ID of the managed object that is set as an association, or the managed object itself or null</p>
         * @param {boolean} bSuppressInvalidate <p>if true, the managed objects invalidate method is not called</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected setAssociation(sAssociationName: string, sId: string | sap.ui.base.ManagedObject, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Set the binding context for this ManagedObject for the model with the given name.</p><p><b>Note:</b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul> Omitting the model name (or using the value <code>undefined</code>) is explicitly allowed and refers to the default model.</p><p>A value of <code>null</code> for <code>oContext</code> hides the parent context. The parent context will no longer be propagated to aggregated child controls. A value of <code>undefined</code> removes a currently active context or a <code>null</code> context and the parent context gets visible and propagated again.</p><p><b>Note:</b> A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.</p>
         * @param {sap.ui.model.Context} oContext <p>the new binding context for this object</p>
         * @param {string} sModelName <p>the name of the model to set the context for or <code>undefined</code></p>
         * @returns sap.ui.base.ManagedObject <p>reference to the instance itself</p>
         */
        setBindingContext(oContext: sap.ui.model.Context, sModelName?: string): sap.ui.base.ManagedObject;
        /**
         * <p>Sets or unsets a model for the given model name for this ManagedObject.</p><p>The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string. When the name is omitted, the default model is set/unset. To be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul></p><p>When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model with that name, this ManagedObject will immediately inherit that model from its ancestor.</p><p>All local bindings that depend on the given model name are updated (created if the model references became complete now; updated, if any model reference has changed; removed if the model references became incomplete now).</p><p>Any change (new model, removed model, inherited model) is also applied to all aggregated descendants as long as a descendant doesn't have its own model set for the given name.</p><p><b>Note:</b> By design, it is not possible to hide an inherited model by setting a <code>null</code> or <code>undefined</code> model. Applications can set an empty model to achieve the same.</p><p><b>Note:</b> A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.</p>
         * @param {sap.ui.model.Model} oModel <p>the model to be set or <code>null</code> or <code>undefined</code></p>
         * @param {string} sName <p>the name of the model or <code>undefined</code></p>
         * @returns sap.ui.base.ManagedObject <p><code>this</code> to allow method chaining</p>
         */
        setModel(oModel: sap.ui.model.Model, sName?: string): sap.ui.base.ManagedObject;
        /**
         * <p>Sets the given value for the given property after validating and normalizing it, marks this object as changed.</p><p>If the value is not valid with regard to the declared data type of the property, an Error is thrown. In case <code>null</code> or <code>undefined</code> is passed, the default value for this property is used (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateProperty" href="#/api/sap.ui.base.ManagedObject/methods/validateProperty">#validateProperty</a>). To fully reset the property to initial state, use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resetProperty" href="#/api/sap.ui.base.ManagedObject/methods/resetProperty">#resetProperty</a> instead. If the validated and normalized <code>oValue</code> equals the current value of the property, the internal state of this object is not changed (apart from the result of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isPropertyInitial" href="#/api/sap.ui.base.ManagedObject/methods/isPropertyInitial">#isPropertyInitial</a>). If the value changes, it is stored internally and the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="invalidate" href="#/api/sap.ui.base.ManagedObject/methods/invalidate">#invalidate</a> method is called on this object. In the case of TwoWay databinding, the bound model is informed about the property change.</p><p>Note that ManagedObject only implements a single level of change tracking: if a first call to setProperty recognizes a change, 'invalidate' is called. If another call to setProperty reverts that change, invalidate() will be called again, the new status is not recognized as being 'clean' again.</p><p><b>Note:</b> This method is a low level API as described in <a href="#lowlevelapi">the class documentation</a>. Applications or frameworks must not use this method to generically set a property. Use the concrete method set<i>XYZ</i> for property 'XYZ' or the generic <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="applySettings" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">#applySettings</a> instead.</p>
         * @param {string} sPropertyName <p>name of the property to set</p>
         * @param {any} oValue <p>value to set the property to</p>
         * @param {boolean} bSuppressInvalidate <p>if true, the managed object is not marked as changed</p>
         * @returns sap.ui.base.ManagedObject <p>Returns <code>this</code> to allow method chaining</p>
         */
        protected setProperty(sPropertyName: string, oValue: any, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Returns a string representation of this object.</p><p>In case there is no class or id information, a simple static string is returned. Subclasses should override this method.</p>
         * @returns string <p>A string description of this event provider</p>
         */
        toString(): string;
        /**
         * <p>Returns a simple string representation of this managed object.</p><p>Mainly useful for tracing purposes.</p>
         * @returns string <p>a string description of this managed object</p>
         */
        toString(): string;
        /**
         * <p>Unbind the aggregation from the model</p>
         * @param {string} sName <p>the name of the aggregation</p>
         * @param {boolean} bSuppressReset <p>whether the reset to empty aggregation when unbinding should be suppressed</p>
         * @returns sap.ui.base.ManagedObject <p>reference to the instance itself</p>
         */
        unbindAggregation(sName: string, bSuppressReset: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Removes the defined binding context of this object, all bindings will now resolve relative to the parent context again.</p>
         * @param {string} sModelName <p>Name of the model to remove the context for.</p>
         * @returns sap.ui.base.ManagedObject <p>Reference to the instance itself</p>
         */
        unbindObject(sModelName?: string): sap.ui.base.ManagedObject;
        /**
         * <p>Unbind the property from the model</p>
         * @param {string} sName <p>the name of the property</p>
         * @param {boolean} bSuppressReset <p>whether the reset to the default value when unbinding should be suppressed</p>
         * @returns sap.ui.base.ManagedObject <p>reference to the instance itself</p>
         */
        unbindProperty(sName: string, bSuppressReset: boolean): sap.ui.base.ManagedObject;
        /**
         * <p>Generic method which is called whenever an aggregation binding has changed.</p><p>Depending on the type of the list binding and on additional configuration, this method either destroys all elements in the aggregation <code>sName</code> and recreates them anew or tries to reuse as many existing objects as possible. It is up to the method which strategy it uses.</p><p>In case a managed object needs special handling for an aggregation binding, it can create a named update method (e.g. <code>update<i>Rows</i></code> for an aggregation <code>rows</code>) which then will be called by the framework instead of this generic method.</p><p>Subclasses should call this method only in the implementation of such a named update method and for no other purposes. The framework might change the conditions under which the method is called and the method implementation might rely on those conditions.</p>
         * @param {string} sName <p>name of the aggregation to update</p>
         */
        protected updateAggregation(sName: string): void;
        /**
         * <p>Checks whether the given value is of the proper type for the given aggregation name.</p><p>This method is already called by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setAggregation" href="#/api/sap.ui.base.ManagedObject/methods/setAggregation">#setAggregation</a>, <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addAggregation" href="#/api/sap.ui.base.ManagedObject/methods/addAggregation">#addAggregation</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="insertAggregation" href="#/api/sap.ui.base.ManagedObject/methods/insertAggregation">#insertAggregation</a>. In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.</p>
         * @param {string} sAggregationName <p>the name of the aggregation</p>
         * @param {sap.ui.base.ManagedObject | any} oObject <p>the aggregated object or a primitive value</p>
         * @param {boolean} bMultiple <p>whether the caller assumes the aggregation to have cardinality 0..n</p>
         * @returns sap.ui.base.ManagedObject|any <p>the passed object</p>
         */
        protected validateAggregation(sAggregationName: string, oObject: sap.ui.base.ManagedObject | any, bMultiple: boolean): sap.ui.base.ManagedObject | any;
        /**
         * <p>Checks whether the given value is of the proper type for the given property name.</p><p>In case <code>null</code> or <code>undefined</code> is passed, the default value for this property is used as value. If no default value is defined for the property, the default value of the type of the property is used.</p><p>If the property has a data type that is an instance of sap.ui.base.DataType and if a <code>normalize</code> function is defined for that type, that function will be called with the resulting value as only argument. The result of the function call is then used instead of the raw value.</p><p>This method is called by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setProperty" href="#/api/sap.ui.base.ManagedObject/methods/setProperty">#setProperty</a>. In many cases, subclasses of ManagedObject don't need to call it themselves.</p>
         * @param {string} sPropertyName <p>Name of the property</p>
         * @param {any} oValue <p>Value to be set</p>
         * @returns any <p>The normalized value for the passed value or for the default value if <code>null</code> or <code>undefined</code> was passed</p>
         */
        protected validateProperty(sPropertyName: string, oValue: any): any;
      }
      /**
       * <p><strong>Note about Info Objects</strong></p><p>Several methods in this class return info objects that describe a property, aggregation, association or event of the class described by this metadata object. The type, structure and behavior of these info objects is not yet documented and not part of the stable, public API.</p><p>Code using such methods and the returned info objects therefore needs to be aware of the following restrictions:</p><p><ul> <li>the set of properties exposed by each info object, their type and value might change as well as the class of the info object itself.</p><p>Properties that represent settings provided during class definition (in the oClassInfo parameter of the 'extend' call, e.g. 'type', 'multiple' of an aggregation) are more likely to stay the same than additional, derived properties like '_iKind'.</li></p><p><li>info objects must not be modified / enriched although they technically could.</li></p><p><li>the period of validity of info objects is not defined. They should be referenced only for a short time and not be kept as members of long living objects or closures.</li></p><p></ul></p>
       */
      export class ManagedObjectMetadata extends sap.ui.base.Metadata {
        /**
         * <p>Test whether a given ID looks like it was automatically generated.</p><p>Examples: <pre>
        True for:
          "foo--__bar04--baz"
          "foo--__bar04"
          "__bar04--baz"
          "__bar04"
          "__bar04--"
          "__bar04--foo"
        False for:
          "foo__bar04"
          "foo__bar04--baz"
        </pre></p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/methods/uid">sap.ui.base.ManagedObjectMetadata.prototype.uid</a> for details on ID generation.</p>
         * @param {string} sId <p>the ID that should be tested</p>
         * @returns boolean <p>whether the ID is likely to be generated</p>
         */
        static isGeneratedId(sId: string): boolean;
        /**
         * <p>Calculates a new ID based on a prefix.</p><p>To guarantee uniqueness of the generated IDs across all ID prefixes, prefixes must not end with digits.</p>
         * @param {string} sIdPrefix <p>prefix for the new ID</p>
         * @returns string <p>A (hopefully unique) control id</p>
         */
        static uid(sIdPrefix: string): string;
        /**
         * <p>Creates a new metadata object that describes a subclass of ManagedObject.</p><p><b>Note:</b> Code outside the <code>sap.ui.base</code> namespace must not call this constructor directly. Instances will be created automatically when a new class is defined with one of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/sap.ui.base.ManagedObject.extend"><i>SomeClass</i>.extend</a> methods.</p><p><b>Note</b>: throughout this class documentation, the described subclass of ManagedObject is referenced as <i>the described class</i>.</p>
         * @param {string} sClassName <p>fully qualified name of the described class</p>
         * @param {any} oClassInfo <p>static info to construct the metadata from</p>
         */
        constructor(sClassName: string, oClassInfo: any);
        /**
         * <p>Returns an info object for the named public aggregation of the described class no matter whether the aggregation was defined by the class itself or by one of its ancestor classes.</p><p>If neither the class nor its ancestor classes define a public aggregation with the given name, <code>undefined</code> is returned.</p><p>If the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation of the 'described class' (if any).</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the aggregation or empty</p>
         * @returns any <p>An info object describing the aggregation or <code>undefined</code></p>
         */
        getAggregation(sName?: string): any;
        /**
         * <p>Returns a map of info objects for the public aggregations of the described class. Aggregations declared by ancestor classes are not included.</p><p>The returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of aggregation info objects keyed by aggregation names</p>
         */
        getAggregations(): any;
        /**
         * <p>Returns a map of info objects for all public aggregations of the described class, including public aggregations form the ancestor classes.</p><p>The returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of aggregation info objects keyed by aggregation names</p>
         */
        getAllAggregations(): any;
        /**
         * <p>Returns a map of info objects for all public associations of the described class, including public associations form the ancestor classes.</p><p>The returned map keys the association info objects by their name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of association info objects keyed by association names</p>
         */
        getAllAssociations(): any;
        /**
         * <p>Returns a map of info objects for all public events of the described class, including public events form the ancestor classes.</p><p>The returned map keys the event info objects by their name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of event info objects keyed by event names</p>
         */
        getAllEvents(): any;
        /**
         * <p>Returns a map of info objects for all private (hidden) aggregations of the described class, including private aggregations from the ancestor classes.</p><p>The returned map contains aggregation info objects keyed by the aggregation name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of aggregation info objects keyed by aggregation names</p>
         */
        protected getAllPrivateAggregations(): any;
        /**
         * <p>Returns a map of info objects for all private (hidden) associations of the described class, including private associations from the ancestor classes.</p><p>The returned map contains association info objects keyed by the association name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of association info objects keyed by association names</p>
         */
        protected getAllPrivateAssociations(): any;
        /**
         * <p>Returns a map of info objects for all private (hidden) properties of the described class, including private properties from the ancestor classes.</p><p>The returned map contains property info objects keyed by the property name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of property info objects keyed by property names</p>
         */
        protected getAllPrivateProperties(): any;
        /**
         * <p>Returns a map of info objects for all public properties of the described class, including public properties from the ancestor classes.</p><p>The returned map keys the property info objects by their name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of property info objects keyed by the property names</p>
         */
        getAllProperties(): any;
        /**
         * <p>Returns an info object for the named public association of the described class, no matter whether the association was defined by the class itself or by one of its ancestor classes.</p><p>If neither the described class nor its ancestor classes define an association with the given name, <code>undefined</code> is returned.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the association</p>
         * @returns any <p>An info object describing the association or <code>undefined</code></p>
         */
        getAssociation(sName: string): any;
        /**
         * <p>Returns a map of info objects for all public associations of the described class. Associations declared by ancestor classes are not included.</p><p>The returned map keys the association info objects by their name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of association info objects keyed by association names</p>
         */
        getAssociations(): any;
        /**
         * <p>Returns an info object for the named public event of the described class, no matter whether the event was defined by the class itself or by one of its ancestor classes.</p><p>If neither the described class nor its ancestor classes define an event with the given name, <code>undefined</code> is returned.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the event</p>
         * @returns any <p>An info object describing the event or <code>undefined</code></p>
         */
        getEvent(sName: string): any;
        /**
         * <p>Returns a map of info objects for the public events of the described class. Events declared by ancestor classes are not included.</p><p>The returned map keys the event info objects by their name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of event info objects keyed by event names</p>
         */
        getEvents(): any;
        /**
         * <p>Returns the name of the library that contains the described UIElement.</p>
         * @returns string <p>the name of the library</p>
         */
        getLibraryName(): string;
        /**
         * <p>Returns the info object for the named public or private aggregation declared by the described class or by any of its ancestors.</p><p>If the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation of the described class (if it is defined).</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sAggregationName <p>name of the aggregation to be retrieved or empty</p>
         * @returns any <p>aggregation info object or undefined</p>
         */
        protected getManagedAggregation(sAggregationName: string): any;
        /**
         * <p>Returns the info object for the named public or private association declared by the described class or by any of its ancestors.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the association to be retrieved</p>
         * @returns any <p>association info object or undefined</p>
         */
        protected getManagedAssociation(sName: string): any;
        /**
         * <p>Returns the info object for the named public or private property declared by the described class or by any of its ancestors.</p><p>If the name is not given (or has a falsy value), then it is substituted by the name of the default property of the described class (if it is defined).</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the property to be retrieved or empty</p>
         * @returns any <p>property info object or undefined</p>
         */
        protected getManagedProperty(sName: string): any;
        /**
         * <p>Returns a map of info objects for the public properties of the described class. Properties declared by ancestor classes are not included.</p><p>The returned map keys the property info objects by their name.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @returns any <p>Map of property info objects keyed by the property names</p>
         */
        getProperties(): any;
        /**
         * <p>Returns an info object for the named public property of the described class, no matter whether the property was defined by the class itself or by one of its ancestor classes.</p><p>If neither the described class nor its ancestor classes define a property with the given name, <code>undefined</code> is returned.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the property</p>
         * @returns any <p>An info object describing the property or <code>undefined</code></p>
         */
        getProperty(sName: string): any;
        /**
         * <p>Returns a map of default values for all properties declared by the described class and its ancestors, keyed by the property name.</p>
         * @returns any <p>Map of default values keyed by property names</p>
         */
        getPropertyDefaults(): any;
        /**
         * <p>Returns an info object for a public setting with the given name that either is a public property or a public aggregation of cardinality 0..1 and with at least one simple alternative type. The setting can be defined by the class itself or by one of its ancestor classes.</p><p>If neither the described class nor its ancestor classes define a suitable setting with the given name, <code>undefined</code> is returned.</p><p><b>Warning:</b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/constructor">Notes about Info objects</a> in the constructor documentation of this class.</p>
         * @param {string} sName <p>name of the property like setting</p>
         * @returns any <p>An info object describing the property or aggregation or <code>undefined</code></p>
         */
        getPropertyLikeSetting(sName: string): any;
        /**
         * <p>Checks the existence of the given public aggregation by its name.</p>
         * @param {string} sName <p>name of the aggregation</p>
         * @returns boolean <p>true, if the aggregation exists</p>
         */
        hasAggregation(sName: string): boolean;
        /**
         * <p>Checks the existence of the given public association by its name</p>
         * @param {string} sName <p>name of the association</p>
         * @returns boolean <p>true, if the association exists</p>
         */
        hasAssociation(sName: string): boolean;
        /**
         * <p>Checks the existence of the given event by its name</p>
         * @param {string} sName <p>name of the event</p>
         * @returns boolean <p>true, if the event exists</p>
         */
        hasEvent(sName: string): boolean;
        /**
         * <p>Checks the existence of the given public property by its name</p>
         * @param {string} sName <p>name of the property</p>
         * @returns boolean <p>true, if the property exists</p>
         */
        hasProperty(sName: string): boolean;
        /**
         * <p>Calculates a new ID for an instance of this class.</p><p>Note that the calculated short name part is usually not unique across all classes, but doesn't have to be. It might even be empty when the class name consists of invalid characters only.</p>
         * @returns string <p>A (hopefully unique) control ID</p>
         */
        uid(): string;
      }
      /**
       * <p>Use the <code>ManagedObjectObserver</code> to get notified when properties, aggregations or associations of a <code>ManagedObject</code> instance have changed.</p><p>Use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="observe" href="#/api/sap.ui.base.ManagedObjectObserver/methods/observe">#observe</a> method to add instances of ManagedObject that should be observed or to enhance the set of observed properties, aggregations etc. for an already observed instance.</p><p>Use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="unobserve" href="#/api/sap.ui.base.ManagedObjectObserver/methods/unobserve">#unobserve</a> method to stop observing an instance of ManagedObject or to reduce the set of observed properties, aggregations etc. for an observed instance.</p><p>Use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="disconnect" href="#/api/sap.ui.base.ManagedObjectObserver/methods/disconnect">#disconnect</a> method to completely stop observing all instances of ManagedObject hat previously had been added to this observer.</p><p>The only parameter to the constructor is a function <code>fnCallback</code> which will be called for every observed change. Depending on the type of the change, different change objects are passed to the callback:</p><h4>Property Change</h4><p> {string} change.name the name of the property that changed<br> {string} change.type 'property'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.old the old value<br> {any} change.current the new value<br></p><h4>Aggregation Change</h4><p> {string} change.name the name of the aggregation that changed<br> {string} change.type 'aggregation'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {sap.ui.base.ManagedObject} change.child the child managed object instance<br></p><h4>Association Change</h4><p> {string} change.name the name of the association that changed<br> {string} change.type 'association'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {string|string[]} change.ids the ids that changed<br></p><h4>Event Registry Change</h4><p> {string} change.name the name of the event that changed<br> {string} change.type 'event'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {object} change.listener the listener object<br> {object} change.func the listeners function<br> {object} change.data the events data<br></p><h4>Binding Change</h4><p> {string} change.name the name of the binding that changed<br> {string} change.type 'binding'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'prepare', 'ready' or 'remove'<br> {object} change.bindingInfo the binding info object<br> {string} change.memberType 'property' or 'aggregation'<br></p><h4>destroy managed Object</h4><p> {string} change.type 'destroy'<br> {object} change.object the managed object instance on which the change occurred<br></p>
       */
      export class ManagedObjectObserver extends sap.ui.base.Object {
        /**
         * <p>Constructor for a new ManagedObjectObserver.</p>
         * @param {Function} fnCallback <p>Callback function for this observer, to be called whenever a change happens</p>
         */
        constructor(fnCallback: Function);
      }
      /**
       * <p>Metadata for a class.</p>
       */
      export class Metadata {
        /**
         * <p>Creates a new metadata object from the given static infos.</p><p><b>Note:</b> Throughout this class documentation, the described subclass of Object is referenced as <i>the described class</i>.</p>
         * @param {string} sClassName <p>Fully qualified name of the described class</p>
         * @param {any} oClassInfo <p>Info to construct the class and its metadata from</p>
         */
        constructor(sClassName: string, oClassInfo: any);
        /**
         * <p>Returns the (constructor of the) described class</p>
         * @returns Function <p>class described by this metadata</p>
         */
        getClass(): Function;
        /**
         * <p>Returns the fully qualified name of the described class</p>
         * @returns string <p>name of the described class</p>
         */
        getName(): string;
        /**
         * <p>Returns the metadata object of the base class of the described class or null if the class has no (documented) base class.</p>
         * @returns sap.ui.base.Metadata <p>metadata of the base class</p>
         */
        getParent(): sap.ui.base.Metadata;
        /**
         * <p>Checks whether the class described by this metadata object is of the named type.</p><p>This check is solely based on the type names as declared in the class metadata. It compares the given <code>vTypeName</code> with the name of this class, with the names of any base class of this class and with the names of all interfaces implemented by any of the aforementioned classes.</p><p>Instead of a single type name, an array of type names can be given and the method will check if this class is of any of the listed types (logical or).</p><p>Should the UI5 class system in future implement additional means of associating classes with type names (e.g. by introducing mixins), then this method might detect matches for those names as well.</p>
         * @param {string | string[]} vTypeName <p>Type or types to check for</p>
         * @returns boolean <p>Whether this class is of the given type or of any of the given types</p>
         */
        isA(vTypeName: string | string[]): boolean;
        /**
         * <p>Returns whether the described class is abstract</p>
         * @returns boolean <p>whether the class is abstract</p>
         */
        isAbstract(): boolean;
        /**
         * <p>Whether the described class is deprecated and should not be used any more</p>
         * @returns boolean <p>whether the class is considered deprecated</p>
         */
        isDeprecated(): boolean;
        /**
         * <p>Returns whether the described class is final</p>
         * @returns boolean <p>whether the class is final</p>
         */
        isFinal(): boolean;
        /**
         * <p>Checks whether the described class or one of its ancestor classes implements the given interface.</p>
         * @param {string} sInterface <p>name of the interface to test for (in dot notation)</p>
         * @returns boolean <p>whether this class implements the interface</p>
         */
        isInstanceOf(sInterface: string): boolean;
      }
      /**
       * <p>Base class for all SAPUI5 Objects.</p>
       */
      export abstract class Object {
        /**
         * <p>Checks whether the given object is an instance of the named type. This function is a short-hand convenience for <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/isA">sap.ui.base.Object#isA</a>.</p><p>Please see the API documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/isA">sap.ui.base.Object#isA</a> for more details.</p>
         * @param {any} oObject <p>Object which will be checked whether it is an instance of the given type</p>
         * @param {string | string[]} vTypeName <p>Type or types to check for</p>
         * @returns boolean <p>Whether the given object is an instance of the given type or of any of the given types</p>
         */
        static isA(oObject: any, vTypeName: string | string[]): boolean;
        /**
         * <p>Constructor for an <code>sap.ui.base.Object</code>.</p><p>Subclasses of this class should always call the constructor of their base class.</p>
         */
        constructor();
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Checks whether this object is an instance of the named type.</p><p>This check is solely based on the type names as declared in the class metadata. It compares the given <code>vTypeName</code> with the name of the class of this object, with the names of any base class of that class and with the names of all interfaces implemented by any of the aforementioned classes.</p><p>Instead of a single type name, an array of type names can be given and the method will check if this object is an instance of any of the listed types (logical or).</p><p>Should the UI5 class system in future implement additional means of associating classes with type names (e.g. by introducing mixins), then this method might detect matches for those names as well.</p>
         * @param {string | string[]} vTypeName <p>Type or types to check for</p>
         * @returns boolean <p>Whether this object is an instance of the given type or of any of the given types</p>
         */
        isA(vTypeName: string | string[]): boolean;
      }
      /**
       * <p>Manages a pool of objects all of the same type; the type has to be specified at pool construction time.</p><p>Maintains a list of free objects of the given type. If <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ObjectPool/methods/borrowObject">sap.ui.base.ObjectPool.prototype.borrowObject</a> is called, an existing free object is taken from the pool and the <code>init</code> method is called on this object.</p><p>When no longer needed, any borrowed object should be returned to the pool by calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="returnObject" href="#/api/sap.ui.base.ObjectPool/methods/returnObject">#returnObject</a>. At that point in time, the reset method is called on the object and the object is added to the list of free objects.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Poolable">sap.ui.base.Poolable</a> for a description of the contract for poolable objects.</p><p>Example: <pre>
        this.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);
        var oEvent = this.oEventPool.borrowObject(iEventId, mParameters);
      </pre></p>
       */
      export class ObjectPool extends sap.ui.base.Object {
        /**
         * <p>Creates an ObjectPool instance based on the given oObjectClass.<br/>; If there is a free pooled instance, returns that one, otherwise creates a new one.<br/>; In order to be maintained by the ObjectPool, oObjectClass must implement methods described in the class description.</p>
         * @param {Function} oObjectClass <p>constructor for the class of objects that this pool should manage</p>
         */
        constructor(oObjectClass: Function);
        /**
         * <p>Borrows a free object from the pool. Any arguments to this method are forwarded to the init method of the borrowed object.</p>
         * @param {any} any <p>optional initialization parameters for the borrowed object</p>
         * @returns any <p>the borrowed object of the same type that has been specified for this pool</p>
         */
        borrowObject(any?: any): any;
        /**
         * <p>Returns an object to the pool. The object must have been borrowed from this pool beforehand. The reset method is called on the object before it is added to the set of free objects.</p>
         * @param {any} oObject <p>the object to return to the pool</p>
         */
        returnObject(oObject: any): void;
      }
      /**
       * <p><p>Contract for objects that can be pooled by <code>ObjectPool</code>.</p></p>
       */
      export interface Poolable {
        /**
         * <p>Called by the object pool when this instance will be actived for a caller. The same method will be called after a new instance has been created by an otherwise exhausted pool.</p><p>If the caller provided any arguments to <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ObjectPool/methods/borrowObject">sap.ui.base.ObjectPool#borrowObject</a> all arguments will be propagated to this method.</p>
         */
        init(): void;
        /**
         * <p>Called by the object pool when an instance is returned to the pool. While no specific implementation is required, poolable objects in general should clean all caller specific state (set to null) in this method to avoid memory leaks and to enforce garbage collection of the caller state.</p>
         */
        reset(): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     * <p><p>The SAPUI5 Core Runtime.</p><p>Contains the UI5 jQuery plugins (jQuery.sap.*), the Core and all its components, base classes for Controls, Components and the Model View Controller classes.</p></p>
     */
    namespace core {
      /**
       * <p>Applies the support for custom style classes on the prototype of a <code>sap.ui.core.Element</code>.</p><p>All controls (subclasses of <code>sap.ui.core.Control</code>) provide the support custom style classes. The control API provides functions to the application which allow it to add, remove or change style classes for the control. In general, this option is not available for elements because elements do not necessarily have a representation in the DOM.</p><p>This function can be used by a control developer to explicitly enrich the API of his/her element implementation with the API functions for the custom style class support. It must be called on the prototype of the element.</p><p><b>Usage Example:</b> <pre>
      sap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {
         "use strict";
         var MyElement = Element.extend("my.MyElement", {
            metadata : {
               //...
            }
            //...
         });
      
         CustomStyleClassSupport.apply(MyElement.prototype);
      
         return MyElement;
      }, true);
      </pre></p><p>Furthermore, the function <code>oRenderManager.writeClasses(oElement);</code> (<a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/writeClasses">sap.ui.core.RenderManager#writeClasses</a>) must be called within the renderer of the control to which the element belongs, when writing the root tag of the element. This ensures the classes are written to the HTML.</p><p>This function adds the following functions to the elements prototype: <ul> <li><code>addStyleClass</code>: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/addStyleClass">sap.ui.core.Control#addStyleClass</a></li> <li><code>removeStyleClass</code>: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/removeStyleClass">sap.ui.core.Control#removeStyleClass</a></li> <li><code>toggleStyleClass</code>: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/toggleStyleClass">sap.ui.core.Control#toggleStyleClass</a></li> <li><code>hasStyleClass</code>: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/hasStyleClass">sap.ui.core.Control#hasStyleClass</a></li> </ul> In addition the clone function of the element is extended to ensure that the custom style classes are also available on the cloned element.</p><p><b>Note:</b> This function can only be used <i>within</i> control development. An application cannot add style class support on existing elements by calling this function.</p>
       */
      function CustomStyleClassSupport(): void;
      /**
       * <p><p>Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property. For more information, go to "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.</p></p>
       */
      export enum AccessibleLandmarkRole {
        /**
         * <p>Represents the ARIA role <code>banner</code>.</p><p>A banner usually appears at the top of the page and typically spans the full width.</p>
         */
        Banner = "Banner",
        /**
         * <p>Represents the ARIA role <code>complementary</code>.</p><p>A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.</p>
         */
        Complementary = "Complementary",
        /**
         * <p>Represents the ARIA role <code>contentinfo</code>.</p><p>A region that contains information about the content on the page.</p>
         */
        ContentInfo = "ContentInfo",
        /**
         * <p>Represents the ARIA role <code>form</code>.</p><p>A region that contains a collection of items and objects that, as a whole, combine to create a form.</p>
         */
        Form = "Form",
        /**
         * <p>Represents the ARIA role <code>main</code>.</p><p>The main content of a page.</p>
         */
        Main = "Main",
        /**
         * <p>Represents the ARIA role <code>navigation</code>.</p><p>A region that contains a collection of items and objects that, as a whole, combine to create a navigation facility.</p>
         */
        Navigation = "Navigation",
        /**
         * <p>No explicit role is applicable.</p><p>The interpretation of this value depends on the control / element which defines a property with this type. Normally this value means that no accessible landmark should be written.</p>
         */
        None = "None",
        /**
         * <p>Represents the ARIA role <code>region</code>.</p><p>A section of a page, that is important enough to be included in a page summary or table of contents.</p>
         */
        Region = "Region",
        /**
         * <p>Represents the ARIA role <code>search</code>.</p><p>A region that contains a collection of items and objects that, as a whole, combine to create a search facility.</p>
         */
        Search = "Search",
      }
      /**
       * <p><p>Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property. For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.</p></p>
       */
      export enum AccessibleRole {
        /**
         * <p>A message with an alert or error information.</p>
         */
        Alert = "Alert",
        /**
         * <p>A separate window with an alert or error information.</p>
         */
        AlertDialog = "AlertDialog",
        /**
         * <p>A software unit executing a set of tasks for the user.</p>
         */
        Application = "Application",
        /**
         * <p>Usually defined as the advertisement at the top of a web page. The banner content typically contains the site or company logo, or other key advertisements.</p>
         */
        Banner = "Banner",
        /**
         * <p>Allows user-triggered actions.</p>
         */
        Button = "Button",
        /**
         * <p>A control that has three possible values: true, false, mixed.</p>
         */
        Checkbox = "Checkbox",
        /**
         * <p>A table cell containing header information for a column.</p>
         */
        ColumnHeader = "ColumnHeader",
        /**
         * <p>Allows selecting an item from a list, or to enter data directly in the input field.</p>
         */
        Combobox = "Combobox",
        /**
         * <p>Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.</p>
         */
        ContentInfo = "ContentInfo",
        /**
         * <p>The content of the associated element represents a definition. If there is a definition element within the content, this one represents the term being defined.</p>
         */
        Definition = "Definition",
        /**
         * <p>Descriptive content for a page element.</p>
         */
        Description = "Description",
        /**
         * <p>A small window that is designed to interrupt the current application processing in order to inform the user and to get some response.</p>
         */
        Dialog = "Dialog",
        /**
         * <p>A list of references to members of a single group.</p>
         */
        Directory = "Directory",
        /**
         * <p>Content that contains related information, such as a book.</p>
         */
        Document = "Document",
        /**
         * <p>Contains cells of tabular data arranged in rows and columns, for example in a table.</p>
         */
        Grid = "Grid",
        /**
         * <p>A table cell in a grid where the cells can be active, editable, and selectable. Cells may have functional relationships to controls, for example.</p>
         */
        GridCell = "GridCell",
        /**
         * <p>A section of user interface objects.</p>
         */
        Group = "Group",
        /**
         * <p>A heading for a section of the page.</p>
         */
        Heading = "Heading",
        /**
         * <p>A container for a collection of elements that form an image.</p>
         */
        Img = "Img",
        /**
         * <p>An interactive reference to a resource.</p>
         */
        Link = "Link",
        /**
         * <p>A container for non-interactive list items which are the children of the list.</p>
         */
        List = "List",
        /**
         * <p>A widget that allows the user to select one or more items from a list. The items within the list are static and can contain images.</p>
         */
        Listbox = "Listbox",
        /**
         * <p>A single item in a list.</p>
         */
        ListItem = "ListItem",
        /**
         * <p>An area where new information is added, or old information disappears. Information types are chat logs, messaging, or error logs, for example. The log contains a sequence: New information is always added to the end of the log.</p>
         */
        Log = "Log",
        /**
         * <p>Defines the main content of a document.</p>
         */
        Main = "Main",
        /**
         * <p>Is used to scroll text across the page.</p>
         */
        Marquee = "Marquee",
        /**
         * <p>Offers a list of choices to the user.</p>
         */
        Menu = "Menu",
        /**
         * <p>A container for menu items where each item may activate a submenu.</p>
         */
        Menubar = "Menubar",
        /**
         * <p>A child in a menu.</p>
         */
        MenuItem = "MenuItem",
        /**
         * <p>A checkable menu item (tri-state).</p>
         */
        MenuItemCheckbox = "MenuItemCheckbox",
        /**
         * <p>A menu item which is part of a group of menuitemradio roles.</p>
         */
        MenuItemRadio = "MenuItemRadio",
        /**
         * <p>A collection of links suitable for use when navigating the document or related documents.</p>
         */
        Navigation = "Navigation",
        /**
         * <p>The content is parenthetic or ancillary to the main content of the resource.</p>
         */
        Note = "Note",
        /**
         * <p>A selectable item in a list represented by a select.</p>
         */
        Option = "Option",
        /**
         * <p>An element whose role is presentational does not need to be mapped to the accessibility API.</p>
         */
        Presentation = "Presentation",
        /**
         * <p>Shows the execution progress in applications providing functions that take a long time.</p>
         */
        ProgressBar = "ProgressBar",
        /**
         * <p>An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.</p>
         */
        Radio = "Radio",
        /**
         * <p>A group of radio controls.</p>
         */
        RadioGroup = "RadioGroup",
        /**
         * <p>A large section on the web page.</p>
         */
        Region = "Region",
        /**
         * <p>A row of table cells.</p>
         */
        Row = "Row",
        /**
         * <p>A table cell containing header information for a row.</p>
         */
        RowHeader = "RowHeader",
        /**
         * <p>A search section of a web document. In many cases, this is a form used to submit search requests about the site, or a more general Internet wide search service.</p>
         */
        Search = "Search",
        /**
         * <p>A unique section of the document. In the case of a portal, this may include time display, weather forecast, or stock price.</p>
         */
        Secondary = "Secondary",
        /**
         * <p>Indicates that the element contains content that is related to the main content of the page.</p>
         */
        SeeAlso = "SeeAlso",
        /**
         * <p>A line or bar that separates sections of content.</p>
         */
        Separator = "Separator",
        /**
         * <p>A user input where the user selects an input in a given range. This form of range expects an analogous keyboard interface.</p>
         */
        Slider = "Slider",
        /**
         * <p>Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and the other ones can be displayed by scrolling using the arrow up and arrow down key.</p>
         */
        SpinButton = "SpinButton",
        /**
         * <p>A container for processing advisory information.</p>
         */
        Status = "Status",
        /**
         * <p>A header for a tab panel.</p>
         */
        Tab = "Tab",
        /**
         * <p>A list of tabs which are references to tab panels.</p>
         */
        Tablist = "Tablist",
        /**
         * <p>A container for the resources associated with a tab.</p>
         */
        Tabpanel = "Tabpanel",
        /**
         * <p>Inputs that allow free-form text as their value.</p>
         */
        Textbox = "Textbox",
        /**
         * <p>A numerical counter which indicates an amount of elapsed time from a start point, or of the time remaining until a certain end point.</p>
         */
        Timer = "Timer",
        /**
         * <p>A collection of commonly used functions represented in compact visual form.</p>
         */
        Toolbar = "Toolbar",
        /**
         * <p>A popup that displays a description for an element when the user passes over or rests on that element. Supplement to the normal tooltip processing of the user agent.</p>
         */
        Tooltip = "Tooltip",
        /**
         * <p>A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.</p>
         */
        Tree = "Tree",
        /**
         * <p>A grid whose rows are expandable and collapsable in the same manner as the ones of trees.</p>
         */
        TreeGrid = "TreeGrid",
        /**
         * <p>A tree node</p>
         */
        TreeItem = "TreeItem",
      }
      /**
       * <p><p>Configuration options for the colors of a progress bar.</p></p>
       */
      export enum BarColor {
        /**
         * <p>Color: yellow (#faf2b0)</p>
         */
        CRITICAL = "CRITICAL",
        /**
         * <p>Color: red (#ff9a90)</p>
         */
        NEGATIVE = "NEGATIVE",
        /**
         * <p>Color: blue (#b8d0e8)</p>
         */
        NEUTRAL = "NEUTRAL",
        /**
         * <p>Color: green (#b5e7a8)</p>
         */
        POSITIVE = "POSITIVE",
      }
      /**
       * <p><p>Configuration options for the <code>BusyIndicator</code> size.</p></p>
       */
      export enum BusyIndicatorSize {
        /**
         * <p>Type: automatic size detection</p>
         */
        Auto = "Auto",
        /**
         * <p>Type: Large size</p>
         */
        Large = "Large",
        /**
         * <p>Type: Medium size</p>
         */
        Medium = "Medium",
        /**
         * <p>Type: small size</p>
         */
        Small = "Small",
      }
      /**
       * <p><p>The types of <code>Calendar</code>.</p></p>
       */
      export enum CalendarType {
        /**
         * <p>The Thai buddhist calendar</p>
         */
        Buddhist = "Buddhist",
        /**
         * <p>The Gregorian calendar</p>
         */
        Gregorian = "Gregorian",
        /**
         * <p>The Islamic calendar</p>
         */
        Islamic = "Islamic",
        /**
         * <p>The Japanese emperor calendar</p>
         */
        Japanese = "Japanese",
        /**
         * <p>The Persian Jalali calendar</p>
         */
        Persian = "Persian",
      }
      /**
       * <p>Base Class for Component.</p>
       */
      export abstract class Component extends sap.ui.base.ManagedObject {
        /**
         * <p>Asynchronously creates a new component instance from the given configuration.</p><p>To optimize the loading process, additional <code>asyncHints</code> can be provided. The structure of these hints and how they impact the loading of components is an internal feature of this API and reserved for UI5 internal use only. Code that wants to be safe wrt. version updates, should not use the <code>asyncHints</code> property.</p><p>If Components and/or libraries are listed in the <code>asyncHints</code>, all the corresponding preload files will be requested in parallel, loading errors (404s) will be ignored. The constructor class will only be required after all preloads have been rejected or resolved. Only then, the new instance will be created.</p>
         * @param {any} mOptions <p>Configuration options</p>
         * @returns any <p>A Promise that resolves with the newly created component instance</p>
         */
        static create(mOptions: any): any;
        /**
         * <p>Returns an existing component instance, identified by its ID.</p>
         * @param {string} sId <p>ID of the component.</p>
         * @returns sap.ui.core.Component <p>Component instance or <code>undefined</code> when no component with the given ID exists.</p>
         */
        static get(sId: string): sap.ui.core.Component;
        /**
         * <p>Returns the Component instance in whose "context" the given ManagedObject has been created or <code>undefined</code>.</p><p>This is a convenience wrapper around <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.Component.getOwnerIdFor" href="#/api/sap.ui.core.Component/methods/sap.ui.core.Component.getOwnerIdFor">Component.getOwnerIdFor</a>. If the owner ID cannot be determined for reasons documented on <code>getOwnerForId</code> or when the Component for the determined ID no longer exists, <code>undefined</code> will be returned.</p>
         * @param {sap.ui.base.ManagedObject} oObject <p>Object to retrieve the owner Component for</p>
         * @returns sap.ui.core.Component <p>the owner Component or <code>undefined</code>.</p>
         */
        static getOwnerComponentFor(oObject: sap.ui.base.ManagedObject): sap.ui.core.Component;
        /**
         * <p>Returns the ID of the object in whose "context" the given ManagedObject has been created.</p><p>For objects that are not ManagedObjects or for which the owner is unknown, <code>undefined</code> will be returned as owner ID.</p><p><strong>Note</strong>: Ownership for objects is only checked by the framework at the time when they are created. It is not checked or updated afterwards. And it can only be detected while the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component/methods/runAsOwner">Component.runAsOwner</a> function is executing. Without further action, this is only the case while the content of a UIComponent is <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/createContent">constructed</a> or when a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router">Router</a> creates a new View and its content.</p><p><strong>Note</strong>: This method does not guarantee that the returned owner ID belongs to a Component. Currently, it always does. But future versions of UI5 might introduce a more fine grained ownership concept, e.g. taking Views into account. Callers that want to deal only with components as owners, should use the following method: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component/methods/sap.ui.core.Component.getOwnerComponentFor">Component.getOwnerComponentFor</a>. It guarantees that the returned object (if any) will be a Component.</p><p><strong>Further note</strong> that only the ID of the owner is recorded. In rare cases, when the lifecycle of a ManagedObject is not bound to the lifecycle of its owner, (e.g. by the means of aggregations), then the owner might have been destroyed already whereas the ManagedObject is still alive. So even the existence of an owner ID is not a guarantee for the existence of the corresponding owner.</p>
         * @param {sap.ui.base.ManagedObject} oObject <p>Object to retrieve the owner ID for</p>
         * @returns string <p>ID of the owner or <code>undefined</code></p>
         */
        static getOwnerIdFor(oObject: sap.ui.base.ManagedObject): string;
        /**
         * <p>Asynchronously loads a component class without instantiating it; returns a promise on the loaded class.</p><p>Beware: "Asynchronous component loading" doesn't necessarily mean that no more synchronous loading occurs. Both the framework as well as component implementations might still execute synchronous requests. <code>Component.load</code> just allows to use async calls internally.</p><p>When a manifest is referenced in <code>mOptions</code>, this manifest is not automatically used for instances of the Component class that are created after loading. The manifest or the manifest url must be provided for every instance explicitly.</p><p>To optimize the loading process, additional <code>asyncHints</code> can be provided. If components and/or libraries are listed in the <code>asyncHints</code>, all the corresponding preload files will be requested in parallel, loading errors (404s) will be ignored. The constructor class will only be required after all preloads have been rejected or resolved. The structure of the hints and how they impact the loading of components is an internal feature of this API and reserved for UI5 internal use only. Code that wants to be safe wrt. version updates, should not use the <code>asyncHints</code> property.</p>
         * @param {any} mOptions <p>Configuration options</p>
         * @returns any <p>A Promise that resolves with the loaded component class or <code>undefined</code> in case <code>mOptions.asyncHints.preloadOnly</code> is set to <code>true</code></p>
         */
        static load(mOptions: any): any;
        /**
         * <p>Creates and initializes a new Component with the given <code>sId</code> and settings.</p><p>The set of allowed entries in the <code>mSettings</code> object depends on the concrete subclass and is described there. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component">sap.ui.core.Component</a> for a general description of this argument.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject</a> can be used.</p>
         * @param {string} sId <p>Optional ID for the new control; generated automatically if no non-empty ID is given. Note: this can be omitted, no matter whether <code>mSettings</code> are given or not!</p>
         * @param {any} mSettings <p>Optional object with initial settings for the new Component instance</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Creates a nested component that is declared in the <code>sap.ui5/componentUsages</code> section of the descriptor (manifest.json). The following snippet shows the declaration: <pre>
        {
          [...]
          "sap.ui5": {
            "componentUsages": {
              "myUsage": {
                "name": "my.useful.Component"
              }
            }
          }
          [...]
        }
        </pre> The syntax of the configuration object of the component usage matches the configuration object of the {#link sap.ui.component} factory function.</p><p>This is an example of how the <code>createComponent</code> function can be used for asynchronous scenarios: <pre>
        oComponent.createComponent("myUsage").then(function(oComponent) {
          oComponent.doSomething();
        }).catch(function(oError) {
          Log.error(oError);
        });
        </pre></p><p>The following example shows how <code>createComponent</code> can be used to create a nested component by providing specific properties like <code>id</code>, <code>async</code>, <code>settings</code>, or <code>componentData</code>: <pre>
        var oComponent = oComponent.createComponent({
          usage: "myUsage",
          id: "myId",
          settings: { ... },
          componentData: { ... }
        });
        </pre> The allowed list of properties are defined in the parameter documentation of this function.</p><p>The properties can also be defined in the descriptor. These properties can be overwritten by the local properties of that function.</p>
         * @param {string | any} vUsage <p>ID of the component usage or the configuration object that creates the component</p>
         * @returns sap.ui.core.Component|Promise <p>Component instance or Promise which will be resolved with the component instance (defaults to Promise / asynchronous behavior)</p>
         */
        createComponent(vUsage: string | any): sap.ui.core.Component | Promise<any>;
        /**
         * <p>Cleans up the Component instance before destruction.</p><p>Applications must not call this hook method directly, it is called by the framework when the element is <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.core.Component/methods/destroy">destroyed</a>.</p><p>Subclasses of Component should override this hook to implement any necessary cleanup.</p>
         */
        protected exit(): void;
        /**
         * <p>Returns user specific data object</p>
         * @returns any <p>componentData</p>
         */
        getComponentData(): any;
        /**
         * <p>Returns the event bus of this component.</p>
         * @returns sap.ui.core.EventBus <p>the event bus</p>
         */
        getEventBus(): sap.ui.core.EventBus;
        /**
         * <p>Returns the manifest defined in the metadata of the component. If not specified, the return value is null.</p>
         * @returns any <p>manifest.</p>
         */
        getManifest(): any;
        /**
         * <p>Returns the configuration of a manifest section or the value for a specific path. If no section or key is specified, the return value is null.</p><p>Example: <code> { "sap.ui5": { "dependencies": { "libs": { "sap.m": {} }, "components": { "my.component.a": {} } } }); </code></p><p>The configuration above can be accessed in the following ways: <ul> <li><b>By section/namespace</b>: <code>oComponent.getManifestEntry("sap.ui5")</code></li> <li><b>By path</b>: <code>oComponent.getManifestEntry("/sap.ui5/dependencies/libs")</code></li> </ul></p><p>By section/namespace returns the configuration for the specified manifest section and by path allows to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with a slash (/).</p>
         * @param {string} sKey <p>Either the manifest section name (namespace) or a concrete path</p>
         * @returns any|null <p>Value of the manifest section or the key (could be any kind of value)</p>
         */
        getManifestEntry(sKey: string): any | null;
        /**
         * <p>Returns the manifest object.</p>
         * @returns sap.ui.core.Manifest <p>manifest.</p>
         */
        getManifestObject(): sap.ui.core.Manifest;
        /**
         * <p>Returns a service interface for the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.service.Service">Service</a> declared in the descriptor for components (manifest.json). The declaration needs to be done in the <code>sap.ui5/services</code> section as follows: <pre>
        {
          [...]
          "sap.ui5": {
            "services": {
              "myLocalServiceAlias": {
                "factoryName": "my.ServiceFactory",
                ["optional": true]
              }
            }
          }
          [...]
        }
        </pre> The service declaration is used to define a mapping between the local alias for the service that can be used in the Component and the name of the service factory which will be used to create a service instance.</p><p>The <code>getService</code> function will look up the service factory and will create a new instance by using the service factory function <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.service.ServiceFactory/methods/createInstance">createInstance</a> The optional property defines that the service is not mandatory and the usage will not depend on the availability of this service. When requesting an optional service the <code>getService</code> function will reject but there will be no error logged in the console.</p><p>When creating a new instance of the service the Component context will be passed as <code>oServiceContext</code> as follows: <pre>
        {
          "scopeObject": this,     // the Component instance
          "scopeType": "component" // the stereotype of the scopeObject
        }
        </pre></p><p>The service will be created only once per Component and reused in future calls to the <code>getService</code> function. <p> This function will return a <code>Promise</code> which provides the service interface when resolved. If the <code>factoryName</code> could not be found in the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.service.ServiceFactoryRegistry">Service Factory Registry</a> or the service declaration in the descriptor for components (manifest.json) is missing the Promise will reject.</p><p>This is an example of how the <code>getService</code> function can be used: <pre>
        oComponent.getService("myLocalServiceAlias").then(function(oService) {
          oService.doSomething();
        }).catch(function(oError) {
          Log.error(oError);
        });
        </pre></p>
         * @param {string} sLocalServiceAlias <p>Local service alias as defined in the manifest.json</p>
         * @returns Promise<any> <p>Promise which will be resolved with the Service interface</p>
         */
        getService(sLocalServiceAlias: string): Promise<any>;
        /**
         * <p>Initializes the Component instance after creation.</p><p>Applications must not call this hook method directly, it is called by the framework while the constructor of a Component is executed.</p><p>Subclasses of Component should override this hook to implement any necessary initialization.</p>
         */
        protected init(): void;
        /**
         * <p>The hook which gets called when the static configuration of the component has been changed by some configuration extension.</p>
         * @param {string} sConfigKey <p>Error message.</p>
         */
        onConfigChange(sConfigKey: string): void;
        /**
         * <p>The window before unload hook. Override this method in your Component class implementation, to handle cleanup before the real unload or to prompt a question to the user, if the component should be exited.</p>
         * @returns string <p>a string if a prompt should be displayed to the user confirming closing the Component (e.g. when the Component is not yet saved).</p>
         */
        onWindowBeforeUnload(): string;
        /**
         * <p>The window error hook. Override this method in your Component class implementation to listen to unhandled errors.</p>
         * @param {string} sMessage <p>The error message.</p>
         * @param {string} sFile <p>File where the error occurred</p>
         * @param {number} iLine <p>Line number of the error</p>
         */
        onWindowError(sMessage: string, sFile: string, iLine: number): void;
        /**
         * <p>The window unload hook. Override this method in your Component class implementation, to handle cleanup of the component once the window will be unloaded (e.g. closed).</p>
         */
        onWindowUnload(): void;
        /**
         * <p>Calls the function <code>fn</code> once and marks all ManagedObjects created during that call as "owned" by this Component.</p><p>Nested calls of this method are supported (e.g. inside a newly created, nested component). The currently active owner Component will be remembered before executing <code>fn</code> and restored afterwards.</p>
         * @param {Function} fn <p>Function to execute</p>
         * @returns any <p>result of function <code>fn</code></p>
         */
        runAsOwner(fn: Function): any;
      }
      namespace Component {
      }
      /**
       * <p>Container that embeds a UIComponent in a control tree.</p>
       */
      export class ComponentContainer extends sap.ui.core.Control {
        /**
         * <p>Constructor for a new ComponentContainer.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentCreated" href="#/api/sap.ui.core.ComponentContainer/events/componentCreated">componentCreated</a> event of this <code>sap.ui.core.ComponentContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.ComponentContainer</code> itself.</p><p>Fired when the component instance has been created by the ComponentContainer.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.ComponentContainer</code> itself</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachComponentCreated(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentFailed" href="#/api/sap.ui.core.ComponentContainer/events/componentFailed">componentFailed</a> event of this <code>sap.ui.core.ComponentContainer</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.ComponentContainer</code> itself.</p><p>Fired when the creation of the component instance has failed.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.ComponentContainer</code> itself</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachComponentFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentCreated" href="#/api/sap.ui.core.ComponentContainer/events/componentCreated">componentCreated</a> event of this <code>sap.ui.core.ComponentContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachComponentCreated(fnFunction: Function, oListener?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentFailed" href="#/api/sap.ui.core.ComponentContainer/events/componentFailed">componentFailed</a> event of this <code>sap.ui.core.ComponentContainer</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachComponentFailed(fnFunction: Function, oListener?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentCreated" href="#/api/sap.ui.core.ComponentContainer/events/componentCreated">componentCreated</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireComponentCreated(mParameters?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="componentFailed" href="#/api/sap.ui.core.ComponentContainer/events/componentFailed">componentFailed</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireComponentFailed(mParameters?: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsync" href="#/api/sap.ui.core.ComponentContainer/methods/getAsync">async</a>.</p><p>Flag whether the component should be created sync (default) or async. The default will be async when initially the property <code>manifest</code> is set to a truthy value and for the property <code>async</code> no value has been specified. This property can only be applied initially.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>async</code></p>
         */
        getAsync(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoPrefixId" href="#/api/sap.ui.core.ComponentContainer/methods/getAutoPrefixId">autoPrefixId</a>.</p><p>Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash. This property can only be applied initially.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>autoPrefixId</code></p>
         */
        getAutoPrefixId(): boolean;
        /**
         * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getComponent" href="#/api/sap.ui.core.ComponentContainer/methods/getComponent">component</a>, or <code>null</code>.</p>
         * @returns sap.ui.core.ID 
         */
        getComponent(): sap.ui.core.ID;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHandleValidation" href="#/api/sap.ui.core.ComponentContainer/methods/getHandleValidation">handleValidation</a>.</p><p>Enable/disable validation handling by MessageManager for this component. The resulting Messages will be propagated to the controls. This property can only be applied initially.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>handleValidation</code></p>
         */
        getHandleValidation(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.ComponentContainer/methods/getHeight">height</a>.</p><p>Container height in CSS size</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLifecycle" href="#/api/sap.ui.core.ComponentContainer/methods/getLifecycle">lifecycle</a>.</p><p>Lifecycle behavior for the Component associated by the <code>ComponentContainer</code>. The default behavior is <code>Legacy</code>. This means that the <code>ComponentContainer</code> takes care that the Component is destroyed when the <code>ComponentContainer</code> is destroyed, but it is <b>not</b> destroyed when a new Component is associated. If you use the <code>usage</code> property to create the Component, the default behavior is <code>Container</code>. This means that the Component is destroyed when the <code>ComponentContainer</code> is destroyed or a new Component is associated. This property must only be applied before a component instance is created.</p><p>Default value is <code>Legacy</code>.</p>
         * @returns sap.ui.core.ComponentLifecycle <p>Value of property <code>lifecycle</code></p>
         */
        getLifecycle(): sap.ui.core.ComponentLifecycle;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getManifest" href="#/api/sap.ui.core.ComponentContainer/methods/getManifest">manifest</a>.</p><p>Controls when and from where to load the manifest for the Component. When set to any truthy value, the manifest will be loaded asynchronously by default and evaluated before the Component controller, if it is set to a falsy value other than <code>undefined</code>, the manifest will be loaded after the controller. A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null object value will be interpreted as manifest content. This property can only be applied initially.</p>
         * @returns any <p>Value of property <code>manifest</code></p>
         */
        getManifest(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.ComponentContainer/methods/getName">name</a>.</p><p>Component name, the package where the component is contained. This property can only be applied initially.</p>
         * @returns string <p>Value of property <code>name</code></p>
         */
        getName(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropagateModel" href="#/api/sap.ui.core.ComponentContainer/methods/getPropagateModel">propagateModel</a>.</p><p>Defines whether binding information is propagated to the component.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>propagateModel</code></p>
         */
        getPropagateModel(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSettings" href="#/api/sap.ui.core.ComponentContainer/methods/getSettings">settings</a>.</p><p>The settings object passed to the component when created. This property can only be applied initially.</p>
         * @returns any <p>Value of property <code>settings</code></p>
         */
        getSettings(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.ui.core.ComponentContainer/methods/getUrl">url</a>.</p><p>The URL of the component. This property can only be applied initially.</p>
         * @returns sap.ui.core.URI <p>Value of property <code>url</code></p>
         */
        getUrl(): sap.ui.core.URI;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUsage" href="#/api/sap.ui.core.ComponentContainer/methods/getUsage">usage</a>.</p><p>The component usage. If the ComponentContainer is used inside a Component, this Component can define a usage which will be used for creating the Component. This property can only be applied initially.</p>
         * @returns string <p>Value of property <code>usage</code></p>
         */
        getUsage(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.ComponentContainer/methods/getWidth">width</a>.</p><p>Container width in CSS size</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAsync" href="#/api/sap.ui.core.ComponentContainer/methods/getAsync">async</a>.</p><p>Flag whether the component should be created sync (default) or async. The default will be async when initially the property <code>manifest</code> is set to a truthy value and for the property <code>async</code> no value has been specified. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bAsync <p>New value for property <code>async</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setAsync(bAsync: boolean): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAutoPrefixId" href="#/api/sap.ui.core.ComponentContainer/methods/getAutoPrefixId">autoPrefixId</a>.</p><p>Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bAutoPrefixId <p>New value for property <code>autoPrefixId</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setAutoPrefixId(bAutoPrefixId: boolean): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets the component of the container. Depending on the ComponentContainer's lifecycle this might destroy the old associated Component.</p><p>Once the component is associated with the container the cross connection to the component will be set and the models will be propagated if defined. If the <code>usage</code> property is set the ComponentLifecycle is processed like a "Container" lifecycle.</p>
         * @param {string | sap.ui.core.UIComponent} vComponent <p>ID of an element which becomes the new target of this component association. Alternatively, an element instance may be given.</p>
         * @returns sap.ui.core.ComponentContainer <p>the reference to <code>this</code> in order to allow method chaining</p>
         */
        setComponent(vComponent: string | sap.ui.core.UIComponent): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHandleValidation" href="#/api/sap.ui.core.ComponentContainer/methods/getHandleValidation">handleValidation</a>.</p><p>Enable/disable validation handling by MessageManager for this component. The resulting Messages will be propagated to the controls. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bHandleValidation <p>New value for property <code>handleValidation</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHandleValidation(bHandleValidation: boolean): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.ComponentContainer/methods/getHeight">height</a>.</p><p>Container height in CSS size</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHeight(sHeight: sap.ui.core.CSSSize): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLifecycle" href="#/api/sap.ui.core.ComponentContainer/methods/getLifecycle">lifecycle</a>.</p><p>Lifecycle behavior for the Component associated by the <code>ComponentContainer</code>. The default behavior is <code>Legacy</code>. This means that the <code>ComponentContainer</code> takes care that the Component is destroyed when the <code>ComponentContainer</code> is destroyed, but it is <b>not</b> destroyed when a new Component is associated. If you use the <code>usage</code> property to create the Component, the default behavior is <code>Container</code>. This means that the Component is destroyed when the <code>ComponentContainer</code> is destroyed or a new Component is associated. This property must only be applied before a component instance is created.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Legacy</code>.</p>
         * @param {sap.ui.core.ComponentLifecycle} sLifecycle <p>New value for property <code>lifecycle</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setLifecycle(sLifecycle: sap.ui.core.ComponentLifecycle): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getManifest" href="#/api/sap.ui.core.ComponentContainer/methods/getManifest">manifest</a>.</p><p>Controls when and from where to load the manifest for the Component. When set to any truthy value, the manifest will be loaded asynchronously by default and evaluated before the Component controller, if it is set to a falsy value other than <code>undefined</code>, the manifest will be loaded after the controller. A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null object value will be interpreted as manifest content. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {any} oManifest <p>New value for property <code>manifest</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setManifest(oManifest: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.ComponentContainer/methods/getName">name</a>.</p><p>Component name, the package where the component is contained. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sName <p>New value for property <code>name</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setName(sName: string): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPropagateModel" href="#/api/sap.ui.core.ComponentContainer/methods/getPropagateModel">propagateModel</a>.</p><p>Defines whether binding information is propagated to the component.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bPropagateModel <p>New value for property <code>propagateModel</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setPropagateModel(bPropagateModel: boolean): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSettings" href="#/api/sap.ui.core.ComponentContainer/methods/getSettings">settings</a>.</p><p>The settings object passed to the component when created. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {any} oSettings <p>New value for property <code>settings</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSettings(oSettings: any): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUrl" href="#/api/sap.ui.core.ComponentContainer/methods/getUrl">url</a>.</p><p>The URL of the component. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.URI} sUrl <p>New value for property <code>url</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setUrl(sUrl: sap.ui.core.URI): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUsage" href="#/api/sap.ui.core.ComponentContainer/methods/getUsage">usage</a>.</p><p>The component usage. If the ComponentContainer is used inside a Component, this Component can define a usage which will be used for creating the Component. This property can only be applied initially.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sUsage <p>New value for property <code>usage</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setUsage(sUsage: string): sap.ui.core.ComponentContainer;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.ComponentContainer/methods/getWidth">width</a>.</p><p>Container width in CSS size</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
         * @returns sap.ui.core.ComponentContainer <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setWidth(sWidth: sap.ui.core.CSSSize): sap.ui.core.ComponentContainer;
      }
      /**
       * <p><p>Enumeration for different lifecycle behaviors of Components created by the ComponentContainer.</p></p>
       */
      export enum ComponentLifecycle {
        /**
         * <p>Application managed lifecycle means that the Application takes care to destroy the Components associated with the ComponentContainer.</p>
         */
        Application = "Application",
        /**
         * <p>Container managed lifecycle means that the ComponentContainer takes care to destroy the Components associated with the ComponentContainer once the ComponentContainer is destroyed or a new Component is associated.</p>
         */
        Container = "Container",
        /**
         * <p>Legacy lifecycle means that the ComponentContainer takes care to destroy the Component which is associated with the ComponentContainer once the ComponentContainer is destroyed but not when a new Component is associated.</p>
         */
        Legacy = "Legacy",
      }
      /**
       */
      export class ComponentMetadata extends sap.ui.base.ManagedObjectMetadata {
        /**
         * <p>Creates a new metadata object for a Component subclass.</p>
         * @param {string} sClassName <p>Fully qualified name of the class that is described by this metadata object</p>
         * @param {any} oStaticInfo <p>Static info to construct the metadata from</p>
         */
        constructor(sClassName: string, oStaticInfo: any);
        /**
         * <p>Returns the name of the Component (which is the namespace only with the module name)</p>
         * @returns string <p>Component name</p>
         */
        getComponentName(): string;
        /**
         * <p>Returns the manifest object.</p>
         * @returns sap.ui.core.Manifest <p>manifest.</p>
         */
        getManifestObject(): sap.ui.core.Manifest;
        /**
         * <p>Returns the version of the metadata which could be 1 or 2. 1 is for legacy metadata whereas 2 is for the manifest.</p>
         * @returns number <p>metadata version (1: legacy metadata, 2: manifest)</p>
         */
        protected getMetadataVersion(): number;
        /**
         * <p>Returns whether the class of this metadata is a component base class or not.</p>
         * @returns boolean <p>true if it is sap.ui.core.Component or sap.ui.core.UIComponent</p>
         */
        protected isBaseClass(): boolean;
      }
      /**
       * <p>Collects and stores the configuration of the current environment.</p><p>The Configuration is initialized once when the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core">sap.ui.core.Core</a> is created. There are different ways to set the environment configuration (in ascending priority): <ol> <li>System defined defaults</li> <li>Server wide defaults, read from /sap-ui-config.json</li> <li>Properties of the global configuration object window["sap-ui-config"]</li> <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag.</li> <li>Individual data-sap-ui-<i>xyz</i> attributes of the bootstrap tag</li> <li>Using URL parameters</li> <li>Setters in this Configuration object (only for some parameters)</li> </ol></p><p>That is, attributes of the DOM reference override the system defaults, URL parameters override the DOM attributes (where empty URL parameters set the parameter back to its system default). Calling setters at runtime will override any previous settings calculated during object creation.</p><p>The naming convention for parameters is: <ul> <li>in the URL : sap-ui-<i>PARAMETER-NAME</i>="value"</li> <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME</i>="value"</li> </ul> where <i>PARAMETER-NAME</i> is the name of the parameter in lower case.</p><p>Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.</p>
       */
      export class Configuration extends sap.ui.base.Object {
        /**
         * <p>Creates a new Configuration object.</p>
         */
        constructor();
        /**
         * <p>Applies multiple changes to the configuration at once.</p><p>If the changed settings contain localization related settings like <code>language</code> or <ode>calendarType</code>, then only a single <code>localizationChanged</code> event will be fired. As the framework has to inform all existing components, elements, models etc. about localization changes, using <code>applySettings</code> can significantly reduce the overhead for multiple changes, esp. when they occur after the UI has been created already.</p><p>The <code>mSettings</code> can contain any property <code><i>xyz</i></code> for which a setter method <code>set<i>XYZ</i></code> exists in the API of this class. Similarly, values for the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings">format settings</a> API can be provided in a nested object with name <code>formatSettings</code>.</p>
         * @param {any} mSettings <p>Configuration options to apply</p>
         * @returns sap.ui.core.Configuration <p>Returns <code>this</code> to allow method chaining</p>
         */
        applySettings(mSettings: any): sap.ui.core.Configuration;
        /**
         * <p>Returns whether the accessibility mode is used or not.</p>
         * @returns boolean <p>whether the accessibility mode is used or not</p>
         */
        getAccessibility(): boolean;
        /**
         * <p>Returns the current animation mode.</p>
         * @returns sap.ui.core.Configuration.AnimationMode <p>The current animationMode</p>
         */
        getAnimationMode(): sap.ui.core.Configuration.AnimationMode;
        /**
         * <p>Base URLs to AppCacheBuster ETag-Index files.</p>
         * @returns string[] <p>array of base URLs</p>
         */
        getAppCacheBuster(): string[];
        /**
         * <p>The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)</p>
         * @returns string <p>"sync" | "async"</p>
         */
        getAppCacheBusterMode(): string;
        /**
         * <p>Returns whether the framework automatically adds automatically the ARIA role 'application' to the HTML body or not.</p>
         * @returns boolean 
         */
        getAutoAriaBodyRole(): boolean;
        /**
         * <p>Returns the used compatibility version for the given feature.</p>
         * @param {string} sFeature <p>the key of desired feature</p>
         * @returns any <p>the used compatibility version</p>
         */
        getCompatibilityVersion(sFeature: string): any;
        /**
         * <p>Returns whether the page runs in debug mode.</p>
         * @returns boolean <p>whether the page runs in debug mode</p>
         */
        getDebug(): boolean;
        /**
         * <p>Returns whether the Fiori2Adaptation is on.</p>
         * @returns boolean|string <p>false - no adaptation, true - full adaptation, comma-separated list - partial adaptation Possible values: style, collapse, title, back, hierarchy</p>
         */
        getFiori2Adaptation(): boolean | string;
        /**
         * <p>Returns the URL from where the UI5 flexibility services are called; if empty, the flexibility services are not called.</p>
         * @returns string <p>URL from where the flexibility services are requested</p>
         */
        getFlexibilityServices(): string;
        /**
         * <p>Returns the format locale string with language and region code. Falls back to language configuration, in case it has not been explicitly defined.</p>
         * @returns string <p>the format locale string with language and country code</p>
         */
        getFormatLocale(): string;
        /**
         * <p>Returns a configuration object that bundles the format settings of UI5.</p>
         * @returns sap.ui.core.Configuration.FormatSettings <p>A FormatSettings object.</p>
         */
        getFormatSettings(): sap.ui.core.Configuration.FormatSettings;
        /**
         * <p>frameOptions mode (allow/deny/trusted).</p>
         * @returns string <p>frameOptions mode</p>
         */
        getFrameOptions(): string;
        /**
         * <p>Returns whether the UI5 control inspector is displayed. Has only an effect when the sap-ui-debug module has been loaded</p>
         * @returns boolean <p>whether the UI5 control inspector is displayed</p>
         */
        getInspect(): boolean;
        /**
         * <p>Returns a string that identifies the current language.</p><p>The value returned by this methods in most cases corresponds to the exact value that has been configured by the user or application or that has been determined from the user agent settings. It has not been normalized, but has been validated against a relaxed version of <a target="_blank" href="http://www.ietf.org/rfc/bcp/bcp47.txt">BCP47</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/>, allowing underscores ('_') instead of the suggested dashes ('-') and not taking the case of letters into account.</p><p>The exceptions mentioned above affect languages that have been specified via the URL parameter <code>sap-language</code>. That parameter by definition represents an SAP logon language code ('ABAP language'). Most but not all of these language codes are valid ISO639 two-letter languages and as such are valid BCP47 language tags. For better BCP47 compliance, the framework maps the following non-BCP47 SAP logon codes to a BCP47 substitute: <pre>
           "ZH"  -->  "zh-Hans"         // script 'Hans' added to distinguish it from zh-Hant
           "ZF"  -->  "zh-Hant"         // ZF is not a valid ISO639 code, use the compliant language + script 'Hant'
             "    "1Q"  -->  "en-US-x-saptrc"  // special language code for supportability (tracing),
                                           represented as en-US with a private extension
           "2Q"  -->  "en-US-x-sappsd"  // special language code for supportability (pseudo translation),
                                           represented as en-US with a private extension
        </pre></p><p>For a normalized BCP47 tag, call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLanguageTag" href="#/api/sap.ui.core.Configuration/methods/getLanguageTag">#getLanguageTag</a> or call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLocale" href="#/api/sap.ui.core.Configuration/methods/getLocale">#getLocale</a> to get a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Locale">Locale</a> object matching the language.</p>
         * @returns string <p>Language string as configured</p>
         */
        getLanguage(): string;
        /**
         * <p>Returns a BCP47-compliant language tag for the current language.</p><p>The return value of this method is especially useful for an HTTP <code>Accept</code> header.</p>
         * @returns string <p>The language tag for the current language, conforming to BCP47</p>
         */
        getLanguageTag(): string;
        /**
         * <p>Returns a Locale object for the current language.</p><p>The Locale is derived from the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLanguage" href="#/api/sap.ui.core.Configuration/methods/getLanguage">language</a> property.</p>
         * @returns sap.ui.core.Locale <p>The locale</p>
         */
        getLocale(): sap.ui.core.Locale;
        /**
         * <p>Flag whether a Component should load the manifest first.</p>
         * @returns boolean <p>true if a Component should load the manifest first</p>
         */
        getManifestFirst(): boolean;
        /**
         * <p>Returns whether there should be an exception on any duplicate element IDs.</p>
         * @returns boolean <p>whether there should be an exception on any duplicate element IDs</p>
         */
        getNoDuplicateIds(): boolean;
        /**
         * <p>Returns whether the text origin information is collected.</p>
         * @returns boolean <p>whether the text info is collected</p>
         */
        getOriginInfo(): boolean;
        /**
         * <p>The name of the root component to start or empty.</p>
         * @returns string <p>name of the root component</p>
         */
        getRootComponent(): string;
        /**
         * <p>Returns whether the page uses the RTL text direction.</p><p>If no mode has been explicitly set (neither <code>true</code> nor <code>false</code>), the mode is derived from the current language setting.</p>
         * @returns boolean <p>whether the page uses the RTL text direction</p>
         */
        getRTL(): boolean;
        /**
         * <p>Returns an SAP logon language for the current language.</p>
         * @returns string <p>The SAP logon language code for the current language</p>
         */
        getSAPLogonLanguage(): string;
        /**
         * <p>Returns the theme name</p>
         * @returns string <p>the theme name</p>
         */
        getTheme(): string;
        /**
         * <p>Prefix to be used for automatically generated control IDs. Default is a double underscore "__".</p>
         * @returns string <p>the prefix to be used</p>
         */
        getUIDPrefix(): string;
        /**
         * <p>Returns the version of the framework.</p><p>Similar to <code>sap.ui.version</code>.</p>
         * @returns any <p>the version</p>
         */
        getVersion(): any;
        /**
         * <p>URL of the whitelist service.</p>
         * @returns string <p>whitelist service URL</p>
         */
        getWhitelistService(): string;
        /**
         * <p>Sets the current animation mode.</p><p>Expects an animation mode as string and validates it. If a wrong animation mode was set, an error is thrown. If the mode is valid it is set, then the attributes <code>data-sap-ui-animation</code> and <code>data-sap-ui-animation-mode</code> of the HTML document root element are also updated. If the <code>animationMode</code> is <code>Configuration.AnimationMode.none</code> the old <code>animation</code> property is set to <code>false</code>, otherwise it is set to <code>true</code>.</p>
         * @param {sap.ui.core.Configuration.AnimationMode} sAnimationMode <p>A valid animation mode</p>
         */
        setAnimationMode(sAnimationMode: sap.ui.core.Configuration.AnimationMode): void;
        /**
         * <p>Sets the new calendar type to be used from now on in locale dependent functionality (for example, formatting, translation texts, etc.).</p>
         * @param {sap.ui.core.CalendarType | null} sCalendarType <p>the new calendar type. Set it with null to clear the calendar type and the calendar type is calculated based on the format settings and current locale.</p>
         * @returns sap.ui.core.Configuration <p><code>this</code> to allow method chaining</p>
         */
        setCalendarType(sCalendarType: sap.ui.core.CalendarType | null): sap.ui.core.Configuration;
        /**
         * <p>Sets a new format locale to be used from now on for retrieving locale specific formatters. Modifying this setting does not have an impact on the retrieval of translated texts!</p><p>Can either be set to a concrete value (a BCP47 or Java locale compliant language tag) or to <code>null</code>. When set to <code>null</code> (default value) then locale specific formatters are retrieved for the current language.</p><p>After changing the format locale, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setLanguage" href="#/api/sap.ui.core.Configuration/methods/setLanguage">#setLanguage</a> for details and restrictions.</p><p><b>Note</b>: When a format locale is set, it has higher priority than a number, date or time format defined with a call to <code>setLegacyNumberFormat</code>, <code>setLegacyDateFormat</code> or <code>setLegacyTimeFormat</code>.</p><p><b>Note</b>: See documentation of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setLanguage" href="#/api/sap.ui.core.Configuration/methods/setLanguage">#setLanguage</a> for restrictions.</p>
         * @param {string | null} sFormatLocale <p>the new format locale as a BCP47 compliant language tag; case doesn't matter and underscores can be used instead of dashes to separate components (compatibility with Java Locale IDs)</p>
         * @returns sap.ui.core.Configuration <p><code>this</code> to allow method chaining</p>
         */
        setFormatLocale(sFormatLocale: string | null): sap.ui.core.Configuration;
        /**
         * <p>Sets a new language to be used from now on for language/region dependent functionality (e.g. formatting, data types, translated texts, ...).</p><p>When the language can't be interpreted as a BCP47 language (using the relaxed syntax described in <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLanguage" href="#/api/sap.ui.core.Configuration/methods/getLanguage">#getLanguage</a>, an error will be thrown.</p><p>When the language has changed, the Core will fire its <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/events/localizationChanged">localizationChanged</a> event.</p><h3>Restrictions</h3><p>The framework <strong>does not</strong> guarantee that already created, language dependent objects will be updated by this call. It therefore remains best practice for applications to switch the language early, e.g. before any language dependent objects are created. Applications that need to support more dynamic changes of the language should listen to the <code>localizationChanged</code> event and adapt all language dependent objects that they use (e.g. by rebuilding their UI).</p><p>Currently, the framework notifies the following objects about a change of the localization settings before it fires the <code>localizationChanged</code> event:</p><p><ul> <li>date and number data types that are used in property bindings or composite bindings in existing Elements, Controls, UIAreas or Components</li> <li>ResourceModels currently assigned to the Core, a UIArea, Component, Element or Control</li> <li>Elements or Controls that implement the <code>onlocalizationChanged</code> hook (note the lowercase 'l' in onlocalizationChanged)</li> </ul></p><p>It furthermore derives the RTL mode from the new language, if no explicit RTL mode has been set. If the RTL mode changes, the following additional actions will be taken:</p><p><ul> <li>the URLs of already loaded library theme files will be changed</li> <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li> <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li> </ul></p><p>This method does not accept SAP language codes for <code>sLanguage</code>. Instead, a second parameter <code>sSAPLogonLanguage</code> can be provided with an SAP language code corresponding to the given language. A given value will be returned by the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSAPLogonLanguage" href="#/api/sap.ui.core.Configuration/methods/getSAPLogonLanguage">#getSAPLogonLanguage</a> method. It is up to the caller to provide a consistent pair of BCP47 language and SAP language code. The SAP language code is only checked to be of length 2 and must consist of letters or digits only.</p><p><b>Note</b>: When using this method please take note of and respect the above mentioned restrictions.<br><br>References: <ul><li>http://scn.sap.com/docs/DOC-14377</li></ul></p>
         * @param {string} sLanguage <p>the new language as a BCP47 compliant language tag; case doesn't matter and underscores can be used instead of dashes to separate components (compatibility with Java Locale IDs)</p>
         * @param {string} sSAPLogonLanguage <p>SAP language code that corresponds to the <code>sLanguage</code>; if a value is specified, future calls to <code>getSAPLogonLanguage</code> will return that value; if no value is specified, the framework will use the ISO639 language part of <code>sLanguage</code> as SAP Logon language.</p>
         * @returns sap.ui.core.Configuration <p><code>this</code> to allow method chaining</p>
         */
        setLanguage(sLanguage: string, sSAPLogonLanguage?: string): sap.ui.core.Configuration;
        /**
         * <p>Sets the character orientation mode to be used from now on.</p><p>Can either be set to a concrete value (true meaning right-to-left, false meaning left-to-right) or to <code>null</code> which means that the character orientation mode should be derived from the current language (incl. region) setting.</p><p>After changing the character orientation mode, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setLanguage" href="#/api/sap.ui.core.Configuration/methods/setLanguage">#setLanguage</a> for details and restrictions.</p><p><b>Note</b>: See documentation of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setLanguage" href="#/api/sap.ui.core.Configuration/methods/setLanguage">#setLanguage</a> for restrictions.</p>
         * @param {boolean | null} bRTL <p>new character orientation mode or <code>null</code></p>
         * @returns sap.ui.core.Configuration <p><code>this</code> to allow method chaining</p>
         */
        setRTL(bRTL: boolean | null): sap.ui.core.Configuration;
      }
      namespace Configuration {
        /**
         * <p><p>Enumerable list with available animation modes.</p><p>This enumerable is used to validate the animation mode. Animation modes allow to specify different animation scenarios or levels. The implementation of the Control (JavaScript or CSS) has to be done differently for each animation mode.</p></p>
         */
        export enum AnimationMode {
          /**
           * <p><code>basic</code> can be used for a reduced, more light-weight set of animations.</p>
           */
          basic = "basic",
          /**
           * <p><code>full</code> represents a mode with unrestricted animation capabilities.</p>
           */
          full = "full",
          /**
           * <p><code>minimal</code> includes animations of fundamental functionality.</p>
           */
          minimal = "minimal",
          /**
           * <p><code>none</code> deactivates the animation completely.</p>
           */
          none = "none",
        }
        /**
         * <p>Encapsulates configuration settings that are related to data formatting/parsing.</p><p><b>Note:</b> When format configuration settings are modified through this class, UI5 only ensures that formatter objects created after that point in time will honor the modifications. To be on the safe side, applications should do any modifications early in their lifecycle or recreate any model/UI that is locale dependent.</p>
         */
        export class FormatSettings extends sap.ui.base.Object {
          /**
           */
          constructor();
          /**
           * <p>Adds custom currencies to the existing entries. E.g. <code> { "KWD": {"digits": 3}, "TND" : {"digits": 3} } </code><br><br>References: <ul><li>sap.ui.core.Configuration.FormatSettings#setCustomCurrencies</li></ul></p>
           * @param {any} mCurrencies <p>adds to the currency map</p>
           * @returns sap.ui.core.Configuration.FormatSettings 
           */
          addCustomCurrencies(mCurrencies: any): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Retrieves the custom currencies. E.g. <code> { "KWD": {"digits": 3}, "TND" : {"digits": 3} } </code></p>
           * @returns any <p>the mapping between custom currencies and its digits</p>
           */
          getCustomCurrencies(): any;
          /**
           * <p>Returns the locale to be used for formatting.</p><p>If no such locale has been defined, this method falls back to the language, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/getLanguage">Configuration.getLanguage()</a>.</p><p>If any user preferences for date, time or number formatting have been set, and if no format locale has been specified, then a special private use subtag is added to the locale, indicating to the framework that these user preferences should be applied.</p>
           * @returns sap.ui.core.Locale <p>the format locale</p>
           */
          getFormatLocale(): sap.ui.core.Locale;
          /**
           * <p>Returns the currently set customizing data for Islamic calendar support</p>
           * @returns object[] <p>Returns an array contains the customizing data. Each element in the array has properties: dateFormat, islamicMonthStart, gregDate. For details, please see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setLegacyDateCalendarCustomizing" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/setLegacyDateCalendarCustomizing">#setLegacyDateCalendarCustomizing</a></p>
           */
          getLegacyDateCalendarCustomizing(): object[];
          /**
           * <p>Sets custom currencies and replaces existing entries.</p><p>There is a special currency code named "DEFAULT" that is optional. In case it is set it will be used for all currencies not contained in the list, otherwise currency digits as defined by the CLDR will be used as a fallback.</p><p>Example: To use CLDR, but override single currencies <code> { "KWD": {"digits": 3}, "TND" : {"digits": 3} } </code></p><p>To replace the CLDR currency digits completely <code> { "DEFAULT": {"digits": 2}, "ADP": {"digits": 0}, ... "XPF": {"digits": 0} } </code></p><p>Note: To unset the custom currencies: call with <code>undefined</code></p>
           * @param {any} mCurrencies <p>currency map which is set</p>
           * @returns sap.ui.core.Configuration.FormatSettings 
           */
          setCustomCurrencies(mCurrencies: any): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Defines the preferred format pattern for the given date format style.</p><p>Calling this method with a null or undefined pattern removes a previously set pattern.</p><p>If a pattern is defined, it will be preferred over patterns derived from the current locale.</p><p>See class <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> for details about the pattern syntax.</p><p>After changing the date pattern, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sStyle <p>must be one of short, medium, long or full.</p>
           * @param {string} sPattern <p>the format pattern to be used in LDML syntax.</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setDatePattern(sStyle: string, sPattern: string): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Defines the day used as the first day of the week.</p><p>The day is set as an integer value between 0 (Sunday) and 6 (Saturday). Calling this method with a null or undefined symbol removes a previously set value.</p><p>If a value is defined, it will be preferred over values derived from the current locale.</p><p>Usually in the US the week starts on Sunday while in most European countries on Monday. There are special cases where you want to have the first day of week set independent of the user locale.</p><p>After changing the first day of week, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {number} iValue <p>must be an integer value between 0 and 6</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setFirstDayOfWeek(iValue: number): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Allows to specify the customizing data for Islamic calendar support</p>
           * @param {object[]} aMappings <p>contains the customizing data for the support of Islamic calendar.</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setLegacyDateCalendarCustomizing(aMappings: object[]): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Allows to specify one of the legacy ABAP date formats.</p><p>This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP format. When called with a null or undefined format id, any previously applied format will be removed.</p><p>After changing the legacy date format, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sFormatId <p>id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setLegacyDateFormat(sFormatId: string): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Allows to specify one of the legacy ABAP number format.</p><p>This method will modify the 'group' and 'decimal' symbols. When called with a null or undefined format id, any previously applied format will be removed.</p><p>After changing the legacy number format, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sFormatId <p>id of the ABAP number format set (one of ' ','X','Y')</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setLegacyNumberFormat(sFormatId: string): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Allows to specify one of the legacy ABAP time formats.</p><p>This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called with a null or undefined format id, any previously applied format will be removed.</p><p>After changing the legacy time format, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sFormatId <p>id of the ABAP time format (one of '0','1','2','3','4')</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setLegacyTimeFormat(sFormatId: string): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Defines the string to be used for the given number symbol.</p><p>Calling this method with a null or undefined symbol removes a previously set symbol string. Note that an empty string is explicitly allowed.</p><p>If a symbol is defined, it will be preferred over symbols derived from the current locale.</p><p>See class <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a> for details about the symbols.</p><p>After changing the number symbol, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sStyle <p>must be one of decimal, group, plusSign, minusSign.</p>
           * @param {string} sSymbol <p>will be used to represent the given symbol type</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setNumberSymbol(sStyle: string, sSymbol: string): sap.ui.core.Configuration.FormatSettings;
          /**
           * <p>Defines the preferred format pattern for the given time format style.</p><p>Calling this method with a null or undefined pattern removes a previously set pattern.</p><p>If a pattern is defined, it will be preferred over patterns derived from the current locale.</p><p>See class <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a> for details about the pattern syntax.</p><p>After changing the time pattern, the framework tries to update localization specific parts of the UI. See the documentation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/setLanguage">sap.ui.core.Configuration#setLanguage</a> for details and restrictions.</p>
           * @param {string} sStyle <p>must be one of short, medium, long or full.</p>
           * @param {string} sPattern <p>the format pattern to be used in LDML syntax.</p>
           * @returns sap.ui.core.Configuration.FormatSettings <p>Returns <code>this</code> to allow method chaining</p>
           */
          setTimePattern(sStyle: string, sPattern: string): sap.ui.core.Configuration.FormatSettings;
        }
      }
      /**
       * <p>Base Class for Controls.</p><p>Controls provide the following features: <ul> <li><b>Rendering</b>: the <code>RenderManager</code> only expects instances of class <code>Control</code> in its <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/renderControl">renderControl</a> method. By convention, each control class has an associated static class that takes care of rendering the control (its 'Renderer').</li> <li><b>show / hide</b>: a control can be hidden, although it is still part of the control tree, see property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.Control/methods/getVisible">visible</a></li> <li><b>local busy indicator</b>: marks a control visually as 'busy', see properties <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusy" href="#/api/sap.ui.core.Control/methods/getBusy">busy</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusyIndicatorDelay" href="#/api/sap.ui.core.Control/methods/getBusyIndicatorDelay">busyIndicatorDelay</a></li> <li><b>field groups</b>: by assigning the same group ID to a set of editable controls, they form a group which can be validated together. See property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldGroupIds" href="#/api/sap.ui.core.Control/methods/getFieldGroupIds">fieldGroupIds</a> and event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validateFieldGroup" href="#/api/sap.ui.core.Control/events/validateFieldGroup">validateFieldGroup</a>. The term <i>field</i> was chosen as most often this feature will be used to group editable fields in a form.</li> See the documentation for <a target="_self" href="#/topic/5b0775397e394b1fb973fa207554003e">Field Groups</a> for more details. <li><b>custom style classes</b>: all controls allow to add custom CSS classes to their rendered DOM without modifying their renderer code. See methods <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addStyleClass" href="#/api/sap.ui.core.Control/methods/addStyleClass">addStyleClass</a>, <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="removeStyleClass" href="#/api/sap.ui.core.Control/methods/removeStyleClass">removeStyleClass</a>, <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="toggleStyleClass" href="#/api/sap.ui.core.Control/methods/toggleStyleClass">toggleStyleClass</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasStyleClass" href="#/api/sap.ui.core.Control/methods/hasStyleClass">hasStyleClass</a>.</br> The necessary implementation is encapsulated in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core/methods/sap.ui.core.CustomStyleClassSupport">CustomStyleClassSupport</a> and can be applied to selected element classes as well.</li> <li><b>browser events</b>: by calling the methods <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachBrowserEvent" href="#/api/sap.ui.core.Control/methods/attachBrowserEvent">attachBrowserEvent</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="detachBrowserEvent" href="#/api/sap.ui.core.Control/methods/detachBrowserEvent">detachBrowserEvent</a>, consumers can let the control class take care of registering / de-registering a given set of event listeners to the control's root DOM node. The framework will adapt the registration whenever the DOM node changes (e.g. before or after rendering or when the control is destroyed).</li> </ul></p><p>See section "<a target="_self" href="#/topic/91f1703b6f4d1014b6dd926db0e91070">Developing OpenUI5/SAPUI5 Controls</a>" in the documentation for an introduction to control development.</p>
       */
      export abstract class Control extends sap.ui.core.Element {
        /**
         * <p>Creates and initializes a new control with the given <code>sId</code> and settings.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>Optional ID for the new control; generated automatically if no non-empty ID is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
         * @param {any} mSettings <p>Object with initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.</p><p>This method is intended to be used to mark controls as being of a special type for which special styling can be provided using CSS selectors that reference this style class name.</p><p><pre>
        Example:
           myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
        
        ...and in CSS:
           .myRedTextButton {
              color: red;
           }
        </pre></p><p>This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then make the text in this particular button red.</p><p>Only characters allowed inside HTML attributes are allowed. Quotes are not allowed and this method will ignore any strings containing quotes. Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed individually later by calling removeStyleClass. Multiple calls with the same sStyleClass will have no different effect than calling once. If sStyleClass is null, empty string or it contains quotes, the call is ignored.</p>
         * @param {string} sStyleClass <p>the CSS class name to be added</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        addStyleClass(sStyleClass: string): sap.ui.core.Control;
        /**
         * <p>Defines whether the user can select text inside this control. Defaults to <code>true</code> as long as this method has not been called.</p><p><b>Note:</b>This only works in IE and Safari; for Firefox the element's style must be set to: <pre>
          -moz-user-select: none;
        </pre> in order to prevent text selection.</p>
         * @param {boolean} bAllow <p>whether to allow text selection or not</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        allowTextSelection(bAllow: boolean): sap.ui.core.Control;
        /**
         * <p>Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles DOM element replacements caused by re-rendering.</p><p><b>IMPORTANT:</b></br> This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically. E.g. when working with a <code>sap.ui.commons.Button</code>, always use the Button's "press" event, not the native "click" event, because "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.</p><p>In the event handler, <code>this</code> refers to the Control - not to the root DOM element like in jQuery. While the DOM element can be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not be done. E.g. use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addStyleClass" href="#/api/sap.ui.core.Control/methods/addStyleClass">#addStyleClass</a> instead if the modification is of visual nature.</p><p>Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="detachBrowserEvent" href="#/api/sap.ui.core.Control/methods/detachBrowserEvent">#detachBrowserEvent</a> to remove the event handler(s) again.</p>
         * @param {string} sEventType <p>A string containing one or more JavaScript event types, such as "click" or "blur".</p>
         * @param {Function} fnHandler <p>A function to execute each time the event is triggered.</p>
         * @param {any} oListener <p>The object, that wants to be notified, when the event occurs</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        attachBrowserEvent(sEventType?: string, fnHandler?: Function, oListener?: any): sap.ui.core.Control;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validateFieldGroup" href="#/api/sap.ui.core.Control/events/validateFieldGroup">validateFieldGroup</a> event of this <code>sap.ui.core.Control</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.Control</code> itself.</p><p>Event is fired if a logical field group defined by <code>fieldGroupIds</code> of a control was left or the user explicitly pressed a key combination that triggers validation.</p><p>Listen to this event to validate data of the controls belonging to a field group. See <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setFieldGroupIds" href="#/api/sap.ui.core.Control/methods/setFieldGroupIds">#setFieldGroupIds</a>.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.Control</code> itself</p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachValidateFieldGroup(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Control;
        /**
         * <p>Returns whether this control belongs to a given combination of field groups.</p><p>If the <code>vFieldGroupIds</code> parameter is not specified, the method checks whether this control belongs to <strong>any</strong> field group, that is, whether any field group ID is defined for it.</p><p>If a list of field group IDs is specified, either as an array of strings or as a single string (interpreted as a comma separated list of IDs), then the method will check whether this control belongs to <strong>all</strong> given field groups. Accordingly, an empty list of IDs (empty array or empty string) will always return true.</p><p>Note that a string value for <code>vFieldGroupIds</code> (comma separated list) will not be trimmed. All whitespace characters are significant, but in general not recommended in field group IDs.<br><br>References: <ul><li><a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setFieldGroupIds" href="#/api/sap.ui.core.Control/methods/setFieldGroupIds">#setFieldGroupIds</a></li></ul></p>
         * @param {string | string[]} vFieldGroupIds <p>An array of field group IDs or a single string with a comma separated list of IDs to match</p>
         * @returns boolean <p>Whether the field group IDs defined for the control match the given ones</p>
         */
        checkFieldGroupIds(vFieldGroupIds?: string | string[]): boolean;
        /**
         * <p>Clones a tree of objects starting with the object on which clone is called first (root object).</p><p>The IDs within the newly created clone tree are derived from the original IDs by appending the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be unique across multiple clone calls).</p><p>The <code>oOptions</code> configuration object can have the following properties: <ul> <li>The boolean value <code>cloneChildren</code> specifies whether associations/aggregations will be cloned</li> <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li> </ul> Note: In case the configuration <code>oOptions</code> is specified, the default values <code>true</code> no longer apply, which means in case <code>cloneChildren</code> or <code>cloneBindings</code> is not specified, then this ia assumed to be <code>false</code> and associations/aggregations or bindings are not cloned.</p><p>For each cloned object the following settings are cloned based on the metadata of the object and the defined options: <ul> <li>all properties that are not bound. If <code>cloneBinding</code> is <code>false</code>, even these properties will be cloned; the values are used by reference, they are not cloned</li> <li>all aggregated objects that are not bound. If <code>cloneBinding</code> is <code>false</code>, even the ones that are bound will be cloned; they are all cloned recursively using the same <code>sIdSuffix</code></li> <li>all associated controls; when an association points to an object inside the cloned object tree, then the cloned association will be modified to that it points to the clone of the target object. When the association points to a managed object outside of the cloned object tree, then its target won't be changed.</li> <li>all models set via <code>setModel()</code>; used by reference </li> <li>all property and aggregation bindings (if <code>cloneBindings</code> is <code>true</code>); the pure binding information (path, model name) is cloned, but all other information like template control or factory function, data type or formatter function are copied by reference. The bindings themselves are created anew as they are specific for the combination (object, property, model). As a result, any later changes to a binding of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.</li> </ul></p><p>Each clone is created by first collecting the above mentioned settings and then creating a new instance with the normal constructor function. As a result, any side effects of mutator methods (<code>setProperty</code> etc.) or init hooks are repeated during clone creation. There is no need to override <code>clone()</code> just to reproduce these internal settings!</p><p>Custom controls however can override <code>clone()</code> to implement additional clone steps. They usually will first call <code>clone()</code> on the super class and then modify the returned clone accordingly.</p><p>Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>. It is determined automatically for the root object (and its non-existence also serves as an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.</p>
         * @param {string} sIdSuffix <p>a suffix to be appended to the cloned object ID</p>
         * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
         * @param {any} oOptions <p>Configuration object; when omitted, both properties default to <code>true</code>; when specified, undefined properties default to <code>false</code></p>
         * @returns sap.ui.base.ManagedObject <p>Reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Create a clone of this Element.</p><p>Calls <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/clone">sap.ui.base.ManagedObject#clone</a> and additionally clones event delegates.</p>
         * @param {string} sIdSuffix <p>Suffix to be appended to the cloned element ID</p>
         * @param {string[]} aLocalIds <p>Array of local IDs within the cloned hierarchy (internally used)</p>
         * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
        /**
         * <p>Overrides <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/clone">Element.clone</a> to clone additional internal state.</p><p>The additionally cloned information contains: <ul> <li>browser event handlers attached with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachBrowserEvent" href="#/api/sap.ui.core.Control/methods/attachBrowserEvent">#attachBrowserEvent</a></li> <li>text selection behavior</li> <li>style classes added with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addStyleClass" href="#/api/sap.ui.core.Control/methods/addStyleClass">#addStyleClass</a></li> </ul></p>
         * @param {string} sIdSuffix <p>a suffix to be appended to the cloned element id</p>
         * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
         * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
        /**
         * <p>Removes event handlers which have been previously attached using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachBrowserEvent" href="#/api/sap.ui.core.Control/methods/attachBrowserEvent">#attachBrowserEvent</a>.</p><p>Note: listeners are only removed, if the same combination of event type, callback function and context object is given as in the call to <code>attachBrowserEvent</code>.</p>
         * @param {string} sEventType <p>A string containing one or more JavaScript event types, such as "click" or "blur".</p>
         * @param {Function} fnHandler <p>The function that is to be no longer executed.</p>
         * @param {any} oListener <p>The context object that was given in the call to <code>attachBrowserEvent</code>.</p>
         */
        detachBrowserEvent(sEventType?: string, fnHandler?: Function, oListener?: any): void;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validateFieldGroup" href="#/api/sap.ui.core.Control/events/validateFieldGroup">validateFieldGroup</a> event of this <code>sap.ui.core.Control</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachValidateFieldGroup(fnFunction: Function, oListener?: any): sap.ui.core.Control;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validateFieldGroup" href="#/api/sap.ui.core.Control/events/validateFieldGroup">validateFieldGroup</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireValidateFieldGroup(mParameters?: any): sap.ui.core.Control;
        /**
         * <p>This function (if available on the concrete control) provides the current accessibility state of the control.</p><p>Applications must not call this hook method directly, it is called by the framework.</p><p>Subclasses of Control should implement this hook to provide any necessary accessibility information:</p><p><pre>
        MyControl.prototype.getAccessibilityInfo = function() {
           return {
             role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
             type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
                                   // the role.
             description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
                                   // translated text.
                                   // Note: The type and the enabled/editable state must not be handled here.
             focusable: true,      // Boolean which describes whether the control can get the focus.
             enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
                                   // <code>null</code> can be provided.
             editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
                                   // <code>null</code> can be provided.
             children: []          // Aggregations of the given control (e.g. when the control is a layout). Primitive aggregations will be ignored.
                                   // Note: Children should only be provided when it is helpful to understand the accessibility context
                                   //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
                                   //       layout should).
           };
        };
        </pre></p><p>Note: The returned object provides the accessibility state of the control at the point in time when this function is called.</p>
         * @returns any <p>Current accessibility state of the control.</p>
         */
        protected getAccessibilityInfo(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusy" href="#/api/sap.ui.core.Control/methods/getBusy">busy</a>.</p><p>Whether the control is currently in busy state.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>busy</code></p>
         */
        getBusy(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusyIndicatorDelay" href="#/api/sap.ui.core.Control/methods/getBusyIndicatorDelay">busyIndicatorDelay</a>.</p><p>The delay in milliseconds, after which the busy indicator will show up for this control.</p><p>Default value is <code>1000</code>.</p>
         * @returns number <p>Value of property <code>busyIndicatorDelay</code></p>
         */
        getBusyIndicatorDelay(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusyIndicatorSize" href="#/api/sap.ui.core.Control/methods/getBusyIndicatorSize">busyIndicatorSize</a>.</p><p>The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small</code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto</code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium</code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large</code>.</p><p>Default value is <code>Medium</code>.</p>
         * @returns sap.ui.core.BusyIndicatorSize <p>Value of property <code>busyIndicatorSize</code></p>
         */
        getBusyIndicatorSize(): sap.ui.core.BusyIndicatorSize;
        /**
         * <p>Returns a list of all child controls with a field group ID. See <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="checkFieldGroupIds" href="#/api/sap.ui.core.Control/methods/checkFieldGroupIds">checkFieldGroupIds</a> for a description of the <code>vFieldGroupIds</code> parameter. Associated controls are not taken into account.</p>
         * @param {string | string[]} vFieldGroupIds <p>ID of the field group or an array of field group IDs to match</p>
         * @returns sap.ui.core.Control[] <p>The list of controls with a field group ID</p>
         */
        getControlsByFieldGroupId(vFieldGroupIds?: string | string[]): sap.ui.core.Control[];
        /**
         * <p>Returns a copy of the field group IDs array. Modification of the field group IDs need to call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setFieldGroupIds" href="#/api/sap.ui.core.Control/methods/setFieldGroupIds">setFieldGroupIds</a> to apply the changes.</p>
         * @returns string[] <p>copy of the field group IDs</p>
         */
        getFieldGroupIds(): string[];
        /**
         * <p>Returns the DOMNode Id to be used for the "labelFor" attribute of the label.</p><p>By default, this is the Id of the control itself.</p>
         * @returns string <p>Id to be used for the <code>labelFor</code></p>
         */
        getIdForLabel(): string;
        /**
         * <p>Returns a renderer for this control instance.</p><p>It is retrieved using the RenderManager as done during rendering.</p>
         * @returns any <p>a Renderer suitable for this Control instance.</p>
         */
        protected getRenderer(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.Control/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen.</p><p>If set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none</code>).</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/writeInvisiblePlaceholderData">RenderManager#writeInvisiblePlaceholderData</a> for details.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>visible</code></p>
         */
        getVisible(): boolean;
        /**
         * <p>Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control via previous call(s) to addStyleClass().</p>
         * @param {string} sStyleClass <p>the style to check for</p>
         * @returns boolean 
         */
        hasStyleClass(sStyleClass: string): boolean;
        /**
         * <p>This triggers rerendering of itself and its children.</p><p>As <code>sap.ui.base.ManagedObject</code> "bubbles up" the invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.</p>
         */
        protected invalidate(): void;
        /**
         * <p>Triggers rerendering of this element and its children.</p><p>As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children potentially result in rerendering of the whole sub tree.</p><p>The <code>oOrigin</code> parameter was introduced to allow parent controls to limit their rerendering to certain areas that have been invalidated by their children. As there is no strong guideline for control developers to provide the parameter, it is not a reliable source of information. It is therefore not recommended in general to use it, only in scenarios where a control and its descendants know each other very well (e.g. complex controls where parent and children have the same code owner).</p>
         * @param {sap.ui.base.ManagedObject} oOrigin <p>Child control for which the method was called</p>
         */
        protected invalidate(oOrigin?: sap.ui.base.ManagedObject): void;
        /**
         * <p>Function is called when the rendering of the control is completed.</p><p>Applications must not call this hook method directly, it is called by the framework.</p><p>Subclasses of Control should override this hook to implement any necessary actions after the rendering.</p>
         */
        protected onAfterRendering(): void;
        /**
         * <p>Function is called before the rendering of the control is started.</p><p>Applications must not call this hook method directly, it is called by the framework.</p><p>Subclasses of Control should override this hook to implement any necessary actions before the rendering.</p>
         */
        protected onBeforeRendering(): void;
        /**
         * <p>Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given position (<code>oPosition</code>).</p><p>First it is checked whether <code>oRef</code> is a container element / control (has a multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String of such a container. If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea (if it does not yet exist implicitly a new UIArea is created),</p><p>The <code>oPosition</code> can be one of the following:</p><p><ul> <li>"first": The control is added as the first element to the container.</li> <li>"last": The control is added as the last element to the container (default).</li> <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li> <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li> </ul></p>
         * @param {string | HTMLElement | sap.ui.core.Control} oRef <p>container into which the control should be put</p>
         * @param {string | number} vPosition <p>Describes the position where the control should be put into the container</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        placeAt(oRef: string | HTMLElement | sap.ui.core.Control, vPosition?: string | number): sap.ui.core.Control;
        /**
         * <p>Removes the given string from the list of custom style classes that have been set previously. Regular style classes like "sapUiBtn" cannot be removed.</p>
         * @param {string} sStyleClass <p>the style to be removed</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        removeStyleClass(sStyleClass: string): sap.ui.core.Control;
        /**
         * <p>This triggers immediate rerendering of its parent and thus of itself and its children.</p><p>As <code>sap.ui.core.Element</code> "bubbles up" the rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.</p>
         */
        protected rerender(): void;
        /**
         * <p>Tries to replace its DOM reference by re-rendering.</p>
         */
        protected rerender(): void;
        /**
         * <p>Set the controls busy state.</p>
         * @param {boolean} bBusy <p>The new busy state to be set</p>
         * @returns sap.ui.core.Control <p><code>this</code> to allow method chaining</p>
         */
        setBusy(bBusy: boolean): sap.ui.core.Control;
        /**
         * <p>Define the delay, after which the busy indicator will show up.</p>
         * @param {number} iDelay <p>The delay in ms</p>
         * @returns sap.ui.core.Control <p><code>this</code> to allow method chaining</p>
         */
        setBusyIndicatorDelay(iDelay: number): sap.ui.core.Control;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBusyIndicatorSize" href="#/api/sap.ui.core.Control/methods/getBusyIndicatorSize">busyIndicatorSize</a>.</p><p>The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small</code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto</code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium</code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Medium</code>.</p>
         * @param {sap.ui.core.BusyIndicatorSize} sBusyIndicatorSize <p>New value for property <code>busyIndicatorSize</code></p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setBusyIndicatorSize(sBusyIndicatorSize: sap.ui.core.BusyIndicatorSize): sap.ui.core.Control;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFieldGroupIds" href="#/api/sap.ui.core.Control/methods/getFieldGroupIds">fieldGroupIds</a>.</p><p>The IDs of a logical field group that this control belongs to.</p><p>All fields in a logical field group should share the same <code>fieldGroupId</code>. Once a logical field group is left, the <code>validateFieldGroup</code> event is raised.</p><p>For backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ID">sap.ui.core.ID</a>s.</p><p>See <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachValidateFieldGroup" href="#/api/sap.ui.core.Control/methods/attachValidateFieldGroup">#attachValidateFieldGroup</a> or consult the <a target="_self" href="#/topic/5b0775397e394b1fb973fa207554003e">Field Group</a> documentation.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>[]</code>.</p>
         * @param {string[]} sFieldGroupIds <p>New value for property <code>fieldGroupIds</code></p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setFieldGroupIds(sFieldGroupIds: string[]): sap.ui.core.Control;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.Control/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen.</p><p>If set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none</code>).</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/writeInvisiblePlaceholderData">RenderManager#writeInvisiblePlaceholderData</a> for details.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setVisible(bVisible: boolean): sap.ui.core.Control;
        /**
         * <p>The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element, depending on the value of "bAdd": if bAdd is true, sStyleClass will be added. If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present. If sStyleClass is null or empty string, the call is ignored.</p><p>See addStyleClass and removeStyleClass for further documentation.</p>
         * @param {string} sStyleClass <p>the CSS class name to be added or removed</p>
         * @param {boolean} bAdd <p>whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)</p>
         * @returns sap.ui.core.Control <p>Returns <code>this</code> to allow method chaining</p>
         */
        toggleStyleClass(sStyleClass: string, bAdd: boolean): sap.ui.core.Control;
        /**
         * <p>Triggers the <code>validateFieldGroup</code> event for this control.</p><p>Called by <code>sap.ui.core.UIArea</code> if a field group should be validated after it lost the focus or when the key combination was pressed that was configured to trigger validation (defined in the UI area member <code>UIArea._oFieldGroupValidationKey</code>).</p><p>See <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachValidateFieldGroup" href="#/api/sap.ui.core.Control/methods/attachValidateFieldGroup">#attachValidateFieldGroup</a>.</p>
         */
        triggerValidateFieldGroup(): void;
      }
      /**
       * <p>Core Class of the SAP UI Library.</p><p>This class boots the Core framework and makes it available for the application via method <code>sap.ui.getCore()</code>.</p><p>Example: <pre>
      
        var oCore = sap.ui.getCore();
      
      </pre></p><p>With methods of the Core framework you can <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachInit" href="#/api/sap.ui.core.Core/methods/attachInit">execute code</a> after the framework has been initialized. It provides access to the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConfiguration" href="#/api/sap.ui.core.Core/methods/getConfiguration">configuration</a> and exposes events that an application or a control can register to (e.g. <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="localizationChanged" href="#/api/sap.ui.core.Core/events/localizationChanged">localizationChanged</a>, <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="parseError" href="#/api/sap.ui.core.Core/events/parseError">parseError</a>, <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationError" href="#/api/sap.ui.core.Core/events/validationError">validationError</a>, <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="formatError" href="#/api/sap.ui.core.Core/events/formatError">formatError</a>, <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="validationSuccess" href="#/api/sap.ui.core.Core/events/validationSuccess">validationSuccess</a>).</p><p>Example: <pre>
      
        oCore.attachInit(function() {
          if ( oCore.getConfiguration().getRTL() ) {
            ...
          }
        });
      
        oCore.attachLocalizationChanged(function(oEvent) {
          ...
        });
      
      </pre></p>
       */
      export class Core extends sap.ui.base.Object {
        /**
         * <p>Enforces an immediate update of the visible UI (aka "rendering").</p><p>In general, applications should avoid calling this method and instead let the framework manage any necessary rendering.</p>
         */
        applyChanges(): void;
        /**
         * <p>Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).</p><p>By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]). Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme(). Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.</p><p>sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css then the URL that needs to be given is: http://my.server/myapp/resources All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.</p><p>If the theme resources are not all either below this base location or with their respective libraries, then setThemePath must be used to configure individual locations.</p>
         * @param {string} sThemeName <p>the name of the theme to be loaded</p>
         * @param {string} sThemeBaseUrl <p>the (optional) base location of the theme</p>
         */
        applyTheme(sThemeName: string, sThemeBaseUrl?: string): void;
        /**
         * <p>Registers a listener for control events.</p>
         * @param {Function} fnFunction <p>callback to be called for each control event</p>
         * @param {any} oListener <p>optional context object to call the callback on.</p>
         */
        attachControlEvent(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.</p><p>Please note that this event is a bubbling event and may already be canceled before reaching the core.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, an unspecified context object is used (listeners cannot expect this to be the <code>Core</code>).</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        attachFormatError(fnFunction: Function, oListener?: any): sap.ui.core.Core;
        /**
         * <p>Registers a given function that is executed after the framework has been initialized.</p><p>The given function will either be called as soon as the framework has been initialized or, if it has been initialized already, it will be called immediately.</p><p>More information about the initialization process and the steps it consists of can be found in the documentation topic "<a target="_self" href="#/topic/91f2c9076f4d1014b6dd926db0e91070">Initialization Process</a>".</p>
         * @param {Function} fnFunction <p>Function to be after initialization of the framework</p>
         */
        attachInit(fnFunction: Function): void;
        /**
         * <p>Register a listener for the <code>localizationChanged</code> event.</p>
         * @param {Function} fnFunction <p>callback to be called</p>
         * @param {any} oListener <p>context object to cal lthe function on.</p>
         */
        attachLocalizationChanged(fnFunction: Function, oListener: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.</p><p>Please note that this event is a bubbling event and may already be canceled before reaching the core.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, an unspecified context object is used (listeners cannot expect this to be the <code>Core</code>).</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        attachParseError(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Core;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the <code>ThemeChanged</code> event of this <code>sap.ui.core.Core</code>.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function.</p>
         */
        attachThemeChanged(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.</p><p>Please note that this event is a bubbling event and may already be canceled before reaching the core.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, an unspecified context object is used (listeners cannot expect this to be the <code>Core</code>).</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        attachValidationError(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Core;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.</p><p>Please note that this event is a bubbling event and may already be canceled before reaching the core.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, an unspecified context object is used (listeners cannot expect this to be the <code>Core</code>).</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        attachValidationSuccess(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Core;
        /**
         * <p>Returns a list of all controls with a field group ID. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/checkFieldGroupIds">Control.prototype.checkFieldGroupIds</a> for a description of the <code>vFieldGroupIds</code> parameter.</p>
         * @param {string | string[]} vFieldGroupIds <p>ID of the field group or an array of field group IDs to match</p>
         * @returns sap.ui.core.Control[] <p>The list of controls with matching field group IDs</p>
         */
        byFieldGroupId(vFieldGroupIds?: string | string[]): sap.ui.core.Control[];
        /**
         * <p>Returns the registered element with the given ID, if any.</p><p>The ID must be the globally unique ID of an element, the same as returned by <code>oElement.getId()</code>. When the element has been created from a declarative source (e.g. XMLView), that source might have used a shorter, non-unique local ID. A search for such a local ID cannot be executed with this method. It can only be executed on the corresponding scope (e.g. on an XMLView instance), by using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View/methods/byId">View#byId</a> method of that scope.</p>
         * @param {string} sId <p>ID of the element to search for</p>
         * @returns sap.ui.core.Element <p>Element with the given ID or <code>undefined</code></p>
         */
        byId(sId: string): sap.ui.core.Element;
        /**
         * <p>Creates a component with the provided id and settings.</p><p>When the optional parameter <code>sUrl</code> is given, then all request for resources of the library will be redirected to the given URL. This is convenience for a call to <pre>
          sap.ui.loader.config({
              paths: {
                "lib/with/slashes": vUrl
              }
          });
        </pre></p>
         * @param {string | any} vComponent <p>name of the component to import or object containing all needed parameters</p>
         * @param {string} sUrl <p>the URL to load the component from</p>
         * @param {string} sId <p>the ID for the component instance</p>
         * @param {any} mSettings <p>the settings object for the component</p>
         */
        createComponent(vComponent: string | any, sUrl?: string, sId?: string, mSettings?: any): void;
        /**
         * <p>Returns a new instance of the RenderManager for exclusive use by the caller.</p><p>The caller must take care to destroy the render manager when it is no longer needed. Calling this method before the Core has been <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isInitialized" href="#/api/sap.ui.core.Core/methods/isInitialized">initialized</a>, is not recommended.</p>
         * @returns sap.ui.core.RenderManager <p>New instance of the RenderManager</p>
         */
        createRenderManager(): sap.ui.core.RenderManager;
        /**
         * <p>Unregisters a listener for control events.</p><p>A listener will only be unregistered if the same function/context combination is given as in the attachControlEvent call.</p>
         * @param {Function} fnFunction <p>function to unregister</p>
         * @param {any} oListener <p>context object given during registration</p>
         */
        detachControlEvent(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The callback function to unregister</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        detachFormatError(fnFunction: Function, oListener: any): sap.ui.core.Core;
        /**
         * <p>Unregister a listener from the <code>localizationChanged</code> event.</p><p>The listener will only be unregistered if the same function/context combination is given as in the call to <code>attachLocalizationListener</code>.</p>
         * @param {Function} fnFunction <p>callback to be deregistered</p>
         * @param {any} oListener <p>context object given in a previous call to attachLocalizationChanged.</p>
         */
        detachLocalizationChanged(fnFunction: Function, oListener: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The callback function to unregister.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        detachParseError(fnFunction: Function, oListener: any): sap.ui.core.Core;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the <code>ThemeChanged</code> event of this <code>sap.ui.core.Core</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         */
        detachThemeChanged(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The callback function to unregister</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        detachValidationError(fnFunction: Function, oListener: any): sap.ui.core.Core;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        detachValidationSuccess(fnFunction: Function, oListener: any): sap.ui.core.Core;
        /**
         * <p>Fire event <code>formatError</code> to attached listeners.</p>
         * @param {any} oParameters <p>Parameters to pass along with the event.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        protected fireFormatError(oParameters: any): sap.ui.core.Core;
        /**
         * <p>Fire event <code>parseError</code> to attached listeners.</p>
         * @param {any} oParameters <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        protected fireParseError(oParameters: any): sap.ui.core.Core;
        /**
         * <p>Fire event <code>validationError</code> to attached listeners.</p>
         * @param {any} oParameters <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        protected fireValidationError(oParameters: any): sap.ui.core.Core;
        /**
         * <p>Fire event validationSuccess to attached listeners.</p><p>Expects following event parameters: <ul> <li>'element' of type <code>sap.ui.core.Element</code> </li> <li>'property' of type <code>string</code> </li> <li>'type' of type <code>string</code> </li> <li>'newValue' of type <code>object</code> </li> <li>'oldValue' of type <code>object</code> </li> </ul></p>
         * @param {{ [key: string]: any }} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        protected fireValidationSuccess(mArguments?: { [key: string]: any }): sap.ui.core.Core;
        /**
         * <p>Returns the registered component for the given id, if any.</p>
         * @param {string} sId 
         * @returns sap.ui.core.Component <p>the component for the given id</p>
         */
        getComponent(sId: string): sap.ui.core.Component;
        /**
         * <p>Returns the Configuration of the Core.</p>
         * @returns sap.ui.core.Configuration <p>the Configuration of the current Core.</p>
         */
        getConfiguration(): sap.ui.core.Configuration;
        /**
         * <p>Returns the Id of the control/element currently in focus.</p>
         * @returns string <p>the Id of the control/element currently in focus.</p>
         */
        getCurrentFocusedControlId(): string;
        /**
         * <p>Returns the event bus.</p>
         * @returns sap.ui.core.EventBus <p>the event bus</p>
         */
        getEventBus(): sap.ui.core.EventBus;
        /**
         * <p>Retrieves a resource bundle for the given library and locale.</p><p>If only one argument is given, it is assumed to be the libraryName. The locale then falls back to the current <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/getLanguage">session locale</a>. If no argument is given, the library also falls back to a default: "sap.ui.core".</p><h3>Configuration via App Descriptor</h3><p> When the App Descriptor for the library is available without further request (manifest.json has been preloaded) and when the App Descriptor is at least of version 1.9.0 or higher, then this method will evaluate the App Descriptor entry <code>"sap.ui5" / "library" / "i18n"</code>. <ul> <li>When the entry is <code>true</code>, a bundle with the default name "messagebundle.properties" will be loaded</li> <li>If it is a string, then that string will be used as name of the bundle</li> <li>If it is <code>false</code>, no bundle will be loaded and the result will be <code>undefined</code></li> </ul></p><h3>Caching</h3><p> Once a resource bundle for a library has been loaded, it will be cached by this method. Further calls for the same library and locale won't create new requests, but return the already loaded bundle. There's therefore no need for control code to cache the returned bundle for a longer period of time. Not further caching the result also prevents stale texts after a locale change.</p><h3>Asynchronous Loading</h3><p> The asynchronous variant of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="loadLibrary" href="#/api/sap.ui.core.Core/methods/loadLibrary">#loadLibrary</a> will evaluate the same descriptor entry as described above. If it is not <code>false</code>, loading the main resource bundle of the library will become a subtask of the asynchronous loading of the library.</p><p>Due to this preload of the main bundle and the caching behavior of this method, controls in such a library still can use the synchronous variant of <code>getLibraryResourceBundle</code> in their API, behavior and rendering code. Only when the bundle is needed at module execution time (by top level code in a control module), then the asynchronous variant of this method should be preferred.</p>
         * @param {string} sLibraryName <p>Name of the library to retrieve the bundle for</p>
         * @param {string} sLocale <p>Locale to retrieve the resource bundle for</p>
         * @param {boolean} bAsync <p>Whether the resource bundle is loaded asynchronously</p>
         * @returns any <p>The best matching resource bundle for the given parameters or <code>undefined</code>; in asynchronous case a Promise on that bundle is returned</p>
         */
        getLibraryResourceBundle(sLibraryName?: string, sLocale?: string, bAsync?: boolean): any | Promise<any>;
        /**
         * <p>Returns a map of library info objects for all currently loaded libraries, keyed by their names.</p><p>The structure of the library info objects matches the structure of the info object that the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="initLibrary" href="#/api/sap.ui.core.Core/methods/initLibrary">#initLibrary</a> method expects. Only property names documented with <code>initLibrary</code> should be accessed, any additional properties might change or disappear in future. When a property does not exists, its default value (as documented with <code>initLibrary</code>) should be assumed.</p><p><b>Note:</b> The returned info objects must not be modified. They might be a living copy of the internal data (for efficiency reasons) and the framework is not prepared to handle modifications to these objects.</p>
         * @returns any <p>Map of library info objects keyed by the library names.</p>
         */
        getLoadedLibraries(): any;
        /**
         * <p>Returns the active <code>MessageManager</code> instance.</p>
         * @returns sap.ui.core.message.MessageManager 
         */
        getMessageManager(): sap.ui.core.message.MessageManager;
        /**
         * <p>Get the model with the given model name.</p><p>The name can be omitted to reference the default model or it must be a non-empty string.</p><p>Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>, the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.</p>
         * @param {string | undefined} sName <p>name of the model to be retrieved</p>
         * @returns sap.ui.model.Model <p>oModel</p>
         */
        getModel(sName?: string | undefined): sap.ui.model.Model;
        /**
         * <p>Returns the instance of the root component (if exists).</p>
         * @returns sap.ui.core.Component <p>instance of the current root component</p>
         */
        getRootComponent(): sap.ui.core.Component;
        /**
         * <p>Returns the static, hidden area DOM element belonging to this core instance.</p><p>It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.</p><p>If it is not yet available, a DIV is created and appended to the body.</p>
         * @returns HTMLElement <p>the static, hidden area DOM element belonging to this core instance.</p>
         */
        getStaticAreaRef(): HTMLElement;
        /**
         * <p>Returns the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIArea">UIArea</a> with the given ID or that belongs to the given DOM element.</p>
         * @param {string | HTMLElement} o <p>DOM element or ID of the UIArea</p>
         * @returns sap.ui.core.UIArea <p>UIArea with the given ID or DOM element or <code>null</code> or <code>undefined</code>.</p>
         */
        getUIArea(o: string | HTMLElement): sap.ui.core.UIArea;
        /**
         * <p>Returns <code>true</code> if there are any pending rendering tasks or when such rendering tasks are currently being executed.</p>
         * @returns boolean <p>true if there are pending (or executing) rendering tasks.</p>
         */
        getUIDirty(): boolean;
        /**
         * <p>Check if a Model is set to the core</p>
         * @returns boolean <p>true or false</p>
         */
        hasModel(): boolean;
        /**
         * <p>Includes a library theme into the current page (if a variant is specified it will include the variant library theme)</p>
         * @param {string} sLibName <p>the name of the UI library</p>
         * @param {string} sVariant <p>the variant to include (optional)</p>
         * @param {string} sQuery <p>to be used only by the Core</p>
         */
        includeLibraryTheme(sLibName: string, sVariant?: string, sQuery?: string): void;
        /**
         * <p>Provides the framework with information about a library.</p><p>This method is intended to be called exactly once while the main module of a library (its <code>library.js</code> module) is executing, typically at its begin. The single parameter <code>oLibInfo</code> is an info object that describes the content of the library.</p><p>When the <code>oLibInfo</code> has been processed, a normalized version of it will be kept and will be returned as library information in later calls to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLoadedLibraries" href="#/api/sap.ui.core.Core/methods/getLoadedLibraries">#getLoadedLibraries</a>. Finally, <code>initLibrary</code> fires (the currently private) <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="LibraryChanged" href="#/api/sap.ui.core.Core/events/LibraryChanged">#event:LibraryChanged</a> event with operation 'add' for the newly loaded library.</p><h3>Side Effects</h3><p>While analyzing the <code>oLibInfo</code>, the framework takes some additional actions:</p><p><ul> <li>If the info object contains a list of <code>interfaces</code>, they will be registered with the <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType">sap.ui.base.DataType</a> class to make them available as aggregation types in managed objects.</li></p><p><li>If the object contains a list of <code>controls</code> or <code>elements</code>, <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.lazyRequire">lazy stubs</a> will be created for their constructor as well as for their static <code>extend</code> and <code>getMetadata</code> methods.<br> <b>Note:</b> Future versions might abandon the concept of lazy stubs as it requires synchronous XMLHttpRequests which have been deprecated (see <a target="_blank" href="http://xhr.spec.whatwg.org">http://xhr.spec.whatwg.org</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/>). To be on the safe side, productive applications should always require any modules that they directly depend on.</li></p><p><li>With the <code>noLibraryCSS</code> property, the library can be marked as 'theming-free'. Otherwise, the framework will add a &lt;link&gt; tag to the page's head, pointing to the library's theme-specific stylesheet. The creation of such a &lt;link&gt; tag can be suppressed with the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration">global configuration option</a> <code>preloadLibCss</code>. It can contain a list of library names for which no stylesheet should be included. This is e.g. useful when an application merges the CSS for multiple libraries and already loaded the resulting stylesheet.</li></p><p><li>If a list of library <code>dependencies</code> is specified in the info object, those libraries will be loaded synchronously by <code>initLibrary</code>.<br> <b>Note:</b> Dependencies between libraries don't have to be modeled as AMD dependencies. Only when enums or types from an additional library are used in the coding of the <code>library.js</code> module, the library should be additionally listed in the AMD dependencies.</li> </ul></p><p>Last but not least, higher layer frameworks might want to include their own metadata for libraries. The property <code>extensions</code> might contain such additional metadata. Its structure is not defined by the framework, but it is strongly suggested that each extension only occupies a single property in the <code>extensions</code> object and that the name of that property contains some namespace information (e.g. library name that introduces the feature) to avoid conflicts with other extensions. The framework won't touch the content of <code>extensions</code> but will make it available in the library info objects returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLoadedLibraries" href="#/api/sap.ui.core.Core/methods/getLoadedLibraries">#getLoadedLibraries</a>.</p><h3>Relationship to Descriptor for Libraries (manifest.json)</h3><p>The information contained in <code>oLibInfo</code> is partially redundant to the content of the descriptor for the same library (its <code>manifest.json</code> file). Future versions of UI5 might ignore the information provided in <code>oLibInfo</code> and might evaluate the descriptor file instead. Library developers therefore should keep the information in both files in sync.</p><p>When the <code>manifest.json</code> is generated from the <code>.library</code> file (which is the default for UI5 libraries built with Maven), then the content of the <code>.library</code> and <code>library.js</code> files must be kept in sync.</p>
         * @param {any} oLibInfo <p>Info object for the library</p>
         */
        initLibrary(oLibInfo: any): void;
        /**
         * <p>Returns true if the Core has already been initialized. This means that instances of RenderManager etc. do already exist and the init event has already been fired (and will not be fired again).</p>
         * @returns boolean <p>whether the Core has already been initialized</p>
         */
        isInitialized(): boolean;
        /**
         * <p>Returns the locked state of the <code>sap.ui.core.Core</code></p>
         * @returns boolean <p>locked state</p>
         */
        isLocked(): boolean;
        /**
         * <p>Check if the script is running on mobile</p>
         * @returns boolean <p>true or false</p>
         */
        isMobile(): boolean;
        /**
         * <p>Used to find out whether a certain DOM element is the static area</p>
         * @param {any} oDomRef 
         * @returns boolean <p>whether the given DomRef is the StaticAreaRef</p>
         */
        protected isStaticAreaRef(oDomRef: any): boolean;
        /**
         * <p>Returns true, if the styles of the current theme are already applied, false otherwise.</p><p>This function must not be used before the init event of the Core. If the styles are not yet applied a theme changed event will follow when the styles will be applied.</p>
         * @returns boolean <p>whether the styles of the current theme are already applied</p>
         */
        isThemeApplied(): boolean;
        /**
         * <p>Loads the given library and its dependencies and makes it available to the application.</p><p>When library preloads are not suppressed for the given library, then a library-preload bundle will be loaded for it. By default, the bundle will be loaded synchronously (for compatibility reasons). Only when the optional parameter <code>vUrl</code> is given as <code>true</code> or as a configuration object with a property of <code>async:true</code>, then the bundle will be loaded asynchronously and a <code>Promise</code> will be returned (preferred usage).</p><p>After preloading the bundle, dependency information from the bundle is evaluated and any missing libraries are also preloaded.</p><p>Only then the library entry module (named <code><i>your/lib</i>/library.js</code>) will be required and executed. The module is supposed to call <code>sap.ui.getCore().initLibrary(...)</code> providing the framework with additional metadata about the library, e.g. its version, the set of contained enums, types, interfaces, controls and elements and whether the library requires CSS. If the library requires CSS, a &lt;link&gt; will be added to the page referring to the corresponding <code>library.css</code> stylesheet for the library and the current theme.</p><p>When the optional parameter <code>vUrl</code> is given as a string or when a configuration object is given with a non-empty, string-valued property <code>url</code>, then that URL will be registered for the namespace of the library and all resources will be loaded from that location. This is convenience for a call like <pre>
          sap.ui.loader.config({
            paths: {
              "lib/with/slashes": vUrl
            }
          });
        </pre></p><p>When the given library has been loaded already, no further action will be taken, especially, a given URL will not be registered! In the case of asynchronous loading, a Promise will be returned, but will be resolved immediately.</p>
         * @param {string} sLibrary <p>name of the library to load</p>
         * @param {string | boolean | any} vUrl <p>URL to load the library from or the async flag or a complex configuration object</p>
         * @returns Object|Promise <p>An info object for the library (sync) or a Promise (async)</p>
         */
        loadLibrary(sLibrary: string, vUrl?: string | boolean | any): any | Promise<any>;
        /**
         * <p>Locks the Core. No browser events are dispatched to the controls.</p><p>Lock should be called before and after the DOM is modified for rendering, roundtrips... Exceptions might be the case for asynchronous UI behavior</p>
         */
        lock(): void;
        /**
         * <p>This method can be called to trigger realignment of controls after changing the cozy/compact CSS class of a DOM element, for example, the <code>&lt;body&gt;</code> tag.</p>
         */
        notifyContentDensityChanged(): void;
        /**
         * <p>Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle will be managed (start and stop).</p><p>Plugin object need to implement two methods: <ul> <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin should start (as parameter the reference to the Core will be provided</li> <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li> </ul></p>
         * @param {any} oPlugin <p>reference to a Plugin object</p>
         */
        registerPlugin(oPlugin: any): void;
        /**
         * <p>Sets or unsets a model for the given model name.</p><p>The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string. When the name is omitted, the default model is set/unset.</p><p>When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model with that name is removed from the Core.</p><p>Any change (new model, removed model) is propagated to all existing UIAreas and their descendants as long as a descendant doesn't have its own model set for the given name.</p><p>Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>, the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.</p>
         * @param {sap.ui.model.Model} oModel <p>the model to be set or <code>null</code> or <code>undefined</code></p>
         * @param {string} sName <p>the name of the model or <code>undefined</code></p>
         * @returns sap.ui.core.Core <p><code>this</code> to allow method chaining</p>
         */
        setModel(oModel: sap.ui.model.Model, sName?: string): sap.ui.core.Core;
        /**
         * <p>Defines the root directory from below which UI5 should load the theme with the given name. Optionally allows restricting the setting to parts of a theme covering specific control libraries.</p><p>Example: <pre>
          sap.ui.getCore().setThemeRoot("my_theme", "https://mythemeserver.com/allThemes");
          sap.ui.getCore().applyTheme("my_theme");
        </pre></p><p>will cause the following file to be loaded (assuming that the bootstrap is configured to load libraries <code>sap.m</code> and <code>sap.ui.layout</code>): <pre>
          https://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css
          https://mythemeserver.com/allThemes/sap/ui/layout/themes/my_theme/library.css
          https://mythemeserver.com/allThemes/sap/m/themes/my_theme/library.css
        </pre></p><p>If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_belize" for a custom control library and this self-made part of the standard theme is at a different location than the UI5 resources), you can also specify for which control libraries the setting should be used, by giving an array with the names of the respective control libraries as second parameter: <pre>
          sap.ui.getCore().setThemeRoot("sap_belize", ["my.own.library"], "https://mythemeserver.com/allThemes");
        </pre></p><p>This will cause the Belize theme to be loaded from the UI5 location for all standard libraries. Resources for styling the <code>my.own.library</code> controls will be loaded from the configured location: <pre>
          https://openui5.hana.ondemand.com/resources/sap/ui/core/themes/sap_belize/library.css
          https://openui5.hana.ondemand.com/resources/sap/ui/layout/themes/sap_belize/library.css
          https://openui5.hana.ondemand.com/resources/sap/m/themes/sap_belize/library.css
          https://mythemeserver.com/allThemes/my/own/library/themes/sap_belize/library.css
        </pre></p><p>If the custom theme should be loaded initially (via bootstrap attribute), the <code>themeRoots</code> property of the <code>window["sap-ui-config"]</code> object must be used instead of calling <code>sap.ui.getCore().setThemeRoot(...)</code> in order to configure the theme location early enough.</p>
         * @param {string} sThemeName <p>Name of the theme for which to configure the location</p>
         * @param {string[]} aLibraryNames <p>Optional library names to which the configuration should be restricted</p>
         * @param {string} sThemeBaseUrl <p>Base URL below which the CSS file(s) will be loaded from</p>
         * @param {boolean} bForceUpdate <p>Force updating URLs of currently loaded theme</p>
         * @returns sap.ui.core.Core <p>the Core, to allow method chaining</p>
         */
        setThemeRoot(sThemeName: string, aLibraryNames: string[], sThemeBaseUrl: string, bForceUpdate?: boolean): sap.ui.core.Core;
        /**
         * <p>Unlocks the Core.</p><p>Browser events are dispatched to the controls again after this method is called.</p>
         */
        unlock(): void;
        /**
         * <p>Unregisters a Plugin out of the <code>sap.ui.core.Core</code></p>
         * @param {any} oPlugin <p>reference to a Plugin object</p>
         */
        unregisterPlugin(oPlugin: any): void;
      }
      /**
       * <p>Contains a single key/value pair of custom data attached to an <code>Element</code>.</p><p>See method <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/data">Element.prototype.data</a> and the chapter <a target="_self" href="#/topic/91f0c3ee6f4d1014b6dd926db0e91070">Custom Data - Attaching Data Objects to Controls</a> in the documentation.</p>
       */
      export class CustomData extends sap.ui.core.Element {
        /**
         * <p>Constructor for a new <code>CustomData</code> element.</p>
         * @param {string} sId <p>ID for the new element, generated automatically if no ID is given</p>
         * @param {any} mSettings <p>initial settings for the new element</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.core.CustomData/methods/getKey">key</a>.</p><p>The key of the data in this CustomData object. When the data is just stored, it can be any string, but when it is to be written to HTML (<code>writeToDom == true</code>) then it must also be a valid HTML attribute name. It must conform to the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ID">sap.ui.core.ID</a> type and may contain no colon. To avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-". If any restriction is violated, a warning will be logged and nothing will be written to the DOM.</p>
         * @returns string <p>Value of property <code>key</code></p>
         */
        getKey(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.core.CustomData/methods/getValue">value</a>.</p><p>The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when it is to be written to HTML (<code>writeToDom == true</code>) then it must be a string. If this restriction is violated, a warning will be logged and nothing will be written to the DOM.</p>
         * @returns any <p>Value of property <code>value</code></p>
         */
        getValue(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWriteToDom" href="#/api/sap.ui.core.CustomData/methods/getWriteToDom">writeToDom</a>.</p><p>If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute. If the key is "abc" and the value is "cde", the HTML will look as follows:</p><p>&lt;SomeTag ... data-abc="cde" ... &gt;</p><p>Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.</p><p><b>ATTENTION:</b> use carefully to not create huge attributes or a large number of them.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>writeToDom</code></p>
         */
        getWriteToDom(): boolean;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.core.CustomData/methods/getKey">key</a>.</p><p>The key of the data in this CustomData object. When the data is just stored, it can be any string, but when it is to be written to HTML (<code>writeToDom == true</code>) then it must also be a valid HTML attribute name. It must conform to the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ID">sap.ui.core.ID</a> type and may contain no colon. To avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-". If any restriction is violated, a warning will be logged and nothing will be written to the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sKey <p>New value for property <code>key</code></p>
         * @returns sap.ui.core.CustomData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setKey(sKey: string): sap.ui.core.CustomData;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.core.CustomData/methods/getValue">value</a>.</p><p>The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when it is to be written to HTML (<code>writeToDom == true</code>) then it must be a string. If this restriction is violated, a warning will be logged and nothing will be written to the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {any} oValue <p>New value for property <code>value</code></p>
         * @returns sap.ui.core.CustomData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setValue(oValue: any): sap.ui.core.CustomData;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWriteToDom" href="#/api/sap.ui.core.CustomData/methods/getWriteToDom">writeToDom</a>.</p><p>If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute. If the key is "abc" and the value is "cde", the HTML will look as follows:</p><p>&lt;SomeTag ... data-abc="cde" ... &gt;</p><p>Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.</p><p><b>ATTENTION:</b> use carefully to not create huge attributes or a large number of them.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bWriteToDom <p>New value for property <code>writeToDom</code></p>
         * @returns sap.ui.core.CustomData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setWriteToDom(bWriteToDom: boolean): sap.ui.core.CustomData;
      }
      /**
       * <p>Static class for enabling declarative UI support.</p>
       */
      export class DeclarativeSupport {
        /**
         * <p>Enhances the given DOM element by parsing the Control and Elements info and creating the SAPUI5 controls for them.</p>
         * @param {HTMLElement} oElement <p>the DOM element to compile</p>
         * @param {sap.ui.core.mvc.HTMLView} oView <p>The view instance to use</p>
         * @param {boolean} isRecursive <p>Whether the call of the function is recursive.</p>
         */
        static compile(oElement: HTMLElement, oView?: sap.ui.core.mvc.HTMLView, isRecursive?: boolean): void;
        /**
         */
        constructor();
      }
      /**
       * <p><p>Font design for texts.</p></p>
       */
      export enum Design {
        /**
         * <p>Mono space font</p>
         */
        Monospace = "Monospace",
        /**
         * <p>Standard font</p>
         */
        Standard = "Standard",
      }
      /**
       * <p>Base Class for Elements.</p>
       */
      export abstract class Element extends sap.ui.base.ManagedObject {
        /**
         * <p>Constructs and initializes a UI Element with the given <code>sId</code> and settings.</p><h3>Uniqueness of IDs</h3><p>Each <code>Element</code> must have an ID. If no <code>sId</code> or <code>mSettings.id</code> is given at construction time, a new ID will be created automatically. The IDs of all elements that exist at the same time in the same window must be different. Providing an ID which is already used by another element throws an error.</p><p>When an element is created from a declarative source (e.g. XMLView), then an ID defined in that declarative source needs to be unique only within the declarative source. Declarative views will prefix that ID with their own ID (and some separator) before constructing the element. Programmatically created views (JSViews) can do the same with the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View/methods/createId">sap.ui.core.mvc.View#createId</a> API. Similarly, UIComponents can prefix the IDs of elements created in their context with their own ID. Also see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/getAutoPrefixId">UIComponent#getAutoPrefixId</a>.</p><h3>Settings</h3><p> If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal) that defines values for properties, aggregations, associations or events keyed by their name.</p><p><b>Valid Names:</b></p><p>The property (key) names supported in the object literal are exactly the (case sensitive) names documented in the JSDoc for the properties, aggregations, associations and events of the control and its base classes. Note that for 0..n aggregations and associations this usually is the plural name, whereas it is the singular name in case of 0..1 relations.</p><p>If a key name is ambiguous for a specific control class (e.g. a property has the same name as an event), then this method prefers property, aggregation, association and event in that order. To resolve such ambiguities, the keys can be prefixed with <code>aggregation:</code>, <code>association:</code> or <code>event:</code>. In that case the keys must be quoted due to the ':'.</p><p>Each subclass should document the set of supported names in its constructor documentation.</p><p><b>Valid Values:</b></p><p><ul> <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)</li> <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type</li> <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type</li> <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted</li> <li>0..n associations are not supported yet</li> <li>for events either a function (event handler) is accepted or an array of length 2 where the first element is a function and the 2nd element is an object to invoke the method on.</li> </ul></p><p>Special aggregation <code>dependents</code> is connected to the lifecycle management and databinding, but not rendered automatically and can be used for popups or other dependent controls or elements. This allows the definition of popup controls in declarative views and enables propagation of model and context information to them.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
         * @param {any} mSettings <p>optional map/JSON-object with initial property values, aggregated objects etc. for the new element</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Returns the best suitable DOM node that represents this Element wrapped as jQuery object. I.e. the element returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/getDomRef">sap.ui.core.Element#getDomRef</a> is wrapped and returned.</p><p>If an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery. This matches the UI5 naming convention for named inner DOM nodes of a control.</p>
         * @param {string} sSuffix <p>ID suffix to get a jQuery object for</p>
         * @returns any <p>The jQuery wrapped element's DOM reference</p>
         */
        protected $(sSuffix?: string): any;
        /**
         * <p>Adds some customData to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p>
         * @param {sap.ui.core.CustomData} oCustomData <p>The customData to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addCustomData(oCustomData: sap.ui.core.CustomData): sap.ui.core.Element;
        /**
         * <p>Adds some dependent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p>
         * @param {sap.ui.core.Element} oDependent <p>The dependent to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addDependent(oDependent: sap.ui.core.Element): sap.ui.core.Element;
        /**
         * <p>Adds some dragDropConfig to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p>
         * @param {sap.ui.core.dnd.DragDropBase} oDragDropConfig <p>The dragDropConfig to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addDragDropConfig(oDragDropConfig: sap.ui.core.dnd.DragDropBase): sap.ui.core.Element;
        /**
         * <p>Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).</p><p>When this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates that also work with templates in aggregation bindings. For control development the internal "addDelegate" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.</p><p>To avoid double registrations, all registrations of the given delegate are first removed and then the delegate is added.</p><p><strong>Important:</strong> If event delegates were added the delegate will still be called even if the event was processed and/or cancelled via <code>preventDefault</code> by the Element or another event delegate. <code>preventDefault</code> only prevents the event from bubbling. It should be checked e.g. in the event delegate's listener whether an Element is still enabled via <code>getEnabled</code>. Additionally there might be other things that delegates need to check depending on the event (e.g. not adding a key twice to an output string etc.).</p>
         * @param {any} oDelegate <p>the delegate object</p>
         * @param {any} oThis <p>if given, this object will be the "this" context in the listener methods; default is the delegate object itself</p>
         * @returns sap.ui.core.Element <p>Returns <code>this</code> to allow method chaining</p>
         */
        addEventDelegate(oDelegate: any, oThis?: any): sap.ui.core.Element;
        /**
         * <p>Applies the focus info.</p><p>To be overwritten by the specific control method.</p>
         * @param {any} oFocusInfo 
         */
        protected applyFocusInfo(oFocusInfo: any): void;
        /**
         * <p>Bind the object to the referenced entity in the model, which is used as the binding context to resolve bound properties or aggregations of the object itself and all of its children relatively to the given path. If a relative binding path is used, this will be applied whenever the parent context changes. There is no difference between <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/bindElement">sap.ui.core.Element#bindElement</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindObject">sap.ui.base.ManagedObject#bindObject</a>.</p>
         * @param {string | any} vPath <p>the binding path or an object with more detailed binding options</p>
         * @param {any} mParameters <p>map of additional parameters for this binding (only taken into account when vPath is a string in that case it corresponds to vPath.parameters). The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding</code>.</p>
         * @returns sap.ui.core.Element <p>reference to the instance itself</p>
         */
        bindElement(vPath: string | any, mParameters?: any): sap.ui.core.Element;
        /**
         * <p>Clones a tree of objects starting with the object on which clone is called first (root object).</p><p>The IDs within the newly created clone tree are derived from the original IDs by appending the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be unique across multiple clone calls).</p><p>The <code>oOptions</code> configuration object can have the following properties: <ul> <li>The boolean value <code>cloneChildren</code> specifies whether associations/aggregations will be cloned</li> <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li> </ul> Note: In case the configuration <code>oOptions</code> is specified, the default values <code>true</code> no longer apply, which means in case <code>cloneChildren</code> or <code>cloneBindings</code> is not specified, then this ia assumed to be <code>false</code> and associations/aggregations or bindings are not cloned.</p><p>For each cloned object the following settings are cloned based on the metadata of the object and the defined options: <ul> <li>all properties that are not bound. If <code>cloneBinding</code> is <code>false</code>, even these properties will be cloned; the values are used by reference, they are not cloned</li> <li>all aggregated objects that are not bound. If <code>cloneBinding</code> is <code>false</code>, even the ones that are bound will be cloned; they are all cloned recursively using the same <code>sIdSuffix</code></li> <li>all associated controls; when an association points to an object inside the cloned object tree, then the cloned association will be modified to that it points to the clone of the target object. When the association points to a managed object outside of the cloned object tree, then its target won't be changed.</li> <li>all models set via <code>setModel()</code>; used by reference </li> <li>all property and aggregation bindings (if <code>cloneBindings</code> is <code>true</code>); the pure binding information (path, model name) is cloned, but all other information like template control or factory function, data type or formatter function are copied by reference. The bindings themselves are created anew as they are specific for the combination (object, property, model). As a result, any later changes to a binding of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.</li> </ul></p><p>Each clone is created by first collecting the above mentioned settings and then creating a new instance with the normal constructor function. As a result, any side effects of mutator methods (<code>setProperty</code> etc.) or init hooks are repeated during clone creation. There is no need to override <code>clone()</code> just to reproduce these internal settings!</p><p>Custom controls however can override <code>clone()</code> to implement additional clone steps. They usually will first call <code>clone()</code> on the super class and then modify the returned clone accordingly.</p><p>Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>. It is determined automatically for the root object (and its non-existence also serves as an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.</p>
         * @param {string} sIdSuffix <p>a suffix to be appended to the cloned object ID</p>
         * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
         * @param {any} oOptions <p>Configuration object; when omitted, both properties default to <code>true</code>; when specified, undefined properties default to <code>false</code></p>
         * @returns sap.ui.base.ManagedObject <p>Reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
        /**
         * <p>Create a clone of this Element.</p><p>Calls <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/clone">sap.ui.base.ManagedObject#clone</a> and additionally clones event delegates.</p>
         * @param {string} sIdSuffix <p>Suffix to be appended to the cloned element ID</p>
         * @param {string[]} aLocalIds <p>Array of local IDs within the cloned hierarchy (internally used)</p>
         * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
         */
        protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
        /**
         * <p>Retrieves, modifies or removes custom data attached to an <code>Element</code>.</p><p>Usage: <pre>
           data("myKey", myData)
        </pre> Attaches <code>myData</code> (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key "myKey". If the key already exists,the value will be updated.</p><p><pre>
           data("myKey", myData, writeToDom)
        </pre> Attaches <code>myData</code> to this element, under the given key "myKey" and (if <code>writeToDom</code> is true) writes key and value to the HTML. If the key already exists,the value will be updated. While <code>oValue</code> can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to <code>sap.ui.core.ID</code> and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".</p><p><pre>
           data("myKey")
        </pre> Retrieves whatever data has been attached to this element (using the key "myKey") before</p><p><pre>
           data("myKey", null)
        </pre> Removes whatever data has been attached to this element (using the key "myKey") before</p><p><pre>
           data(null)
        </pre> Removes all data</p><p><pre>
           data()
        </pre> Returns all data, as a map</p><p><pre>
           data({"myKey1": myData, "myKey2": null})
        </pre> Attaches <code>myData</code> (using the key "myKey1" and removes any data that had been attached for key "myKey2"<br><br>References: <ul><li>See chapter <a target="_self" href="#/topic/91f0c3ee6f4d1014b6dd926db0e91070">Custom Data - Attaching Data Objects to Controls</a>
           in the documentation.</li></ul></p>
         * @param {string | any | null} vKeyOrData <p>Single key to set or remove, or an object with key/value pairs or <code>null</code> to remove all custom data</p>
         * @param {string | any} vValue <p>Value to set or <code>null</code> to remove the corresponding custom data</p>
         * @param {boolean} bWriteToDom <p>Whether this custom data entry should be written to the DOM during rendering</p>
         * @returns any <p>A map with all custom data, a custom data value for a single specified key or <code>null</code> when no custom data exists for such a key or this element when custom data was to be removed.</p>
         */
        data(vKeyOrData?: string | any | null, vValue?: string | any, bWriteToDom?: boolean): any | any | null | sap.ui.core.Element;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         */
        destroy(bSuppressInvalidate?: boolean): void;
        /**
         * <p>Cleans up the resources associated with this element and all its children.</p><p>After an element has been destroyed, it can no longer be used in the UI!</p><p>Applications should call this method if they don't need the element any longer.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, the UI element is removed from DOM synchronously and parent will not be invalidated.</p>
         */
        destroy(bSuppressInvalidate?: boolean): void;
        /**
         * <p>Destroys all the customData in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyCustomData(): sap.ui.core.Element;
        /**
         * <p>Destroys all the dependents in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyDependents(): sap.ui.core.Element;
        /**
         * <p>Destroys all the dragDropConfig in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyDragDropConfig(): sap.ui.core.Element;
        /**
         * <p>Destroys the layoutData in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutData" href="#/api/sap.ui.core.Element/methods/getLayoutData">layoutData</a>.</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyLayoutData(): sap.ui.core.Element;
        /**
         * <p>Destroys the tooltip in the aggregation named <code>tooltip</code>.</p>
         * @returns sap.ui.core.Element <p><code>this</code> to allow method chaining</p>
         */
        destroyTooltip(): sap.ui.core.Element;
        /**
         * <p>Allows the parent of a control to enhance the aria information during rendering.</p><p>This function is called by the RenderManager's writeAccessibilityState method for the parent of the currently rendered control - if the parent implements it.</p>
         * @param {sap.ui.core.Element} oElement <p>the Control/Element for which aria properties are rendered</p>
         * @param {any} mAriaProps <p>map of aria properties keyed by there name (without prefix "aria-")</p>
         * @returns any <p>map of enhanced aria properties</p>
         */
        protected enhanceAccessibilityState(oElement: sap.ui.core.Element, mAriaProps: any): any;
        /**
         * <p>Cleans up the element instance before destruction.</p><p>Applications must not call this hook method directly, it is called by the framework when the element is <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.core.Element/methods/destroy">destroyed</a>.</p><p>Subclasses of Element should override this hook to implement any necessary cleanup.</p>
         */
        protected exit(): void;
        /**
         * <p>Searches and returns an array of child elements and controls which are referenced within an aggregation or aggregations of child elements/controls. This can be either done recursive or not.</p><p><b>Take care: this operation might be expensive.</b></p>
         * @param {boolean} bRecursive <p>true, if all nested children should be returned.</p>
         * @returns sap.ui.core.Element[] <p>array of child elements and controls</p>
         */
        findElements(bRecursive: boolean): sap.ui.core.Element[];
        /**
         * <p>Sets the focus to the stored focus DOM reference</p>
         * @param {any} oFocusInfo 
         */
        focus(oFocusInfo: any): void;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p><p>Custom Data, a data structure like a map containing arbitrary key value pairs.</p>
         * @returns sap.ui.core.CustomData[] 
         */
        getCustomData(): sap.ui.core.CustomData[];
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p><p>Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating Element.</p>
         * @returns sap.ui.core.Element[] 
         */
        getDependents(): sap.ui.core.Element[];
        /**
         * <p>Returns the best suitable DOM Element that represents this UI5 Element. By default the DOM Element with the same ID as this Element is returned. Subclasses should override this method if the lookup via id is not sufficient.</p><p>Note that such a DOM Element does not necessarily exist in all cases. Some elements or controls might not have a DOM representation at all (e.g. a naive FlowLayout) while others might not have one due to their current state (e.g. an initial, not yet rendered control).</p><p>If an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single dash) and the DOM node with that compound ID will be returned. This matches the UI5 naming convention for named inner DOM nodes of a control.</p>
         * @param {string} sSuffix <p>ID suffix to get the DOMRef for</p>
         * @returns HTMLElement <p>The Element's DOM Element sub DOM Element or null</p>
         */
        protected getDomRef(sSuffix?: string): HTMLElement;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p><p>Defines the drag-and-drop configuration. <b>Note:</b> This configuration might be ignored due to control <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/sap.ui.core.Element.extend">metadata</a> restrictions.</p>
         * @returns sap.ui.core.dnd.DragDropBase[] 
         */
        getDragDropConfig(): sap.ui.core.dnd.DragDropBase[];
        /**
         * <p>Get the context binding object for a specific model name.</p><p><b>Note:</b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null</code></li> <li>empty string <code>""</code></li> <li>string literals <code>"null"</code> or <code>"undefined"</code></li> </ul> Omitting the model name (or using the value <code>undefined</code>) is explicitly allowed and refers to the default model.</p>
         * @param {string} sModelName <p>Name of the model or <code>undefined</code></p>
         * @returns sap.ui.model.ContextBinding <p>Context binding for the given model name or <code>undefined</code></p>
         */
        getElementBinding(sModelName?: string): sap.ui.model.ContextBinding;
        /**
         * <p>Returns the DOM Element that should get the focus.</p><p>To be overwritten by the specific control method.</p>
         * @returns HTMLElement <p>Returns the DOM Element that should get the focus</p>
         */
        protected getFocusDomRef(): HTMLElement;
        /**
         * <p>Returns an object representing the serialized focus information To be overwritten by the specific control method</p>
         * @returns any <p>an object representing the serialized focus information</p>
         */
        protected getFocusInfo(): any;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLayoutData" href="#/api/sap.ui.core.Element/methods/getLayoutData">layoutData</a>.</p><p>Defines the layout constraints for this control when it is used inside a Layout. LayoutData classes are typed classes and must match the embedding Layout. See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.</p>
         * @returns sap.ui.core.LayoutData 
         */
        getLayoutData(): sap.ui.core.LayoutData;
        /**
         * <p>Returns the tooltip for this element if any or an undefined value. The tooltip can either be a simple string or a subclass of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.TooltipBase">sap.ui.core.TooltipBase</a>.</p><p>Callers that are only interested in tooltips of type string (e.g. to render them as a <code>title</code> attribute), should call the convenience method <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTooltip_AsString" href="#/api/sap.ui.core.Element/methods/getTooltip_AsString">#getTooltip_AsString</a> instead. If they want to get a tooltip text no matter where it comes from (be it a string tooltip or the text from a TooltipBase instance) then they could call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTooltip_Text" href="#/api/sap.ui.core.Element/methods/getTooltip_Text">#getTooltip_Text</a> instead.</p>
         * @returns string|sap.ui.core.TooltipBase <p>The tooltip for this Element.</p>
         */
        getTooltip(): string | sap.ui.core.TooltipBase;
        /**
         * <p>Returns the tooltip for this element but only if it is a simple string. Otherwise an undefined value is returned.</p>
         * @returns string <p>string tooltip or undefined</p>
         */
        getTooltip_AsString(): string;
        /**
         * <p>Returns the main text for the current tooltip or undefined if there is no such text. If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property of that object is returned. Otherwise the object itself is returned (either a string or undefined or null).</p>
         * @returns string <p>text of the current tooltip or undefined</p>
         */
        getTooltip_Text(): string;
        /**
         * <p>Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.CustomData} oCustomData <p>The customData whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfCustomData(oCustomData: sap.ui.core.CustomData): number;
        /**
         * <p>Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.Element} oDependent <p>The dependent whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfDependent(oDependent: sap.ui.core.Element): number;
        /**
         * <p>Checks for the provided <code>sap.ui.core.dnd.DragDropBase</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.dnd.DragDropBase} oDragDropConfig <p>The dragDropConfig whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfDragDropConfig(oDragDropConfig: sap.ui.core.dnd.DragDropBase): number;
        /**
         * <p>Initializes the element instance after creation.</p><p>Applications must not call this hook method directly, it is called by the framework while the constructor of an element is executed.</p><p>Subclasses of Element should override this hook to implement any necessary initialization.</p>
         */
        protected init(): void;
        /**
         * <p>Inserts a customData into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p>
         * @param {sap.ui.core.CustomData} oCustomData <p>The customData to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the customData should be inserted at; for a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value greater than the current size of the aggregation, the customData is inserted at the last position</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertCustomData(oCustomData: sap.ui.core.CustomData, iIndex: number): sap.ui.core.Element;
        /**
         * <p>Inserts a dependent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p>
         * @param {sap.ui.core.Element} oDependent <p>The dependent to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the dependent should be inserted at; for a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value greater than the current size of the aggregation, the dependent is inserted at the last position</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertDependent(oDependent: sap.ui.core.Element, iIndex: number): sap.ui.core.Element;
        /**
         * <p>Inserts a dragDropConfig into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p>
         * @param {sap.ui.core.dnd.DragDropBase} oDragDropConfig <p>The dragDropConfig to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the dragDropConfig should be inserted at; for a negative value of <code>iIndex</code>, the dragDropConfig is inserted at position 0; for a value greater than the current size of the aggregation, the dragDropConfig is inserted at the last position</p>
         * @returns sap.ui.core.Element <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertDragDropConfig(oDragDropConfig: sap.ui.core.dnd.DragDropBase, iIndex: number): sap.ui.core.Element;
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.CustomData[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllCustomData(): sap.ui.core.CustomData[];
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.Element[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllDependents(): sap.ui.core.Element[];
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.dnd.DragDropBase[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllDragDropConfig(): sap.ui.core.dnd.DragDropBase[];
        /**
         * <p>Removes a customData from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCustomData" href="#/api/sap.ui.core.Element/methods/getCustomData">customData</a>.</p>
         * @param {number | string | sap.ui.core.CustomData} vCustomData <p>The customData to remove or its index or id</p>
         * @returns sap.ui.core.CustomData <p>The removed customData or <code>null</code></p>
         */
        removeCustomData(vCustomData: number | string | sap.ui.core.CustomData): sap.ui.core.CustomData;
        /**
         * <p>Removes a dependent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.Element/methods/getDependents">dependents</a>.</p>
         * @param {number | string | sap.ui.core.Element} vDependent <p>The dependent to remove or its index or id</p>
         * @returns sap.ui.core.Element <p>The removed dependent or <code>null</code></p>
         */
        removeDependent(vDependent: number | string | sap.ui.core.Element): sap.ui.core.Element;
        /**
         * <p>Removes a dragDropConfig from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDragDropConfig" href="#/api/sap.ui.core.Element/methods/getDragDropConfig">dragDropConfig</a>.</p>
         * @param {number | string | sap.ui.core.dnd.DragDropBase} vDragDropConfig <p>The dragDropConfig to remove or its index or id</p>
         * @returns sap.ui.core.dnd.DragDropBase <p>The removed dragDropConfig or <code>null</code></p>
         */
        removeDragDropConfig(vDragDropConfig: number | string | sap.ui.core.dnd.DragDropBase): sap.ui.core.dnd.DragDropBase;
        /**
         * <p>Removes the given delegate from this element.</p><p>This method will remove all registrations of the given delegate, not only one.</p>
         * @param {any} oDelegate <p>the delegate object</p>
         * @returns sap.ui.core.Element <p>Returns <code>this</code> to allow method chaining</p>
         */
        removeEventDelegate(oDelegate: any): sap.ui.core.Element;
        /**
         * <p>This triggers immediate rerendering of its parent and thus of itself and its children.</p><p>As <code>sap.ui.core.Element</code> "bubbles up" the rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.</p>
         */
        protected rerender(): void;
        /**
         * <p>Sets the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.LayoutData">sap.ui.core.LayoutData</a> defining the layout constraints for this control when it is used inside a layout.</p>
         * @param {sap.ui.core.LayoutData} oLayoutData <p>which should be set</p>
         * @returns sap.ui.core.Element <p>Returns <code>this</code> to allow method chaining</p>
         */
        setLayoutData(oLayoutData: sap.ui.core.LayoutData): sap.ui.core.Element;
        /**
         * <p>Sets a new tooltip for this object. The tooltip can either be a simple string (which in most cases will be rendered as the <code>title</code> attribute of this Element) or an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.TooltipBase">sap.ui.core.TooltipBase</a>.</p><p>If a new tooltip is set, any previously set tooltip is deactivated.</p>
         * @param {string | sap.ui.core.TooltipBase} vTooltip 
         */
        setTooltip(vTooltip: string | sap.ui.core.TooltipBase): void;
        /**
         * <p>Returns a string representation of this object.</p><p>In case there is no class or id information, a simple static string is returned. Subclasses should override this method.</p>
         * @returns string <p>A string description of this event provider</p>
         */
        toString(): string;
        /**
         * <p>Returns a simple string representation of this managed object.</p><p>Mainly useful for tracing purposes.</p>
         * @returns string <p>a string description of this managed object</p>
         */
        toString(): string;
        /**
         * <p>Returns a simple string representation of this element.</p><p>Mainly useful for tracing purposes.</p>
         * @returns string <p>a string description of this element</p>
         */
        toString(): string;
        /**
         * <p>Removes the defined binding context of this object, all bindings will now resolve relative to the parent context again.</p>
         * @param {string} sModelName 
         * @returns sap.ui.base.ManagedObject <p>reference to the instance itself</p>
         */
        unbindElement(sModelName: string): sap.ui.base.ManagedObject;
      }
      namespace Element {
      }
      /**
       * <p>Helper Class for enhancement of a Control with propagation of enabled property.</p>
       */
      export class EnabledPropagator {
        /**
         * <p><b>This constructor should be applied to the prototype of a control.</b></p><p>Example: <code> sap.ui.core.EnabledPropagator.call(<i>Some-Control</i>.prototype, <i>Default-value, ...</i>); </code> e.g. <code> sap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype); </code></p>
         * @param {boolean} bDefault <p>the value that should be used as default value for the enhancement of the control.</p>
         * @param {boolean} bLegacy <p>whether the introduced property should use the old name 'Enabled'</p>
         */
        constructor(bDefault?: boolean, bLegacy?: boolean);
      }
      /**
       * <p>Provides eventing capabilities for applications like firing events and attaching or detaching event handlers for events which are notified when events are fired.</p>
       */
      export class EventBus extends sap.ui.base.Object {
        /**
         * <p>Creates an instance of EventBus.</p>
         */
        constructor();
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Fires an event using the specified settings and notifies all attached event handlers.</p>
         * @param {string} sChannelId <p>The channel of the event to fire. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there.</p>
         * @param {string} sEventId <p>The identifier of the event to fire</p>
         * @param {any} oData <p>The parameters which should be carried by the event</p>
         */
        publish(sChannelId: string, sEventId: string, oData?: any): void;
        /**
         * <p>Attaches an event handler to the event with the given identifier on the given event channel.</p>
         * @param {string} sChannelId <p>The channel of the event to subscribe to. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there.</p>
         * @param {string} sEventId <p>The identifier of the event to listen for</p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present). Handlers must not change the content of this map.</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.</p>
         * @returns sap.ui.core.EventBus <p>Returns <code>this</code> to allow method chaining</p>
         */
        subscribe(sChannelId: string, sEventId: string, fnFunction: Function, oListener?: any): sap.ui.core.EventBus;
        /**
         * <p>Attaches an event handler, called one time only, to the event with the given identifier on the given event channel.</p><p>When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.</p>
         * @param {string} sChannelId <p>The channel of the event to subscribe to. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there.</p>
         * @param {string} sEventId <p>The identifier of the event to listen for</p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present). Handlers must not change the content of this map.</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.</p>
         * @returns sap.ui.core.EventBus <p>Returns <code>this</code> to allow method chaining</p>
         */
        subscribeOnce(sChannelId: string, sEventId: string, fnFunction: Function, oListener?: any): sap.ui.core.EventBus;
        /**
         * <p>Removes a previously subscribed event handler from the event with the given identifier on the given event channel.</p><p>The passed parameters must match those used for registration with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="subscribe" href="#/api/sap.ui.core.EventBus/methods/subscribe">#subscribe</a> beforehand!</p>
         * @param {string} sChannelId <p>The channel of the event to unsubscribe from. If not given, the default channel is used.</p>
         * @param {string} sEventId <p>The identifier of the event to unsubscribe from</p>
         * @param {Function} fnFunction <p>The handler function to unsubscribe from the event</p>
         * @param {any} oListener <p>The object that wanted to be notified when the event occurred</p>
         * @returns sap.ui.core.EventBus <p>Returns <code>this</code> to allow method chaining</p>
         */
        unsubscribe(sChannelId: string, sEventId: string, fnFunction: Function, oListener?: any): sap.ui.core.EventBus;
      }
      /**
       * <p>Fragments support the definition of light-weight stand-alone UI control trees. This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views, the Fragment content is imported and seamlessly integrated into the View.</p><p>Fragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though), they are not a Control, they are not part of the UI tree and they have no representation in HTML. By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.</p><p>But like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in), the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views. Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers, this requires the Fragments to be used within a View which does have a controller. That controller is used, then.</p><p>Do not call the Fragment constructor directly!</p><p>Use-cases for Fragments are e.g.: - Modularization of UIs without fragmenting the controller structure - Re-use of UI parts - 100%-declarative definition of Views</p>
       */
      export class Fragment extends sap.ui.base.ManagedObject {
        /**
         * <p>Returns an Element/Control by its ID in the context of the Fragment with the given ID</p>
         * @param {string} sFragmentId 
         * @param {string} sId 
         * @returns undefined <p>Element by its ID and Fragment ID</p>
         */
        static byId(sFragmentId: string, sId: string): undefined;
        /**
         * <p>Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have</p>
         * @param {string} sFragmentId 
         * @param {string} sId 
         * @returns undefined <p>the prefixed ID</p>
         */
        static createId(sFragmentId: string, sId: string): undefined;
        /**
         * <p>Loads and instantiates a Fragment. A Promise is returned, which resolves with the Fragments content.</p><p>The Fragment object itself is not an entity with significance beyond this factory.</p><p>The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be added using the sap.ui.core.Fragment.registerType() function.</p><p>Further properties may be supported by future or custom Fragment types. Any given properties will be forwarded to the Fragment implementation.</p><p>If no fixed ID is given, the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the IDs of all contained controls.</p>
         * @param {any} mOptions <p>options map</p>
         * @returns Promise<any> <p>resolves with the resulting {sap.ui.core.Control|sap.ui.core.Control[]} after fragment parsing and instantiation</p>
         */
        static load(mOptions: any): Promise<any>;
        /**
         * <p>Registers a new Fragment type</p>
         * @param {string} sType <p>the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.</p>
         * @param {any} oFragmentImpl <p>an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument</p>
         */
        static registerType(sType: string, oFragmentImpl: any): void;
        /**
         * <p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         */
        constructor();
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.ui.core.Fragment/methods/getType">type</a>.</p>
         * @returns string <p>Value of property <code>type</code></p>
         */
        getType(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getType" href="#/api/sap.ui.core.Fragment/methods/getType">type</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sType <p>New value for property <code>type</code></p>
         * @returns sap.ui.core.Fragment <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setType(sType: string): sap.ui.core.Fragment;
      }
      /**
       * <p>History handles the history of certain controls (e.g. sap.ui.commons.SearchField).</p>
       */
      export class History extends sap.ui.base.Object {
        /**
         * <p>Creates an instance of the History.</p><p>Attention: The Web Storage API which is used by this class stores the data on the client. Therefore do not use this API for confidential information.</p>
         * @param {string} sId <p>id for the history</p>
         * @param {any} mSettings <p>optional map/JSON-object with additional settings</p>
         */
        constructor(sId: string, mSettings?: any);
      }
      /**
       * <p><p>Configuration options for horizontal alignments of controls.</p></p>
       */
      export enum HorizontalAlign {
        /**
         * <p>Locale-specific positioning at the beginning of the line</p>
         */
        Begin = "Begin",
        /**
         * <p>Centered alignment of text</p>
         */
        Center = "Center",
        /**
         * <p>Locale-specific positioning at the end of the line</p>
         */
        End = "End",
        /**
         * <p>Hard option for left alignment</p>
         */
        Left = "Left",
        /**
         * <p>Hard option for right alignment</p>
         */
        Right = "Right",
      }
      /**
       * <p>Embeds standard HTML in an SAPUI5 control tree.</p><p>Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore open to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize the content on their own or activate automatic sanitizing through the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setSanitizeContent" href="#/api/sap.ui.core.HTML/methods/setSanitizeContent">sanitizeContent</a> property.</p><p>Although this control inherits the <code>tooltip</code> aggregation/property and the <code>hasStyleClass</code>, <code>addStyleClass</code>, <code>removeStyleClass</code> and <code>toggleStyleClass</code> methods from its base class, it doesn't support them. Instead, the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.</p><p>For further hints about usage restrictions for this control, see also the documentation of the <code>content</code> property.</p>
       */
      export class HTML extends sap.ui.core.Control {
        /**
         * <p>Constructor for a new HTML.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.HTML/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.HTML</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.HTML</code> itself.</p><p>Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.</p><p>When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code> itself</p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachAfterRendering(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.HTML;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.HTML/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.HTML</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachAfterRendering(fnFunction: Function, oListener?: any): sap.ui.core.HTML;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.HTML/events/afterRendering">afterRendering</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireAfterRendering(mParameters?: any): sap.ui.core.HTML;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.HTML/methods/getContent">content</a>.</p><p>HTML content to be displayed, defined as a string.</p><p>The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.</p><p>Some of these restrictions (there might be others!) are: <ul> <li>the content must be enclosed in tags, pure text is not supported. </li> <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.</li> </ul></p><p>Please consider to consult the jQuery documentation as well.</p><p>The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.</p><p>When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.</p>
         * @returns string <p>Value of property <code>content</code></p>
         */
        getContent(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPreferDOM" href="#/api/sap.ui.core.HTML/methods/getPreferDOM">preferDOM</a>.</p><p>Whether existing DOM content is preferred over the given content string.</p><p>There are two scenarios where this flag is relevant (when set to true): <ul> <li>for the initial rendering: when an HTML control is added to a UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content</li> <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content</li> </ul></p><p>As preserving the existing DOM is the most common use case of the HTML control, the default value is true.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>preferDOM</code></p>
         */
        getPreferDOM(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSanitizeContent" href="#/api/sap.ui.core.HTML/methods/getSanitizeContent">sanitizeContent</a>.</p><p>Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.</p><p>To configure the set of allowed URLs, you can use the <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.addUrlWhitelist">whitelist API</a>.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>sanitizeContent</code></p>
         */
        getSanitizeContent(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.Control/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen.</p><p>If set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none</code>).</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/writeInvisiblePlaceholderData">RenderManager#writeInvisiblePlaceholderData</a> for details.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>visible</code></p>
         */
        getVisible(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.HTML/methods/getVisible">visible</a>.</p><p>Specifies whether the control is visible. Invisible controls are not rendered.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>visible</code></p>
         */
        getVisible(): boolean;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.HTML/methods/getContent">content</a>.</p><p>HTML content to be displayed, defined as a string.</p><p>The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.</p><p>Some of these restrictions (there might be others!) are: <ul> <li>the content must be enclosed in tags, pure text is not supported. </li> <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.</li> </ul></p><p>Please consider to consult the jQuery documentation as well.</p><p>The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.</p><p>When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sContent <p>New value for property <code>content</code></p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setContent(sContent: string): sap.ui.core.HTML;
        /**
         * <p>Sets some new DOM content for this HTML control. The content will replace the existing content after the next rendering. Properties are not modified, but preferDOM should be set to true.</p>
         * @param {HTMLElement} oDom <p>the new DOM content</p>
         * @returns sap.ui.core.HTML <p><code>this</code> to facilitate method chaining</p>
         */
        setDOMContent(oDom: HTMLElement): sap.ui.core.HTML;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPreferDOM" href="#/api/sap.ui.core.HTML/methods/getPreferDOM">preferDOM</a>.</p><p>Whether existing DOM content is preferred over the given content string.</p><p>There are two scenarios where this flag is relevant (when set to true): <ul> <li>for the initial rendering: when an HTML control is added to a UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content</li> <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content</li> </ul></p><p>As preserving the existing DOM is the most common use case of the HTML control, the default value is true.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bPreferDOM <p>New value for property <code>preferDOM</code></p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setPreferDOM(bPreferDOM: boolean): sap.ui.core.HTML;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSanitizeContent" href="#/api/sap.ui.core.HTML/methods/getSanitizeContent">sanitizeContent</a>.</p><p>Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.</p><p>To configure the set of allowed URLs, you can use the <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.addUrlWhitelist">whitelist API</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bSanitizeContent <p>New value for property <code>sanitizeContent</code></p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSanitizeContent(bSanitizeContent: boolean): sap.ui.core.HTML;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.Control/methods/getVisible">visible</a>.</p><p>Whether the control should be visible on the screen.</p><p>If set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none</code>).</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/writeInvisiblePlaceholderData">RenderManager#writeInvisiblePlaceholderData</a> for details.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
         * @returns sap.ui.core.Control <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setVisible(bVisible: boolean): sap.ui.core.Control;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVisible" href="#/api/sap.ui.core.HTML/methods/getVisible">visible</a>.</p><p>Specifies whether the control is visible. Invisible controls are not rendered.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bVisible <p>New value for property <code>visible</code></p>
         * @returns sap.ui.core.HTML <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setVisible(bVisible: boolean): sap.ui.core.HTML;
      }
      /**
       * <p>Icon uses embedded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.</p><p>A set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.</p>
       */
      export class Icon extends sap.ui.core.Control implements sap.ui.core.IFormContent {
        /**
         * <p>Constructor for a new Icon.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Adds some ariaLabelledBy into the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.ui.core.Icon/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
         * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.Icon;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.ui.core.Icon/events/press">press</a> event of this <code>sap.ui.core.Icon</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.Icon</code> itself.</p><p>This event is fired when icon is pressed/activated by the user. When a handler is attached to this event, the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon</code> itself</p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachPress(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Icon;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.ui.core.Icon/events/press">press</a> event of this <code>sap.ui.core.Icon</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachPress(fnFunction: Function, oListener?: any): sap.ui.core.Icon;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="press" href="#/api/sap.ui.core.Icon/events/press">press</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected firePress(mParameters?: any): sap.ui.core.Icon;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getActiveBackgroundColor">activeBackgroundColor</a>.</p><p>Background color for Icon in active state.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>activeBackgroundColor</code></p>
         */
        getActiveBackgroundColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveColor" href="#/api/sap.ui.core.Icon/methods/getActiveColor">activeColor</a>.</p><p>This color is shown when icon is pressed/activated by the user.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>activeColor</code></p>
         */
        getActiveColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlt" href="#/api/sap.ui.core.Icon/methods/getAlt">alt</a>.</p><p>This defines the alternative text which is used for outputting the aria-label attribute on the DOM.</p>
         * @returns string <p>Value of property <code>alt</code></p>
         */
        getAlt(): string;
        /**
         * <p>Returns array of IDs of the elements which are the current targets of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.ui.core.Icon/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
         * @returns sap.ui.core.ID[] 
         */
        getAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getBackgroundColor">backgroundColor</a>.</p><p>Background color of the Icon in normal state.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>backgroundColor</code></p>
         */
        getBackgroundColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColor" href="#/api/sap.ui.core.Icon/methods/getColor">color</a>.</p><p>The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>color</code></p>
         */
        getColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDecorative" href="#/api/sap.ui.core.Icon/methods/getDecorative">decorative</a>.</p><p>A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>decorative</code></p>
         */
        getDecorative(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.Icon/methods/getHeight">height</a>.</p><p>This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHoverBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getHoverBackgroundColor">hoverBackgroundColor</a>.</p><p>Background color for Icon in hover state. This property has no visual effect when run on mobile device.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>hoverBackgroundColor</code></p>
         */
        getHoverBackgroundColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHoverColor" href="#/api/sap.ui.core.Icon/methods/getHoverColor">hoverColor</a>.</p><p>This color is shown when icon is hovered. This property has no visual effect when run on mobile device.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p>
         * @returns string <p>Value of property <code>hoverColor</code></p>
         */
        getHoverColor(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoTabStop" href="#/api/sap.ui.core.Icon/methods/getNoTabStop">noTabStop</a>.</p><p>Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>noTabStop</code></p>
         */
        getNoTabStop(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.ui.core.Icon/methods/getSize">size</a>.</p><p>Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>size</code></p>
         */
        getSize(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.ui.core.Icon/methods/getSrc">src</a>.</p><p>This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.</p>
         * @returns sap.ui.core.URI <p>Value of property <code>src</code></p>
         */
        getSrc(): sap.ui.core.URI;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseIconTooltip" href="#/api/sap.ui.core.Icon/methods/getUseIconTooltip">useIconTooltip</a>.</p><p>Decides whether a default Icon tooltip should be used if no tooltip is set.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>useIconTooltip</code></p>
         */
        getUseIconTooltip(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.Icon/methods/getWidth">width</a>.</p><p>This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * <p>Removes all the controls in the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.ui.core.Icon/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
         * @returns sap.ui.core.ID[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * <p>Removes an ariaLabelledBy from the association named <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAriaLabelledBy" href="#/api/sap.ui.core.Icon/methods/getAriaLabelledBy">ariaLabelledBy</a>.</p>
         * @param {number | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy <p>The ariaLabelledBy to be removed or its index or ID</p>
         * @returns sap.ui.core.ID <p>The removed ariaLabelledBy or <code>null</code></p>
         */
        removeAriaLabelledBy(vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control): sap.ui.core.ID;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getActiveBackgroundColor">activeBackgroundColor</a>.</p><p>Background color for Icon in active state.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sActiveBackgroundColor <p>New value for property <code>activeBackgroundColor</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setActiveBackgroundColor(sActiveBackgroundColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getActiveColor" href="#/api/sap.ui.core.Icon/methods/getActiveColor">activeColor</a>.</p><p>This color is shown when icon is pressed/activated by the user.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sActiveColor <p>New value for property <code>activeColor</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setActiveColor(sActiveColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAlt" href="#/api/sap.ui.core.Icon/methods/getAlt">alt</a>.</p><p>This defines the alternative text which is used for outputting the aria-label attribute on the DOM.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sAlt <p>New value for property <code>alt</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setAlt(sAlt: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getBackgroundColor">backgroundColor</a>.</p><p>Background color of the Icon in normal state.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sBackgroundColor <p>New value for property <code>backgroundColor</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setBackgroundColor(sBackgroundColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColor" href="#/api/sap.ui.core.Icon/methods/getColor">color</a>.</p><p>The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sColor <p>New value for property <code>color</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setColor(sColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDecorative" href="#/api/sap.ui.core.Icon/methods/getDecorative">decorative</a>.</p><p>A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bDecorative <p>New value for property <code>decorative</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setDecorative(bDecorative: boolean): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.Icon/methods/getHeight">height</a>.</p><p>This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHeight(sHeight: sap.ui.core.CSSSize): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHoverBackgroundColor" href="#/api/sap.ui.core.Icon/methods/getHoverBackgroundColor">hoverBackgroundColor</a>.</p><p>Background color for Icon in hover state. This property has no visual effect when run on mobile device.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sHoverBackgroundColor <p>New value for property <code>hoverBackgroundColor</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHoverBackgroundColor(sHoverBackgroundColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHoverColor" href="#/api/sap.ui.core.Icon/methods/getHoverColor">hoverColor</a>.</p><p>This color is shown when icon is hovered. This property has no visual effect when run on mobile device.</p><p>The property can be set with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CSSColor">CSS Color</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconColor">Semantic Icon Color</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sHoverColor <p>New value for property <code>hoverColor</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHoverColor(sHoverColor: string): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getNoTabStop" href="#/api/sap.ui.core.Icon/methods/getNoTabStop">noTabStop</a>.</p><p>Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bNoTabStop <p>New value for property <code>noTabStop</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setNoTabStop(bNoTabStop: boolean): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.ui.core.Icon/methods/getSize">size</a>.</p><p>Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sSize <p>New value for property <code>size</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSize(sSize: sap.ui.core.CSSSize): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSrc" href="#/api/sap.ui.core.Icon/methods/getSrc">src</a>.</p><p>This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.URI} sSrc <p>New value for property <code>src</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSrc(sSrc: sap.ui.core.URI): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUseIconTooltip" href="#/api/sap.ui.core.Icon/methods/getUseIconTooltip">useIconTooltip</a>.</p><p>Decides whether a default Icon tooltip should be used if no tooltip is set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bUseIconTooltip <p>New value for property <code>useIconTooltip</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setUseIconTooltip(bUseIconTooltip: boolean): sap.ui.core.Icon;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.Icon/methods/getWidth">width</a>.</p><p>This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
         * @returns sap.ui.core.Icon <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setWidth(sWidth: sap.ui.core.CSSSize): sap.ui.core.Icon;
      }
      /**
       * <p><p>Semantic Colors of an icon.</p></p>
       */
      export enum IconColor {
        /**
         * <p>Contrast color.</p>
         */
        Contrast = "Contrast",
        /**
         * <p>Critical color</p>
         */
        Critical = "Critical",
        /**
         * <p>Default color (brand color)</p>
         */
        Default = "Default",
        /**
         * <p>Negative color</p>
         */
        Negative = "Negative",
        /**
         * <p>Neutral color.</p>
         */
        Neutral = "Neutral",
        /**
         * <p>Positive color</p>
         */
        Positive = "Positive",
      }
      /**
       * <p><p>Marker interface for controls that can serve as a context menu.</p><p>Implementation of this interface should implement the <code>openAsContextMenu</code> method.</p></p>
       */
      export interface IContextMenu {
      }
      /**
       * <p><p>Marker interface to flag controls that provide access to substructures from a byId method.</p></p>
       */
      export interface IDScope {
      }
      /**
       * <p><p>Marker interface for controls that can be used as content of <code>sap.ui.layout.form.Form</code> or <code>sap.ui.layout.form.SimpleForm</code>.</p><p>If the control's width must not be adjusted by the <code>Form</code> control to meet the cell's width, the control must implement the <code>getFormDoNotAdjustWidth</code> function and return <code>true</code>.</p></p>
       */
      export interface IFormContent {
      }
      /**
       * <p><p>State of the Input Method Editor (IME) for the control.</p><p>Depending on its value, it allows users to enter and edit for example Chinese characters.</p></p>
       */
      export enum ImeMode {
        /**
         * <p>IME is used for entering characters.</p>
         */
        Active = "Active",
        /**
         * <p>The value is automatically computed by the user agent.</p>
         */
        Auto = "Auto",
        /**
         * <p>IME is disabled.</p>
         */
        Disabled = "Disabled",
        /**
         * <p>IME is not used for entering characters.</p>
         */
        Inactive = "Inactive",
      }
      /**
       * <p><p>Colors to highlight certain UI elements.</p><p>In contrast to the <code>ValueState</code>, the semantic meaning must be defined by the application.</p></p>
       */
      export enum IndicationColor {
        /**
         * <p>Indication Color 1</p>
         */
        Indication01 = "Indication01",
        /**
         * <p>Indication Color 2</p>
         */
        Indication02 = "Indication02",
        /**
         * <p>Indication Color 3</p>
         */
        Indication03 = "Indication03",
        /**
         * <p>Indication Color 4</p>
         */
        Indication04 = "Indication04",
        /**
         * <p>Indication Color 5</p>
         */
        Indication05 = "Indication05",
      }
      /**
       * <p>Provides a trigger that triggers in a set interval and calls all registered listeners. If the interval is <= 0 the trigger is switched off and won't trigger at all.</p>
       */
      export class IntervalTrigger extends sap.ui.base.Object {
        /**
         * <p>Adds a listener to the list that should be triggered.</p>
         * @param {Function} fnFunction <p>is the called function that should be called when the trigger want to trigger the listener.</p>
         * @param {any} oListener <p>that should be triggered.</p>
         */
        static addListener(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Removes corresponding listener from list.</p>
         * @param {Function} fnFunction <p>is the previously registered function</p>
         * @param {any} oListener <p>that should be removed</p>
         */
        static removeListener(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Creates an instance of EventBus.</p>
         * @param {number} iInterval <p>is the interval the trigger should be used. If the trigger is >0 triggering starts/runs and if the interval is set to <=0 triggering stops.</p>
         */
        constructor(iInterval: number);
        /**
         * <p>Adds a listener to the list that should be triggered.</p>
         * @param {Function} fnFunction <p>is the called function that should be called when the trigger want to trigger the listener.</p>
         * @param {any} oListener <p>that should be triggered.</p>
         */
        addListener(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Removes corresponding listener from list.</p>
         * @param {Function} fnFunction <p>is the previously registered function</p>
         * @param {any} oListener <p>that should be removed</p>
         */
        removeListener(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Sets the trigger interval. If the value is >0 triggering will start if there are any registered listeners. If the interval is set to <=0 triggering will stop.</p>
         * @param {number} iInterval <p>sets the interval in milliseconds when a new triggering should occur.</p>
         */
        setInterval(iInterval: number): void;
      }
      /**
       * <p>An InvisibleText is used to bring hidden texts to the UI for screen reader support. The hidden text can e.g. be referenced in the ariaLabelledBy or ariaDescribedBy associations of other controls.</p><p>The inherited properties busy, busyIndicatorDelay and visible and the aggregation tooltip is not supported by this control.</p>
       */
      export class InvisibleText extends sap.ui.core.Control {
        /**
         * <p>Returns the ID of a shared <code>InvisibleText</code> instance whose <code>text</code> property is retrieved from the given library resource bundle and text key.</p><p>Calls with the same library and text key will return the same instance. The instance will be rendered statically.</p><p>When accessibility has been switched off by configuration or when the text key is empty or falsy, no ID will be returned.</p>
         * @param {string} sLibrary <p>Name of the library to load the resource bundle for</p>
         * @param {string} sTextKey <p>Key of the text to retrieve from the resource bundle</p>
         * @returns sap.ui.core.ID <p>ID of the shared control</p>
         */
        static getStaticId(sLibrary: string, sTextKey?: string): sap.ui.core.ID;
        /**
         * <p>Constructor for a new InvisibleText.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.InvisibleText/methods/getText">text</a>.</p><p>The text of the InvisibleText.</p><p>Default value is <code>empty string</code>.</p>
         * @returns string <p>Value of property <code>text</code></p>
         */
        getText(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.InvisibleText/methods/getText">text</a>.</p><p>The text of the InvisibleText.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
         * @param {string} sText <p>New value for property <code>text</code></p>
         * @returns sap.ui.core.InvisibleText <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setText(sText: string): sap.ui.core.InvisibleText;
        /**
         * <p>Adds <code>this</code> control into the static, hidden area UI area container.<br><br>References: <ul><li>sap.ui.core.Control#placeAt</li></ul></p>
         * @returns sap.ui.core.InvisibleText <p>Returns <code>this</code> to allow method chaining</p>
         */
        toStatic(): sap.ui.core.InvisibleText;
      }
      /**
       * <p><p>Interface for the controls which are suitable to shrink.</p><p>This means the control should still look fine when it gets smaller than its normal size, e.g. Text controls which can show ellipsis in case of shrink.</p><p>Note: This marker interface can be implemented by controls to give a hint to the container. The control itself does not need to implement anything. A parent control that respects this interface will apply the "flex-shrink" as a CSS property which determines how much the item will shrink relative to the rest of the items in the container when negative free space is distributed.</p></p>
       */
      export interface IShrinkable {
      }
      /**
       * <p>A control base type.</p>
       */
      export class Item extends sap.ui.core.Element {
        /**
         * <p>Constructor for a new Item.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.ui.core.Item/methods/getEnabled">enabled</a>.</p><p>Enabled items can be selected.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>enabled</code></p>
         */
        getEnabled(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.core.Item/methods/getKey">key</a>.</p><p>Can be used as input for subsequent actions.</p>
         * @returns string <p>Value of property <code>key</code></p>
         */
        getKey(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Item/methods/getText">text</a>.</p><p>The text to be displayed for the item.</p><p>Default value is <code>empty string</code>.</p>
         * @returns string <p>Value of property <code>text</code></p>
         */
        getText(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.ui.core.Item/methods/getTextDirection">textDirection</a>.</p><p>Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.</p><p>Default value is <code>Inherit</code>.</p>
         * @returns sap.ui.core.TextDirection <p>Value of property <code>textDirection</code></p>
         */
        getTextDirection(): sap.ui.core.TextDirection;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.ui.core.Item/methods/getEnabled">enabled</a>.</p><p>Enabled items can be selected.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bEnabled <p>New value for property <code>enabled</code></p>
         * @returns sap.ui.core.Item <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setEnabled(bEnabled: boolean): sap.ui.core.Item;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getKey" href="#/api/sap.ui.core.Item/methods/getKey">key</a>.</p><p>Can be used as input for subsequent actions.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sKey <p>New value for property <code>key</code></p>
         * @returns sap.ui.core.Item <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setKey(sKey: string): sap.ui.core.Item;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Item/methods/getText">text</a>.</p><p>The text to be displayed for the item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
         * @param {string} sText <p>New value for property <code>text</code></p>
         * @returns sap.ui.core.Item <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setText(sText: string): sap.ui.core.Item;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTextDirection" href="#/api/sap.ui.core.Item/methods/getTextDirection">textDirection</a>.</p><p>Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Inherit</code>.</p>
         * @param {sap.ui.core.TextDirection} sTextDirection <p>New value for property <code>textDirection</code></p>
         * @returns sap.ui.core.Item <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setTextDirection(sTextDirection: sap.ui.core.TextDirection): sap.ui.core.Item;
      }
      /**
       * <p><p>Marker interface for controls which are suitable for use as label.</p></p>
       */
      export interface Label {
      }
      /**
       * <p>A layout data base type.</p>
       */
      export abstract class LayoutData extends sap.ui.core.Element {
        /**
         * <p>Constructor for a new LayoutData.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/constructor">sap.ui.core.Element</a> can be used.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
      }
      /**
       * <p>An item that is used in list controls, such as <code>DropdownBox</code>.</p><p>The element foresees the usage of additional texts displayed in a second column.</p>
       */
      export class ListItem extends sap.ui.core.Item {
        /**
         * <p>Constructor for a new ListItem.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalText" href="#/api/sap.ui.core.ListItem/methods/getAdditionalText">additionalText</a>.</p><p>Some additional text of type string, optionally to be displayed along with this item.</p>
         * @returns string <p>Value of property <code>additionalText</code></p>
         */
        getAdditionalText(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.ListItem/methods/getIcon">icon</a>.</p><p>The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.</p>
         * @returns string <p>Value of property <code>icon</code></p>
         */
        getIcon(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAdditionalText" href="#/api/sap.ui.core.ListItem/methods/getAdditionalText">additionalText</a>.</p><p>Some additional text of type string, optionally to be displayed along with this item.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sAdditionalText <p>New value for property <code>additionalText</code></p>
         * @returns sap.ui.core.ListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setAdditionalText(sAdditionalText: string): sap.ui.core.ListItem;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.ListItem/methods/getIcon">icon</a>.</p><p>The icon belonging to this list item instance. This can be a URI to an image or an icon font URI.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sIcon <p>New value for property <code>icon</code></p>
         * @returns sap.ui.core.ListItem <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setIcon(sIcon: string): sap.ui.core.ListItem;
      }
      /**
       * <p>The LocalBusyIndicator is a special version of the BusyIndicator. This one doesn't block the whole screen - it just blocks the corresponding control and puts a local animation over the control. To use the functionality of this control the corresponding control needs to be enabled via the 'LocalBusyIndicatorSupport' accordingly to the ListBox control (see the init-function of the ListBox).</p>
       */
      export class LocalBusyIndicator extends sap.ui.core.Control {
        /**
         * <p>Constructor for a new LocalBusyIndicator.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.LocalBusyIndicator/methods/getHeight">height</a>.</p><p>This property is the height of the control that has to be covered. With this height the position of the animation can be properly set.</p><p>Default value is <code>100px</code>.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.LocalBusyIndicator/methods/getWidth">width</a>.</p><p>This property is the width of the control that has to be covered. With this width the position of the animation can be properly set.</p><p>Default value is <code>100px</code>.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.LocalBusyIndicator/methods/getHeight">height</a>.</p><p>This property is the height of the control that has to be covered. With this height the position of the animation can be properly set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100px</code>.</p>
         * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
         * @returns sap.ui.core.LocalBusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHeight(sHeight: sap.ui.core.CSSSize): sap.ui.core.LocalBusyIndicator;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.LocalBusyIndicator/methods/getWidth">width</a>.</p><p>This property is the width of the control that has to be covered. With this width the position of the animation can be properly set.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100px</code>.</p>
         * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
         * @returns sap.ui.core.LocalBusyIndicator <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setWidth(sWidth: sap.ui.core.CSSSize): sap.ui.core.LocalBusyIndicator;
      }
      /**
       * <p>Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.</p>
       */
      export class Locale extends sap.ui.base.Object {
        /**
         * <p>Creates an instance of the Locale.</p>
         * @param {string} sLocaleId <p>the locale identifier, in format en-US or en_US.</p>
         */
        constructor(sLocaleId: string);
        /**
         * <p>Get the locale extension as a single string or <code>null</code>.</p><p>The extension always consists of a singleton character (not 'x'), a dash '-' and one or more extension token, each separated again with a dash.</p><p>Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExtensions" href="#/api/sap.ui.core.Locale/methods/getExtensions">#getExtensions</a> to get the individual extension tokens as an array.</p>
         * @returns string <p>the extension</p>
         */
        getExtension(): string;
        /**
         * <p>Get the locale extensions as an array of tokens.</p><p>The leading singleton and the separating dashes are not part of the result. If there is no extensions section in the locale tag, an empty array is returned.</p>
         * @returns string[] <p>the individual extension sections</p>
         */
        getExtensionSubtags(): string[];
        /**
         * <p>Get the locale language.</p><p>Note that the case might differ from the original script tag (Lower case is enforced as recommended by BCP47/ISO639).</p>
         * @returns string <p>the language code</p>
         */
        getLanguage(): string;
        /**
         * <p>Get the locale private use section or <code>null</code>.</p>
         * @returns string <p>the private use section</p>
         */
        getPrivateUse(): string;
        /**
         * <p>Get the locale private use section as an array of tokens.</p><p>The leading singleton and the separating dashes are not part of the result. If there is no private use section in the locale tag, an empty array is returned.</p>
         * @returns string[] <p>the tokens of the private use section</p>
         */
        getPrivateUseSubtags(): string[];
        /**
         * <p>Get the locale region or <code>null</code> if none was specified.</p><p>Note that the case might differ from the original script tag (Upper case is enforced as recommended by BCP47/ISO3166-1).</p>
         * @returns string <p>the ISO3166-1 region code (2-letter or 3-digits)</p>
         */
        getRegion(): string;
        /**
         * <p>Get the locale script or <code>null</code> if none was specified.</p><p>Note that the case might differ from the original language tag (Upper case first letter and lower case reminder enforced as recommended by BCP47/ISO15924)</p>
         * @returns string <p>the script code or null</p>
         */
        getScript(): string;
        /**
         * <p>Get the locale variants as a single string or <code>null</code>.</p><p>Multiple variants are separated by a dash '-'.</p>
         * @returns string <p>the variant or null</p>
         */
        getVariant(): string;
        /**
         * <p>Get the locale variants as an array of individual variants.</p><p>The separating dashes are not part of the result. If there is no variant section in the locale tag, an empty array is returned.</p>
         * @returns string[] <p>the individual variant sections</p>
         */
        getVariantSubtags(): string[];
      }
      /**
       * <p>Provides access to locale-specific data, such as, date formats, number formats, and currencies.</p>
       */
      export class LocaleData extends sap.ui.base.Object {
        /**
         * <p>Creates an instance of LocaleData for the given locale.</p>
         * @param {sap.ui.core.Locale} oLocale <p>the locale</p>
         */
        constructor(oLocale: sap.ui.core.Locale);
        /**
         * <p>Returns the defined pattern for representing the calendar week number.</p>
         * @param {string} sStyle <p>the style of the pattern. It can only be either "wide" or "narrow".</p>
         * @param {number} iWeekNumber <p>the week number</p>
         * @returns string <p>the week number string</p>
         */
        getCalendarWeek(sStyle: string, iWeekNumber: number): string;
        /**
         * <p>Get combined datetime pattern with given date and and time style.</p>
         * @param {string} sDateStyle <p>the required style for the date part</p>
         * @param {string} sTimeStyle <p>the required style for the time part</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the combined datetime pattern</p>
         */
        getCombinedDateTimePattern(sDateStyle: string, sTimeStyle: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Get combined interval pattern using a given pattern and the fallback interval pattern.</p><p>If a skeleton based pattern is not available or not wanted, this method can be used to create an interval pattern based on a given pattern, using the fallback interval pattern.</p>
         * @param {string} sPattern <p>the single date pattern to use within the interval pattern</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the calculated interval pattern</p>
         */
        getCombinedIntervalPattern(sPattern: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Returns the currency code which is corresponded with the given currency symbol.</p>
         * @param {string} sCurrencySymbol <p>The currency symbol which needs to be converted to currency code</p>
         * @returns string <p>The corresponded currency code defined for the given currency symbol. The given currency symbol is returned if no currency code can be found by using the given currency symbol.</p>
         */
        getCurrencyCodeBySymbol(sCurrencySymbol: string): string;
        /**
         * <p>Returns the number of digits of the specified currency.</p>
         * @param {string} sCurrency <p>ISO 4217 currency code</p>
         * @returns number <p>digits of the currency</p>
         */
        getCurrencyDigits(sCurrency: string): number;
        /**
         * <p>Returns the short currency formats (like 1K USD, 1M USD....).</p>
         * @param {string} sStyle <p>short</p>
         * @param {string} sNumber <p>1000, 10000 ...</p>
         * @param {string} sPlural <p>one or other (if not exists other is used)</p>
         * @returns string <p>decimal format</p>
         */
        getCurrencyFormat(sStyle: string, sNumber: string, sPlural: string): string;
        /**
         * <p>Get currency format pattern.</p>
         * @param {string} sContext <p>the context of the currency pattern (standard or accounting)</p>
         * @returns string <p>The pattern</p>
         */
        getCurrencyPattern(sContext: string): string;
        /**
         * <p>Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned.</p>
         * @param {string} sCurrency <p>ISO 4217 currency code</p>
         * @returns string <p>the currency symbol</p>
         */
        getCurrencySymbol(sCurrency: string): string;
        /**
         * <p>Returns the currency symbols available for this locale. Currency symbols get accumulated by custom currency symbols.</p>
         * @returns any <p>the map of all currency symbols available in this locale, e.g. { "AUD": "A$", "BRL": "R$", "EUR": "€", "GBP": "£", }</p>
         */
        getCurrencySymbols(): any;
        /**
         * <p>Get custom datetime pattern for a given skeleton format.</p><p>The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)</p><p>See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems</p>
         * @param {string} sSkeleton <p>the wanted skeleton format for the datetime pattern</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the best matching datetime pattern</p>
         */
        getCustomDateTimePattern(sSkeleton: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Get interval pattern for a given skeleton format.</p><p>The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)</p><p>See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems</p>
         * @param {string} sSkeleton <p>the wanted skeleton format for the datetime pattern</p>
         * @param {any | string} vGreatestDiff <p>is either a string which represents the symbol matching the greatest difference in the two dates to format or an object which contains key-value pairs. The value is always true. The key is one of the date field symbol groups whose value are different between the two dates. The key can only be set with 'Year', 'Quarter', 'Month', 'Week', 'Day', 'DayPeriod', 'Hour', 'Minute', or 'Second'.</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string|string[] <p>the best matching interval pattern if interval difference is given otherwise an array with all possible interval patterns which match the given skeleton format</p>
         */
        getCustomIntervalPattern(sSkeleton: string, vGreatestDiff: any | string, sCalendarType?: sap.ui.core.CalendarType): string | string[];
        /**
         * <p>Get date pattern in format "short", "medium", "long" or "full".</p>
         * @param {string} sStyle <p>the required style for the date pattern</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the selected date pattern</p>
         */
        getDatePattern(sStyle: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Get datetime pattern in style "short", "medium", "long" or "full".</p>
         * @param {string} sStyle <p>the required style for the datetime pattern</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the selected datetime pattern</p>
         */
        getDateTimePattern(sStyle: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Get day periods in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the day period names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of day periods (AM, PM)</p>
         */
        getDayPeriods(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get standalone day periods in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the day period names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of day periods (AM, PM)</p>
         */
        getDayPeriodsStandAlone(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get day names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the day names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of day names (starting with Sunday)</p>
         */
        getDays(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get stand alone day names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the day names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of day names (starting with Sunday)</p>
         */
        getDaysStandAlone(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Returns the short decimal formats (like 1K, 1M....).</p>
         * @param {string} sStyle <p>short or long</p>
         * @param {string} sNumber <p>1000, 10000 ...</p>
         * @param {string} sPlural <p>one or other (if not exists other is used)</p>
         * @returns string <p>decimal format</p>
         */
        getDecimalFormat(sStyle: string, sNumber: string, sPlural: string): string;
        /**
         * <p>Get decimal format pattern.</p>
         * @returns string <p>The pattern</p>
         */
        getDecimalPattern(): string;
        /**
         * <p>Returns the map of era IDs to era dates.</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar</p>
         * @returns any[] <p>the array of eras containing objects with either an _end or _start property with a date</p>
         */
        getEraDates(sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Returns array of eras.</p>
         * @param {string} sWidth <p>the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar</p>
         * @returns any[] <p>the array of eras</p>
         */
        getEras(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Returns the day that usually is regarded as the first day of a week in the current locale.</p><p>Days are encoded as integer where Sunday=0, Monday=1 etc.</p><p>All week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag" information of the CLDR is taken into account to guess the "most likely" territory for the locale.</p>
         * @returns number <p>first day of week</p>
         */
        getFirstDayOfWeek(): number;
        /**
         * <p>Returns the interval format with the given Id (see CLDR documentation for valid Ids) or the fallback format if no interval format with that Id is known.</p><p>The empty Id ("") might be used to retrieve the interval format fallback.</p>
         * @param {string} sId <p>Id of the interval format, e.g. "d-d"</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>interval format string with placeholders {0} and {1}</p>
         */
        getIntervalPattern(sId: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Get locale specific language names.</p>
         * @returns any <p>map of locale specific language names</p>
         */
        getLanguages(): any;
        /**
         * <p>Returns the required minimal number of days for the first week of a year.</p><p>This is the minimal number of days of the week which must be contained in the new year for the week to become the first week of the year. Depending on the country, this is just a single day (in the US) or at least 4 days (in most of Europe).</p><p>All week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag" information of the CLDR is taken into account to guess the "most likely" territory for the locale.</p>
         * @returns number <p>minimal number of days</p>
         */
        getMinimalDaysInFirstWeek(): number;
        /**
         * <p>Get miscellaneous pattern.</p>
         * @param {string} sName <p>the name of the misc pattern, can be "approximately", "atLeast", "atMost" or "range"</p>
         * @returns string <p>The pattern</p>
         */
        getMiscPattern(sName: string): string;
        /**
         * <p>Get month names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the month names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of month names (starting with January)</p>
         */
        getMonths(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get stand alone month names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the month names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of month names (starting with January)</p>
         */
        getMonthsStandAlone(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign".</p>
         * @param {string} sType <p>the required type of symbol</p>
         * @returns string <p>the selected number symbol</p>
         */
        getNumberSymbol(sType: string): string;
        /**
         * <p>Get orientation (left-to-right or right-to-left).</p>
         * @returns string <p>character orientation for this locale</p>
         */
        getOrientation(): string;
        /**
         * <p>Get percent format pattern.</p>
         * @returns string <p>The pattern</p>
         */
        getPercentPattern(): string;
        /**
         * <p>Returns an array of all plural categories available in this language.</p>
         * @returns any[] <p>The array of plural categories</p>
         */
        getPluralCategories(): any[];
        /**
         * <p>Returns the plural category (zero, one, two, few, many or other) for the given number value. The number should be passed as a string with dot as decimal separator and the number of decimal/fraction digits as used in the final output. This is needed in order to preserve trailing zeros which are relevant to determine the right plural category.</p>
         * @param {string | number} sNumber <p>The number to find the plural category for</p>
         * @returns string <p>The plural category</p>
         */
        getPluralCategory(sNumber: string | number): string;
        /**
         * <p>Returns the preferred calendar type for the current locale which exists in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.CalendarType">sap.ui.core.CalendarType</a></p>
         * @returns sap.ui.core.CalendarType <p>the preferred calendar type</p>
         */
        getPreferredCalendarType(): sap.ui.core.CalendarType;
        /**
         * <p>Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale.</p>
         * @returns string <p>the preferred hour symbol</p>
         */
        getPreferredHourSymbol(): string;
        /**
         * <p>Get quarter names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the quarter names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of quarters</p>
         */
        getQuarters(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Get stand alone quarter names in width "narrow", "abbreviated" or "wide".</p>
         * @param {string} sWidth <p>the required width for the quarter names</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns any[] <p>array of quarters</p>
         */
        getQuartersStandAlone(sWidth: string, sCalendarType?: sap.ui.core.CalendarType): any[];
        /**
         * <p>Returns the relative day resource pattern (like "Today", "Yesterday", "{0} days ago") based on the given difference of days (0 means today, 1 means tommorrow, -1 means yesterday, ...).</p>
         * @param {number} iDiff <p>the difference in days</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative day resource pattern</p>
         */
        getRelativeDay(iDiff: number, sStyle?: string): string;
        /**
         * <p>Returns the relative resource pattern with unit 'hour' (like "in {0} hour(s)", "{0} hour(s) ago" under locale 'en') based on the given difference value (positive value means in the future and negative value means in the past).</p><p>There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeMinute or getRelativeSecond function to format the difference using unit 'minute' or 'second'.</p>
         * @param {number} iDiff <p>the difference in hours</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string|null <p>the relative resource pattern in unit 'hour'. The method returns null if 0 is given as parameter.</p>
         */
        getRelativeHour(iDiff: number, sStyle?: string): string | null;
        /**
         * <p>Returns the relative resource pattern with unit 'minute' (like "in {0} minute(s)", "{0} minute(s) ago" under locale 'en') based on the given difference value (positive value means in the future and negative value means in the past).</p><p>There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeSecond function to format the difference using unit 'second'.</p>
         * @param {number} iDiff <p>the difference in minutes</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string|null <p>the relative resource pattern in unit 'minute'. The method returns null if 0 is given as parameter.</p>
         */
        getRelativeMinute(iDiff: number, sStyle?: string): string | null;
        /**
         * <p>Returns the relative month resource pattern (like "This month", "Last month", "{0} months ago") based on the given difference of months (0 means this month, 1 means next month, -1 means last month, ...).</p>
         * @param {number} iDiff <p>the difference in months</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative month resource pattern</p>
         */
        getRelativeMonth(iDiff: number, sStyle?: string): string;
        /**
         * <p>Returns the relative format pattern with given scale (year, month, week, ...) and difference value.</p>
         * @param {string} sScale <p>the scale the relative pattern is needed for</p>
         * @param {number} iDiff <p>the difference in the given scale unit</p>
         * @param {boolean} bFuture <p>whether a future or past pattern should be used</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative format pattern</p>
         */
        getRelativePattern(sScale: string, iDiff: number, bFuture?: boolean, sStyle?: string): string;
        /**
         * <p>Returns relative time patterns for the given scales as an array of objects containing scale, value and pattern.</p><p>The array may contain the following values: "year", "month", "week", "day", "hour", "minute" and "second". If no scales are given, patterns for all available scales will be returned.</p><p>The return array will contain objects looking like: <pre>
        {
            scale: "minute",
            sign: 1,
            pattern: "in {0} minutes"
        }
        </pre></p>
         * @param {string[]} aScales <p>The scales for which the available patterns should be returned</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are "wide", "short" and "narrow".</p>
         * @returns object[] <p>An array of all relative time patterns</p>
         */
        getRelativePatterns(aScales: string[], sStyle?: string): object[];
        /**
         * <p>Returns the relative resource pattern with unit 'second' (like now, "in {0} seconds", "{0} seconds ago" under locale 'en') based on the given difference value (0 means now, positive value means in the future and negative value means in the past).</p>
         * @param {number} iDiff <p>the difference in seconds</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative resource pattern in unit 'second'</p>
         */
        getRelativeSecond(iDiff: number, sStyle?: string): string;
        /**
         * <p>Returns the relative week resource pattern (like "This week", "Last week", "{0} weeks ago") based on the given difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).</p>
         * @param {number} iDiff <p>the difference in weeks</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative week resource pattern</p>
         */
        getRelativeWeek(iDiff: number, sStyle?: string): string;
        /**
         * <p>Returns the relative year resource pattern (like "This year", "Last year", "{0} year ago") based on the given difference of years (0 means this year, 1 means next year, -1 means last year, ...).</p>
         * @param {number} iDiff <p>the difference in years</p>
         * @param {string} sStyle <p>@since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"</p>
         * @returns string <p>the relative year resource pattern</p>
         */
        getRelativeYear(iDiff: number, sStyle?: string): string;
        /**
         * <p>Retrieves the unit format pattern for a specific unit name considering the unit mappings.<br><br>References: <ul><li>sap.ui.core.LocaleData#getUnitFromMapping</li></ul></p>
         * @param {string} sUnit <p>unit name, e.g. "duration-hour" or "my"</p>
         * @returns any <p>The unit format configuration for the given unit name</p>
         */
        getResolvedUnitFormat(sUnit: string): any;
        /**
         * <p>Get locale specific script names.</p>
         * @returns any <p>map of locale specific script names</p>
         */
        getScripts(): any;
        /**
         * <p>Get locale specific territory names.</p>
         * @returns any <p>map of locale specific territory names</p>
         */
        getTerritories(): any;
        /**
         * <p>Get time pattern in style "short", "medium", "long" or "full".</p>
         * @param {string} sStyle <p>the required style for the date pattern</p>
         * @param {sap.ui.core.CalendarType} sCalendarType <p>the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.</p>
         * @returns string <p>the selected time pattern</p>
         */
        getTimePattern(sStyle: string, sCalendarType?: sap.ui.core.CalendarType): string;
        /**
         * <p>Retrieves the localized display name of a unit by sUnit, e.g. "duration-hour".</p>
         * @param {string} sUnit <p>the unit key, e.g. "duration-hour"</p>
         * @returns string <p>The localized display name for the requested unit, e.g. <code>"Hour"</code>. Return empty string <code>""</code> if not found</p>
         */
        getUnitDisplayName(sUnit: string): string;
        /**
         * <p>Retrieves the unit format pattern for a specific unit name.</p><p>Note: Does not take unit mapping into consideration.</p>
         * @param {string} sUnit <p>unit name, e.g. "duration-hour"</p>
         * @returns any <p>The unit format configuration for the given unit name</p>
         */
        getUnitFormat(sUnit: string): any;
        /**
         * <p>Retrieves all unit format patterns merged.</p><p>Note: Does not take unit mapping into consideration.</p>
         * @returns any <p>The unit format patterns</p>
         */
        getUnitFormats(): any;
        /**
         * <p>Looks up the unit from defined unit mapping. E.g. for defined unit mapping <code> { "my": "my-custom-unit", "cm": "length-centimeter" } </code></p><p>Call: <code>getUnitFromMapping("my")</code> would result in <code>"my-custom-unit"</code></p>
         * @returns string <p>unit from the mapping</p>
         */
        getUnitFromMapping(): string;
        /**
         * <p>Returns the last day of a weekend for the given locale.</p><p>Days are encoded in the same way as for <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFirstDayOfWeek" href="#/api/sap.ui.core.LocaleData/methods/getFirstDayOfWeek">#getFirstDayOfWeek</a>.</p><p>All week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag" information of the CLDR is taken into account to guess the "most likely" territory for the locale.</p>
         * @returns number <p>last day of weekend</p>
         */
        getWeekendEnd(): number;
        /**
         * <p>Returns the first day of a weekend for the given locale.</p><p>Days are encoded in the same way as for <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFirstDayOfWeek" href="#/api/sap.ui.core.LocaleData/methods/getFirstDayOfWeek">#getFirstDayOfWeek</a>.</p><p>All week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the "likelySubtag" information of the CLDR is taken into account to guess the "most likely" territory for the locale.</p>
         * @returns number <p>first day of weekend</p>
         */
        getWeekendStart(): number;
      }
      /**
       * <p>The Manifest class.</p>
       */
      export class Manifest extends sap.ui.base.Object {
        /**
         * <p>Creates and initializes a manifest wrapper which provides API access to the content of the manifest.</p>
         * @param {any} oManifest <p>the manifest object</p>
         * @param {any} mOptions <p>(optional) the configuration options</p>
         */
        constructor(oManifest: any, mOptions?: any);
        /**
         * <p>Returns the Component name which is defined in the manifest as <code>sap.ui5/componentName</code> or <code>sap.app/id</code></p>
         * @returns string <p>the component name</p>
         */
        getComponentName(): string;
        /**
         * <p>Returns the configuration of a manifest section or the value for a specific path. If no key is specified, the return value is null.</p><p>Example: <code> { "sap.ui5": { "dependencies": { "libs": { "sap.m": {} }, "components": { "my.component.a": {} } } }); </code></p><p>The configuration above can be accessed in the following ways: <ul> <li><b>By section/namespace</b>: <code>oManifest.getEntry("sap.ui5")</code></li> <li><b>By path</b>: <code>oManifest.getEntry("/sap.ui5/dependencies/libs")</code></li> </ul></p><p>By section/namespace returns the configuration for the specified manifest section and by path allows to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with a slash (/).</p>
         * @param {string} sKey <p>Either the manifest section name (namespace) or a concrete path</p>
         * @returns any|null <p>Value of the key (could be any kind of value)</p>
         */
        getEntry(sKey: string): any | null;
        /**
         * <p>Returns the manifest defined in the metadata of the component. If not specified, the return value is null.</p>
         * @returns any <p>manifest.</p>
         */
        getJson(): any;
        /**
         * <p>Returns the raw manifest defined in the metadata of the component. If not specified, the return value is null.</p>
         * @returns any <p>manifest</p>
         */
        getRawJson(): any;
        /**
         * <p>Resolves the given URI relative to the Component by default or optional relative to the manifest when passing 'manifest' as second parameter.</p>
         * @param {string} sUri <p>URI to resolve as string</p>
         * @param {string} sRelativeTo <p>defines to which base URI the given URI will be resolved to; one of ‘component' (default) or 'manifest'</p>
         * @returns string <p>resolved URI as string</p>
         */
        resolveUri(sUri: string, sRelativeTo?: string): string;
      }
      /**
       * <p>This element is used to provide messages.</p><p>Rendering must be done within the control that uses this kind of element. Its default level is none.</p>
       */
      export class Message extends sap.ui.core.Element {
        /**
         * <p>Compares two given messages with each other.</p><p>The types of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a> are ordered from "Error" > "Warning" > "Success" > "Information" > "None".</p>
         * @param {sap.ui.core.Message} oMessage1 <p>first message to compare</p>
         * @param {sap.ui.core.Message} oMessage2 <p>second message to compare</p>
         * @returns number <p>returns <code>0</code> if both messages are at the same level. <code>-1</code> if <code>this</code> message has a lower level. <code>1</code> if <code>this</code> message has a higher level.</p>
         */
        static compareByType(oMessage1: sap.ui.core.Message, oMessage2: sap.ui.core.Message): number;
        /**
         * <p>Constructor for a new Message.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Compares the given message with <code>this</code> message. The types of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.MessageType">sap.ui.core.MessageType</a> are ordered from "Error" > "Warning" > "Success" > "Information" > "None".</p><p>See <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="compareByType" href="#/api/sap.ui.core.Message/methods/compareByType">sap.ui.core.Message.compareByType</a></p>
         * @param {sap.ui.core.Message} oOther <p>message to compare with this one</p>
         * @returns number <p>returns <code>0</code> if both messages are at the same level. <code>-1</code> if <code>this</code> message has a lower level. <code>1</code> if <code>this</code> message has a higher level.</p>
         */
        compareByType(oOther: sap.ui.core.Message): number;
        /**
         * <p>Returns the icon's default URI depending on given size.</p><p>There are default icons for messages available that can be used this way. If no parameter is given, the size will be 16x16 per default. If larger icons are needed, the parameter "32x32" might be given.</p>
         * @param {string} sSize <p>If parameter is not set the default icon's size will be 16x16. If parameter is set to "32x32" the icon size will be 32x32.</p>
         * @returns sap.ui.core.URI <p>URI of the default icon.</p>
         */
        getDefaultIcon(sSize: string): sap.ui.core.URI;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.Message/methods/getIcon">icon</a>.</p><p>A possible icon URI of the message</p>
         * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
         */
        getIcon(): sap.ui.core.URI;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.ui.core.Message/methods/getLevel">level</a>.</p><p>Setting the message's level.</p><p>Default value is <code>None</code>.</p>
         * @returns sap.ui.core.MessageType <p>Value of property <code>level</code></p>
         */
        getLevel(): sap.ui.core.MessageType;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getReadOnly" href="#/api/sap.ui.core.Message/methods/getReadOnly">readOnly</a>.</p><p>Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>readOnly</code></p>
         */
        getReadOnly(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Message/methods/getText">text</a>.</p><p>Message text</p>
         * @returns string <p>Value of property <code>text</code></p>
         */
        getText(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTimestamp" href="#/api/sap.ui.core.Message/methods/getTimestamp">timestamp</a>.</p><p>Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.</p>
         * @returns string <p>Value of property <code>timestamp</code></p>
         */
        getTimestamp(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.Message/methods/getIcon">icon</a>.</p><p>A possible icon URI of the message</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
         * @returns sap.ui.core.Message <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setIcon(sIcon: sap.ui.core.URI): sap.ui.core.Message;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.ui.core.Message/methods/getLevel">level</a>.</p><p>Setting the message's level.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>None</code>.</p>
         * @param {sap.ui.core.MessageType} sLevel <p>New value for property <code>level</code></p>
         * @returns sap.ui.core.Message <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setLevel(sLevel: sap.ui.core.MessageType): sap.ui.core.Message;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getReadOnly" href="#/api/sap.ui.core.Message/methods/getReadOnly">readOnly</a>.</p><p>Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bReadOnly <p>New value for property <code>readOnly</code></p>
         * @returns sap.ui.core.Message <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setReadOnly(bReadOnly: boolean): sap.ui.core.Message;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Message/methods/getText">text</a>.</p><p>Message text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sText <p>New value for property <code>text</code></p>
         * @returns sap.ui.core.Message <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setText(sText: string): sap.ui.core.Message;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTimestamp" href="#/api/sap.ui.core.Message/methods/getTimestamp">timestamp</a>.</p><p>Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sTimestamp <p>New value for property <code>timestamp</code></p>
         * @returns sap.ui.core.Message <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setTimestamp(sTimestamp: string): sap.ui.core.Message;
      }
      /**
       * <p><p>Defines the different message types.</p></p>
       */
      export enum MessageType {
        /**
         * <p>Message is an error</p>
         */
        Error = "Error",
        /**
         * <p>Message should be just an information</p>
         */
        Information = "Information",
        /**
         * <p>Message has no specific level</p>
         */
        None = "None",
        /**
         * <p>Message is a success message</p>
         */
        Success = "Success",
        /**
         * <p>Message is a warning</p>
         */
        Warning = "Warning",
      }
      /**
       * <p><p>Defines the different possible states of an element that can be open or closed and does not only toggle between these states, but also spends some time in between (e.g. because of an animation).</p></p>
       */
      export enum OpenState {
        /**
         * <p>Closed and currently not changing states.</p>
         */
        CLOSED = "CLOSED",
        /**
         * <p>Still open, but in the process of going to the CLOSED state.</p>
         */
        CLOSING = "CLOSING",
        /**
         * <p>Open and currently not changing states.</p>
         */
        OPEN = "OPEN",
        /**
         * <p>Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.</p>
         */
        OPENING = "OPENING",
      }
      /**
       * <p><p>Orientation of a UI element.</p></p>
       */
      export enum Orientation {
        /**
         * <p>Arrange Horizontally</p>
         */
        Horizontal = "Horizontal",
        /**
         * <p>Arrange Vertically</p>
         */
        Vertical = "Vertical",
      }
      /**
       * <p>Popup Class is a helper class for controls that want themselves or parts of themselves or even other aggregated or composed controls or plain HTML content to popup on the screen like menues, dialogs, drop down boxes.</p><p>It allows the controls to be aligned to other dom elements using the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Popup.Dock">sap.ui.core.Popup.Dock</a> method. With it you can define where the popup should be docked. One can dock the popup to the top bottom left or right side of a dom ref.</p><p>In the case that the popup has no space to show itself in the view port of the current window it tries to open itself to the inverted direction.</p><p><strong>Since 1.12.3</strong> it is possible to add further DOM-element-ids that can get the focus when 'autoclose' is enabled. E.g. the RichTextEditor with running TinyMCE uses this method to be able to focus the Popups of the TinyMCE if the RichTextEditor runs within a Popup/Dialog etc.</p><p>To provide an additional DOM-element that can get the focus the following should be done: // create an object with the corresponding DOM-id var oObject = { id : "this_is_the_most_valuable_id_of_the_DOM_element" };</p><p>// add the event prefix for adding an element to the ID of the corresponding Popup var sEventId = "sap.ui.core.Popup.addFocusableContent-" + oPopup.getId();</p><p>// fire the event with the created event-id and the object with the DOM-id sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, oObject);</p>
       */
      export class Popup extends sap.ui.base.ManagedObject {
        /**
         * <p>Attaches an event-handler <code>fnFunction</code> to the static 'blockLayerStateChange' event.</p><p>The event gets triggered in case of modal popups when the first of multiple popups opens and closes.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function.</p>
         */
        static attachBlockLayerStateChange(oData: any, fnFunction: Function, oListener?: any): void;
        /**
         * <p>Removes a previously attached event handler <code>fnFunction</code> from the static 'blockLayerStateChange' event.</p><p>The event gets triggered in case of modal popups when the first of multiple popups opens and closes.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         */
        static detachBlockLayerStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Returns the last z-index that has been handed out. does not increase the internal z-index counter.</p>
         * @returns Number 
         */
        static getLastZIndex(): Number;
        /**
         * <p>Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.</p>
         * @returns Number <p>the next z-index on top of the Popup stack</p>
         */
        static getNextZIndex(): Number;
        /**
         * <p>Set an initial z-index that should be used by all Popup so all Popups start at least with the set z-index. If the given z-index is lower than any current available z-index the highest z-index will be used.</p>
         * @param {Number} iInitialZIndex <p>is the initial z-index</p>
         */
        static setInitialZIndex(iInitialZIndex: Number): void;
        /**
         * <p>Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup, visually appearing in front of other controls.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {sap.ui.core.Control | sap.ui.core.Element | HTMLElement} oContent <p>the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.</p>
         * @param {boolean} bModal <p>whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.</p>
         * @param {boolean} bShadow <p>whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)</p>
         * @param {boolean} bAutoClose <p>whether the popup should automatically close when the focus moves out of the popup</p>
         */
        constructor(oContent: sap.ui.core.Control | sap.ui.core.Element | HTMLElement, bModal?: boolean, bShadow?: boolean, bAutoClose?: boolean);
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.Popup/events/closed">closed</a> event of this <code>sap.ui.core.Popup</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachClosed(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Popup;
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="opened" href="#/api/sap.ui.core.Popup/events/opened">opened</a> event of this <code>sap.ui.core.Popup</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachOpened(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.Popup;
        /**
         * <p>Closes the popup.</p><p>If the Popup is already closed or in the process of closing, calling this method does nothing. If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing. If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous, may lead to inconsistent behavior and is thus not recommended and may even be removed.</p>
         * @param {number} iDuration <p>animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the closing happens synchronously without animation.</p>
         */
        close(iDuration?: number): void;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         */
        destroy(bSuppressInvalidate?: boolean): void;
        /**
         * <p>Closes and destroys this instance of Popup. Does not destroy the hosted content.</p>
         */
        destroy(): void;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.Popup/events/closed">closed</a> event of this <code>sap.ui.core.Popup</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachClosed(fnFunction: Function, oListener?: any): sap.ui.core.Popup;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="opened" href="#/api/sap.ui.core.Popup/events/opened">opened</a> event of this <code>sap.ui.core.Popup</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachOpened(fnFunction: Function, oListener?: any): sap.ui.core.Popup;
        /**
         * <p>When the Popup is being destroyed all corresponding references should be deleted as well to prevent any memory leaks.</p>
         */
        exit(): void;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.Popup/events/closed">closed</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireClosed(mParameters?: any): sap.ui.core.Popup;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="opened" href="#/api/sap.ui.core.Popup/events/opened">opened</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.Popup <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireOpened(mParameters?: any): sap.ui.core.Popup;
        /**
         * <p>Determines whether the pop-up should auto closes or not.</p>
         * @returns boolean 
         */
        getAutoClose(): boolean;
        /**
         * <p>Returns this Popup's content.</p>
         * @returns sap.ui.core.Control|Element <p>the content that has been set previously (if any)</p>
         */
        getContent(): sap.ui.core.Control | HTMLElement;
        /**
         * <p>This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added the correspodning function is returned.</p>
         * @returns boolean|function <p>if a function was set it is returned otherwise a boolean value whether the follow of is activated</p>
         */
        getFollowOf(): boolean | Function;
        /**
         * <p>Returns the last z-index that has been handed out. does not increase the internal z-index counter.</p>
         * @returns Number 
         */
        getLastZIndex(): Number;
        /**
         * <p>Returns the value if a Popup is of modal type</p>
         * @returns undefined <p>{boolean] bModal whether the Popup is of modal type</p>
         */
        getModal(): undefined;
        /**
         * <p>Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.</p>
         * @returns Number <p>the next z-index on top of the Popup stack</p>
         */
        getNextZIndex(): Number;
        /**
         * <p>Returns whether the Popup is currently open, closed, or transitioning between these states.</p>
         * @returns sap.ui.core.OpenState <p>whether the Popup is opened</p>
         */
        getOpenState(): sap.ui.core.OpenState;
        /**
         * <p>Returns whether the Popup is currently open (this includes opening and closing animations).</p>
         * @returns boolean <p>whether the Popup is opened (or currently being opened or closed)</p>
         */
        isOpen(): boolean;
        /**
         * <p>Opens the popup's content at the position either specified here or beforehand via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setPosition" href="#/api/sap.ui.core.Popup/methods/setPosition">#setPosition</a>. Content must be capable of being positioned via "position:absolute;" All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.</p><p>If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.</p>
         * @param {number} iDuration <p>animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.</p>
         * @param {sap.ui.core.Popup.Dock} my <p>the popup content's reference position for docking</p>
         * @param {sap.ui.core.Popup.Dock} at <p>the "of" element's reference point for docking to</p>
         * @param {string | sap.ui.core.Element | HTMLElement | any | any} of <p>specifies the reference element to which the given content should dock to</p>
         * @param {string} offset <p>the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "10 0" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.</p>
         * @param {string} collision <p>defines how the position of an element should be adjusted in case it overflows the window in some direction.</p>
         * @param {boolean} followOf <p>defines whether the popup should follow the dock reference when the reference changes its position.</p>
         */
        open(iDuration?: number, my?: sap.ui.core.Popup.Dock, at?: sap.ui.core.Popup.Dock, of?: string | sap.ui.core.Element | HTMLElement | any | any, offset?: string, collision?: string, followOf?: boolean): void;
        /**
         * <p>Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function. When called, the animation functions receive three parameters: - the jQuery object wrapping the DomRef of the popup - the requested animation duration - a function that MUST be called once the animation has completed</p>
         * @param {Function} fnOpen 
         * @param {Function} fnClose 
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setAnimations(fnOpen: Function, fnClose: Function): sap.ui.core.Popup;
        /**
         * <p>Used to specify whether the Popup should close as soon as - for non-touch environment: the focus leaves - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document), and one of the autoCloseAreas set by calling setAutoCloseAreas.</p>
         * @param {boolean} bAutoClose <p>whether the Popup should close as soon as the focus leaves</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setAutoClose(bAutoClose: boolean): sap.ui.core.Popup;
        /**
         * <p>Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled. - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close. - touch environment: if user clicks one of these areas, the Popup does NOT close.</p>
         * @param {HTMLElement[] | sap.ui.core.Element[] | string[]} aAutoCloseAreas <p>an array containing DOM elements, sap.ui.core.Element or an ID which are considered part of the Popup; a value of null removes all previous areas</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setAutoCloseAreas(aAutoCloseAreas: HTMLElement[] | sap.ui.core.Element[] | string[]): sap.ui.core.Popup;
        /**
         * <p>Sets the content this instance of the Popup should render. Content must be capable of being positioned via position:absolute;</p>
         * @param {sap.ui.core.Control | HTMLElement} oContent 
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setContent(oContent: sap.ui.core.Control | HTMLElement): sap.ui.core.Popup;
        /**
         * <p>Sets the durations for opening and closing animations. Null values and values < 0 are ignored. A duration of 0 means no animation. Default value is "fast" which is the jQuery constant for "200 ms".</p>
         * @param {number} iOpenDuration <p>in milliseconds</p>
         * @param {number} iCloseDuration <p>in milliseconds</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setDurations(iOpenDuration: number, iCloseDuration: number): sap.ui.core.Popup;
        /**
         * <p>This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should be set the corresponding listener will be attached.</p>
         * @param {boolean | Function | null} followOf <p>a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given. null deletes all followOf settings.</p>
         */
        setFollowOf(followOf: boolean | Function | null): void;
        /**
         * <p>Sets the ID of the element that should be focused once the popup opens. If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control). If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.</p>
         * @param {string} sId <p>the ID of the DOM element to focus</p>
         */
        setInitialFocusId(sId: string): void;
        /**
         * <p>Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and prevent attempts to put the focus outside/below the popup. Setting this while the popup is open will change "block layer" immediately.</p>
         * @param {boolean} bModal <p>whether the Popup is of modal type</p>
         * @param {string} sModalCSSClass <p>a CSS class (or space-separated list of classes) that should be added to the block layer</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setModal(bModal: boolean, sModalCSSClass?: string): sap.ui.core.Popup;
        /**
         * <p>Sets the position of the Popup (if you refer to a Control as anchor then do not use the DOMRef of the control which might change after re-renderings). Optional parameters can only be omitted when all subsequent parameters are omitted as well.</p>
         * @param {sap.ui.core.Popup.Dock} my <p>specifies which point of the given Content should be aligned</p>
         * @param {sap.ui.core.Popup.Dock | any} at <p>specifies the point of the reference element to which the given Content should be aligned</p>
         * @param {string | sap.ui.core.Element | HTMLElement | any | any} of <p>specifies the reference element to which the given content should be aligned as specified in the other parameters</p>
         * @param {string} offset <p>the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.</p>
         * @param {string} collision <p>defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are "flip", "fit" and "none".</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setPosition(my: sap.ui.core.Popup.Dock, at: sap.ui.core.Popup.Dock | any, of?: string | sap.ui.core.Element | HTMLElement | any | any, offset?: string, collision?: string): sap.ui.core.Popup;
        /**
         * <p>Determines whether the Popup should have a shadow (in supporting browsers). This also affects a currently open popup.</p>
         * @param {boolean} bShowShadow <p>whether to show a shadow</p>
         * @returns sap.ui.core.Popup <p><code>this</code> to allow method chaining</p>
         */
        setShadow(bShowShadow: boolean): sap.ui.core.Popup;
      }
      namespace Popup {
      }
      /**
       * <p><p>Marker interface for controls that are not rendered "embedded" into other controls but need to be opened/closed.</p><p>Such controls are handled differently during rendering.</p></p>
       */
      export interface PopupInterface {
      }
      /**
       * <p><p>Priorities for general use.</p></p>
       */
      export enum Priority {
        /**
         * <p>High priority</p>
         */
        High = "High",
        /**
         * <p>Low priority</p>
         */
        Low = "Low",
        /**
         * <p>Medium priority</p>
         */
        Medium = "Medium",
        /**
         * <p>Default, none priority</p>
         */
        None = "None",
      }
      /**
       * <p>A class that handles the rendering of controls.</p><p>For the default rendering task of UI5, a shared RenderManager is created and owned by <code>sap.ui.core.Core</code>. Controls or other code that want to render controls outside the default rendering task can create a private instance of RenderManager by calling the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/createRenderManager">sap.ui.getCore().createRenderManager()</a> method. When such a private instance is no longer needed, it should be <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.core.RenderManager/methods/destroy">destroyed</a>.</p><p>Control renderers only have access to a subset of the public and protected instance methods of this class. The instance methods <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="flush" href="#/api/sap.ui.core.RenderManager/methods/flush">#flush</a>, <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="render" href="#/api/sap.ui.core.RenderManager/methods/render">#render</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.core.RenderManager/methods/destroy">#destroy</a> are not part of that subset and are reserved to the owner of the corresponding RenderManager instance. Renderers will use the provided methods to create their HTML output. The RenderManager will collect the HTML output and inject the final HTML DOM at the desired location.</p><h3>Renderers</h3><p> When the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="renderControl" href="#/api/sap.ui.core.RenderManager/methods/renderControl">#renderControl</a> method of the RenderManager is invoked, it will retrieve the default renderer for that control. By convention, the default renderer is implemented in its own namespace (static class) which matches the name of the control's class with the additional suffix 'Renderer'. So for a control <code>sap.m.Input</code> the default renderer will be searched for under the global name <code>sap.m.Input<i>Renderer</i></code>.</p><h3>In-place DOM patching</h3><p> As of 1.67, <code>RenderManager</code> provides a set of new APIs to describe the structure of the DOM that can be used by the control renderers.</p><p><pre>
      
        myButtonRenderer.render = function(rm, oButton) {
      
            rm.openStart("button", oButton);
            rm.attr("tabindex", 1);
            rm.class("myButton");
            rm.style("width", oButton.getWidth());
            rm.openEnd();
                rm.text(oButton.getText());
            rm.close("button");
      
        };
      
      </pre></p><p>By default, when the control is invalidated (e.g. a property is changed, an aggregation is removed, or an association is added), it will be registered for re-rendering. During the (re)rendering, the <code>render</code> method of the control renderer is executed via a specified <code>RenderManager</code> interface and the control instance. Traditional string-based rendering creates a new HTML structure of the control in every rendering cycle and removes the existing control DOM structure from the DOM tree. The set of new semantic <code>RenderManager</code> APIs lets us understand the structure of the DOM, walk along the live DOM tree, and figure out changes as new APIs are called. If there is a change, then <code>RenderManager</code> patches only the required parts of the live DOM tree. This allows control developers to remove their DOM-related custom setters.</p><p><b>Note:</b> To enable the new in-place rendering technology, the <code>apiVersion</code> property of the control renderer must be set to <code>2</code>.</p><p><pre>
      
        var myButtonRenderer = {
            apiVersion: 2    // enable in-place DOM patching
        };
      
        myButtonRenderer.render = function(rm, oButton) {
      
            rm.openStart("button", oButton);
            ...
            ...
            rm.close("button");
      
        };
      
      </pre></p><h3>Renderer.apiVersion contract</h3><p> To allow a more efficient in-place DOM patching and to ensure the compatibility of the control, the following prerequisites must be fulfilled for the controls using the new rendering technology:</p><p><ul> <li>Legacy control renderers must be migrated to the new semantic renderer API: <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/openStart">openStart</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/voidStart">voidStart</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/style">style</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/class">class</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/attr">attr</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/openEnd">openEnd</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/voidEnd">voidEnd</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/text">text</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/unsafeHtml">unsafeHtml</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/icon">icon</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/accessibilityState">accessibilityState</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/renderControl">renderControl</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/cleanupControlWithoutRendering">cleanupControlWithoutRendering</a> </li> <li>During the migration, restrictions that are defined in the API documentation must be taken into account, e.g. tag and attribute names must be set in their canonical form.</li> <li>Fault tolerance of HTML5 markups is not applicable for the new semantic rendering API, e.g. except void tags, all tags must be closed; duplicate attributes within one HTML element must not exist.</li> <li>Existing control DOM structure will not be removed from the DOM tree; therefore all custom events, including the ones that are registered with jQuery, must be deregistered correctly at the <code>onBeforeRendering</code> and <code>exit</code> hooks.</li> <li>Classes and attribute names must not be escaped. Styles should be validated via types but this might not be sufficient in all cases, e.g. validated URL values can contain harmful content; in this case <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Fsecurity%2FencodeCSS">encodeCSS</a> can be used.</li> <li>To allow a more efficient DOM update, second parameter of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/openStart">openStart</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.RenderManager/methods/voidStart">voidStart</a> methods must be used to identify elements, e.g. use <code>rm.openStart("div", oControl.getId() + "-suffix");</code> instead of <code>rm.openStart("div").attr("id", oControl.getId() + "-suffix");</code></li> <li>Controls that listen to the <code>focusin</code> event must double check their focus handling. Since DOM nodes are not removed and only reused, the <code>focusin</code> event might not be fired because of re-rendering.</li> </ul><br><br><span>Documentation links:</span><ul><li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core">sap.ui.core.Core</a></li><li><a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.getCore">sap.ui.getCore</a></li></ul></p>
       */
      export class RenderManager extends Object {
        /**
         * <p>Searches "to-be-preserved" nodes for the given control id.</p>
         * @param {string} sId <p>control id to search content for.</p>
         * @returns any <p>a jQuery collection representing the found content</p>
         */
        static findPreservedContent(sId: string): any;
        /**
         * <p>Returns the hidden area reference belonging to the current window instance.</p>
         * @returns HTMLElement <p>The hidden area reference belonging to the current window instance.</p>
         */
        static getPreserveAreaRef(): HTMLElement;
        /**
         * <p>Returns the renderer class for a given control instance</p>
         * @param {sap.ui.core.Control} oControl <p>the control that should be rendered</p>
         * @returns Function <p>the renderer class for a given control instance</p>
         */
        static getRenderer(oControl: sap.ui.core.Control): Function;
        /**
         * <p>Collects descendants of the given root node that need to be preserved before the root node is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.</p><p>A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code> attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true, then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute is set automatically. This option is used by UIAreas when they render for the first time and simplifies the handling of predefined HTML content in a web page.</p><p>The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve' area in the order that they are found. So for direct siblings the order should be stable.</p>
         * @param {HTMLElement} oRootNode <p>to search for "to-be-preserved" nodes</p>
         * @param {boolean} bPreserveRoot <p>whether to preserve the root itself</p>
         * @param {boolean} bPreserveNodesWithId <p>whether to preserve nodes with an id as well</p>
         */
        static preserveContent(oRootNode: HTMLElement, bPreserveRoot?: boolean, bPreserveNodesWithId?: boolean): void;
        /**
         * <p>Creates an instance of the RenderManager.</p><p>Applications or controls must not call the <code>RenderManager</code> constructor on their own but should use the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/createRenderManager">sap.ui.getCore().createRenderManager()</a> method to create an instance for their exclusive use.</p>
         */
        constructor();
        /**
         * <p>Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML based on the element's properties and associations.</p><p>The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.</p><p>The following properties/values to ARIA attribute mappings are done (if the element does have such properties): <ul> <li><code>editable===false</code> => <code>aria-readonly="true"</code></li> <li><code>enabled===false</code> => <code>aria-disabled="true"</code></li> <li><code>visible===false</code> => <code>aria-hidden="true"</code></li> <li><code>required===true</code> => <code>aria-required="true"</code></li> <li><code>selected===true</code> => <code>aria-selected="true"</code></li> <li><code>checked===true</code> => <code>aria-checked="true"</code></li> </ul></p><p>In case of the required attribute also the Label controls which referencing the given element in their 'for' relation are taken into account to compute the <code>aria-required</code> attribute.</p><p>Additionally, the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write the ID lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.</p><p>Label controls that reference the given element in their 'for' relation are automatically added to the <code>aria-labelledby</code> attributes.</p><p>Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers have to check whether it fulfills their requirements. In case of problems (for example the RadioButton has a <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated result of this function can be influenced via the parameter <code>mProps</code> as described below.</p><p>The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys (Exception: Attribute 'role' does not get the prefix 'aria-').</p><p>Examples: <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the presence or absence of the visibility property. <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the presence or absence of the visibility property. The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>. To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes the following format can be used: <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb" is the auto-generated part based on the association <code>ariaDescribedBy</code>).</p>
         * @param {sap.ui.core.Element} oElement <p>the element whose accessibility state should be rendered</p>
         * @param {any} mProps <p>a map of properties that should be added additionally or changed.</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        accessibilityState(oElement?: sap.ui.core.Element, mProps?: any): sap.ui.core.RenderManager;
        /**
         * <p>Adds a class to the class collection if the name is not empty or null. The class collection is flushed if it is written to the buffer using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="writeClasses" href="#/api/sap.ui.core.RenderManager/methods/writeClasses">#writeClasses</a></p>
         * @param {string} sName <p>name of the class to be added; null values are ignored</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addClass(sName: string): sap.ui.core.RenderManager;
        /**
         * <p>Adds a style property to the style collection if the value is not empty or null The style collection is flushed if it is written to the buffer using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="writeStyle" href="#/api/sap.ui.core.RenderManager/methods/writeStyle">#writeStyle</a></p>
         * @param {string} sName <p>Name of the CSS property to write</p>
         * @param {string | number | number} vValue <p>Value to write</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addStyle(sName: string, vValue: string | number | number): sap.ui.core.RenderManager;
        /**
         * <p>Adds an attribute name-value pair to the last open HTML element.</p><p>This is only valid when called between <code>openStart/voidStart</code> and <code>openEnd/voidEnd</code>. The attribute name must not be equal to <code>style</code> or <code>class</code>. Styles and classes must be set via dedicated <code>class</code> or <code>style</code> methods. To update the DOM correctly, all attribute names have to be used in their canonical form. For HTML elements, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes">attribute names</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> must all be set in lowercase. For foreign elements, such as SVG, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute">attribute names</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> can be set in upper camel case (e.g. viewBox).</p>
         * @param {string} sName <p>Name of the attribute</p>
         * @param {any} vValue <p>Value of the attribute</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attr(sName: string, vValue: any): sap.ui.core.RenderManager;
        /**
         * <p>Adds a class name to the class collection of the last open HTML element.</p><p>This is only valid when called between <code>openStart/voidStart</code> and <code>openEnd/voidEnd</code>. Class name must not contain any whitespace.</p>
         * @param {string} sClass <p>Class name to be written</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        class(sClass: string): sap.ui.core.RenderManager;
        /**
         * <p>Cleans up the rendering state of the given control without rendering it.</p><p>A control is responsible for the rendering of all its child controls. But in some cases it makes sense that a control only renders a subset of its children based on some criterion. For example, a typical carousel control might, for performance reasons, only render the currently visible children (and maybe some child before and after the visible area to facilitate slide-in / slide-out animations), but not all children. This leads to situations where a child had been rendered before, but shouldn't be rendered anymore after an update of the carousel's position. The DOM related state of that child then must be cleaned up correctly, e.g. by de-registering resize handlers or native event handlers. <code>cleanupControlWithoutRendering</code> helps with that task by triggering the same activities that the normal rendering triggers before the rendering of a control (e.g. it fire the <code>BeforeRendering</code> event). It just doesn't call the renderer and the control will not receive an <code>AfterRendering</code> event.</p><p>The following example shows how <code>renderControl</code> and <code>cleanupControlWithoutRendering</code> should be used:</p><p><pre>
          CarouselRenderer.render = function(rm, oCarousel){
        
            ...
        
            oCarousel.getPages().forEach( oPage ) {
               if ( oCarousel.isPageToBeRendered( oPage ) ) {
                  rm.renderControl( oPage ); // onBeforeRendering, render, later onAfterRendering
               } else {
                  rm.cleanupControlWithoutRendering( oPage ); // onBeforeRendering
               }
            }
        
            ...
        
          };
        </pre></p><h3>DOM Removal</h3><p> The method does not remove the DOM of the given control. The caller of this method has to take care to remove it at some later point in time. It should indeed be <i>later</i>, not <i>before</i> as the <code>onBeforeRendering</code> hook of the control might need access to the old DOM for a proper cleanup.</p><p>For parents which are rendered with the normal mechanism as shown in the example above, the removal of the old child DOM is guaranteed. The whole DOM of the parent control (including the DOM of the no longer rendered child) will be replaced with new DOM (no longer containing the child) when the rendering cycle finishes.</p><p><b>Note:</b>: the functionality of this method is different from the default handling for invisible controls (controls with <code>visible == false</code>). The standard rendering for invisible controls still renders a placeholder DOM. This allows re-rendering of the invisible control once it becomes visible again without a need to render its parent, too. Children that are cleaned up with this method here, are supposed to have no more DOM at all. Rendering them later on therefore requires an involvement (typically: a rendering) of their parent.</p>
         * @param {sap.ui.core.Control} oControl <p>Control that should be cleaned up</p>
         */
        cleanupControlWithoutRendering(oControl: sap.ui.core.Control): void;
        /**
         * <p>Closes an open tag started with <code>openStart</code> and ended with <code>openEnd</code>.</p><p>This indicates that there are no more children to append to the open tag.</p>
         * @param {string} sTagName <p>Tag name of the HTML element</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        close(sTagName: string): sap.ui.core.RenderManager;
        /**
         * <p>Cleans up the resources associated with this instance.</p><p>After the instance has been destroyed, it must not be used anymore. Applications should call this function if they don't need the instance any longer.</p>
         */
        destroy(): void;
        /**
         * <p>Renders the content of the rendering buffer into the provided DOM node.</p><p>This function must not be called within control renderers.</p><p>Usage: <pre>
        
          // Create a new instance of the RenderManager
          var rm = sap.ui.getCore().createRenderManager();
        
          // Use the writer API to fill the buffers
          rm.write(...);
          rm.renderControl(oControl);
          rm.write(...);
          ...
        
          // Finally flush the buffer into the provided DOM node (The current content is removed)
          rm.flush(oDomNode);
        
          // If the instance is not needed anymore, destroy it
          rm.destroy();
        
        </pre></p>
         * @param {HTMLElement} oTargetDomNode <p>Node in the DOM where the buffer should be flushed into</p>
         * @param {boolean} bDoNotPreserve <p>Determines whether the content is preserved (<code>false</code>) or not (<code>true</code>)</p>
         * @param {boolean | number} vInsert <p>Determines whether the buffer of the target DOM node is expanded (<code>true</code>) or replaced (<code>false</code>), or the new entry is inserted at a specific position (value of type <code>int</code>)</p>
         */
        flush(oTargetDomNode: HTMLElement, bDoNotPreserve: boolean, vInsert: boolean | number): void;
        /**
         * <p>Returns the configuration object Shortcut for <code>sap.ui.getCore().getConfiguration()</code></p>
         * @returns sap.ui.core.Configuration <p>the configuration object</p>
         */
        getConfiguration(): sap.ui.core.Configuration;
        /**
         * <p>Returns the renderer class for a given control instance</p>
         * @param {sap.ui.core.Control} oControl <p>the control that should be rendered</p>
         * @returns any <p>the renderer class for a given control instance</p>
         */
        getRenderer(oControl: sap.ui.core.Control): any;
        /**
         * <p>Writes either an &lt;img&gt; tag for normal URI or a &lt;span&gt; tag with needed properties for an icon URI.</p><p>Additional classes and attributes can be added to the tag with the second and third parameter. All of the given attributes are escaped for security consideration.</p><p>When an &lt;img&gt; tag is rendered, the following two attributes are added by default and can be overwritten with corresponding values in the <code>mAttributes</code> parameter: <ul> <li><code>role: "presentation"</code></Li> <li><code>alt: ""</code></li> </ul></p>
         * @param {sap.ui.core.URI} sURI <p>URI of an image or of an icon registered in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconPool">sap.ui.core.IconPool</a></p>
         * @param {any[] | string} aClasses <p>Additional classes that are added to the rendered tag</p>
         * @param {any} mAttributes <p>Additional attributes that will be added to the rendered tag</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        icon(sURI: sap.ui.core.URI, aClasses?: any[] | string, mAttributes?: any): sap.ui.core.RenderManager;
        /**
         * <p>Ends an open tag started with <code>openStart</code>.</p><p>This indicates that there are no more attributes to set to the open tag.</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        openEnd(): sap.ui.core.RenderManager;
        /**
         * <p>Opens the start tag of an HTML element.</p><p>This must be followed by <code>openEnd</code> and concluded with <code>close</code>. To allow a more efficient DOM update, all tag names have to be used in their canonical form. For HTML elements, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">tag names</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> must all be set in lowercase. For foreign elements, such as SVG, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element">tag names</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> can be set in upper camel case (e.g. linearGradient).</p>
         * @param {string} sTagName <p>Tag name of the HTML element</p>
         * @param {sap.ui.core.Element | sap.ui.core.ID} vControlOrId <p>Control instance or ID to identify the element</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        openStart(sTagName: string, vControlOrId?: sap.ui.core.Element | sap.ui.core.ID): sap.ui.core.RenderManager;
        /**
         * <p>Renders the given control to the provided DOMNode.</p><p>If the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended to the provided DOMNode.</p><p>This function must not be called within control renderers.</p>
         * @param {sap.ui.core.Control} oControl <p>the Control that should be rendered.</p>
         * @param {HTMLElement} oTargetDomNode <p>The node in the DOM where the result of the rendering should be inserted.</p>
         */
        render(oControl: sap.ui.core.Control, oTargetDomNode: HTMLElement): void;
        /**
         * <p>Turns the given control into its HTML representation and appends it to the rendering buffer.</p><p>If the given control is undefined or null, then nothing is rendered.</p>
         * @param {sap.ui.core.Control} oControl <p>the control that should be rendered</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        renderControl(oControl: sap.ui.core.Control): sap.ui.core.RenderManager;
        /**
         * <p>Adds a style name-value pair to the style collection of the last open HTML element.</p><p>This is only valid when called between <code>openStart/voidStart</code> and <code>openEnd/voidEnd</code>.</p>
         * @param {string} sName <p>Name of the style property</p>
         * @param {string} sValue <p>Value of the style property</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        style(sName: string, sValue: string): sap.ui.core.RenderManager;
        /**
         * <p>Sets the text content with the given text.</p>
         * @param {string} sText <p>The text to be written</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        text(sText: string): sap.ui.core.RenderManager;
        /**
         * <p>Sets the given HTML markup without any encoding or sanitizing.</p>
         * @param {string} sHtml <p>HTML markup</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        unsafeHtml(sHtml: string): sap.ui.core.RenderManager;
        /**
         * <p>Ends an open self-closing tag started with <code>voidStart</code>.</p><p>This indicates that there are no more attributes to set to the open tag. For self-closing tags <code>close</code> must not be called.</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        voidEnd(): sap.ui.core.RenderManager;
        /**
         * <p>Starts a self-closing tag, such as <code>img</code> or <code>input</code>.</p><p>This must be followed by <code>voidEnd</code>. For self-closing tags, the <code>close</code> method must not be called. To allow a more efficient DOM update, void tag names have to be set in lowercase. This API is specific for void elements and must not be used for foreign elements. For more information, see <a target="_blank" href="https://www.w3.org/TR/html5/syntax.html#void-elements">https://www.w3.org/TR/html5/syntax.html#void-elements</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/>.</p>
         * @param {string} sTagName <p>Tag name of the HTML element</p>
         * @param {sap.ui.core.Element | sap.ui.core.ID} vControlOrId <p>Control instance or ID to identify the element</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        voidStart(sTagName: string, vControlOrId?: sap.ui.core.Element | sap.ui.core.ID): sap.ui.core.RenderManager;
        /**
         * <p>Write the given texts to the buffer</p>
         * @param {string | number} sText <p>(can be a number too)</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        write(sText: string | number): sap.ui.core.RenderManager;
        /**
         * <p>Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML based on the element's properties and associations.</p><p>The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.</p><p>The following properties/values to ARIA attribute mappings are done (if the element does have such properties): <ul> <li><code>editable===false</code> => <code>aria-readonly="true"</code></li> <li><code>enabled===false</code> => <code>aria-disabled="true"</code></li> <li><code>visible===false</code> => <code>aria-hidden="true"</code></li> <li><code>required===true</code> => <code>aria-required="true"</code></li> <li><code>selected===true</code> => <code>aria-selected="true"</code></li> <li><code>checked===true</code> => <code>aria-checked="true"</code></li> </ul></p><p>In case of the required attribute also the Label controls which referencing the given element in their 'for' relation are taken into account to compute the <code>aria-required</code> attribute.</p><p>Additionally, the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write the ID lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.</p><p>Label controls that reference the given element in their 'for' relation are automatically added to the <code>aria-labelledby</code> attributes.</p><p>Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers have to check whether it fulfills their requirements. In case of problems (for example the RadioButton has a <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated result of this function can be influenced via the parameter <code>mProps</code> as described below.</p><p>The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys (Exception: Attribute 'role' does not get the prefix 'aria-').</p><p>Examples: <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the presence or absence of the visibility property. <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the presence or absence of the visibility property. The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>. To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes the following format can be used: <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb" is the auto-generated part based on the association <code>ariaDescribedBy</code>).</p>
         * @param {sap.ui.core.Element} oElement <p>the element whose accessibility state should be rendered</p>
         * @param {any} mProps <p>a map of properties that should be added additionally or changed.</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeAccessibilityState(oElement?: sap.ui.core.Element, mProps?: any): sap.ui.core.RenderManager;
        /**
         * <p>Writes the attribute and its value into the HTML.</p><p>For details about the escaping refer to <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.encodeHTML">jQuery.sap.encodeHTML</a></p>
         * @param {string} sName <p>Name of the attribute</p>
         * @param {string | number | boolean} vValue <p>Value of the attribute</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeAttribute(sName: string, vValue: string | number | boolean): sap.ui.core.RenderManager;
        /**
         * <p>Writes the attribute and a value into the HTML, the value will be encoded.</p><p>The value is properly encoded to avoid XSS attacks.</p>
         * @param {string} sName <p>Name of the attribute</p>
         * @param {any} vValue <p>Value of the attribute</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeAttributeEscaped(sName: string, vValue: any): sap.ui.core.RenderManager;
        /**
         * <p>Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush). Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are added by default from the currently rendered control. If an oElement is given, this Element's custom style classes are added instead. If oElement === false, no custom style classes are added.</p>
         * @param {sap.ui.core.Element | boolean} oElement <p>an Element from which to add custom style classes (instead of adding from the control itself)</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeClasses(oElement?: sap.ui.core.Element | boolean): sap.ui.core.RenderManager;
        /**
         * <p>Writes the controls data into the HTML. Control Data consists at least of the id of a control</p>
         * @param {sap.ui.core.Control} oControl <p>the control whose identifying information should be written to the buffer</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeControlData(oControl: sap.ui.core.Control): sap.ui.core.RenderManager;
        /**
         * <p>Writes the elements data into the HTML. Element Data consists at least of the id of an element</p>
         * @param {sap.ui.core.Element} oElement <p>the element whose identifying information should be written to the buffer</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeElementData(oElement: sap.ui.core.Element): sap.ui.core.RenderManager;
        /**
         * <p>Escape text for HTML and write it to the buffer.</p><p>For details about the escaping refer to <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.encodeHTML">jQuery.sap.encodeHTML</a></p>
         * @param {any} sText <p>the text to escape</p>
         * @param {boolean} bLineBreaks <p>Whether to convert line breaks into <br> tags</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeEscaped(sText: any, bLineBreaks: boolean): sap.ui.core.RenderManager;
        /**
         * <p>Writes either an &lt;img&gt; tag for normal URI or a &lt;span&gt; tag with needed properties for an icon URI.</p><p>Additional classes and attributes can be added to the tag with the second and third parameter. All of the given attributes are escaped for security consideration.</p><p>When an &lt;img&gt; tag is rendered, the following two attributes are added by default and can be overwritten with corresponding values in the <code>mAttributes</code> parameter: <ul> <li><code>role: "presentation"</code></Li> <li><code>alt: ""</code></li> </ul></p>
         * @param {sap.ui.core.URI} sURI <p>URI of an image or of an icon registered in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.IconPool">sap.ui.core.IconPool</a></p>
         * @param {any[] | string} aClasses <p>Additional classes that are added to the rendered tag</p>
         * @param {any} mAttributes <p>Additional attributes that will be added to the rendered tag</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeIcon(sURI: sap.ui.core.URI, aClasses?: any[] | string, mAttributes?: any): sap.ui.core.RenderManager;
        /**
         * <p>Writes and flushes the style collection</p>
         * @returns sap.ui.core.RenderManager <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        writeStyles(): sap.ui.core.RenderManager;
      }
      /**
       * <p>The ScrollBar control can be used for virtual scrolling of a certain area. This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.</p>
       */
      export class ScrollBar extends sap.ui.core.Control {
        /**
         * <p>Constructor for a new ScrollBar.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="scroll" href="#/api/sap.ui.core.ScrollBar/events/scroll">scroll</a> event of this <code>sap.ui.core.ScrollBar</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.ScrollBar</code> itself.</p><p>Scroll event.</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code> itself</p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachScroll(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ScrollBar;
        /**
         * <p>Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.</p>
         * @param {string} oOwnerDomRef <p>Dom ref of the control that uses the scrollbar</p>
         */
        bind(oOwnerDomRef: string): void;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="scroll" href="#/api/sap.ui.core.ScrollBar/events/scroll">scroll</a> event of this <code>sap.ui.core.ScrollBar</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachScroll(fnFunction: Function, oListener?: any): sap.ui.core.ScrollBar;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="scroll" href="#/api/sap.ui.core.ScrollBar/events/scroll">scroll</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireScroll(mParameters?: any): sap.ui.core.ScrollBar;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentSize" href="#/api/sap.ui.core.ScrollBar/methods/getContentSize">contentSize</a>.</p><p>Size of the scrollable content (in pixels).</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>contentSize</code></p>
         */
        getContentSize(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollPosition" href="#/api/sap.ui.core.ScrollBar/methods/getScrollPosition">scrollPosition</a>.</p><p>Scroll position in steps or pixels.</p>
         * @returns number <p>Value of property <code>scrollPosition</code></p>
         */
        getScrollPosition(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.ui.core.ScrollBar/methods/getSize">size</a>.</p><p>Size of the Scrollbar (in pixels).</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>size</code></p>
         */
        getSize(): sap.ui.core.CSSSize;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSteps" href="#/api/sap.ui.core.ScrollBar/methods/getSteps">steps</a>.</p><p>Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.</p>
         * @returns number <p>Value of property <code>steps</code></p>
         */
        getSteps(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVertical" href="#/api/sap.ui.core.ScrollBar/methods/getVertical">vertical</a>.</p><p>Orientation. Defines if the Scrollbar is vertical or horizontal.</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>vertical</code></p>
         */
        getVertical(): boolean;
        /**
         * <p>Page Down is used to scroll one page forward.</p>
         */
        pageDown(): void;
        /**
         * <p>Page Up is used to scroll one page back.</p>
         */
        pageUp(): void;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContentSize" href="#/api/sap.ui.core.ScrollBar/methods/getContentSize">contentSize</a>.</p><p>Size of the scrollable content (in pixels).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sContentSize <p>New value for property <code>contentSize</code></p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setContentSize(sContentSize: sap.ui.core.CSSSize): sap.ui.core.ScrollBar;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getScrollPosition" href="#/api/sap.ui.core.ScrollBar/methods/getScrollPosition">scrollPosition</a>.</p><p>Scroll position in steps or pixels.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {number} iScrollPosition <p>New value for property <code>scrollPosition</code></p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setScrollPosition(iScrollPosition: number): sap.ui.core.ScrollBar;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSize" href="#/api/sap.ui.core.ScrollBar/methods/getSize">size</a>.</p><p>Size of the Scrollbar (in pixels).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sSize <p>New value for property <code>size</code></p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSize(sSize: sap.ui.core.CSSSize): sap.ui.core.ScrollBar;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSteps" href="#/api/sap.ui.core.ScrollBar/methods/getSteps">steps</a>.</p><p>Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {number} iSteps <p>New value for property <code>steps</code></p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setSteps(iSteps: number): sap.ui.core.ScrollBar;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getVertical" href="#/api/sap.ui.core.ScrollBar/methods/getVertical">vertical</a>.</p><p>Orientation. Defines if the Scrollbar is vertical or horizontal.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bVertical <p>New value for property <code>vertical</code></p>
         * @returns sap.ui.core.ScrollBar <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setVertical(bVertical: boolean): sap.ui.core.ScrollBar;
        /**
         * <p>Unbinds the mouse wheel scroll event of the control that has the scrollbar</p>
         * @param {string} oOwnerDomRef <p>Dom ref of the Control that uses the scrollbar</p>
         */
        unbind(oOwnerDomRef: string): void;
      }
      /**
       * <p><p>Actions are: Click on track, button, drag of thumb, or mouse wheel click.</p></p>
       */
      export enum ScrollBarAction {
        /**
         * <p>Scrolling done by dragging the scroll bar's paint thumb</p>
         */
        Drag = "Drag",
        /**
         * <p>Scrolling done by mouse wheel</p>
         */
        MouseWheel = "MouseWheel",
        /**
         * <p>Range scrolling caused by clicking track area or using page up or page down key.</p>
         */
        Page = "Page",
        /**
         * <p>Single step scrolling caused by clicking an arrow button or arrow key.</p>
         */
        Step = "Step",
      }
      /**
       * <p><p>Defines the possible values for horizontal and vertical scrolling behavior.</p></p>
       */
      export enum Scrolling {
        /**
         * <p>A scroll bar is shown if the content requires more space than the given space (rectangle) provides.</p>
         */
        Auto = "Auto",
        /**
         * <p>No scroll bar is shown, and the content stays in the given rectangle.</p>
         */
        Hidden = "Hidden",
        /**
         * <p>No scroll bar provided even if the content is larger than the available space.</p>
         */
        None = "None",
        /**
         * <p>A scroll bar is always shown even if the space is large enough for the current content.</p>
         */
        Scroll = "Scroll",
      }
      /**
       * <p>An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element, sap.ui.base.EventProvider, and sap.ui.base.Object.</p>
       */
      export class SeparatorItem extends sap.ui.core.Item {
        /**
         * <p>Constructor for a new SeparatorItem.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
      }
      /**
       * <p><p>Sort order of a column.</p></p>
       */
      export enum SortOrder {
        /**
         * <p>Sorting is done in ascending order.</p>
         */
        Ascending = "Ascending",
        /**
         * <p>Sorting is done in descending order.</p>
         */
        Descending = "Descending",
        /**
         * <p>Sorting is not applied.</p>
         */
        None = "None",
      }
      /**
       * <p><p>Configuration options for text alignments.</p></p>
       */
      export enum TextAlign {
        /**
         * <p>Locale-specific positioning at the beginning of the line.</p>
         */
        Begin = "Begin",
        /**
         * <p>Centered text alignment.</p>
         */
        Center = "Center",
        /**
         * <p>Locale-specific positioning at the end of the line.</p>
         */
        End = "End",
        /**
         * <p>Sets no text align, so the browser default is used.</p>
         */
        Initial = "Initial",
        /**
         * <p>Hard option for left alignment.</p>
         */
        Left = "Left",
        /**
         * <p>Hard option for right alignment.</p>
         */
        Right = "Right",
      }
      /**
       * <p><p>Configuration options for the direction of texts.</p></p>
       */
      export enum TextDirection {
        /**
         * <p>Inherits the direction from its parent control/container.</p>
         */
        Inherit = "Inherit",
        /**
         * <p>Specifies left-to-right text direction.</p>
         */
        LTR = "LTR",
        /**
         * <p>Specifies right-to-left text direction.</p>
         */
        RTL = "RTL",
      }
      /**
       * <p>Represents a title element that can be used for aggregation with other controls.</p>
       */
      export class Title extends sap.ui.core.Element {
        /**
         * <p>Constructor for a new Title.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.ui.core.Title/methods/getEmphasized">emphasized</a>.</p><p>If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.</p><p>Default value is <code>false</code>.</p>
         * @returns boolean <p>Value of property <code>emphasized</code></p>
         */
        getEmphasized(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.Title/methods/getIcon">icon</a>.</p><p>Defines the URL for icon display</p>
         * @returns sap.ui.core.URI <p>Value of property <code>icon</code></p>
         */
        getIcon(): sap.ui.core.URI;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.ui.core.Title/methods/getLevel">level</a>.</p><p>Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.</p><p>Currently not all controls using the Title.control supporting this property.</p><p>Default value is <code>Auto</code>.</p>
         * @returns sap.ui.core.TitleLevel <p>Value of property <code>level</code></p>
         */
        getLevel(): sap.ui.core.TitleLevel;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Title/methods/getText">text</a>.</p><p>Defines the title text</p>
         * @returns string <p>Value of property <code>text</code></p>
         */
        getText(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEmphasized" href="#/api/sap.ui.core.Title/methods/getEmphasized">emphasized</a>.</p><p>If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
         * @param {boolean} bEmphasized <p>New value for property <code>emphasized</code></p>
         * @returns sap.ui.core.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setEmphasized(bEmphasized: boolean): sap.ui.core.Title;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.Title/methods/getIcon">icon</a>.</p><p>Defines the URL for icon display</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.URI} sIcon <p>New value for property <code>icon</code></p>
         * @returns sap.ui.core.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setIcon(sIcon: sap.ui.core.URI): sap.ui.core.Title;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getLevel" href="#/api/sap.ui.core.Title/methods/getLevel">level</a>.</p><p>Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.</p><p>Currently not all controls using the Title.control supporting this property.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Auto</code>.</p>
         * @param {sap.ui.core.TitleLevel} sLevel <p>New value for property <code>level</code></p>
         * @returns sap.ui.core.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setLevel(sLevel: sap.ui.core.TitleLevel): sap.ui.core.Title;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.Title/methods/getText">text</a>.</p><p>Defines the title text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sText <p>New value for property <code>text</code></p>
         * @returns sap.ui.core.Title <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setText(sText: string): sap.ui.core.Title;
      }
      /**
       * <p><p>Level of a title.</p></p>
       */
      export enum TitleLevel {
        /**
         * <p>The level of the title is choosen by the control rendering the title.</p>
         */
        Auto = "Auto",
        /**
         * <p>The Title is of level 1.</p>
         */
        H1 = "H1",
        /**
         * <p>The Title is of level 2</p>
         */
        H2 = "H2",
        /**
         * <p>The Title is of level 3</p>
         */
        H3 = "H3",
        /**
         * <p>The Title is of level 4</p>
         */
        H4 = "H4",
        /**
         * <p>The Title is of level 5</p>
         */
        H5 = "H5",
        /**
         * <p>The Title is of level 6</p>
         */
        H6 = "H6",
      }
      /**
       * <p><p>Marker interface for toolbar controls.</p></p>
       */
      export interface Toolbar {
      }
      /**
       * <p>Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main "text" property.</p>
       */
      export abstract class TooltipBase extends sap.ui.core.Control {
        /**
         * <p>Constructor for a new TooltipBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.TooltipBase/events/closed">closed</a> event of this <code>sap.ui.core.TooltipBase</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.TooltipBase</code> itself.</p><p>This event is fired when the Tooltip has been closed</p>
         * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
         * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
         * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.TooltipBase</code> itself</p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        attachClosed(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.TooltipBase;
        /**
         * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.TooltipBase/events/closed">closed</a> event of this <code>sap.ui.core.TooltipBase</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
         * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
         * @param {any} oListener <p>Context object on which the given function had to be called</p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        detachClosed(fnFunction: Function, oListener?: any): sap.ui.core.TooltipBase;
        /**
         * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="closed" href="#/api/sap.ui.core.TooltipBase/events/closed">closed</a> to attached listeners.</p>
         * @param {any} mParameters <p>Parameters to pass along with the event</p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        protected fireClosed(mParameters?: any): sap.ui.core.TooltipBase;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAtPosition" href="#/api/sap.ui.core.TooltipBase/methods/getAtPosition">atPosition</a>.</p><p>Optional. At position defines which position on the target control to align the positioned tooltip.</p><p>Default value is <code>begin bottom</code>.</p>
         * @returns sap.ui.core.Dock <p>Value of property <code>atPosition</code></p>
         */
        getAtPosition(): sap.ui.core.Dock;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseDelay" href="#/api/sap.ui.core.TooltipBase/methods/getCloseDelay">closeDelay</a>.</p><p>Closing delay of the tooltip in milliseconds</p><p>Default value is <code>100</code>.</p>
         * @returns number <p>Value of property <code>closeDelay</code></p>
         */
        getCloseDelay(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseDuration" href="#/api/sap.ui.core.TooltipBase/methods/getCloseDuration">closeDuration</a>.</p><p>Optional. Close Duration in milliseconds.</p><p>Default value is <code>200</code>.</p>
         * @returns number <p>Value of property <code>closeDuration</code></p>
         */
        getCloseDuration(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCollision" href="#/api/sap.ui.core.TooltipBase/methods/getCollision">collision</a>.</p><p>Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.</p><p>Default value is <code>flip</code>.</p>
         * @returns sap.ui.core.Collision <p>Value of property <code>collision</code></p>
         */
        getCollision(): sap.ui.core.Collision;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMyPosition" href="#/api/sap.ui.core.TooltipBase/methods/getMyPosition">myPosition</a>.</p><p>Optional. My position defines which position on the extended tooltip being positioned to align with the target control.</p><p>Default value is <code>begin top</code>.</p>
         * @returns sap.ui.core.Dock <p>Value of property <code>myPosition</code></p>
         */
        getMyPosition(): sap.ui.core.Dock;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffset" href="#/api/sap.ui.core.TooltipBase/methods/getOffset">offset</a>.</p><p>Optional. Offset adds these left-top values to the calculated position. Example: "10 3".</p><p>Default value is <code>10 3</code>.</p>
         * @returns string <p>Value of property <code>offset</code></p>
         */
        getOffset(): string;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenDelay" href="#/api/sap.ui.core.TooltipBase/methods/getOpenDelay">openDelay</a>.</p><p>Opening delay of the tooltip in milliseconds</p><p>Default value is <code>500</code>.</p>
         * @returns number <p>Value of property <code>openDelay</code></p>
         */
        getOpenDelay(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenDuration" href="#/api/sap.ui.core.TooltipBase/methods/getOpenDuration">openDuration</a>.</p><p>Optional. Open Duration in milliseconds.</p><p>Default value is <code>200</code>.</p>
         * @returns number <p>Value of property <code>openDuration</code></p>
         */
        getOpenDuration(): number;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.TooltipBase/methods/getText">text</a>.</p><p>The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.</p><p>Default value is <code>empty string</code>.</p>
         * @returns string <p>Value of property <code>text</code></p>
         */
        getText(): string;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAtPosition" href="#/api/sap.ui.core.TooltipBase/methods/getAtPosition">atPosition</a>.</p><p>Optional. At position defines which position on the target control to align the positioned tooltip.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>begin bottom</code>.</p>
         * @param {sap.ui.core.Dock} sAtPosition <p>New value for property <code>atPosition</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setAtPosition(sAtPosition: sap.ui.core.Dock): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseDelay" href="#/api/sap.ui.core.TooltipBase/methods/getCloseDelay">closeDelay</a>.</p><p>Closing delay of the tooltip in milliseconds</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100</code>.</p>
         * @param {number} iCloseDelay <p>New value for property <code>closeDelay</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setCloseDelay(iCloseDelay: number): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCloseDuration" href="#/api/sap.ui.core.TooltipBase/methods/getCloseDuration">closeDuration</a>.</p><p>Optional. Close Duration in milliseconds.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>200</code>.</p>
         * @param {number} iCloseDuration <p>New value for property <code>closeDuration</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setCloseDuration(iCloseDuration: number): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCollision" href="#/api/sap.ui.core.TooltipBase/methods/getCollision">collision</a>.</p><p>Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>flip</code>.</p>
         * @param {sap.ui.core.Collision} sCollision <p>New value for property <code>collision</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setCollision(sCollision: sap.ui.core.Collision): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMyPosition" href="#/api/sap.ui.core.TooltipBase/methods/getMyPosition">myPosition</a>.</p><p>Optional. My position defines which position on the extended tooltip being positioned to align with the target control.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>begin top</code>.</p>
         * @param {sap.ui.core.Dock} sMyPosition <p>New value for property <code>myPosition</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setMyPosition(sMyPosition: sap.ui.core.Dock): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOffset" href="#/api/sap.ui.core.TooltipBase/methods/getOffset">offset</a>.</p><p>Optional. Offset adds these left-top values to the calculated position. Example: "10 3".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>10 3</code>.</p>
         * @param {string} sOffset <p>New value for property <code>offset</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setOffset(sOffset: string): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenDelay" href="#/api/sap.ui.core.TooltipBase/methods/getOpenDelay">openDelay</a>.</p><p>Opening delay of the tooltip in milliseconds</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>500</code>.</p>
         * @param {number} iOpenDelay <p>New value for property <code>openDelay</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setOpenDelay(iOpenDelay: number): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getOpenDuration" href="#/api/sap.ui.core.TooltipBase/methods/getOpenDuration">openDuration</a>.</p><p>Optional. Open Duration in milliseconds.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>200</code>.</p>
         * @param {number} iOpenDuration <p>New value for property <code>openDuration</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setOpenDuration(iOpenDuration: number): sap.ui.core.TooltipBase;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.TooltipBase/methods/getText">text</a>.</p><p>The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>empty string</code>.</p>
         * @param {string} sText <p>New value for property <code>text</code></p>
         * @returns sap.ui.core.TooltipBase <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setText(sText: string): sap.ui.core.TooltipBase;
      }
      /**
       * <p>An area in a page that hosts a tree of UI elements.</p><p><code>UIArea</code>s are fully managed by the UI5 <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core">Core</a>. They cannot be created by the application but are implicitly created by the Core when controls are placed via <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/placeAt">Control#placeAt</a> at a new DOM element for which no <code>UIArea</code> exists yet.</p><p><code>UIArea</code>s are essential for the rendering of controls. Controls get rendered only when they are directly or indirectly contained in the <code>content</code> aggregation of a <code>UIArea</code>. <code>Control#placeAt</code> ensures that there is a <code>UIArea</code> with the given ID and adds the control to the <code>content</code> aggregation of this <code>UIArea</code>. Whenever controls become invalidated, the corresponding <code>UIArea</code> remembers this and takes care of the re-rendering of the control.</p><p>Additionally, <code>UIArea</code>s play an important role in the event handling of controls. They register for a standard set of browser events. For each incoming event, they identify the control to which the target of the event belongs to and dispatch the event to that control. This dispatching reduces the number of event handlers in a page.</p><p><code>UIArea</code>s also act as a data binding root for their contained controls. Whenever a model is attached to or detached from the Core, this change is propagated to all <code>UIAreas</code> which in turn propagate it further down to their aggregated children, etc.</p><p>The special aggregation named <code>dependents</code> also participates in the databinding, but its content is not rendered by the <code>UIArea</code>. It can be used for popups or similar controls that are not contained in the normal control tree, but nevertheless should receive model or binding context updates.</p>
       */
      export class UIArea extends sap.ui.base.ManagedObject {
        /**
         * <p>Enabled or disables logging of certain event types.</p><p>The event handling code of class UIArea logs all processed browser events with log level DEBUG. Only some events that occur too frequently are suppressed by default: <code>mousemove</code>, <code>mouseover</code>, <code>mouseout</code>, <code>scroll</code>, <code>dragover</code>, <code>dragenter</code> and <code>dragleave</code>.</p><p>With this method, logging can be disabled for further event types or it can be enabled for some or all of the event types listed above. The parameter <code>mEventTypes</code> is a map of boolean values keyed by event type names. When the value for an event type coerces to true, events of that type won't be logged.</p>
         * @param {any} mEventTypes <p>Map of logging flags keyed by event types</p>
         * @returns any <p>A copy of the resulting event logging configuration (not normalized)</p>
         */
        static configureEventLogging(mEventTypes?: any): any;
        /**
         * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p>
         * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addContent(oContent: sap.ui.core.Control): sap.ui.core.UIArea;
        /**
         * <p>Adds some dependent to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p>
         * @param {sap.ui.core.Control} oDependent <p>The dependent to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addDependent(oDependent: sap.ui.core.Control): sap.ui.core.UIArea;
        /**
         * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyContent(): sap.ui.core.UIArea;
        /**
         * <p>Destroys all the dependents in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyDependents(): sap.ui.core.UIArea;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p><p>Content that is displayed in the UIArea.</p>
         * @returns sap.ui.core.Control[] 
         */
        getContent(): sap.ui.core.Control[];
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p><p>Dependent objects whose lifecycle is bound to the UIArea but which are not automatically rendered by the UIArea.</p>
         * @returns sap.ui.core.Control[] 
         */
        getDependents(): sap.ui.core.Control[];
        /**
         * <p>Returns the parent in the eventing hierarchy of this object.</p><p>Per default this returns null, but if eventing is used in objects, which are hierarchically structured, this can be overwritten to make the object hierarchy visible to the eventing and enables the use of event bubbling within this object hierarchy.</p>
         * @returns sap.ui.base.EventProvider <p>The parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns the parent managed object as new eventing parent to enable control event bubbling or <code>null</code> if this object hasn't been added to a parent yet.</p>
         * @returns sap.ui.base.EventProvider <p>the parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns the Core's event provider as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events.</p>
         * @returns sap.ui.base.EventProvider <p>the parent event provider</p>
         */
        protected getEventingParent(): sap.ui.base.EventProvider;
        /**
         * <p>Returns the object's ID.</p><p>There is no guarantee or check or requirement for the ID of a <code>ManagedObject</code> to be unique. Only some subclasses of <code>ManagedObject</code> introduce this as a requirement, e.g. <code>Component</code> or <code>Element</code>. All elements existing in the same window at the same time must have different IDs. A new element will fail during construction when the given ID is already used by another element. But there might be a component with the same ID as an element or another <code>ManagedObject</code>.</p><p>For the same reason, there is no general lookup for <code>ManagedObject</code>s via their ID. Only for subclasses that enforce unique IDs, there might be lookup mechanisms (e.g. <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/byId">sap.ui.getCore().byId()</a> for elements).</p>
         * @returns string <p>The objects's ID.</p>
         */
        getId(): string;
        /**
         * <p>Returns this <code>UIArea</code>'s id (as determined from provided RootNode).</p>
         * @returns string|null <p>id of this UIArea</p>
         */
        getId(): string | null;
        /**
         * <p>Returns the Root Node hosting this instance of <code>UIArea</code>.</p>
         * @returns HTMLElement <p>the Root Node hosting this instance of <code>UIArea</code>.</p>
         */
        getRootNode(): HTMLElement;
        /**
         * <p>Returns this UI area. Needed to stop recursive calls from an element to its parent.</p>
         * @returns sap.ui.core.UIArea <p>this</p>
         */
        protected getUIArea(): sap.ui.core.UIArea;
        /**
         * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfContent(oContent: sap.ui.core.Control): number;
        /**
         * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.Control} oDependent <p>The dependent whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfDependent(oDependent: sap.ui.core.Control): number;
        /**
         * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p>
         * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.ui.core.UIArea;
        /**
         * <p>Inserts a dependent into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p>
         * @param {sap.ui.core.Control} oDependent <p>The dependent to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the dependent should be inserted at; for a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value greater than the current size of the aggregation, the dependent is inserted at the last position</p>
         * @returns sap.ui.core.UIArea <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertDependent(oDependent: sap.ui.core.Control, iIndex: number): sap.ui.core.UIArea;
        /**
         * <p>This triggers rerendering of itself and its children.</p><p>As <code>sap.ui.base.ManagedObject</code> "bubbles up" the invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.</p>
         */
        protected invalidate(): void;
        /**
         * <p>Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of the UIAreas content.</p>
         */
        protected invalidate(): void;
        /**
         * <p>Checks whether the control is still valid (is in the DOM)</p>
         * @returns boolean <p>True if the control is still in the active DOM</p>
         */
        protected isActive(): boolean;
        /**
         * <p>Returns whether rerendering is currently suppressed on this ManagedObject</p>
         * @returns undefined <p>boolean</p>
         */
        protected isInvalidateSuppressed(): undefined;
        /**
         * <p>Returns whether rerendering is currently suppressed on this UIArea</p>
         * @returns undefined <p>boolean</p>
         */
        protected isInvalidateSuppressed(): undefined;
        /**
         * <p>Returns the locked state of the <code>sap.ui.core.UIArea</code></p>
         * @returns boolean <p>locked state</p>
         */
        isLocked(): boolean;
        /**
         * <p>Locks this instance of UIArea.</p><p>Rerendering and eventing will not be active as long as no <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="unlock" href="#/api/sap.ui.core.UIArea/methods/unlock">#unlock</a> is called.</p>
         */
        lock(): void;
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllDependents(): sap.ui.core.Control[];
        /**
         * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.UIArea/methods/getContent">content</a>.</p>
         * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
         * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
         */
        removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
        /**
         * <p>Removes a dependent from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDependents" href="#/api/sap.ui.core.UIArea/methods/getDependents">dependents</a>.</p>
         * @param {number | string | sap.ui.core.Control} vDependent <p>The dependent to remove or its index or id</p>
         * @returns sap.ui.core.Control <p>The removed dependent or <code>null</code></p>
         */
        removeDependent(vDependent: number | string | sap.ui.core.Control): sap.ui.core.Control;
        /**
         * <p>Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that will be used as Id for this instance of <code>UIArea</code>.</p>
         * @param {any} oRootNode <p>the hosting Dom Ref for this instance of <code>UIArea</code>.</p>
         */
        setRootNode(oRootNode: any): void;
        /**
         * <p>Un-Locks this instance of UIArea.</p><p>Rerendering and eventing will now be enabled again.</p>
         */
        unlock(): void;
      }
      /**
       * <p>Base Class for UIComponent.</p><p>If you are extending a UIComponent make sure you read the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.UIComponent.extend" href="#/api/sap.ui.core.UIComponent/methods/sap.ui.core.UIComponent.extend">#.extend</a> documentation since the metadata is special.</p>
       */
      export abstract class UIComponent extends sap.ui.core.Component {
        /**
         * <p>Returns the reference to the router instance. The passed controller or view has to be created in the context of a UIComponent to return the router instance. Otherwise this function will return undefined. You may define the routerClass property in the config section of the routing to make the Component create your router extension. Example: routing: { config: { routerClass : myAppNamespace.MyRouterClass ... } ...</p>
         * @param {sap.ui.core.mvc.View | sap.ui.core.mvc.Controller} oControllerOrView <p>either a view or controller</p>
         * @returns sap.ui.core.routing.Router <p>the router instance</p>
         */
        static getRouterFor(oControllerOrView: sap.ui.core.mvc.View | sap.ui.core.mvc.Controller): sap.ui.core.routing.Router;
        /**
         * <p>Creates and initializes a new UIComponent with the given <code>sId</code> and settings.</p><p>The set of allowed entries in the <code>mSettings</code> object depends on the concrete subclass and is described there. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component">sap.ui.core.Component</a> for a general description of this argument.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>Optional ID for the new control; generated automatically if no non-empty ID is given; Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not</p>
         * @param {any} mSettings <p>Optional map/JSON-object with initial settings for the new component instance</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Returns an element by its ID in the context of the component.</p>
         * @param {string} sId <p>Component local ID of the element</p>
         * @returns sap.ui.core.Element <p>element by its ID or <code>undefined</code></p>
         */
        byId(sId: string): sap.ui.core.Element;
        /**
         * <p>Hook method to create the content (UI Control Tree) of this component.</p><p>The default implementation in this class reads the name (and optionally type) of a root view from the descriptor for this component (path <code>/sap.ui5/rootView</code>) or, for backward compatibility, just the name from static component metadata (property <code>rootView</code>). When no type is specified, it defaults to XML. The method then calls the <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.view">view factory</a> to instantiate the root view and returns the result.</p><p>When there is no root view configuration, <code>null</code> will be returned.</p><p>This method can be overwritten by subclasses if the default implementation doesn't fit their needs. Subclasses are not limited to views as return type but may return any control, but only a single control (can be the root of a larger control tree, however).</p>
         * @returns sap.ui.core.mvc.View|sap.ui.core.Control <p>Root control of the UI tree or <code>null</code> if none is configured</p>
         */
        createContent(): sap.ui.core.mvc.View | sap.ui.core.Control;
        /**
         * <p>Convert the given component local element ID to a globally unique ID by prefixing it with the component ID.</p>
         * @param {string} sId <p>Component local ID of the element</p>
         * @returns string <p>prefixed id</p>
         */
        createId(sId: string): string;
        /**
         * <p>A method to be implemented by UIComponents, returning the flag whether to prefix the IDs of controls automatically or not if the controls are created inside the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/createContent">sap.ui.core.UIComponent#createContent</a> function. By default this feature is not activated.</p><p>You can overwrite this function and return <code>true</code> to activate the automatic prefixing. In addition the default behavior can be configured in the manifest by specifying the entry <code>sap.ui5/autoPrefixId</code>.</p>
         * @returns boolean <p>true, if the Controls IDs should be prefixed automatically</p>
         */
        protected getAutoPrefixId(): boolean;
        /**
         * <p>Returns the local ID of an element by removing the component ID prefix or <code>null</code> if the ID does not contain a prefix.</p>
         * @param {string} sId <p>Prefixed ID</p>
         * @returns string <p>ID without prefix or <code>null</code></p>
         */
        getLocalId(sId: string): string;
        /**
         * <p>Returns the content of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/createContent">sap.ui.core.UIComponent#createContent</a>. If you specified a <code>rootView</code> in your metadata or in the descriptor file (manifest.json), you will get the instance of the root view. This getter will only return something if the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/init">sap.ui.core.UIComponent#init</a> function was invoked. If <code>createContent</code> is not implemented, and there is no root view, it will return <code>null</code>. Here is an example: <code> <pre>
                 var MyExtension = UIComponent.extend("my.Component", {
                      metadata: {
                           rootView: "my.View"
                      },
                      init: function () {
                           this.getRootControl(); // returns null
                           UIComponent.prototype.init.apply(this, arguments);
                           this.getRootControl(); // returns the view "my.View"
                      }
                 });
            </pre> </code></p>
         * @returns sap.ui.core.Control <p>the control created by <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/createContent">sap.ui.core.UIComponent#createContent</a></p>
         */
        protected getRootControl(): sap.ui.core.Control;
        /**
         * <p>Returns the reference to the router instance which has been created by the UIComponent once the routes in the routing metadata has been defined.</p>
         * @returns sap.ui.core.routing.Router <p>the router instance</p>
         */
        getRouter(): sap.ui.core.routing.Router;
        /**
         * <p>Returns the reference to the Targets instance which has been created by the UIComponent once the targets in the routing metadata has been defined. If routes have been defined, it will be the Targets instance created and used by the router.</p>
         * @returns sap.ui.core.routing.Targets <p>the targets instance</p>
         */
        getTargets(): sap.ui.core.routing.Targets;
        /**
         * <p>Returns the reference to the UIArea of the container.</p>
         * @returns sap.ui.core.UIArea <p>reference to the UIArea of the container</p>
         */
        getUIArea(): sap.ui.core.UIArea;
        /**
         * <p>Initializes the Component instance after creation.</p><p>Applications must not call this hook method directly, it is called by the framework while the constructor of a Component is executed.</p><p>Subclasses of Component should override this hook to implement any necessary initialization.</p>
         */
        protected init(): void;
        /**
         * <p>Initializes the Component instance after creation.</p><p>Applications must not call this hook method directly, it is called by the framework while the constructor of a Component is executed.</p><p>Subclasses of Component should override this hook to implement any necessary initialization. <b>When overriding this function make sure to invoke the init function of the UIComponent as well!</b></p>
         */
        protected init(): void;
        /**
         * <p>Function is called when the rendering of the ComponentContainer is completed.</p><p>Applications must not call this hook method directly, it is called from ComponentContainer.</p><p>Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.</p>
         */
        protected onAfterRendering(): void;
        /**
         * <p>Function is called when the rendering of the ComponentContainer is started.</p><p>Applications must not call this hook method directly, it is called from ComponentContainer.</p><p>Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.</p>
         */
        protected onBeforeRendering(): void;
        /**
         * <p>Renders the root control of the UIComponent.</p>
         * @param {sap.ui.core.RenderManager} oRenderManager <p>a RenderManager instance</p>
         */
        render(oRenderManager: sap.ui.core.RenderManager): void;
        /**
         * <p>Sets the reference to the ComponentContainer - later required for the determination of the UIArea for the UIComponent.</p>
         * @param {sap.ui.core.ComponentContainer} oContainer <p>reference to a ComponentContainer</p>
         * @returns sap.ui.core.UIComponent <p>reference to this instance to allow method chaining</p>
         */
        setContainer(oContainer: sap.ui.core.ComponentContainer): sap.ui.core.UIComponent;
      }
      /**
       * <p><p>Marker for the correctness of the current value.</p></p>
       */
      export enum ValueState {
        /**
         * <p>State is not valid.</p>
         */
        Error = "Error",
        /**
         * <p>State is informative.</p>
         */
        Information = "Information",
        /**
         * <p>State is not specified.</p>
         */
        None = "None",
        /**
         * <p>State is valid.</p>
         */
        Success = "Success",
        /**
         * <p>State is valid but with a warning.</p>
         */
        Warning = "Warning",
      }
      /**
       * <p>Allows to add multiple LayoutData to one control in case that an easy switch of layouts (e.g. in a Form) is needed.</p>
       */
      export class VariantLayoutData extends sap.ui.core.LayoutData {
        /**
         * <p>Constructor for a new VariantLayoutData.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
         * @param {any} mSettings <p>initial settings for the new control</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Adds some multipleLayoutData to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p>
         * @param {sap.ui.core.LayoutData} oMultipleLayoutData <p>The multipleLayoutData to add; if empty, nothing is inserted</p>
         * @returns sap.ui.core.VariantLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        addMultipleLayoutData(oMultipleLayoutData: sap.ui.core.LayoutData): sap.ui.core.VariantLayoutData;
        /**
         * <p>Destroys all the multipleLayoutData in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p>
         * @returns sap.ui.core.VariantLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyMultipleLayoutData(): sap.ui.core.VariantLayoutData;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p><p>Allows multiple LayoutData.</p>
         * @returns sap.ui.core.LayoutData[] 
         */
        getMultipleLayoutData(): sap.ui.core.LayoutData[];
        /**
         * <p>Checks for the provided <code>sap.ui.core.LayoutData</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>. and returns its index if found or -1 otherwise.</p>
         * @param {sap.ui.core.LayoutData} oMultipleLayoutData <p>The multipleLayoutData whose index is looked for</p>
         * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
         */
        indexOfMultipleLayoutData(oMultipleLayoutData: sap.ui.core.LayoutData): number;
        /**
         * <p>Inserts a multipleLayoutData into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p>
         * @param {sap.ui.core.LayoutData} oMultipleLayoutData <p>The multipleLayoutData to insert; if empty, nothing is inserted</p>
         * @param {number} iIndex <p>The <code>0</code>-based index the multipleLayoutData should be inserted at; for a negative value of <code>iIndex</code>, the multipleLayoutData is inserted at position 0; for a value greater than the current size of the aggregation, the multipleLayoutData is inserted at the last position</p>
         * @returns sap.ui.core.VariantLayoutData <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        insertMultipleLayoutData(oMultipleLayoutData: sap.ui.core.LayoutData, iIndex: number): sap.ui.core.VariantLayoutData;
        /**
         * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
         * @returns sap.ui.core.LayoutData[] <p>An array of the removed elements (might be empty)</p>
         */
        removeAllMultipleLayoutData(): sap.ui.core.LayoutData[];
        /**
         * <p>Removes a multipleLayoutData from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMultipleLayoutData" href="#/api/sap.ui.core.VariantLayoutData/methods/getMultipleLayoutData">multipleLayoutData</a>.</p>
         * @param {number | string | sap.ui.core.LayoutData} vMultipleLayoutData <p>The multipleLayoutData to remove or its index or id</p>
         * @returns sap.ui.core.LayoutData <p>The removed multipleLayoutData or <code>null</code></p>
         */
        removeMultipleLayoutData(vMultipleLayoutData: number | string | sap.ui.core.LayoutData): sap.ui.core.LayoutData;
      }
      /**
       * <p><p>Configuration options for vertical alignments, for example of a layout cell content within the borders.</p></p>
       */
      export enum VerticalAlign {
        /**
         * <p>Content is aligned at the bottom.</p>
         */
        Bottom = "Bottom",
        /**
         * <p>Content respect the parent's vertical alignment.</p>
         */
        Inherit = "Inherit",
        /**
         * <p>Content is centered vertically .</p>
         */
        Middle = "Middle",
        /**
         * <p>Content is aligned at the top.</p>
         */
        Top = "Top",
      }
      /**
       * <p><p>Configuration options for text wrapping.</p></p>
       */
      export enum Wrapping {
        /**
         * <p>Inserts actual line breaks in the text at the wrap point.</p>
         */
        Hard = "Hard",
        /**
         * <p>The standard browser behavior is considered for wrapping.</p>
         */
        None = "None",
        /**
         * <p>Wrapping shall not be allowed.</p>
         */
        Off = "Off",
        /**
         * <p>The text is actually on the same line but displayed within several lines.</p>
         */
        Soft = "Soft",
      }
      /**
       * <p>Base Class for XMLComposite controls.<br><br><span>Documentation links:</span><ul><li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control">sap.ui.core.Control</a></li><li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Fragment">sap.ui.core.Fragment</a></li></ul></p>
       */
      export abstract class XMLComposite extends sap.ui.core.Control {
        /**
         * <p>XMLComposite is the base class for composite controls that use a XML fragment representation for their visual parts. From a user perspective such controls appear as any other control, but internally the rendering part is added as a fragment. The fragment that is used should appear in the same folder as the control's JS implementation with the file extension <code>.control.xml</code>. The fragment's content can access the interface data from the XMLComposite control via bindings. Currently only aggregations and properties can be used with bindings inside a fragment. The exposed model that is used for internal bindings in the fragment has the default name <code>$this</code>. The name will always start with an <code>$</code>. The metadata of the derived control can define the alias with its metadata. A code example can be found below.</p><p>As XMLComposites compose other controls, they are only invalidated and re-rendered if explicitly defined. Additional metadata for invalidation can be given for properties and aggregation. The default invalidation is <code>"none"</code>. Setting invalidate to <code>true</code> for properties and aggregations sets the complete XMLComposite to invalidate and rerender.</code></p><p>Example: <pre>
        XMLComposite.extend("sap.mylib.MyXMLComposite", {
          metadata : {
            library: "sap.mylib",
            properties : {
              text: { //changing this property will not re-render the XMLComposite
                 type: "string",
                 defaultValue: ""
              },
              title: { //changing this property will re-render the XMLComposite as it defines invalidate: true
                 type: "string",
                 defaultValue: "",
                 invalidate: true
              },
              value: { //changing this property will re-render the XMLComposite as it defines invalidate: true
                 type: "string",
                 defaultValue: "",
                 invalidate: true
              }
            },
            defaultProperty : "text",
            aggregations : {
              items : {
                 type: "sap.ui.core.Control",
                 invalidate: true
              },
              header : {
                 type: "sap.mylib.FancyHeader",
                 multiple : false
              }
            },
            defaultAggregation : "items"
            events: {
              outerEvent : {
                parameters : {
                  opener : "sap.ui.core.Control"
                }
              }
            }
          },
          //alias defaults to "this"
          alias: "mycontrolroot" //inner bindings will use model name $mycontrolroot
          //fragment defaults to {control name}.control.xml in this case sap.mylib.MyXMLComposite.control.xml
          fragment: "sap.mylib.MyXMLCompositeOther.control.xml" //the name of the fragment
        });
        </pre></p><p>Internally the XMLComposite instantiates and initializes the given fragment and stores the resulting control in a hidden aggregation named <code>_content</code>. The fragment should only include one root element.</p><p>Bindings of inner controls to the interface of the XMLComposite can be done with normal binding syntax. Here properties are used as property bindings and aggregations are used as list bindings. Currently it is not possible to bind associations in a fragment.</p><p>Example: <pre>
           &lt;core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core"&gt;
              &lt;m:Text text="{$this&gt;text}" visible="{= ${$this&gt;text} !== ""}" /&gt;
           &lt;/core:FragmentDefinition&gt;
        </pre> <pre>
           &lt;core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core"&gt;
              &lt;m:VBox items="{path:"$this&gt;texts", filters:{path:"text", operator:"Contains", value1:"Text"}, sorter:{path:"text", descending:true}}"&gt;
                  &lt;m:Text text="{$this&gt;text}" /&gt;
              &lt;/m:VBox&gt;
           &lt;/core:FragmentDefinition&gt;
        </pre> <pre>
           &lt;core:FragmentDefinition xmlns:m="sap.m" xmlns:core="sap.ui.core"&gt;
              &lt;m:Button text="Press Me" press="handlePress"/&gt;
           &lt;/core:FragmentDefinition&gt;
        </pre></p><p>All events handled within the fragment will be dispatched to the XMLComposite control. It is recommended to follow this paradigm to allow reuse of a XMLComposite without any dependency to controller code of the current embedding view.</p><p><pre>
           MyXMLComposite.prototype.handlePress = function() {
               this.fireOuterEvent(); // passing on the event to the outer view
           }
        </pre></p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         */
        constructor();
        /**
         * <p>Returns an element by its ID in the context of the XMLComposite.</p><p>May only be used by the implementation of a specific XMLComposite, not by an application using a XMLComposite.</p>
         * @param {string} sId <p>XMLComposite-local ID of the inner element</p>
         * @returns sap.ui.core.Element <p>element by its ID or <code>undefined</code></p>
         */
        protected byId(sId: string): sap.ui.core.Element;
        /**
         * <p>Allows the parent of a control to enhance the aria information during rendering.</p><p>This function is called by the RenderManager's writeAccessibilityState method for the parent of the currently rendered control - if the parent implements it.</p>
         * @param {sap.ui.core.Element} oElement <p>the Control/Element for which aria properties are rendered</p>
         * @param {any} mAriaProps <p>map of aria properties keyed by there name (without prefix "aria-")</p>
         * @returns any <p>map of enhanced aria properties</p>
         */
        protected enhanceAccessibilityState(oElement: sap.ui.core.Element, mAriaProps: any): any;
        /**
         * <p>This method is a hook for the RenderManager that gets called during the rendering of child Controls. It allows to add, remove and update existing accessibility attributes (ARIA) of those controls.</p>
         * @param {sap.ui.core.Control} oElement <p>The Control that gets rendered by the RenderManager</p>
         * @param {any} mAriaProps <p>The mapping of "aria-" prefixed attributes</p>
         */
        protected enhanceAccessibilityState(oElement: sap.ui.core.Control, mAriaProps: any): void;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayBlock" href="#/api/sap.ui.core.XMLComposite/methods/getDisplayBlock">displayBlock</a>.</p><p>Whether the CSS display should be set to "block".</p><p>Default value is <code>true</code>.</p>
         * @returns boolean <p>Value of property <code>displayBlock</code></p>
         */
        getDisplayBlock(): boolean;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.XMLComposite/methods/getHeight">height</a>.</p><p>The height</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * <p>Returns the resource bundle of the resource model</p><p>Sample: this.getResourceBundle().then(function(oBundle) {oBundle.getText(<messagebundle_key>)})</p>
         * @returns any <p>loaded resource bundle or ECMA Script 6 Promise in asynchronous case</p>
         */
        getResourceBundle(): any | Promise<any>;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.XMLComposite/methods/getWidth">width</a>.</p><p>The width</p><p>Default value is <code>100%</code>.</p>
         * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayBlock" href="#/api/sap.ui.core.XMLComposite/methods/getDisplayBlock">displayBlock</a>.</p><p>Whether the CSS display should be set to "block".</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>true</code>.</p>
         * @param {boolean} bDisplayBlock <p>New value for property <code>displayBlock</code></p>
         * @returns sap.ui.core.XMLComposite <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setDisplayBlock(bDisplayBlock: boolean): sap.ui.core.XMLComposite;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.XMLComposite/methods/getHeight">height</a>.</p><p>The height</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
         * @returns sap.ui.core.XMLComposite <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setHeight(sHeight: sap.ui.core.CSSSize): sap.ui.core.XMLComposite;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.XMLComposite/methods/getWidth">width</a>.</p><p>The width</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
         * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
         * @returns sap.ui.core.XMLComposite <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setWidth(sWidth: sap.ui.core.CSSSize): sap.ui.core.XMLComposite;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type that represents non-relative CSS size values.</p><p>This is a subtype of the <code>'&lt;length&gt; type'</code> defined in the CSS specifications. Allowed values are only absolute CSS sizes like &quot;1px&quot; or &quot;2em&quot;. Percentage sizes like &quot;50%&quot; and the special values &quot;auto&quot; and &quot;inherit&quot; are NOT allowed. Mathematical expressions using the CSS3 <code>calc(<i>expression</i>)</code> operator are allowed as long as they do not use percentage sizes.</p><p>Note that CSS might not allow all these values for every CSS property representing a size. So even if a value is accepted by <code>sap.ui.core.AbsoluteCSSSize</code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.</p><p><b>Units</b></p><p>Valid font-relative units are <code>em, ex</code> and <code>rem</code>. Supported absolute units are <code>cm, mm, in, pc, pt</code> and <code>px</code>. Other units are not supported.</p><p><b>Mathematical Expressions</b></p><p>Expressions inside the <code>calc()</code> operator are only roughly checked for validity. Not every value that this type accepts is a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the <a target="_blank" href="http://dev.w3.org/csswg/css-values-3/#calc-syntax">CSS3 Draft specification from 22 April 2015</a>
      <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
      title="Information published on non SAP site" class="sapUISDKExternalLink"/>.</p><p>Noteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise</li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)</li> <li>semantic constraints like type restrictions are not checked</li> </ul></p><p>Future versions of UI5 might check <code>calc()</code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.</p></p>
       */
      export type AbsoluteCSSSize = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>The AppCacheBuster is used to hook into URL relevant functions in jQuery and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp information is fetched from the server and used later on for the URL rewriting.</p></p>
       */
      namespace AppCacheBuster {
        /**
         * <p>Converts the given URL if it matches a URL in the cachebuster index. If not then the same URL will be returned. To prevent URLs from being modified by the application cachebuster you can implement the function <code>sap.ui.core.AppCacheBuster.handleURL</code>.</p>
         * @param {string} sUrl <p>any URL</p>
         * @returns string <p>modified URL when matching the index or unmodified when not</p>
         */
        function convertURL(sUrl: string): string;
        /**
         * <p>Callback function which can be overwritten to programmatically decide whether to rewrite the given URL or not.</p>
         * @param {string} sUrl <p>any URL</p>
         * @returns boolean <p><code>true</code> to rewrite or <code>false</code> to ignore</p>
         */
        function handleURL(sUrl: string): boolean;
        /**
         * <p>Normalizes the given URL and make it absolute.</p>
         * @param {string} sUrl <p>any URL</p>
         * @returns string <p>normalized URL</p>
         */
        function normalizeURL(sUrl: string): string;
        /**
         * <p>Registers an application. Loads the cachebuster index file from this locations. All registered files will be considered by the cachebuster and the URLs will be prefixed with the timestamp of the index file.</p>
         * @param {string} sBaseUrl <p>base URL of an application providing a cachebuster index file</p>
         */
        function register(sBaseUrl: string): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Provides methods to show or hide a waiting animation covering the whole page and blocking user interaction.</p></p>
       */
      export class BusyIndicator {
        /**
         * <p>Registers a handler for the "close" event</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function.</p>
         * @returns sap.ui.core.BusyIndicator <p><code>this</code> to allow method chaining</p>
         */
        static attachClose(fnFunction: Function, oListener?: any): sap.ui.core.BusyIndicator;
        /**
         * <p>Registers a handler for the "open" event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function.</p>
         * @returns sap.ui.core.BusyIndicator <p><code>this</code> to allow method chaining</p>
         */
        static attachOpen(fnFunction: Function, oListener?: any): sap.ui.core.BusyIndicator;
        /**
         * <p>Unregisters a handler for the "close" event</p>
         * @param {Function} fnFunction <p>The callback function to unregister</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.BusyIndicator <p><code>this</code> to allow method chaining</p>
         */
        static detachClose(fnFunction: Function, oListener: any): sap.ui.core.BusyIndicator;
        /**
         * <p>Unregisters a handler for the "open" event</p>
         * @param {Function} fnFunction <p>The callback function to unregister</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.core.BusyIndicator <p><code>this</code> to allow method chaining</p>
         */
        static detachOpen(fnFunction: Function, oListener: any): sap.ui.core.BusyIndicator;
        /**
         * <p>Removes the BusyIndicator from the screen.</p>
         */
        static hide(): void;
        /**
         * <p>Displays the <code>BusyIndicator</code> and starts blocking all user input. This only happens after some delay, and if, after that delay, the <code>BusyIndicator.hide()</code> has not yet been called in the meantime.</p><p>There is a certain default value for the delay, which can be overridden.</p>
         * @param {number} iDelay <p>The delay in milliseconds before opening the <code>BusyIndicator</code>; It is not opened if <code>hide()</code> is called before the delay ends. If no delay (or no valid delay) is given, a delay of 1000 milliseconds is used.</p>
         */
        static show(iDelay?: number): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace BusyIndicatorUtils {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Collision behavior: horizontal/vertical.</p><p>Defines how the position of an element should be adjusted in case it overflows the window in some direction. For both directions this can be "flip", "fit" or "none". If only one behavior is provided it is applied to both directions. Examples: "flip", "fit none".</p></p>
       */
      export type Collision = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace Component {
        /**
         * <p><p>Registry of all <code>Component</code>s that currently exist.</p></p>
         */
        namespace registry {
          /**
           * <p>Number of existing components.</p>
           */
          var size: number;
          /**
           * <p>Return am object with all instances of <code>sap.ui.core.Component</code>, keyed by their ID.</p><p>Each call creates a new snapshot object. Depending on the size of the UI, this operation therefore might be expensive. Consider to use the <code>forEach</code> or <code>filter</code> method instead of executing similar operations on the returned object.</p><p><b>Note</b>: The returned object is created by a call to <code>Object.create(null)</code>, and therefore lacks all methods of <code>Object.prototype</code>, e.g. <code>toString</code> etc.</p>
           * @returns any <p>Object with all components, keyed by their ID</p>
           */
          function all(): any;
          /**
           * <p>Returns an array with components for which the given <code>callback</code> returns a value that coerces to <code>true</code>.</p><p>The expected signature of the callback is <pre>
             function callback(oComponent, sID)
          </pre> where <code>oComponent</code> is the currently visited component instance and <code>sID</code> is the ID of that instance.</p><p>If components are created or destroyed within the <code>callback</code>, then the behavior is not specified. Newly added objects might or might not be visited. When a component is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.</p><p>If a <code>thisArg</code> is given, it will be provided as <code>this</code> context when calling <code>callback</code>. The <code>this</code> value that the implementation of <code>callback</code> sees, depends on the usual resolution mechanism. E.g. when <code>callback</code> was bound to some context object, that object wins over the given <code>thisArg</code>.</p><p>This function returns an array with all components matching the given predicate. The order of the components in the array is not specified and might change between calls (over time and across different versions of UI5).</p>
           * @param {Function} callback <p>predicate against which each Component is tested</p>
           * @param {any} thisArg <p>context object to provide as <code>this</code> in each call of <code>callback</code></p>
           * @returns sap.ui.core.Component[] <p>Array of components matching the predicate; order is undefined and might change in newer versions of UI5</p>
           */
          function filter(callback: Function, thisArg?: any): sap.ui.core.Component[];
          /**
           * <p>Calls the given <code>callback</code> for each Component.</p><p>The expected signature of the callback is <pre>
             function callback(oComponent, sID)
          </pre> where <code>oComponent</code> is the currently visited component instance and <code>sID</code> is the ID of that instance.</p><p>If components are created or destroyed within the <code>callback</code>, then the behavior is not specified. Newly added objects might or might not be visited. When a component is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.</p><p>If a <code>thisArg</code> is given, it will be provided as <code>this</code> context when calling <code>callback</code>. The <code>this</code> value that the implementation of <code>callback</code> sees, depends on the usual resolution mechanism. E.g. when <code>callback</code> was bound to some context object, that object wins over the given <code>thisArg</code>.</p>
           * @param {Function} callback <p>Function to call for each Component</p>
           * @param {any} thisArg <p>Context object to provide as <code>this</code> in each call of <code>callback</code></p>
           */
          function forEach(callback: Function, thisArg?: any): void;
          /**
           * <p>Retrieves a Component by its ID.</p><p>When the ID is <code>null</code> or <code>undefined</code> or when there's no Component with the given ID, then <code>undefined</code> is returned.</p>
           * @param {sap.ui.core.ID} id <p>ID of the Component to retrieve</p>
           * @returns sap.ui.core.Component <p>Component with the given ID or <code>undefined</code></p>
           */
          function get(id: sap.ui.core.ID): sap.ui.core.Component;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type that represents CSS color values.</p><p>Allowed values are CSS hex colors like "#666666" or "#fff", RGB/HSL values like "rgb(0,0,0)" or "hsla(50%,10%,30%,0.5)" as well as CSS color names like "green" and "darkblue" and special values like "inherit" and "transparent".</p><p>The empty string is also allowed and has the same effect as setting no color.</p></p>
       */
      export type CSSColor = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type that represents CSS size values.</p><p>The CSS specifications calls this the <code>'&lt;length&gt; type'</code>. Allowed values are CSS sizes like "1px" or "2em" or "50%". The special values <code>auto</code> and <code>inherit</code> are also accepted as well as mathematical expressions using the CSS3 <code>calc(<i>expression</i>)</code> operator. Furthermore, length units representing a percentage of the current viewport dimensions: width (vw), height (vh), the smaller of the two (vmin), or the larger of the two (vmax) can also be defined as a CSS size.</p><p>Note that CSS does not allow all these values for every CSS property representing a size. E.g. <code>padding-left</code> doesn't allow the value <code>auto</code>. So even if a value is accepted by <code>sap.ui.core.CSSSize</code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.</p><p><b>Units</b></p><p>Valid font-relative units are <code>em, ex</code> and <code>rem</code>. Viewport relative units <code>vw, vh, vmin, vmax</code> are also valid. Supported absolute units are <code>cm, mm, in, pc, pt</code> and <code>px</code>.Other units are not supported yet.</p><p><b>Mathematical Expressions</b></p><p>Expressions inside the <code>calc()</code> operator are only roughly checked for validity. Not every value that this type accepts might be a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the <a target="_blank" href="http://dev.w3.org/csswg/css-values-3/#calc-syntax">CSS3 Draft specification from 22 April 2015</a>
      <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
      title="Information published on non SAP site" class="sapUISDKExternalLink"/>.</p><p>Noteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise</li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)</li> <li>semantic constraints like type restrictions are not checked</li> </ul></p><p>Future versions of UI5 might check <code>calc()</code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.</p></p>
       */
      export type CSSSize = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>This type checks the short hand form of a margin or padding definition.</p><p>E.g. "1px 1px" or up to four CSSSize values are allowed or tHe special keyword <code>inherit</code>.</p></p>
       */
      export type CSSSizeShortHand = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace delegate {
        /**
         * <p>Delegate for the navigation between DOM nodes with the keyboard.</p><p>The <code>ItemNavigation</code> provides keyboard and mouse navigation between DOM nodes representing items. This means that controls rendering a list of items can attach this delegate to get a common keyboard and mouse support to navigate between these items. It is possible to navigate between the items via the arrow keys. If needed, paging using the Page Up and Page Down keys is possible. (To activate call <code>setPageSize</code> with a value &gt; 0.) HOME and END keys are also supported. Focusing an item via mouse also is also supported. For mouse navigation, the <code>mousedown</code> event is used.</p><p>As the <code>ItemNavigation</code> works with DOM nodes, the items and the control area must be provided as DOM references. There is one root DOM reference (set via <code>setRootDomRef</code>). All item DOM references (set via <code>setItemDomRefs</code>) must be places somewhere inside of this root DOM reference. Only focusable items are used for the navigation, meaning disabled items or separator items are just ignored by navigating through the items. In some cases however, it makes sense to put the non-focusable items in the array of the DOM references to keep the indexes stable or like in the calling control. <b>Hint:</b> To make a DOM reference focusable a <code>tabindex</code> of -1 can be set.</p><p><b>Note</b> After re-rendering of the control or changing the DOM nodes of the control, the DOM references of the <code>ItemNavigation</code> must be updated. Then the same item (corresponding to the index) will get the focus.</p><p>The <code>ItemNavigation</code> adjusts the <code>tabindex</code> of all DOM references relating to the current focused item. So if the control containing the items gets the focus (e.g. via tab navigation), it is always the focused items which will be focused.</p><p><b>Note:</b> If the <code>ItemNavigation</code> is nested in another <code>ItemNavigation</code> (e.g. <code>SegmentedButton</code> in <code>Toolbar</code>), the <code>RootDomRef</code> will always have <code>tabindex</code> -1.</p><p>Per default the <code>ItemNavigation</code> cycles over the items. It navigates again to the first item if the Arrow Down or Arrow Right key is pressed while the last item has the focus. It navigates to the last item if arrow up or arrow left is pressed while the first item has the focus. If you want to stop the navigation at the first and last item, call the <code>setCycling</code> method with a value of <code>false</code>.</p><p>It is possible to have multiple columns in the item navigation. If multiple columns are used, the keyboard navigation changes. The Arrow Right and Arrow Left keys will take the user to the next or previous item, and the Arrow Up and Arrow Down keys will navigate the same way but in a vertical direction.</p><p>The <code>ItemNavigation</code> also allows setting a selected index that is used to identify the selected item. Initially, if no other focus is set, the selected item will be the focused one. Note that navigating through the items will not change the selected item, only the focus. (For example a radio group has one selected item.)</p>
         */
        export class ItemNavigation extends sap.ui.base.EventProvider {
          /**
           * <p>Creates an <code>ItemNavigation</code> delegate that can be attached to controls requiring capabilities for keyboard navigation between items.</p>
           * @param {HTMLElement} oDomRef <p>The root DOM reference that includes all items</p>
           * @param {HTMLElement[]} aItemDomRefs <p>Array of DOM references representing the items for the navigation</p>
           * @param {boolean} bNotInTabChain <p>Whether the selected element should be in the tab chain or not</p>
           */
          constructor(oDomRef: HTMLElement, aItemDomRefs: HTMLElement[], bNotInTabChain?: boolean);
          /**
           * <p>Returns disabled modifiers These modifiers will not be handled by the <code>ItemNavigation</code></p>
           * @param {any} oDisabledModifiers <p>Object that includes event type with disabled keys as an array</p>
           * @returns any <p>Object that includes event type with disabled keys as an array</p>
           */
          getDisabledModifiers(oDisabledModifiers: any): any;
          /**
           * <p>Returns the array of item DOM references</p>
           * @returns HTMLElement[] <p>Array of item DOM references</p>
           */
          getItemDomRefs(): HTMLElement[];
          /**
           * <p>Returns the root DOM reference surrounding the items</p>
           * @returns HTMLElement <p>Root DOM reference</p>
           */
          getRootDomRef(): HTMLElement;
          /**
           * <p>Check whether given event has disabled modifier or not</p>
           * @param {any} oEvent <p>jQuery event</p>
           * @returns boolean <p>Flag if disabled modifiers are set</p>
           */
          hasDisabledModifier(oEvent: any): boolean;
          /**
           * <p>Sets whether the items are displayed in columns.</p><p>If columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous item of the column. If the first or last item of the column is reached, the next focused item is then in the next or previous column.</p>
           * @param {number} iColumns <p>Count of columns for the table mode or cycling mode</p>
           * @param {boolean} bNoColumnChange <p>Forbids jumping to an other column with Arrow Up and Arrow Down keys</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setColumns(iColumns: number, bNoColumnChange: boolean): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets whether the <code>ItemNavigation</code> should cycle through the items.</p><p>If cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys are used.</p>
           * @param {boolean} bCycling <p>Set to true if cycling should be done, else false</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setCycling(bCycling: boolean): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets the disabled modifiers These modifiers will not be handled by the <code>ItemNavigation</code></p><p><pre>
          Example: Disable shift + up handling of the <code>ItemNavigation</code>
          
          oItemNavigation.setDisabledModifiers({
              sapnext : ["shift"]
          });
          
          Possible keys are : "shift", "alt", "ctrl", "meta"
          Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
          </pre></p>
           * @param {any} oDisabledModifiers <p>Object that includes event type with disabled keys as an array</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setDisabledModifiers(oDisabledModifiers: any): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets behavior of HOME and END keys if columns are used.</p>
           * @param {boolean} bStayInRow <p>HOME -> go to first item in row; END -> go to last item in row</p>
           * @param {boolean} bCtrlEnabled <p>HOME/END with CTRL -> go to first/last item of all</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setHomeEndColumnMode(bStayInRow: boolean, bCtrlEnabled: boolean): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets the item DOM references as an array for the items</p>
           * @param {HTMLElement[]} aItemDomRefs <p>Array of DOM references or DOM node list object, representing the items</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setItemDomRefs(aItemDomRefs: HTMLElement[]): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets the page size of the item navigation to allow Page Up and Page Down keys.</p>
           * @param {number} iPageSize <p>The page size, needs to be at least 1</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setPageSize(iPageSize: number): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets the root DOM reference surrounding the items</p>
           * @param {any} oDomRef <p>Root DOM reference</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setRootDomRef(oDomRef: any): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets the selected index if the used control supports selection.</p>
           * @param {number} iIndex <p>Index of the first selected item</p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setSelectedIndex(iIndex: number): sap.ui.core.delegate.ItemNavigation;
          /**
           * <p>Sets whether the <code>ItemNavigation</code> should use the table mode to navigate through the items (navigation in a grid).</p>
           * @param {boolean} bTableMode <p>Set to true if table mode should be used, else false</p>
           * @param {boolean} bTableList <p>This sets a different behavior for table mode. In this mode we keep using table navigation but there are some differences. e.g. <ul> <li>Page-up moves focus to the first row, not to the first cell like in table mode</li> <li>Page-down moves focus to the last row, not to the last cell like in table mode</li> </ul></p>
           * @returns sap.ui.core.delegate.ItemNavigation <p><code>this</code> to allow method chaining</p>
           */
          setTableMode(bTableMode: boolean, bTableList?: boolean): sap.ui.core.delegate.ItemNavigation;
        }
        /**
         * <p>Delegate for touch scrolling on mobile devices.</p><p>This delegate uses native scrolling of mobile and desktop browsers. Third party scrolling libraries are not supported.</p><p>Controls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns the current instance of this delegate object</p>
         */
        export class ScrollEnablement extends sap.ui.base.Object {
          /**
           * <p>Creates a ScrollEnablement delegate that can be attached to Controls requiring capabilities for scrolling of a certain part of their DOM.</p>
           * @param {sap.ui.core.Control} oControl <p>the Control of which this Scroller is the delegate</p>
           * @param {string} sScrollContentDom <p>the Id of the element within the DOM of the Control which should be scrollable</p>
           * @param {any} oConfig <p>the configuration of the scroll delegate</p>
           */
          constructor(oControl: sap.ui.core.Control, sScrollContentDom: string, oConfig: any);
          /**
           * <p>Calculates scroll position of a child of a container.</p>
           * @param {HTMLElement | any} vElement <p>An element(DOM or jQuery) for which the scroll position will be calculated.</p>
           * @returns any <p>Position object.</p>
           */
          protected getChildPosition(vElement: HTMLElement | any): any;
          /**
           * <p>Get current setting for horizontal scrolling.</p>
           * @returns boolean <p>true if horizontal scrolling is enabled</p>
           */
          protected getHorizontal(): boolean;
          /**
           * <p>Get current setting for vertical scrolling.</p>
           * @returns boolean <p>true if vertical scrolling is enabled</p>
           */
          protected getVertical(): boolean;
          /**
           * <p>Refreshes this Scrolling delegate.</p>
           */
          protected refresh(): void;
          /**
           * <p>Scrolls to an element within a container.</p>
           * @param {HTMLElement} oElement <p>A DOM element.</p>
           * @param {number} iTime <p>The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.</p>
           * @param {number[]} aOffset <p>Specifies an additional left and top offset of the target scroll position, relative to the upper left corner of the DOM element</p>
           * @returns sap.ui.core.delegate.ScrollEnablement 
           */
          protected scrollToElement(oElement: HTMLElement, iTime?: number, aOffset?: number[]): sap.ui.core.delegate.ScrollEnablement;
          /**
           * <p>Sets GrowingList control to scroll container</p>
           * @param {Function} fnScrollLoadCallback <p>Scrolling callback</p>
           * @param {sap.m.ListGrowingDirection} sScrollLoadDirection <p>Scrolling direction</p>
           */
          protected setGrowingList(fnScrollLoadCallback: Function, sScrollLoadDirection: sap.m.ListGrowingDirection): void;
          /**
           * <p>Enable or disable horizontal scrolling.</p>
           * @param {boolean} bHorizontal <p>set true to enable horizontal scrolling, false - to disable</p>
           */
          protected setHorizontal(bHorizontal: boolean): void;
          /**
           * <p>Sets IconTabBar control to scroll container</p>
           * @param {sap.m.IconTabBar} oIconTabBar <p>instance</p>
           * @param {Function} fnScrollEndCallback <p>callback function for the scroll end event</p>
           * @param {Function} fnScrollStartCallback <p>callback function for the scroll start event</p>
           */
          protected setIconTabBar(oIconTabBar: sap.m.IconTabBar, fnScrollEndCallback: Function, fnScrollStartCallback: Function): void;
          /**
           * <p>Set overflow control on top of scroll container.</p>
           * @param {sap.ui.core.Control} oControl <p>Top control that should be normally hidden over the top border of the scroll container (pull-down content).</p>
           */
          protected setPullDown(oControl: sap.ui.core.Control): void;
          /**
           * <p>Enable or disable vertical scrolling.</p>
           * @param {boolean} bVertical <p>set true to enable vertical scrolling, false - to disable</p>
           */
          protected setVertical(bVertical: boolean): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Contains classes and helpers related to drag & drop functionality.</p></p>
       */
      namespace dnd {
        /**
         * <p>Provides the base class for all drag-and-drop configurations. This feature enables a native HTML5 drag-and-drop API for the controls, therefore it is limited to browser support. </p><h3>Limitations</h3><p> <ul> <li>There is no mobile device that supports drag and drop.</li> <li>There is no accessible alternative for drag and drop. Applications which use the drag-and-drop functionality must provide an accessible alternative UI (for example, action buttons or menus) to perform the same operations.</li> <li>A custom dragging ghost element is not possible in Internet Explorer.</li> <li>Transparency of the drag ghost element and the cursor during drag-and-drop operations depends on the browser implementation.</li> <li>Internet Explorer does only support plain text MIME type for the DataTransfer Object.</li> <li>Constraining a drag position is not possible, therefore there is no snap-to-grid or snap-to-element feature possible.</li> <li>Texts in draggable controls cannot be selected.</li> <li>The text of input fields in draggable controls can be selected, but not dragged.</li> </ul></p>
         */
        export abstract class DragDropBase extends sap.ui.core.Element {
          /**
           * <p>Constructor for a new DragDropBase.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
           * @param {any} mSettings <p>Initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getEnabled" href="#/api/sap.ui.core.dnd.DragDropBase/methods/getEnabled">enabled</a>.</p><p>Indicates whether this configuration is active or not.</p><p>Default value is <code>true</code>.</p>
           * @returns boolean <p>Value of property <code>enabled</code></p>
           */
          getEnabled(): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupName" href="#/api/sap.ui.core.dnd.DragDropBase/methods/getGroupName">groupName</a>.</p><p>Defines the name of the group to which this object belongs. If <code>groupName</code> is specified, then this object will only interacts with other drag-and-drop objects within the same group.</p>
           * @returns string <p>Value of property <code>groupName</code></p>
           */
          getGroupName(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getGroupName" href="#/api/sap.ui.core.dnd.DragDropBase/methods/getGroupName">groupName</a>.</p><p>Defines the name of the group to which this object belongs. If <code>groupName</code> is specified, then this object will only interacts with other drag-and-drop objects within the same group.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sGroupName <p>New value for property <code>groupName</code></p>
           * @returns sap.ui.core.dnd.DragDropBase <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setGroupName(sGroupName: string): sap.ui.core.dnd.DragDropBase;
        }
        /**
         * <p>Provides the configuration for drag-and-drop operations.</p><p><b>Note:</b> This configuration might be ignored due to control <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/sap.ui.core.Element.extend">metadata</a> restrictions.</p>
         */
        export class DragDropInfo extends sap.ui.core.dnd.DropInfo implements sap.ui.core.dnd.IDragInfo, sap.ui.core.dnd.IDropInfo {
          /**
           * <p>Constructor for a new DragDropInfo.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>ID for the new DragDropInfo, generated automatically if no ID is given</p>
           * @param {any} mSettings <p>Initial settings for the DragDropInfo</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragEnd">dragEnd</a> event of this <code>sap.ui.core.dnd.DragDropInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragDropInfo</code> itself.</p><p>This event is fired when a drag operation is being ended.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragDropInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragEnd(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragStart">dragStart</a> event of this <code>sap.ui.core.dnd.DragDropInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragDropInfo</code> itself.</p><p>This event is fired when the user starts dragging an element.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragDropInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragStart(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragEnd">dragEnd</a> event of this <code>sap.ui.core.dnd.DragDropInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragEnd(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragStart">dragStart</a> event of this <code>sap.ui.core.dnd.DragDropInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragStart(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragEnd">dragEnd</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireDragEnd(mParameters?: any): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragDropInfo/events/dragStart">dragStart</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns boolean <p>Whether or not to prevent the default action</p>
           */
          protected fireDragStart(mParameters?: any): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSourceAggregation" href="#/api/sap.ui.core.dnd.DragDropInfo/methods/getSourceAggregation">sourceAggregation</a>.</p><p>The name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.</p>
           * @returns string <p>Value of property <code>sourceAggregation</code></p>
           */
          getSourceAggregation(): string;
          /**
           * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTargetElement" href="#/api/sap.ui.core.dnd.DragDropInfo/methods/getTargetElement">targetElement</a>, or <code>null</code>.</p>
           * @returns sap.ui.core.ID 
           */
          getTargetElement(): sap.ui.core.ID;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSourceAggregation" href="#/api/sap.ui.core.dnd.DragDropInfo/methods/getSourceAggregation">sourceAggregation</a>.</p><p>The name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sSourceAggregation <p>New value for property <code>sourceAggregation</code></p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setSourceAggregation(sSourceAggregation: string): sap.ui.core.dnd.DragDropInfo;
          /**
           * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTargetElement" href="#/api/sap.ui.core.dnd.DragDropInfo/methods/getTargetElement">targetElement</a>.</p>
           * @param {sap.ui.core.ID | sap.ui.core.Element} oTargetElement <p>ID of an element which becomes the new target of this targetElement association; alternatively, an element instance may be given</p>
           * @returns sap.ui.core.dnd.DragDropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setTargetElement(oTargetElement: sap.ui.core.ID | sap.ui.core.Element): sap.ui.core.dnd.DragDropInfo;
        }
        /**
         * <p>Provides the configuration for drag operations.</p><p><b>Note:</b> This configuration might be ignored due to control <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/sap.ui.core.Element.extend">metadata</a> restrictions.</p>
         */
        export class DragInfo extends sap.ui.core.dnd.DragDropBase implements sap.ui.core.dnd.IDragInfo {
          /**
           * <p>Constructor for a new DragInfo.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>ID for the new DragInfo, generated automatically if no ID is given</p>
           * @param {any} mSettings <p>Initial settings for the DragInfo</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragInfo/events/dragEnd">dragEnd</a> event of this <code>sap.ui.core.dnd.DragInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragInfo</code> itself.</p><p>This event is fired when a drag operation is being ended.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragEnd(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragInfo;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragInfo/events/dragStart">dragStart</a> event of this <code>sap.ui.core.dnd.DragInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragInfo</code> itself.</p><p>This event is fired when the user starts dragging an element.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragStart(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragInfo/events/dragEnd">dragEnd</a> event of this <code>sap.ui.core.dnd.DragInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragEnd(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragInfo/events/dragStart">dragStart</a> event of this <code>sap.ui.core.dnd.DragInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragStart(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DragInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnd" href="#/api/sap.ui.core.dnd.DragInfo/events/dragEnd">dragEnd</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireDragEnd(mParameters?: any): sap.ui.core.dnd.DragInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragStart" href="#/api/sap.ui.core.dnd.DragInfo/events/dragStart">dragStart</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns boolean <p>Whether or not to prevent the default action</p>
           */
          protected fireDragStart(mParameters?: any): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSourceAggregation" href="#/api/sap.ui.core.dnd.DragInfo/methods/getSourceAggregation">sourceAggregation</a>.</p><p>The name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.</p>
           * @returns string <p>Value of property <code>sourceAggregation</code></p>
           */
          getSourceAggregation(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSourceAggregation" href="#/api/sap.ui.core.dnd.DragInfo/methods/getSourceAggregation">sourceAggregation</a>.</p><p>The name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sSourceAggregation <p>New value for property <code>sourceAggregation</code></p>
           * @returns sap.ui.core.dnd.DragInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setSourceAggregation(sSourceAggregation: string): sap.ui.core.dnd.DragInfo;
        }
        /**
         * <p><p>Configuration options for visual drop effects that are given during a drag and drop operation.</p></p>
         */
        export enum DropEffect {
          /**
           * <p>A copy of the source item is made at the new location.</p>
           */
          Copy = "Copy",
          /**
           * <p>A link is established to the source at the new location.</p>
           */
          Link = "Link",
          /**
           * <p>An item is moved to a new location.</p>
           */
          Move = "Move",
          /**
           * <p>The item cannot be dropped.</p>
           */
          None = "None",
        }
        /**
         * <p>Provides the configuration for drop operations. <b>Note:</b> This configuration might be ignored due to control <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/sap.ui.core.Element.extend">metadata</a> restrictions.</p>
         */
        export class DropInfo extends sap.ui.core.dnd.DragDropBase implements sap.ui.core.dnd.IDropInfo {
          /**
           * <p>Constructor for a new DropInfo.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>ID for the new DropInfo, generated automatically if no ID is given</p>
           * @param {any} mSettings <p>Initial settings for the DropInfo</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnter" href="#/api/sap.ui.core.dnd.DropInfo/events/dragEnter">dragEnter</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo</code> itself.</p><p>This event is fired when a dragged element enters a drop target.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragEnter(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragOver" href="#/api/sap.ui.core.dnd.DropInfo/events/dragOver">dragOver</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo</code> itself.</p><p>This event is fired when an element is being dragged over a valid drop target.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDragOver(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="drop" href="#/api/sap.ui.core.dnd.DropInfo/events/drop">drop</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo</code> itself.</p><p>This event is fired when an element is dropped on a valid drop target, as specified by the drag-and-drop info.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo</code> itself</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachDrop(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnter" href="#/api/sap.ui.core.dnd.DropInfo/events/dragEnter">dragEnter</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragEnter(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragOver" href="#/api/sap.ui.core.dnd.DropInfo/events/dragOver">dragOver</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDragOver(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="drop" href="#/api/sap.ui.core.dnd.DropInfo/events/drop">drop</a> event of this <code>sap.ui.core.dnd.DropInfo</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachDrop(fnFunction: Function, oListener?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragEnter" href="#/api/sap.ui.core.dnd.DropInfo/events/dragEnter">dragEnter</a> to attached listeners.</p><p>Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns boolean <p>Whether or not to prevent the default action</p>
           */
          protected fireDragEnter(mParameters?: any): boolean;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dragOver" href="#/api/sap.ui.core.dnd.DropInfo/events/dragOver">dragOver</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireDragOver(mParameters?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="drop" href="#/api/sap.ui.core.dnd.DropInfo/events/drop">drop</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireDrop(mParameters?: any): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropEffect" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropEffect">dropEffect</a>.</p><p>Defines the visual drop effect.</p><p>Default value is <code>Move</code>.</p>
           * @returns sap.ui.core.dnd.DropEffect <p>Value of property <code>dropEffect</code></p>
           */
          getDropEffect(): sap.ui.core.dnd.DropEffect;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropLayout" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropLayout">dropLayout</a>.</p><p>Defines the layout of the droppable controls if <code>dropPosition</code> is set to <code>Between</code> or <code>OnOrBetween</code>.</p><p>Default value is <code>Default</code>.</p>
           * @returns sap.ui.core.dnd.DropLayout <p>Value of property <code>dropLayout</code></p>
           */
          getDropLayout(): sap.ui.core.dnd.DropLayout;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropPosition" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropPosition">dropPosition</a>.</p><p>Defines the position for the drop action, visualized by a rectangle.</p><p>Default value is <code>On</code>.</p>
           * @returns sap.ui.core.dnd.DropPosition <p>Value of property <code>dropPosition</code></p>
           */
          getDropPosition(): sap.ui.core.dnd.DropPosition;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTargetAggregation" href="#/api/sap.ui.core.dnd.DropInfo/methods/getTargetAggregation">targetAggregation</a>.</p><p>The aggregation name in the drop target control which is the target of this drag-and-drop action. If undefined, the entire control is the target. This can be handy if the target control does not have any aggregations or if the drop position within the target does not matter.</p>
           * @returns string <p>Value of property <code>targetAggregation</code></p>
           */
          getTargetAggregation(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropEffect" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropEffect">dropEffect</a>.</p><p>Defines the visual drop effect.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Move</code>.</p>
           * @param {sap.ui.core.dnd.DropEffect} sDropEffect <p>New value for property <code>dropEffect</code></p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setDropEffect(sDropEffect: sap.ui.core.dnd.DropEffect): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropLayout" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropLayout">dropLayout</a>.</p><p>Defines the layout of the droppable controls if <code>dropPosition</code> is set to <code>Between</code> or <code>OnOrBetween</code>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>Default</code>.</p>
           * @param {sap.ui.core.dnd.DropLayout} sDropLayout <p>New value for property <code>dropLayout</code></p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setDropLayout(sDropLayout: sap.ui.core.dnd.DropLayout): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDropPosition" href="#/api/sap.ui.core.dnd.DropInfo/methods/getDropPosition">dropPosition</a>.</p><p>Defines the position for the drop action, visualized by a rectangle.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>On</code>.</p>
           * @param {sap.ui.core.dnd.DropPosition} sDropPosition <p>New value for property <code>dropPosition</code></p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setDropPosition(sDropPosition: sap.ui.core.dnd.DropPosition): sap.ui.core.dnd.DropInfo;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTargetAggregation" href="#/api/sap.ui.core.dnd.DropInfo/methods/getTargetAggregation">targetAggregation</a>.</p><p>The aggregation name in the drop target control which is the target of this drag-and-drop action. If undefined, the entire control is the target. This can be handy if the target control does not have any aggregations or if the drop position within the target does not matter.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sTargetAggregation <p>New value for property <code>targetAggregation</code></p>
           * @returns sap.ui.core.dnd.DropInfo <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setTargetAggregation(sTargetAggregation: string): sap.ui.core.dnd.DropInfo;
        }
        /**
         * <p><p>Configuration options for the layout of the droppable controls.</p></p>
         */
        export enum DropLayout {
          /**
           * <p>Default <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/sap.ui.core.Element.extend">layout</a> definition of the aggregations.</p>
           */
          Default = "Default",
          /**
           * <p>Droppable controls are arranged horizontally.</p>
           */
          Horizontal = "Horizontal",
          /**
           * <p>Droppable controls are arranged vertically.</p>
           */
          Vertical = "Vertical",
        }
        /**
         * <p><p>Configuration options for drop positions.</p></p>
         */
        export enum DropPosition {
          /**
           * <p>Drop between the controls.</p>
           */
          Between = "Between",
          /**
           * <p>Drop on the control.</p>
           */
          On = "On",
          /**
           * <p>Drop on the control or between the controls.</p>
           */
          OnOrBetween = "OnOrBetween",
        }
        /**
         * <p><p>Marker interface for drag configuration providing information about the source of the drag operation.</p></p>
         */
        export interface IDragInfo {
        }
        /**
         * <p><p>Marker interface for drop configuration providing information about the target of the drop operation.</p></p>
         */
        export interface IDropInfo {
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace dnd {
        /**
         * <p><p>When a user requests to drag some controls that can be dragged, a drag session is started. The drag session can be used to transfer data between applications or between dragged and dropped controls. Please see provided APIs for more details.</p><p><b>Note:</b> This object only exists during a drag-and-drop operation.</p></p>
         */
        namespace DragSession {
          /**
           * <p>Returns the data that has been set via <code>setComplexData</code> method.</p>
           * @param {string} sKey <p>The key of the data</p>
           * @returns any <p>The previously set data or undefined</p>
           */
          function getComplexData(sKey: string): any;
          /**
           * <p>Returns the data that has been set via <code>setData</code> method.</p>
           * @param {string} sKey <p>The key of the data</p>
           * @returns string <p>Data</p>
           */
          function getData(sKey: string): string;
          /**
           * <p>Returns the data that has been set via <code>setTextData</code> method.</p>
           * @returns string <p>Data</p>
           */
          function getTextData(): string;
          /**
           * <p>Sets string data with any MIME type. <b>Note:</b> This works in all browsers, apart from Internet Explorer and Microsoft Edge. It also works if you navigate between different windows.</p>
           * @param {string} sKey <p>The key of the data</p>
           * @param {string} sData <p>Data</p>
           */
          function setData(sKey: string, sData: string): void;
          /**
           * <p>Sets string data with plain text MIME type. <b>Note:</b> This works in all browsers, including Internet Explorer and Microsoft Edge. It also works if you navigate between different windows.</p>
           * @param {string} sData <p>Data</p>
           */
          function setTextData(sData: string): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Docking position: horizontal/vertical.</p><p>Defines a position on the element which is used for aligned positioning of another element (e.g. the left top corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values are "begin", "left", "center", "right" and "end", where left/right always are left and right, or begin/end which are dependent on the text direction. For the vertical position possible values are "top", "center" and "bottom". Examples: "left top", "end bottom", "center center".</p></p>
       */
      export type Dock = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace Element {
        /**
         * <p><p>Registry of all <code>sap.ui.core.Element</code>s that currently exist.</p></p>
         */
        namespace registry {
          /**
           * <p>Number of existing elements.</p>
           */
          var size: number;
          /**
           * <p>Return an object with all instances of <code>sap.ui.core.Element</code>, keyed by their ID.</p><p>Each call creates a new snapshot object. Depending on the size of the UI, this operation therefore might be expensive. Consider to use the <code>forEach</code> or <code>filter</code> method instead of executing similar operations on the returned object.</p><p><b>Note</b>: The returned object is created by a call to <code>Object.create(null)</code>, and therefore lacks all methods of <code>Object.prototype</code>, e.g. <code>toString</code> etc.</p>
           * @returns any <p>Object with all elements, keyed by their ID</p>
           */
          function all(): any;
          /**
           * <p>Returns an array with elements for which the given <code>callback</code> returns a value that coerces to <code>true</code>.</p><p>The expected signature of the callback is <pre>
             function callback(oElement, sID)
          </pre> where <code>oElement</code> is the currently visited element instance and <code>sID</code> is the ID of that instance.</p><p>If elements are created or destroyed within the <code>callback</code>, then the behavior is not specified. Newly added objects might or might not be visited. When an element is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.</p><p>If a <code>thisArg</code> is given, it will be provided as <code>this</code> context when calling <code>callback</code>. The <code>this</code> value that the implementation of <code>callback</code> sees, depends on the usual resolution mechanism. E.g. when <code>callback</code> was bound to some context object, that object wins over the given <code>thisArg</code>.</p><p>This function returns an array with all elements matching the given predicate. The order of the elements in the array is not specified and might change between calls (over time and across different versions of UI5).</p>
           * @param {Function} callback <p>predicate against which each element is tested</p>
           * @param {any} thisArg <p>context object to provide as <code>this</code> in each call of <code>callback</code></p>
           * @returns sap.ui.core.Element[] <p>Array of elements matching the predicate; order is undefined and might change in newer versions of UI5</p>
           */
          function filter(callback: Function, thisArg?: any): sap.ui.core.Element[];
          /**
           * <p>Calls the given <code>callback</code> for each element.</p><p>The expected signature of the callback is <pre>
             function callback(oElement, sID)
          </pre> where <code>oElement</code> is the currently visited element instance and <code>sID</code> is the ID of that instance.</p><p>If elements are created or destroyed within the <code>callback</code>, then the behavior is not specified. Newly added objects might or might not be visited. When an element is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.</p><p>If a <code>thisArg</code> is given, it will be provided as <code>this</code> context when calling <code>callback</code>. The <code>this</code> value that the implementation of <code>callback</code> sees, depends on the usual resolution mechanism. E.g. when <code>callback</code> was bound to some context object, that object wins over the given <code>thisArg</code>.</p>
           * @param {Function} callback <p>Function to call for each element</p>
           * @param {any} thisArg <p>Context object to provide as <code>this</code> in each call of <code>callback</code></p>
           */
          function forEach(callback: Function, thisArg?: any): void;
          /**
           * <p>Retrieves an Element by its ID.</p><p>When the ID is <code>null</code> or <code>undefined</code> or when there's no element with the given ID, then <code>undefined</code> is returned.</p>
           * @param {sap.ui.core.ID} id <p>ID of the element to retrieve</p>
           * @returns sap.ui.core.Element <p>Element with the given ID or <code>undefined</code></p>
           */
          function get(id: sap.ui.core.ID): sap.ui.core.Element;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace ExtensionPoint {
        /**
         * <p>Creates 0..n UI5 controls from an <code>ExtensionPoint</code>.</p><p>One control if the <code>ExtensionPoint</code> is e.g. filled with a <code>View</code>, zero for extension points without configured extension and n controls for multi-root <code>Fragments</code> as extension.</p>
         * @param {any} mOptions <p>an object map (see below)</p>
         * @returns any <p>a Promise, which resolves with an array of 0..n controls created from an <code>ExtensionPoint</code>. If <code>mOptions.createDefaultContent</code> is called and returns a Promise, that Promise is returned by <code>ExtensionPoint.load</code>.</p>
         */
        function load(mOptions: any): any;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Format classes</p></p>
       */
      namespace format {
        /**
         * <p>The DateFormat is a static class for formatting and parsing single date and time values or date and time intervals according to a set of format options.</p><p>Supported format options are pattern based on Unicode LDML Date Format notation. Please note that only a subset of the LDML date symbols is supported. If no pattern is specified a default pattern according to the locale settings is used.</p>
         */
        export class DateFormat {
          /**
           * <p>Get a date instance of the DateFormat, which can be used for formatting.</p>
           * @param {any} oFormatOptions <p>Object which defines the format options</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to ask for locale specific texts/settings</p>
           * @returns sap.ui.core.format.DateFormat <p>date instance of the DateFormat</p>
           */
          static getDateInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.DateFormat;
          /**
           * <p>Get a datetime instance of the DateFormat, which can be used for formatting.</p>
           * @param {any} oFormatOptions <p>Object which defines the format options</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to ask for locale specific texts/settings</p>
           * @returns sap.ui.core.format.DateFormat <p>datetime instance of the DateFormat</p>
           */
          static getDateTimeInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.DateFormat;
          /**
           * <p>Get a time instance of the DateFormat, which can be used for formatting.</p>
           * @param {any} oFormatOptions <p>Object which defines the format options</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to ask for locale specific texts/settings</p>
           * @returns sap.ui.core.format.DateFormat <p>time instance of the DateFormat</p>
           */
          static getTimeInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.DateFormat;
          /**
           * <p>Format a date according to the given format options.</p>
           * @param {Date | Date[]} vJSDate <p>the value to format</p>
           * @param {boolean} bUTC <p>whether to use UTC</p>
           * @returns string <p>the formatted output value. If an invalid date is given, an empty string is returned.</p>
           */
          format(vJSDate: Date | Date[], bUTC: boolean): string;
          /**
           * <p>Parse a string which is formatted according to the given format options.</p>
           * @param {string} sValue <p>the string containing a formatted date/time value</p>
           * @param {boolean} bUTC <p>whether to use UTC, if no timezone is contained</p>
           * @param {boolean} bStrict <p>to use strict value check</p>
           * @returns Date|Date[] <p>the parsed value(s)</p>
           */
          parse(sValue: string, bUTC: boolean, bStrict: boolean): Date | Date[];
        }
        /**
         * <p>The FileSizeFormat is a static class for formatting and parsing numeric file size values according to a set of format options.</p><p>Supports the same options as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/methods/sap.ui.core.format.NumberFormat.getFloatInstance">NumberFormat.getFloatInstance</a> For format options which are not specified default values according to the type and locale settings are used.</p><p>Supported format options (additional to NumberFormat): <ul> <li>binaryFilesize: if true, base 2 is used: 1 Kibibyte = 1024 Byte, ... , otherwise base 10 is used: 1 Kilobyte = 1000 Byte (Default is false)</li> </ul></p>
         */
        export class FileSizeFormat extends sap.ui.base.Object {
          /**
           * <p>Get an instance of the FileSizeFormat, which can be used for formatting.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p>
           * @param {any} oFormatOptions <p>Object which defines the format options</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.FileSizeFormat <p>instance of the FileSizeFormat</p>
           */
          static getInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.FileSizeFormat;
          /**
           * <p>Format a filesize (in bytes) according to the given format options.</p>
           * @param {number | string} oValue <p>the number (or hex string) to format</p>
           * @returns string <p>the formatted output value</p>
           */
          format(oValue: number | string): string;
          /**
           * <p>Parse a string which is formatted according to the given format options.</p>
           * @param {string} sValue <p>the string containing a formatted filesize value</p>
           * @returns number <p>the parsed value in bytes</p>
           */
          parse(sValue: string): number;
        }
        /**
         * <p>The ListFormat is a static class for formatting and parsing an array of strings in a locale-sensitive manner according to a set of format options.</p>
         */
        export class ListFormat {
          /**
           * <p>Get an instance of the ListFormat which can be used for formatting.</p>
           * @param {any} oFormatOptions <p>Object which defines the format options</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.ListFormat <p>Instance of the ListFormat</p>
           */
          static getInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.ListFormat;
          /**
           * <p>Formats a list according to the given format options.</p>
           * @param {any[]} aList <p>The value to format</p>
           * @returns string <p>The formatted output value.</p>
           */
          format(aList: any[]): string;
          /**
           * <p>Parses a given list string into an array.</p>
           * @param {string} sValue <p>String value to be parsed</p>
           * @returns any[] <p>The parsed output value</p>
           */
          parse(sValue: string): any[];
        }
        /**
         * <p>The NumberFormat is a static class for formatting and parsing numeric values according to a set of format options.</p>
         */
        export class NumberFormat extends sap.ui.base.Object {
          /**
           * <p>Get a currency instance of the NumberFormat, which can be used for formatting.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p><p><p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. </p></p><p>The currency instance supports locally defined custom currency exclusive to the created instance. The following example shows how to use custom currencies (e.g. for Bitcoins): <pre>
          var oFormat = NumberFormat.getCurrencyInstance({
              "currencyCode": false,
              "customCurrencies": {
                  "BTC": {
                      "symbol": "Ƀ",
                      "decimals": 3
                  }
              }
          });
          
          oFormat.format(123.4567, "BTC"); // "Ƀ 123.457"
          </pre></p><p>As an alternative to using a fixed <code>symbol</code> for your custom currencies, you can also provide an ISO-Code. The provided ISO-Code will be used to look up the currency symbol in the global configuration, either defined in the CLDR or custom defined on the Format Settings (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/setCustomCurrencies">sap.ui.core.Configuration.FormatSettings#setCustomCurrencies</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/addCustomCurrencies">sap.ui.core.Configuration.FormatSettings#addCustomCurrencies</a>).</p><p>If no symbol is given at all, the custom currency key is used for formatting.</p><p><pre>
          var oFormat = NumberFormat.getCurrencyInstance({
              "currencyCode": false,
              "customCurrencies": {
                  "MyDollar": {
                      "isoCode": "USD",
                      "decimals": 3
                  },
                  "Bitcoin": {
                      "decimals": 2
                  }
              }
          });
          
          // symbol looked up from global configuration
          oFormat.format(123.4567, "MyDollar"); // "$123.457"
          
          // no symbol available, custom currency key is rendered
          oFormat.format(777.888, "Bitcoin"); // "Bitcoin 777.89"
          </pre></p>
           * @param {any} oFormatOptions <p>The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.NumberFormat <p>unit instance of the NumberFormat</p>
           */
          static getCurrencyInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
          /**
           * <p>Get a float instance of the NumberFormat, which can be used for formatting.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p><p><p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. </p></p>
           * @param {any} oFormatOptions <p>The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.NumberFormat <p>float instance of the NumberFormat</p>
           */
          static getFloatInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
          /**
           * <p>Get an integer instance of the NumberFormat, which can be used for formatting.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p><p><p> This instance has TOWARDS_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. </p></p>
           * @param {any} oFormatOptions <p>The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.NumberFormat <p>integer instance of the NumberFormat</p>
           */
          static getIntegerInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
          /**
           * <p>Get a percent instance of the NumberFormat, which can be used for formatting.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p><p><p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. </p></p>
           * @param {any} oFormatOptions <p>The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.NumberFormat <p>percentage instance of the NumberFormat</p>
           */
          static getPercentInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
          /**
           * <p>Get a unit instance of the NumberFormat, which can be used for formatting units.</p><p>If no locale is given, the currently configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration.FormatSettings/methods/getFormatLocale">formatLocale</a> will be used.</p><p><p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. </p></p>
           * @param {any} oFormatOptions <p>The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.</p>
           * @param {sap.ui.core.Locale} oLocale <p>Locale to get the formatter for</p>
           * @returns sap.ui.core.format.NumberFormat <p>unit instance of the NumberFormat</p>
           */
          static getUnitInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): sap.ui.core.format.NumberFormat;
          /**
           * <p>Format a number according to the given format options.</p>
           * @param {number | any[]} vValue <p>the number to format or an array which contains the number to format and the sMeasure parameter</p>
           * @param {string} sMeasure <p>an optional unit which has an impact on formatting currencies and units</p>
           * @returns string <p>the formatted output value</p>
           */
          format(vValue: number | any[], sMeasure?: string): string;
          /**
           * <p>Parse a string which is formatted according to the given format options.</p>
           * @param {string} sValue <p>the string containing a formatted numeric value</p>
           * @returns number|array <p>the parsed value or an array which contains the parsed value and the currency code (symbol) when the NumberFormat is a currency instance</p>
           */
          parse(sValue: string): number | any[];
        }
        namespace NumberFormat {
          /**
           * <p><p>Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least significant returned digits of rounded result is to be calculated.</p></p>
           */
          export enum RoundingMode {
            /**
             * <p>Rounding mode to round away from zero</p>
             */
            AWAY_FROM_ZERO = "AWAY_FROM_ZERO",
            /**
             * <p>Rounding mode to round towards positive infinity</p>
             */
            CEILING = "CEILING",
            /**
             * <p>Rounding mode to round towards negative infinity</p>
             */
            FLOOR = "FLOOR",
            /**
             * <p>Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round away from zero.</p>
             */
            HALF_AWAY_FROM_ZERO = "HALF_AWAY_FROM_ZERO",
            /**
             * <p>Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards positive infinity.</p>
             */
            HALF_CEILING = "HALF_CEILING",
            /**
             * <p>Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards negative infinity.</p>
             */
            HALF_FLOOR = "HALF_FLOOR",
            /**
             * <p>Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards zero.</p>
             */
            HALF_TOWARDS_ZERO = "HALF_TOWARDS_ZERO",
            /**
             * <p>Rounding mode to round towards zero</p>
             */
            TOWARDS_ZERO = "TOWARDS_ZERO",
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>The IconPool is a static class for retrieving or registering icons. It also provides helping methods for easier consumption of icons. There are already icons registered in IconPool, please use the Demo App named "Icon Explorer" to find the name of the icon.</p><p>In order to use the icon inside an existing control, please call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.IconPool.getIconURI" href="#/api/sap.ui.core.IconPool/methods/sap.ui.core.IconPool.getIconURI">sap.ui.core.IconPool.getIconURI</a> and assign the URI to the control's property which supports icons. If you want to support both, icons and standard images in your own control, please use the static method <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.IconPool.createControlByURI" href="#/api/sap.ui.core.IconPool/methods/sap.ui.core.IconPool.createControlByURI">sap.ui.core.IconPool.createControlByURI</a> to either create an Icon in case the first argument is an icon-URL or another control which you define by providing it as the second argument.</p></p>
       */
      namespace IconPool {
        /**
         * <p>Register an additional icon to the sap.ui.core.IconPool.</p>
         * @param {string} iconName <p>the name of the icon.</p>
         * @param {string} collectionName <p>the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.</p>
         * @param {any} iconInfo <p>the icon info which contains the following properties:</p>
         * @returns any <p>the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.</p>
         */
        function addIcon(iconName: string, collectionName: string, iconInfo: any): any;
        /**
         * <p>Creates an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Icon">sap.ui.core.Icon</a> if the given URI is an icon URI, otherwise the given constructor is called. The given URI is set to the src property of the control.</p>
         * @param {string | any} setting <p>contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.</p>
         * @param {Function} constructor <p>the constructor function which is called when the given URI isn't an icon URI</p>
         * @returns sap.ui.core.Control <p>either an instance of sap.ui.core.Icon or instance created by calling the given constructor</p>
         */
        function createControlByURI(setting: string | any, constructor: Function): sap.ui.core.Control;
        /**
         * <p>Checks if the icon font is loaded</p>
         * @param {string} sCollectionName <p>icon collection name</p>
         * @returns Promise|undefined <p>a Promise that resolves when the icon font is loaded; or <code>undefined</code> if the icon font has not been registered yet</p>
         */
        function fontLoaded(sCollectionName: string): Promise<any> | undefined;
        /**
         * <p>Returns all names of registered collections in IconPool</p>
         * @returns any[] <p>An array contains all of the registered collections' names.</p>
         */
        function getIconCollectionNames(): any[];
        /**
         * <p>Returns the icon url based on the given mime type</p>
         * @param {string} sMimeType <p>the mime type of a file (e.g. "application/zip")</p>
         * @returns string <p>the icon url (e.g. "sap-icon://attachment-zip-file")</p>
         */
        function getIconForMimeType(sMimeType: string): string;
        /**
         * <p>Returns an info object for the icon with the given <code>iconName</code> and <code>collectionName</code>.</p><p>Instead of giving name and collection, a complete icon-URI can be provided as <code>iconName</code>. The method will determine name and collection from the URI, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.IconPool.isIconURI" href="#/api/sap.ui.core.IconPool/methods/sap.ui.core.IconPool.isIconURI">IconPool.isIconURI</a> for details.</p><p>The returned info object has the following properties: <ul> <li><code>string: name</code> Name of the icon</li> <li><code>string: collection</code> Name of the collection that contains the icon or <code>undefined</code> in case of the default collection</li> <li><code>string: uri</code> Icon URI that identifies the icon</li> <li><code>string: fontFamily</code> CSS font family to use for this icon</li> <li><code>string: content</code> Character sequence that represents the icon in the icon font</li> <li><code>string: text</code> Alternative text describing the icon (optional, might be empty)</li> <li><code>boolean: suppressMirroring</code> Whether the icon needs no mirroring in right-to-left mode</li> </ul></p>
         * @param {string} iconName <p>Name of the icon, or a complete icon-URI with icon collection and icon name; must not be empty</p>
         * @param {string} collectionName <p>Name of the icon collection; to access built-in icons, omit the collection name</p>
         * @param {string} loadingMode <p>The approach for loading the icon info, if it is not already available: sync (default) - font metadata is loaded synchronously and the icon info is returned immediately async - a promise is returned that returns the icon info when the font metadata is loaded mixed - until the font metadata is loaded a promise is returned, afterwards the icon info</p>
         * @returns object|Promise|undefined <p>Info object or Promise for the icon depending on the loadingMode or <code>undefined</code> when the icon can't be found or no icon name was given.</p>
         */
        function getIconInfo(iconName: string, collectionName?: string, loadingMode?: string): any | Promise<any> | undefined;
        /**
         * <p>Returns all name of icons that are registered under the given collection.</p>
         * @param {string} collectionName <p>the name of collection where icon names are retrieved.</p>
         * @returns any[] <p>An array contains all of the registered icon names under the given collection.</p>
         */
        function getIconNames(collectionName: string): any[];
        /**
         * <p>Returns the URI of the icon in the pool which has the given <code>iconName</code> and <code>collectionName</code>.</p>
         * @param {string} iconName <p>Name of the icon, must not be empty</p>
         * @param {string} collectionName <p>Name of the icon collection; to access built-in icons, omit the collection name</p>
         * @returns string <p>URI of the icon or <code>undefined</code> if the icon can't be found in the IconPool</p>
         */
        function getIconURI(iconName: string, collectionName?: string): string;
        /**
         * <p>Returns whether the given <code>uri</code> is an icon URI.</p><p>A string is an icon URI when it can be parsed as a URI and when it has one of the two forms <ul> <li>sap-icon://collectionName/iconName</li> <li>sap-icon://iconName</li> </ul> where collectionName and iconName must be non-empty.</p>
         * @param {string} uri <p>The URI to check</p>
         * @returns boolean <p>Whether the URI matches the icon URI format</p>
         */
        function isIconURI(uri: string): boolean;
        /**
         * <p>Registers an additional icon font to the icon pool</p>
         * @param {any} oConfig <p>configuration object for registering the font</p>
         */
        function registerFont(oConfig: any): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type representing an ID or a name.</p><p>Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons. It may start with a character or underscore only.</p></p>
       */
      export type ID = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Helper functionality for indication color support.</p></p>
       */
      namespace IndicationColorSupport {
        /**
         * <p>Returns a generic indication color message if the given Element has a property <code>IndicationColor</code> with one of the states or the given <code>indicationColor</code> string represents one of five states.</p>
         * @param {sap.ui.core.Element | sap.ui.core.IndicationColor} vValue <p>the Element of which the indicationColor needs to be checked, or the IndicationColor explicitly</p>
         * @returns string <p>the indication color text, if appropriate; otherwise null</p>
         */
        function getAdditionalText(vValue: sap.ui.core.Element | sap.ui.core.IndicationColor): string;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Helper functionality for enhancement of a <code>Label</code> with common label functionality.</p><br><br>References: <ul><li>sap.ui.core.LabelEnablement#enrich</li></ul></p>
       */
      namespace LabelEnablement {
        /**
         * <p>Returns an array of IDs of the labels referencing the given element.</p>
         * @param {sap.ui.core.Element} oElement <p>The element whose referencing labels should be returned</p>
         * @returns string[] <p>an array of ids of the labels referencing the given element</p>
         */
        function getReferencingLabels(oElement: sap.ui.core.Element): string[];
        /**
         * <p>Returns <code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise.</p>
         * @param {sap.ui.core.Element} oElement <p>The element which should be checked for its required state</p>
         * @returns boolean <p><code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise</p>
         */
        function isRequired(oElement: sap.ui.core.Element): boolean;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace message {
        /**
         * <p>The ControlMessageProcessor implementation. This MessageProcessor is able to handle Messages with the following target syntax: 'ControlID/PropertyName'. Creating an instance of this class using the "new" keyword always results in the same instance (Singleton).</p>
         */
        export class ControlMessageProcessor extends sap.ui.core.message.MessageProcessor {
          /**
           * <p>Constructor for a new ControlMessageProcessor</p>
           */
          constructor();
          /**
           * <p>Check Messages and update controls with messages</p>
           */
          protected checkMessages(): void;
        }
        /**
         */
        export class Message extends sap.ui.base.Object {
          /**
           * <p>Constructor for a new Message.</p>
           * @param {any} mParameters <p>a map which contains the following parameter properties:</p>
           */
          constructor(mParameters?: any);
          /**
           * <p>Returns the messages additional text.</p>
           * @returns string <p>The additionaltext</p>
           */
          getAdditionalText(): string;
          /**
           * <p>Returns the message code</p>
           * @returns string <p>code</p>
           */
          getCode(): string;
          /**
           * <p>Returns the control ID if set.</p><p>NOTE: The control ID is only set for Controls based on <code>sap.m.InputBase</code> The Control must be bound to a Model so the Message could be propagated to this Control. The propagation happens only if the Control is created and visible on the screen. Is this the case the control ID is set. The ID is not set in all other cases and cannot be set manually.</p><p>If a Message is propagated to multiple Controls bound to the same target the last Control wins.</p>
           * @returns string <p>sControlId</p>
           */
          getControlId(): string;
          /**
           * <p>Returns an array of control IDs.</p><p>NOTE: The control ID is only set for Controls based on <code>sap.m.InputBase</code>. The Control must be bound to a Model so the Message could be propagated to this Control. The propagation happens only if the Control is created and visible on the screen. The ID is not set in all other cases and cannot be set manually.</p>
           * @returns any[] <p>aControlIds</p>
           */
          getControlIds(): any[];
          /**
           * <p>Set the date of the message</p>
           * @returns number <p>The message date in number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. As returned by Date.now().</p>
           */
          getDate(): number;
          /**
           * <p>Returns the message description</p>
           * @returns string <p>description</p>
           */
          getDescription(): string;
          /**
           * <p>Returns the message description URL which should be used to download the description content</p>
           * @returns string <p>The URL pointing to the description long text</p>
           */
          getDescriptionUrl(): string;
          /**
           * <p>Returns the Message Id</p>
           * @returns string <p>id</p>
           */
          getId(): string;
          /**
           * <p>Returns message text</p>
           * @returns string <p>message</p>
           */
          getMessage(): string;
          /**
           * <p>Returns the message processor</p>
           * @returns sap.ui.core.message.MessageProcessor <p>processor</p>
           */
          getMessageProcessor(): sap.ui.core.message.MessageProcessor;
          /**
           * <p>Returns the if Message is persistent</p>
           * @returns boolean <p>bPersistent</p>
           */
          getPersistent(): boolean;
          /**
           * <p>Returns the message target</p>
           * @returns string <p>target</p>
           */
          getTarget(): string;
          /**
           * <p>Returns the if Message set as technical message</p>
           * @returns boolean <p>true if message is technical or false if not</p>
           */
          getTechnical(): boolean;
          /**
           * <p>Returns the technical details of the message</p>
           * @returns any <p>The technical details</p>
           */
          getTechnicalDetails(): any;
          /**
           * <p>Returns the message type</p>
           * @returns sap.ui.core.MessageType <p>type</p>
           */
          getType(): sap.ui.core.MessageType;
          /**
           * <p>Sets the additionaltext for the message or merge different additionaltext strings</p>
           * @param {string} sAdditionalText <p>The additionaltext.</p>
           */
          setAdditionalText(sAdditionalText: string): void;
          /**
           * <p>Set message code</p>
           * @param {string} sCode <p>The Message code</p>
           */
          setCode(sCode: string): void;
          /**
           * <p>Set the date of the message, this will automatically be set on message creation</p>
           * @param {number} iDate <p>The message date in number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. As returned by Date.now().</p>
           */
          setDate(iDate: number): void;
          /**
           * <p>Set message description</p>
           * @param {string} sDescription <p>The Message description</p>
           */
          setDescription(sDescription: string): void;
          /**
           * <p>Set message description URL which should be used to download the description content</p>
           * @param {string} sDescriptionUrl <p>The URL pointing to the description long text</p>
           */
          setDescriptionUrl(sDescriptionUrl: string): void;
          /**
           * <p>Set message text</p>
           * @param {string} sMessage <p>The Message as text</p>
           */
          setMessage(sMessage: string): void;
          /**
           * <p>Set message processor</p>
           * @param {sap.ui.core.message.MessageProcessor} oMessageProcessor <p>The Message processor</p>
           */
          setMessageProcessor(oMessageProcessor: sap.ui.core.message.MessageProcessor): void;
          /**
           * <p>Set message persistent</p>
           * @param {boolean} bPersistent <p>Set Message persistent: If persisten is set true the message lifecycle controlled by Application</p>
           */
          setPersistent(bPersistent: boolean): void;
          /**
           * <p>Set message target: The syntax is MessageProcessor dependent. See the documentation of the respective MessageProcessor.</p>
           * @param {string} sTarget <p>The Message target</p>
           */
          setTarget(sTarget: string): void;
          /**
           * <p>Set message as technical message</p>
           * @param {boolean} bTechnical <p>Set Message as technical message lifecycle controlled by Application</p>
           */
          setTechnical(bTechnical: boolean): void;
          /**
           * <p>Set the technical details for the message</p>
           * @param {any} oTechnicalDetails <p>The technical details of the message</p>
           */
          setTechnicalDetails(oTechnicalDetails: any): void;
          /**
           * <p>Set message type</p>
           * @param {sap.ui.core.MessageType} sType <p>The Message type</p>
           */
          setType(sType: sap.ui.core.MessageType): void;
        }
        /**
         */
        export class MessageManager extends sap.ui.base.EventProvider {
          /**
           * <p>Constructor for a new MessageManager.</p>
           */
          constructor();
          /**
           * <p>Add messages to MessageManager</p>
           * @param {sap.ui.core.message.Message | sap.ui.core.message.Message[]} vMessages <p>Array of sap.ui.core.message.Message or single sap.ui.core.message.Message</p>
           */
          addMessages(vMessages: sap.ui.core.message.Message | sap.ui.core.message.Message[]): void;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Get the MessageModel</p>
           * @returns sap.ui.model.message.MessageModel <p>oMessageModel The Message Model</p>
           */
          getMessageModel(): sap.ui.model.message.MessageModel;
          /**
           * <p>Register MessageProcessor</p>
           * @param {sap.ui.core.message.MessageProcessor} oProcessor <p>The MessageProcessor</p>
           */
          registerMessageProcessor(oProcessor: sap.ui.core.message.MessageProcessor): void;
          /**
           * <p>When using the databinding type system, the validation/parsing of a new property value could fail. In this case, a validationError/parseError event is fired. These events bubble up to the core. For registered ManagedObjects, the MessageManager attaches to these events and creates a <code>sap.ui.core.message.Message</code> (bHandleValidation=true) for each of these errors and cancels the event bubbling.</p>
           * @param {sap.ui.base.ManagedObject} oObject <p>The sap.ui.base.ManagedObject</p>
           * @param {boolean} bHandleValidation <p>Handle validationError/parseError events for this object. If set to true, the MessageManager creates a Message for each validation/parse error. The event bubbling is canceled in every case.</p>
           */
          registerObject(oObject: sap.ui.base.ManagedObject, bHandleValidation: boolean): void;
          /**
           * <p>Remove all messages</p>
           */
          removeAllMessages(): void;
          /**
           * <p>Remove given Messages</p>
           * @param {sap.ui.core.message.Message | sap.ui.core.message.Message[]} vMessages <p>The message(s) to be removed.</p>
           */
          removeMessages(vMessages: sap.ui.core.message.Message | sap.ui.core.message.Message[]): void;
          /**
           * <p>Deregister MessageProcessor</p>
           * @param {sap.ui.core.message.MessageProcessor} oProcessor <p>The MessageProcessor</p>
           */
          unregisterMessageProcessor(oProcessor: sap.ui.core.message.MessageProcessor): void;
          /**
           * <p>Unregister ManagedObject</p>
           * @param {sap.ui.base.ManagedObject} oObject <p>The sap.ui.base.ManagedObject</p>
           */
          unregisterObject(oObject: sap.ui.base.ManagedObject): void;
        }
        /**
         * <p>This is an abstract base class for MessageParser objects.</p>
         */
        export abstract class MessageParser extends sap.ui.base.Object {
          /**
           * <p>Abstract MessageParser class to be inherited in back-end specific implementations.</p>
           */
          constructor();
          /**
           * <p>Returns the registered processor on which the events for message handling can be fired</p>
           * @returns sap.ui.core.message.MessageProcessor <p>The currently set MessageProcessor or null if none is set</p>
           */
          protected getProcessor(): sap.ui.core.message.MessageProcessor;
          /**
           * <p>Abstract parse method must be implemented in the inheriting class.</p>
           */
          parse(): void;
          /**
           * <p>This method is used by the model to register itself as MessageProcessor for this parser</p>
           * @param {sap.ui.core.message.MessageProcessor} oProcessor <p>The MessageProcessor that can be used to fire events</p>
           * @returns sap.ui.core.message.MessageParser <p>Instance reference for method chaining</p>
           */
          protected setProcessor(oProcessor: sap.ui.core.message.MessageProcessor): sap.ui.core.message.MessageParser;
        }
        /**
         * <p>This is an abstract base class for MessageProcessor objects.</p>
         */
        export abstract class MessageProcessor extends sap.ui.base.EventProvider {
          /**
           * <p>Constructor for a new MessageProcessor</p>
           */
          constructor();
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'messageChange' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this MessageProcessor is used.</p>
           * @returns sap.ui.core.message.MessageProcessor <p><code>this</code> to allow method chaining</p>
           */
          attachMessageChange(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.message.MessageProcessor;
          /**
           * <p>Implement in inheriting classes</p>
           * @returns sap.ui.model.ListBinding 
           */
          checkMessage(): sap.ui.model.ListBinding;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Destroys the MessageProcessor Instance</p>
           */
          destroy(): void;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'sap.ui.core.message.MessageProcessor' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.message.MessageProcessor <p><code>this</code> to allow method chaining</p>
           */
          detachMessageChange(fnFunction: Function, oListener: any): sap.ui.core.message.MessageProcessor;
          /**
           * <p>Fire event messageChange to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.message.MessageProcessor <p><code>this</code> to allow method chaining</p>
           */
          protected fireMessageChange(mArguments?: any): sap.ui.core.message.MessageProcessor;
          /**
           * <p>Returns the ID of the MessageProcessor instance</p>
           * @returns string <p>sId The MessageProcessor ID</p>
           */
          getId(): string;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {{ [key: string]: any }} vMessages <p>map of messages: {'target': [array of messages],...}</p>
           */
          setMessages(vMessages: { [key: string]: any }): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace mvc {
        /**
         * <p>A generic controller implementation for the UI5 Model-View-Controller concept.</p><p>Can either be used as a generic controller which is enriched on the fly with methods and properties (see <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.controller">sap.ui.controller</a>) or as a base class for typed controllers.</p>
         */
        export class Controller extends sap.ui.base.EventProvider {
          /**
           * <p>Creates an instance of controller class.</p>
           * @param {any} mOptions <p>A map containing the controller configuration options.</p>
           * @returns Promise<any> <p>the Promise resolves with a new instance of the controller</p>
           */
          static create(mOptions: any): Promise<any>;
          /**
           * <p>Registers a callback module, which provides code enhancements for the lifecycle and event handler functions of a specific controller. The code enhancements are returned either in sync or async mode.</p><p>The extension provider module provides the <code>getControllerExtensions</code> function which returns either directly an array of objects or a Promise that returns an array of objects when it resolves. These objects are object literals defining the methods and properties of the controller in a similar way as <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.controller">sap.ui.controller</a>.</p><p><b>Example for a callback module definition (sync):</b> <pre>
          sap.ui.define("my/custom/sync/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
            var ExtensionProvider = function() {};
            ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
              if (!bAsync && sControllerName == "my.own.Controller") {
                // IMPORTANT: only return extensions for a specific controller
                return [{
                  onInit: function() {
                    // Do something here...
                  },
                  onAfterRendering: function() {
                    // Do something here...
                  },
                  onButtonClick: function(oEvent) {
                    // Handle the button click event
                  }
                }
              }];
            };
            return ExtensionProvider;
          }, true);
          </pre></p><p><b>Example for a callback module definition (async):</b> <pre>
          sap.ui.define("my/custom/async/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
            var ExtensionProvider = function() {};
            ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
              if (bAsync && sControllerName == "my.own.Controller") {
                // IMPORTANT:
                // only return a Promise for a specific controller since it
                // requires the View/Controller and its parents to run in async
                // mode!
                return new Promise(function(fnResolve, fnReject) {
                  fnResolve([{
                    onInit: function() {
                      // Do something here...
                    },
                    onAfterRendering: function() {
                      // Do something here...
                    },
                    onButtonClick: function(oEvent) {
                      // Handle the button click event
                    }
                  }]);
                }
              };
            };
            return ExtensionProvider;
          }, true);
          </pre></p><p>The lifecycle functions <code>onInit</code>, <code>onExit</code>, <code>onBeforeRendering</code> and <code>onAfterRendering</code> are added before or after the lifecycle functions of the original controller. The event handler functions, such as <code>onButtonClick</code>, are replacing the original controller's function.</p><p>When using an async extension provider you need to ensure that the view is loaded in async mode.</p><p>In both cases, return <code>undefined</code> if no controller extension shall be applied.</p>
           * @param {string} sExtensionProvider <p>the module name of the extension provider</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.controller">sap.ui.controller</a> for an overview of the available functions for controllers.</p>
           */
          static registerExtensionProvider(sExtensionProvider: string): void;
          /**
           * <p>Instantiates a (MVC-style) controller. Consumers should call the constructor only in the typed controller scenario. In the generic controller use case, they should use <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.controller">sap.ui.controller</a> instead.</p>
           * @param {string | object[]} sName <p>The name of the controller to instantiate. If a controller is defined as real sub-class, the "arguments" of the sub-class constructor should be given instead.</p>
           */
          constructor(sName: string | object[]);
          /**
           * <p>Returns an Element of the connected view with the given local ID.</p><p>Views automatically prepend their own ID as a prefix to created Elements to make the IDs unique even in the case of multiple view instances. This method helps to find an element by its local ID only.</p><p>If no view is connected or if the view doesn't contain an element with the given local ID, undefined is returned.</p>
           * @param {string} sId <p>View-local ID</p>
           * @returns sap.ui.core.Element <p>Element by its (view local) ID</p>
           */
          byId(sId: string): sap.ui.core.Element;
          /**
           * <p>Converts a view local ID to a globally unique one by prepending the view ID.</p><p>If no view is connected, undefined is returned.</p>
           * @param {string} sId <p>View-local ID</p>
           * @returns string <p>Prefixed ID</p>
           */
          createId(sId: string): string;
          /**
           * <p>Gets the component of the controller's view</p><p>If there is no Component connected to the view or the view is not connected to the controller, undefined is returned.</p>
           * @returns sap.ui.core.Component <p>Component instance</p>
           */
          getOwnerComponent(): sap.ui.core.Component;
          /**
           * <p>Returns the view associated with this controller or undefined.</p>
           * @returns sap.ui.core.mvc.View <p>View connected to this controller.</p>
           */
          getView(): sap.ui.core.mvc.View;
          /**
           * <p>This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be used to apply additional changes to the DOM after the Renderer has finished. (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)<br><br>References: <ul><li>sap.ui.core.Control.prototype.onAfterRendering</li></ul></p>
           */
          protected onAfterRendering(): void;
          /**
           * <p>This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering. (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)<br><br>References: <ul><li>sap.ui.core.Control.prototype.onBeforeRendering</li></ul></p>
           */
          protected onBeforeRendering(): void;
          /**
           * <p>This method is called upon desctuction of the View. The controller should perform its internal destruction in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks. (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)</p>
           */
          protected onExit(): void;
          /**
           * <p>This method is called upon initialization of the View. The controller can perform its internal setup in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks. (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)</p><p><b>Note:</b> In component-based apps <code>this.getOwnerComponent().getModel()</code> should be used inside <code>onInit()</code> to get a model assigned to the component instead of using <code>this.getView().getModel()</code>. The latter call might return <code>undefined</code> because the view might not have been attached to a parent yet (i.e. the component), and thus the view can't inherit a model from that parent. You could also attach to the <code>modelContextChange</code> event. The event is fired when either the context or the model changes for the control.</p>
           */
          protected onInit(): void;
        }
        /**
         * <p>Base class for controller extensions.</p><p>All controller extensions must <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.mvc.ControllerExtension.extend" href="#/api/sap.ui.core.mvc.ControllerExtension/methods/sap.ui.core.mvc.ControllerExtension.extend">extend</a> from this base class. It provides access to the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getView" href="#/api/sap.ui.core.mvc.ControllerExtension/methods/getView">view</a> of the extended controller as well as to the view's <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="byId" href="#/api/sap.ui.core.mvc.ControllerExtension/methods/byId">controls</a>.</p><p>For a more detailed description how to develop controller extensions, see section <a target="_self" href="#/topic/21515f09c0324218bb705b27407f5d61">Using Controller Extension</a> in the documentation.</p>
         */
        export class ControllerExtension extends sap.ui.base.Object {
          /**
           * <p>Override the ControllerExtension class with the given custom extension definition.</p><p>Only public methods that are not final could be overridden. The lifecycle methods <code>onInit</code>, <code>onExit</code>, <code>onBeforeRendering</code> and <code>onAfterRendering</code> are added before or after the lifecycle functions of the original extension.</p><p>Example for <code>oExtension</code>: <pre>
          {
              onInit: function() {
                  ...
              },
              ...
          }
          </pre></p><p><b>Note:</b> This static method is automatically propagated to subclasses of <code>ControllerExtension</code>.</p>
           * @param {any} oExtension <p>The custom extension definition</p>
           * @returns Function <p>A controller extension class</p>
           */
          static override(oExtension: any): Function;
          /**
           * <p>Returns an Element of the connected view with the given local ID.</p><p>Views automatically prepend their own ID as a prefix to created Elements to make the IDs unique even in the case of multiple view instances. For a controller extension, the namespace of the control ID gets also prefixed with the namespace of the extension. This method helps to find an element by its local ID only.</p><p>If no view is connected or if the view doesn't contain an element with the given local ID, <code>undefined</code> is returned.</p>
           * @param {string} sId <p>View-local ID</p>
           * @returns sap.ui.core.Element <p>Element by its (view local) ID</p>
           */
          byId(sId: string): sap.ui.core.Element;
          /**
           * <p>Returns the View from the corresponding controller.</p>
           * @returns sap.ui.core.mvc.View <p>oView The corresponding view instance</p>
           */
          getView(): sap.ui.core.mvc.View;
        }
        /**
         * <p>A view defined/constructed by declarative HTML.</p>
         */
        export class HTMLView extends sap.ui.core.mvc.View {
          /**
           * <p>Creates an instance of a declarative HTML view.</p>
           * @param {any} oOptions <p>An object containing the view configuration options.</p>
           * @returns any <p>A promise which resolves with the created <code>HTMLView</code> instance</p>
           */
          static create(oOptions: any): any;
          /**
           * <p>Constructor for a new mvc/HTMLView.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Flag for feature detection of asynchronous loading/rendering</p>
           */
          asyncSupport: any;
        }
        /**
         * <p><p>Marker interface for a ControllerExtension.</p></p>
         */
        export interface IControllerExtension {
        }
        /**
         * <p>A View defined using JSON.</p>
         */
        export class JSONView extends sap.ui.core.mvc.View {
          /**
           * <p>Creates a JSON view of the given configuration.</p>
           * @param {any} oOptions <p>An object containing the view configuration options.</p>
           * @returns any <p>A promise which resolves with the created <code>JSONView</code> instance.</p>
           */
          static create(oOptions: any): any;
          /**
           * <p>Constructor for a new mvc/JSONView.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Flag for feature detection of asynchronous loading/rendering</p>
           */
          asyncSupport: any;
        }
        /**
         * <p>A View defined/constructed by JavaScript code.</p>
         */
        export class JSView extends sap.ui.core.mvc.View {
          /**
           * <p>Creates an instance of the view with the given name (and id).</p>
           * @param {any} oOptions <p>An object containing the view configuration options.</p>
           * @returns any <p>A promise that resolves with the view instance</p>
           */
          static create(oOptions: any): any;
          /**
           * <p>Constructor for a new mvc/JSView.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Flag for feature detection of asynchronous loading/rendering</p>
           */
          asyncSupport: any;
          /**
           * <p>A method to be implemented by JSViews, returning the View UI. While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file, JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement. The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.</p>
           * @returns sap.ui.core.Control <p>a control or (typically) tree of controls representing the View user interface</p>
           */
          createContent(): sap.ui.core.Control;
          /**
           * <p>A method to be implemented by JSViews, returning the flag whether to prefix the IDs of controls automatically or not if the controls are created inside the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.JSView/methods/createContent">sap.ui.core.mvc.JSView#createContent</a> function. By default this feature is not activated.</p><p>You can overwrite this function and return true to activate the automatic prefixing.</p>
           * @returns boolean <p>true, if the controls IDs should be prefixed automatically</p>
           */
          protected getAutoPrefixId(): boolean;
        }
        /**
         * <p><p>Execution option for overrides defined by a <code>ControllerExtension</code>.</p><br><br>References: <ul><li>sap.ui.core.mvc.ControllerExtension</li></ul></p>
         */
        export enum OverrideExcecution {
          /**
           * <p>The override function gets executed after the original function</p>
           */
          After = "After",
          /**
           * <p>The override function gets executed before the original function</p>
           */
          Before = "Before",
          /**
           * <p>The override function is called instead of the original function</p><p>This is the default option for ControllerExtension overrides</p>
           */
          Instead = "Instead",
        }
        /**
         * <p>A view defined in a template.</p>
         */
        export class TemplateView extends sap.ui.core.mvc.View {
          /**
           * <p>Constructor for a new mvc/TemplateView.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>A base class for Views.</p><p>Introduces the relationship to a Controller, some basic visual appearance settings like width and height, and provides lifecycle events.</p><p>Views form an ID scope for the elements and controls in their content. They can prefix the IDs of elements either automatically (e.g. XMLView) or programmatically (using <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createId" href="#/api/sap.ui.core.mvc.View/methods/createId">#createId</a>). With method <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="byId" href="#/api/sap.ui.core.mvc.View/methods/byId">#byId</a>, elements or controls can be found with their view-local ID. Also see <a target="_self" href="#/topic/91f28be26f4d1014b6dd926db0e91070">"Support for Unique IDs"</a> in the documentation.</p>
         */
        export class View extends sap.ui.core.Control {
          /**
           * <p>Creates a view of the given type, name and with the given id.</p><p>If the option <code>viewName</code> is given, the corresponding view module is loaded if needed.</p><p>See also the API references for the specific view factories: <ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.XMLView/methods/sap.ui.core.mvc.XMLView.create">sap.ui.core.mvc.XMLView.create</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.JSView/methods/sap.ui.core.mvc.JSView.create">sap.ui.core.mvc.JSView.create</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.JSONView/methods/sap.ui.core.mvc.JSONView.create">sap.ui.core.mvc.JSONView.create</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.HTMLView/methods/sap.ui.core.mvc.HTMLView.create">sap.ui.core.mvc.HTMLView.create</a></li> </ul></p>
           * @param {any} oOptions <p>A parameter object for the view instantiation. Specialized view types could bring in additional parameters.</p>
           * @returns any <p>a Promise which resolves with the created View instance</p>
           */
          static create(oOptions: any): any;
          /**
           * <p>Constructor for a new View.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>ID for the new control, generated automatically if no ID is given</p>
           * @param {any} mSettings <p>Initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Adds some content to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p>
           * @param {sap.ui.core.Control} oContent <p>The content to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addContent(oContent: sap.ui.core.Control): sap.ui.core.mvc.View;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterInit" href="#/api/sap.ui.core.mvc.View/events/afterInit">afterInit</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.</p><p>Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachAfterInit(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.mvc.View/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.</p><p>Fired when the View has been (re-)rendered and its HTML is present in the DOM.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachAfterRendering(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeExit" href="#/api/sap.ui.core.mvc.View/events/beforeExit">beforeExit</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.</p><p>Fired when the view has received the request to destroy itself, but before it has destroyed anything.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachBeforeExit(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.mvc.View/events/beforeRendering">beforeRendering</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.</p><p>Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachBeforeRendering(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Returns an element by its ID in the context of this view.</p><p>This method expects a view-local ID of an element (the same as e.g. defined in the *.view.xml of an XMLView). For a search with a global ID (the value returned by <code>oElement.getId()</code>) you should rather use <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/byId">sap.ui.getCore().byId()</a>.</p>
           * @param {string} sId <p>View local ID of the element</p>
           * @returns sap.ui.core.Element <p>Element by its ID or <code>undefined</code></p>
           */
          byId(sId: string): sap.ui.core.Element;
          /**
           * <p>Clones a tree of objects starting with the object on which clone is called first (root object).</p><p>The IDs within the newly created clone tree are derived from the original IDs by appending the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be unique across multiple clone calls).</p><p>The <code>oOptions</code> configuration object can have the following properties: <ul> <li>The boolean value <code>cloneChildren</code> specifies whether associations/aggregations will be cloned</li> <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li> </ul> Note: In case the configuration <code>oOptions</code> is specified, the default values <code>true</code> no longer apply, which means in case <code>cloneChildren</code> or <code>cloneBindings</code> is not specified, then this ia assumed to be <code>false</code> and associations/aggregations or bindings are not cloned.</p><p>For each cloned object the following settings are cloned based on the metadata of the object and the defined options: <ul> <li>all properties that are not bound. If <code>cloneBinding</code> is <code>false</code>, even these properties will be cloned; the values are used by reference, they are not cloned</li> <li>all aggregated objects that are not bound. If <code>cloneBinding</code> is <code>false</code>, even the ones that are bound will be cloned; they are all cloned recursively using the same <code>sIdSuffix</code></li> <li>all associated controls; when an association points to an object inside the cloned object tree, then the cloned association will be modified to that it points to the clone of the target object. When the association points to a managed object outside of the cloned object tree, then its target won't be changed.</li> <li>all models set via <code>setModel()</code>; used by reference </li> <li>all property and aggregation bindings (if <code>cloneBindings</code> is <code>true</code>); the pure binding information (path, model name) is cloned, but all other information like template control or factory function, data type or formatter function are copied by reference. The bindings themselves are created anew as they are specific for the combination (object, property, model). As a result, any later changes to a binding of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.</li> </ul></p><p>Each clone is created by first collecting the above mentioned settings and then creating a new instance with the normal constructor function. As a result, any side effects of mutator methods (<code>setProperty</code> etc.) or init hooks are repeated during clone creation. There is no need to override <code>clone()</code> just to reproduce these internal settings!</p><p>Custom controls however can override <code>clone()</code> to implement additional clone steps. They usually will first call <code>clone()</code> on the super class and then modify the returned clone accordingly.</p><p>Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>. It is determined automatically for the root object (and its non-existence also serves as an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.</p>
           * @param {string} sIdSuffix <p>a suffix to be appended to the cloned object ID</p>
           * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
           * @param {any} oOptions <p>Configuration object; when omitted, both properties default to <code>true</code>; when specified, undefined properties default to <code>false</code></p>
           * @returns sap.ui.base.ManagedObject <p>Reference to the newly created clone</p>
           */
          protected clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
          /**
           * <p>Create a clone of this Element.</p><p>Calls <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/clone">sap.ui.base.ManagedObject#clone</a> and additionally clones event delegates.</p>
           * @param {string} sIdSuffix <p>Suffix to be appended to the cloned element ID</p>
           * @param {string[]} aLocalIds <p>Array of local IDs within the cloned hierarchy (internally used)</p>
           * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
           */
          protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
          /**
           * <p>Overrides <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/clone">Element.clone</a> to clone additional internal state.</p><p>The additionally cloned information contains: <ul> <li>browser event handlers attached with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachBrowserEvent" href="#/api/sap.ui.core.Control/methods/attachBrowserEvent">#attachBrowserEvent</a></li> <li>text selection behavior</li> <li>style classes added with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addStyleClass" href="#/api/sap.ui.core.Control/methods/addStyleClass">#addStyleClass</a></li> </ul></p>
           * @param {string} sIdSuffix <p>a suffix to be appended to the cloned element id</p>
           * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
           * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
           */
          protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
          /**
           * <p>Override clone method to avoid conflict between generic cloning of content and content creation as defined by the UI5 Model View Controller lifecycle.</p><p>For more details see the development guide section about Model View Controller in UI5.</p>
           * @param {string} sIdSuffix <p>a suffix to be appended to the cloned element id</p>
           * @param {string[]} aLocalIds <p>an array of local IDs within the cloned hierarchy (internally used)</p>
           * @returns sap.ui.core.Element <p>reference to the newly created clone</p>
           */
          protected clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
          /**
           * <p>Convert the given view local element ID to a globally unique ID by prefixing it with the view ID.</p>
           * @param {string} sId <p>View local ID of the element</p>
           * @returns string <p>prefixed id</p>
           */
          createId(sId: string): string;
          /**
           * <p>Destroys all the content in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyContent(): sap.ui.core.mvc.View;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterInit" href="#/api/sap.ui.core.mvc.View/events/afterInit">afterInit</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachAfterInit(fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.mvc.View/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachAfterRendering(fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeExit" href="#/api/sap.ui.core.mvc.View/events/beforeExit">beforeExit</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachBeforeExit(fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.mvc.View/events/beforeRendering">beforeRendering</a> event of this <code>sap.ui.core.mvc.View</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachBeforeRendering(fnFunction: Function, oListener?: any): sap.ui.core.mvc.View;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterInit" href="#/api/sap.ui.core.mvc.View/events/afterInit">afterInit</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireAfterInit(mParameters?: any): sap.ui.core.mvc.View;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.mvc.View/events/afterRendering">afterRendering</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireAfterRendering(mParameters?: any): sap.ui.core.mvc.View;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeExit" href="#/api/sap.ui.core.mvc.View/events/beforeExit">beforeExit</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireBeforeExit(mParameters?: any): sap.ui.core.mvc.View;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.mvc.View/events/beforeRendering">beforeRendering</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireBeforeRendering(mParameters?: any): sap.ui.core.mvc.View;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p><p>Child Controls of the view</p>
           * @returns sap.ui.core.Control[] 
           */
          getContent(): sap.ui.core.Control[];
          /**
           * <p>Returns the view's Controller instance or null for a controller-less View.</p>
           * @returns any <p>Controller of this view.</p>
           */
          getController(): any;
          /**
           * <p>An (optional) method to be implemented by Views. When no controller instance is given at View instantiation time AND this method exists and returns the (package and class) name of a controller, the View tries to load and instantiate the controller and to connect it to itself.</p>
           * @returns string <p>the name of the controller</p>
           */
          getControllerName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayBlock" href="#/api/sap.ui.core.mvc.View/methods/getDisplayBlock">displayBlock</a>.</p><p>Whether the CSS display should be set to "block". Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height. Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).</p><p>Default value is <code>false</code>.</p>
           * @returns boolean <p>Value of property <code>displayBlock</code></p>
           */
          getDisplayBlock(): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.mvc.View/methods/getHeight">height</a>.</p><p>The height</p>
           * @returns sap.ui.core.CSSSize <p>Value of property <code>height</code></p>
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * <p>Returns the local ID of an element by removing the view ID prefix or <code>null</code> if the ID does not contain a prefix.</p>
           * @param {string} sId <p>Prefixed ID</p>
           * @returns string <p>ID without prefix or <code>null</code></p>
           */
          getLocalId(sId: string): string;
          /**
           * <p>Returns the info object which is also passed to the preprocessors<br><br>References: <ul><li>sap.ui.core.mvc.View.Preprocessor.process</li></ul></p>
           * @param {boolean} bSync <p>Describes the view execution, true if sync</p>
           * @returns any <p>Info object for the view</p>
           */
          protected getPreprocessorInfo(bSync: boolean): any;
          /**
           * <p>Returns user specific data object</p>
           * @returns any <p>viewData</p>
           */
          getViewData(): any;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViewName" href="#/api/sap.ui.core.mvc.View/methods/getViewName">viewName</a>.</p><p>Name of the View</p>
           * @returns string <p>Value of property <code>viewName</code></p>
           */
          getViewName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.mvc.View/methods/getWidth">width</a>.</p><p>The width</p><p>Default value is <code>100%</code>.</p>
           * @returns sap.ui.core.CSSSize <p>Value of property <code>width</code></p>
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * <p>Checks if any preprocessors are active for the specified type</p>
           * @param {string} sType <p>Type of the preprocessor, e.g. "raw", "xml" or "controls"</p>
           * @returns boolean <p><code>true</code> if a preprocessor is active</p>
           */
          protected hasPreprocessor(sType: string): boolean;
          /**
           * <p>Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.Control} oContent <p>The content whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfContent(oContent: sap.ui.core.Control): number;
          /**
           * <p>Inserts a content into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p>
           * @param {sap.ui.core.Control} oContent <p>The content to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the content should be inserted at; for a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position</p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertContent(oContent: sap.ui.core.Control, iIndex: number): sap.ui.core.mvc.View;
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.Control[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllContent(): sap.ui.core.Control[];
          /**
           * <p>Removes a content from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.mvc.View/methods/getContent">content</a>.</p>
           * @param {number | string | sap.ui.core.Control} vContent <p>The content to remove or its index or id</p>
           * @returns sap.ui.core.Control <p>The removed content or <code>null</code></p>
           */
          removeContent(vContent: number | string | sap.ui.core.Control): sap.ui.core.Control;
          /**
           * <p>Executes preprocessors for a type of source</p>
           * @param {string} sType <p>the type of preprocessor, e.g. "raw", "xml" or "controls"</p>
           * @param {any | string | HTMLElement} vSource <p>the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those</p>
           * @param {boolean} bSync <p>describes the view execution, true if sync</p>
           * @returns Promise|object|string|Element <p>a promise resolving with the processed source or an error | the source when bSync=true</p>
           */
          protected runPreprocessor(sType: string, vSource: any | string | HTMLElement, bSync?: boolean): Promise<any> | any | string | HTMLElement;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getDisplayBlock" href="#/api/sap.ui.core.mvc.View/methods/getDisplayBlock">displayBlock</a>.</p><p>Whether the CSS display should be set to "block". Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height. Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>false</code>.</p>
           * @param {boolean} bDisplayBlock <p>New value for property <code>displayBlock</code></p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setDisplayBlock(bDisplayBlock: boolean): sap.ui.core.mvc.View;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getHeight" href="#/api/sap.ui.core.mvc.View/methods/getHeight">height</a>.</p><p>The height</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {sap.ui.core.CSSSize} sHeight <p>New value for property <code>height</code></p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setHeight(sHeight: sap.ui.core.CSSSize): sap.ui.core.mvc.View;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getViewName" href="#/api/sap.ui.core.mvc.View/methods/getViewName">viewName</a>.</p><p>Name of the View</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sViewName <p>New value for property <code>viewName</code></p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setViewName(sViewName: string): sap.ui.core.mvc.View;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getWidth" href="#/api/sap.ui.core.mvc.View/methods/getWidth">width</a>.</p><p>The width</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>100%</code>.</p>
           * @param {sap.ui.core.CSSSize} sWidth <p>New value for property <code>width</code></p>
           * @returns sap.ui.core.mvc.View <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setWidth(sWidth: sap.ui.core.CSSSize): sap.ui.core.mvc.View;
        }
        namespace View {
          /**
           * <p><p>Interface for Preprocessor implementations that can be hooked in the view life cycle.</p><p>There are two possibilities to use the preprocessor. It can be either passed to the view via the mSettings.preprocessors object where it is the executed only for this instance, or by the registerPreprocessor method of the view type. Currently this is available only for XMLViews (as of version 1.30).</p><br><br>References: <ul><li>sap.ui.view</li><li>sap.ui.core.mvc.View.registerPreprocessor (the method is available specialized for view types, so use the following)</li><li>sap.ui.core.mvc.XMLView.registerPreprocessor</li></ul></p>
           */
          export interface Preprocessor {
          }
        }
        /**
         * <p><p>Specifies possible view types.</p></p>
         */
        export enum ViewType {
          /**
           * <p>HTML view</p>
           */
          HTML = "HTML",
          /**
           * <p>JS View</p>
           */
          JS = "JS",
          /**
           * <p>JSON View</p>
           */
          JSON = "JSON",
          /**
           * <p>Template View</p>
           */
          Template = "Template",
          /**
           * <p>XML view</p>
           */
          XML = "XML",
        }
        /**
         * <p>A View defined using (P)XML and HTML markup.</p><p><strong>Note:</strong><br> Be aware that modifications of the content aggregation of this control are not supported due to technical reasons. This includes calls to all content modifying methods like <code>addContent></code> etc., but also the implicit removal of controls contained by the content aggregation. For example the destruction of a Control via the <code> destroy</code> method. All functions can be called but may not work properly or lead to unexpected side effects.</p><p><strong>Note:</strong><br> On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;</code> tag. If you want to specify content for another aggregation of a view like <code>dependents</code>, place it in a child control's dependents aggregation or add it by using <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.XMLView/methods/addDependent">sap.ui.core.mvc.XMLView#addDependent</a>.</p>
         */
        export class XMLView extends sap.ui.core.mvc.View {
          /**
           * <p>Instantiates an XMLView from the given configuration options.</p><p>If a <code>viewName</code> is given, it must be a dot-separated name of an XML view resource (without the mandatory suffix ".view.xml"). The resource will be loaded asynchronously via the module system (preload caches might apply) and will be parsed as XML. Alternatively, an already loaded view <code>definition</code> can be provided, either as XML string or as an already parsed XML document. Exactly one of <code>viewName</code> or <code>definition</code> must be given, if none or both are given, an error will be reported.</p><p>The <code>controller</code> property is optional and can hold a controller instance. When given, it overrides the controller class defined in the view definition.</p><p><strong>Note</strong>: On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;</code> tag. If you want to specify content for another aggregation of a view like <code>dependents</code>, place it in a child control's <code>dependents</code> aggregation or add it by using <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.XMLView/methods/addDependent">sap.ui.core.mvc.XMLView#addDependent</a>.</p><p><strong>Note</strong>: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still an experimental feature and may experience slight changes of the invalidation parameters or the cache key format.</p>
           * @param {any} oOptions <p>An object containing the view configuration options.</p>
           * @returns any <p>A Promise that resolves with the view instance or rejects with any thrown error.</p>
           */
          static create(oOptions: any): any;
          /**
           * <p>Register a preprocessor for all views of a specific type.</p><p>The preprocessor can be registered for several stages of view initialization, for xml views these are either the plain "xml" or the already initialized "controls" , see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.XMLView.PreprocessorType">sap.ui.core.mvc.XMLView.PreprocessorType</a>. For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made sure, that they do not conflict when being processed serially.</p><p>It can be either a module name as string of an implementation of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View.Preprocessor">sap.ui.core.mvc.View.Preprocessor</a> or a function with a signature according to <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View.Preprocessor/methods/sap.ui.core.mvc.View.Preprocessor.process">sap.ui.core.mvc.View.Preprocessor.process</a>.</p><p><strong>Note</strong>: Preprocessors work only in async views and will be ignored when the view is instantiated in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the bSyncSupport flag to true.</p>
           * @param {string | sap.ui.core.mvc.XMLView.PreprocessorType} sType <p>the type of content to be processed</p>
           * @param {string | Function} vPreprocessor <p>module path of the preprocessor implementation or a preprocessor function</p>
           * @param {boolean} bSyncSupport <p>declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may break the view initialization and lead to unexpected results.</p>
           * @param {boolean} bOnDemand <p>ondemand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting <code>preprocessors : { xml }</code>, for example.</p>
           * @param {any} mSettings <p>optional configuration for preprocessor</p>
           */
          static registerPreprocessor(sType: string | sap.ui.core.mvc.XMLView.PreprocessorType, vPreprocessor: string | Function, bSyncSupport: boolean, bOnDemand?: boolean, mSettings?: any): void;
          /**
           * <p>Constructor for a new mvc/XMLView.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p><p>This class does not have its own settings, but all settings applicable to the base type <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View/constructor">sap.ui.core.mvc.View</a> can be used.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Flag for feature detection of asynchronous loading/rendering</p>
           */
          asyncSupport: any;
        }
        namespace XMLView {
          /**
           * <p><p>Specifies the available preprocessor types for XMLViews</p><br><br>References: <ul><li>sap.ui.core.mvc.XMLView</li><li>sap.ui.core.mvc.View.Preprocessor</li></ul></p>
           */
          export enum PreprocessorType {
            /**
             * <p>This preprocessor receives the control tree produced through the view source</p>
             */
            CONTROLS = "CONTROLS",
            /**
             * <p>This preprocessor receives a valid xml source for View creation without any template tags but with control declarations. These include their full IDs by which they can also be queried during runtime.</p>
             */
            VIEWXML = "VIEWXML",
            /**
             * <p>This preprocessor receives the plain xml source of the view and should also return a valid xml ready for view creation</p>
             */
            XML = "XML",
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Provides an API for an in-place DOM patching.</p></p>
       */
      namespace Patcher {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type that represents a percentage value.</p></p>
       */
      export type Percentage = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace Popup {
        /**
         * <p><p>Enumeration providing options for docking of some element to another. "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side ("Begin" is "Right" in RTL).</p></p>
         */
        export enum Dock {
          /**
           */
          BeginBottom = "BeginBottom",
          /**
           */
          BeginCenter = "BeginCenter",
          /**
           */
          BeginTop = "BeginTop",
          /**
           */
          CenterBottom = "CenterBottom",
          /**
           */
          CenterCenter = "CenterCenter",
          /**
           */
          CenterTop = "CenterTop",
          /**
           */
          EndBottom = "EndBottom",
          /**
           */
          EndCenter = "EndCenter",
          /**
           */
          EndTop = "EndTop",
          /**
           */
          LeftBottom = "LeftBottom",
          /**
           */
          LeftCenter = "LeftCenter",
          /**
           */
          LeftTop = "LeftTop",
          /**
           */
          RightBottom = "RightBottom",
          /**
           */
          RightCenter = "RightCenter",
          /**
           */
          RightTop = "RightTop",
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Base Class for a Renderer.</p></p>
       */
      namespace Renderer {
        /**
         * <p>Creates a new renderer that extends a given renderer.</p><p>This method can be used with two signatures that are explained below. In both variants, the returned renderer inherits all properties (methods, fields) from the given parent renderer. Both variants also add an 'extend' method to the created renderer that behaves like the modern signature variant of this <code>Renderer.extend</code> method, but allows to extend the new renderer instead of <code>sap.ui.core.Renderer</code>.</p><h3>Modern Signature</h3><p>In the modern signature variant, two parameters must be given: a qualified name for the new renderer (its global name, in dot-notation), and an optional object literal that contains methods or fields to be added to the new renderer class.</p><p>This signature has been designed to resemble the class extension mechanism as provided by <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">Object.extend</a>.</p><p><pre>
        sap.ui.define(['sap/ui/core/Renderer'],
            function(Renderer) {
            "use strict";
        
            var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {
                render: function(oRM, oControl) {
        
                    renderPreamble(oRM, oControl);
        
                    // implementation core renderer logic here
        
                    renderPostamble(oRM, oControl);
        
                },
        
                renderPreamble : function(oRM, oControl) {
                ...
                },
        
                renderPostamble : function(oRM, oControl) {
                ...
                }
        
            });
        
            return LabelRenderer;
        });
        </pre></p><p>The extension of renderers works across multiple levels. A <code>FancyLabelRenderer</code> can extend the above <code>LabelRenderer</code>:</p><p><pre>
        sap.ui.define(['sap/m/LabelRenderer'],
            function(LabelRenderer) {
            "use strict";
        
            var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {
                render: function(oRM, oControl) {
        
                    // call base renderer
                    LabelRenderer.renderPreamble(oRM, oControl);
        
                    // ... do your own fancy rendering here
        
                    // call base renderer again
                    LabelRenderer.renderPostamble(oRM, oControl);
                }
            });
        
            return FancyLabelRenderer;
        });
        </pre></p><p><b>Note:</b> The modern signature no longer requires the <code>bExport</code> flag to be set for the enclosing <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.define">sap.ui.define</a> call. The Renderer base class takes care of the necessary global export of the renderer. This allows non-SAP developers to write a renderer that complies with the documented restriction for <code>sap.ui.define</code> (no use of bExport = true outside sap.ui.core projects).</p><h3>Deprecated Signature</h3><p>The deprecated old signature expects just one parameter: a renderer that should be extended. With that signature, the renderer can't be exported globally as the name of the renderer class is not known.</p><p>For compatibility reasons, the class created by the deprecated signature contains a property <code>_super</code> that references the parent class. It shouldn't be used by applications / control developers as it doesn't work reliably for deeper inheritance chains: if the old variant of <code>Renderer.extend</code> is used on two or more levels of the inheritance hierarchy, the <code>_super</code> property of the resulting renderer class will always point to the implementation of the base renderer of the last call to extend. Instead of using <code>this._super</code>, renderer implementations should use the new signature variant and access the base implementation of a method via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).</p><h3>Use as a Generic Method</h3><p>Only renderers that have been created with a call to <code>extend</code> will get their own <code>extend</code> method to create new subclasses. To allow extending from older renderers that have been written from scratch as a plain object, the <code>Renderer.extend</code> method can be called as a <i>generic method</i>, providing the base renderer as <code>this</code>.</p><p>Example: Derive from <code>HBoxRenderer</code> (which is assumed to be a plain object) <pre>
        sap.ui.define(['sap/ui/core/Renderer', 'sap/m/HBoxRenderer'],
            function(Renderer, HBoxRenderer) {
            "use strict";
        
            // Call 'extend' as a generic method, providing the HBoxRenderer as 'this'
            var MyRenderer = Renderer.extend.call(HBoxRenderer, 'sap.m.LabelRenderer', {
        
                someOverriddenHook: function(oRM, oControl) {
                ...
                },
        
            });
        
            return LabelRenderer;
        });
        </pre></p><p><b>Note:</b> The deprecated signature cannot be used generically, it is only supported when called on <code>sap.ui.core.Renderer</code>.</p>
         * @param {string | any} vName <p>Either the name of the new renderer class (modern signature) or the base renderer to extend (deprecated signature)</p>
         * @param {any} oRendererInfo <p>Methods and/or properties that should be added to the new renderer class</p>
         * @returns any <p>A new renderer that can be enriched further</p>
         */
        function extend(vName: string | any, oRendererInfo?: any): any;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>The resize handling API provides firing of resize events on all browsers by regularly checking the width and height of registered DOM elements or controls and firing events accordingly.</p></p>
       */
      namespace ResizeHandler {
        /**
         * <p>Deregisters a previously registered handler for resize events with the given registration ID.</p>
         * @param {string} sId <p>The registration ID of the handler to deregister. The ID was provided by function <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.ResizeHandler.register" href="#/api/sap.ui.core.ResizeHandler/methods/sap.ui.core.ResizeHandler.register">sap.ui.core.ResizeHandler.register</a> when the handler was registered.</p>
         */
        function deregister(sId: string): void;
        /**
         * <p>Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName</code> and enriches it with the information contained in <code>oClassInfo</code>.</p><p><code>oClassInfo</code> might contain the same kind of information as described in <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">sap.ui.base.Object.extend</a>.</p>
         * @param {string} sClassName <p>Name of the class being created</p>
         * @param {any} oClassInfo <p>Object literal with information about the class</p>
         * @param {Function} FNMetaImpl <p>Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code></p>
         * @returns Function <p>Created class / constructor function</p>
         */
        function extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: Function): Function;
        /**
         * <p>Returns a metadata object for class sap.ui.core.ResizeHandler.</p>
         * @returns sap.ui.base.Metadata <p>Metadata object describing this class</p>
         */
        function getMetadata(): sap.ui.base.Metadata;
        /**
         * <p>Registers the given event handler for resize events on the given DOM element or control.</p><p><b>Note:</b> This function must not be used before the UI5 framework is initialized. Please use the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Core/methods/attachInit">init event</a> of UI5 if you are not sure whether this is the case.</p><p>The resize handler periodically checks the dimensions of the registered reference. Whenever it detects changes, an event is fired. Be careful when changing dimensions within the event handler which might cause another resize event and so on.</p><p>The available parameters of the resize event are: <ul> <li><code>oEvent.target</code>: The DOM element of which the dimensions were checked</li> <li><code>oEvent.size.width</code>: The current width of the DOM element in pixels</li> <li><code>oEvent.size.height</code>: The current height of the DOM element in pixels</li> <li><code>oEvent.oldSize.width</code>: The previous width of the DOM element in pixels</li> <li><code>oEvent.oldSize.height</code>: The previous height of the DOM element in pixels</li> <li><code>oEvent.control</code>: The control which was given during registration of the event handler (if present)</li> </ul></p>
         * @param {HTMLElement | sap.ui.core.Control} oRef <p>The control or the DOM reference for which the given event handler should be registered (beside the window)</p>
         * @param {Function} fHandler <p>The event handler which should be called whenever the size of the given reference is changed. The event object is passed as first argument to the event handler. See the description of this function for more details about the available parameters of this event.</p>
         * @returns string <p>A registration ID which can be used for deregistering the event handler, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ResizeHandler/methods/sap.ui.core.ResizeHandler.deregister">sap.ui.core.ResizeHandler.deregister</a>. If the UI5 framework is not yet initialized <code>null</code> is returned.</p>
         */
        function register(oRef: HTMLElement | sap.ui.core.Control, fHandler: Function): string;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace support {
        /**
         */
        namespace usage {
          /**
           * <p>Broadcasts UI5 events via single native custom browser event. This way consumers have a generic mechanism for hooking into any UI5 event. Example consumer code: <pre>
              window.addEventListener("UI5Event", function(oEvent) {
          
                  // consumer coding, e.g. :
                  // analyze event
                  // store events - GDPR is responsibility of the consumer
                  // or any other
          
                  var oDetail = oEvent.detail;
          
                  console.log("UI5 Event " 				+ oDetail.eventName
                    + " occurred at " 					+ new Date(oDetail.timestamp).toString()
                    + " for element " 					+ oDetail.targetId
                    + " of type "						+ oDetail.targetType
                    + ", which is part of component " 	+ oDetail.componentId
                    + " with version " 					+ oDetail.componentVersion
                    + " and additional parameters "		, oDetail.additionalAttributes);
          
              });
          </pre><br><br><span>Documentation links:</span><ul><li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent)">https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent)</a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/></li></ul></p>
           */
          export class EventBroadcaster {
            /**
             * <p>Disables the EventBroadcaster.</p>
             */
            static disable(): void;
            /**
             * <p>Starts broadcasting events. Consumers could stop broadcasting via <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.support.usage.EventBroadcaster/methods/disable">EventBroadcaster.disable</a></p>
             */
            static enable(): void;
            /**
             * <p>Returns the currently set Blacklist configuration. Returned object is copied from the original one. In case you modify it, you have to set it by using the <code>setEventBlacklist</code> setter in order for it to take effect.</p>
             */
            static getEventsBlacklist(): void;
            /**
             * <p>Sets a new Blacklist configuration.</p><p>BlackList configuration should have the following structure as in the example shown below.</p><p>In <code>global</code> object, we set all events that we don't want to track. In <code>controls</code> object, we can list different controls and include or exclude events for them.</p><p>For example, in this configuration the <code>load</code> event is exposed for the <code>sap.m.Image</code> control regardless of it being excluded globally for all other controls.</p><p>For <code>sap.m.Button</code> control, we don't want to track the <code>tap</code> event but we need to track the <code>afterRendering</code> event.</p><p>In the case where we write in the <code>controls</code> object a control without any excluded or included events, this control is NOT tracked at all.</p><p>In the example configuration events coming from control <code>sap.m.AccButton</code> are not be exposed.</p><p><pre><code>
            {
                global: ["modelContextChange", "beforeRendering", "afterRendering",
                    "propertyChanged", "beforeGeometryChanged", "geometryChanged",
                    "aggregationChanged", "componentCreated", "afterInit",
                    "updateStarted", "updateFinished", "load", "scroll"
                    ],
                controls: {
                  "sap.m.Image": {
                    exclude: ["load"]
                  },
                  "sap.m.Button": {
                    include: ["tap"],
                    exclude: ["afterRendering"]
                  },
                  "sap.m.AccButton": {}
                }
              }
            </pre></code> The set configuration object is copied from the given one.</p>
             */
            static setEventsBlacklist(): void;
            /**
             * <p>Event broadcaster. This class is meant for private usages. Apps are not supposed to used it. It is created for an experimental purpose.</p>
             */
            constructor();
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace theming {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace theming {
        /**
         * <p><p>A helper used for (read-only) access to CSS parameters at runtime.</p></p>
         */
        namespace Parameters {
          /**
           * <p>Returns the current value for one or more theming parameters, depending on the given arguments. <ul> <li>If no parameter is given a key-value map containing all parameters is returned</li> <li>If a <code>string</code> is given as first parameter the value is returned as a <code>string</code></li> <li>If an <code>array</code> is given as first parameter a key-value map containing all parameters from the <code>array</code> is returned</li> </ul> <p>The returned key-value maps are a copy so changing values in the map does not have any effect</p></p>
           * @param {string | string[]} vName <p>the (array with) CSS parameter name(s)</p>
           * @param {sap.ui.core.Element} oElement <p>Element / control instance to take into account when looking for a parameter value. This can make a difference when a parameter value is overridden in a theme scope set via a CSS class.</p>
           * @returns string|object|undefined <p>the CSS parameter value(s)</p>
           */
          function get(vName: string | string[], oElement?: sap.ui.core.Element): string | any | undefined;
          /**
           * <p>Resets the CSS parameters which finally will reload the parameters the next time they are queried via the method <code>get</code>.</p>
           */
          function reset(): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>A string type that represents an RFC 3986 conformant URI.</p></p>
       */
      export type URI = string;
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        /**
         * <p><p>Utility class to handle files.</p></p>
         */
        namespace File {
          /**
           * <p><p>Triggers a download / save action of the given file.</p></p><p><p>There are limitations for this feature in some browsers:<p><p><b>macOS Safari < 10.1 / iOS Safari</b><br> A new window or tab is opened. In macOS, the user has to save the file manually (by using key combination "CMD + S", choosing the page source format, and specifying a file name). In iOS, the content can be opened in another app (Mail, Notes, ...) or can be copied to the clipboard. If a pop-up blocker prevents this action, an error will be thrown which can be used to notify the user that the pop-up blocker needs to be disabled.</p></p><p><p><b>Android Browser</b><br> Not supported</p></p><p><p><b>Windows Phone 10 Edge</b><br> Not supported</p></p>
           * @param {string} sData <p>file content</p>
           * @param {string} sFileName <p>file name</p>
           * @param {string} sFileExtension <p>file extension</p>
           * @param {string} sMimeType <p>file mime-type</p>
           * @param {string} sCharset <p>file charset</p>
           * @param {boolean} bByteOrderMark <p>Whether to prepend a unicode byte order mark (only applies for utf-8 charset). Default is <code>false</code> except when <code>sFileExtension</code> = <code>csv</code> it is <code>true</code> (compatibility reasons).</p>
           */
          function save(sData: string, sFileName: string, sFileExtension: string, sMimeType: string, sCharset: string, bByteOrderMark?: boolean): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        namespace reflection {
          /**
           * <p><p>Abstract static utility class to access ManageObjects and XMLNodes that represent ManagedObjects in a harmonized way.</p><p>The class mirrors the ManagedObject API so that code that needs to work with ManagedObjects in several representations can be written in a single way. The slight differences are handled by specifying a super set of parameters that might not be needed in all use cases. For example sap.ui.fl uses this class and its subtypes for change handlers that can be applied on XMLViews and normal ManagedObject instances.</p></p>
           */
          namespace BaseTreeModifier {
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">sap.ui.base.ManagedObject#applySettings</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {any} mSettings <p>Further settings or properties for the control</p>
             * @returns HTMLElement <p>XML node of the control being created</p>
             */
            function applySettings(vControl: sap.ui.base.ManagedObject | HTMLElement, mSettings: any): HTMLElement;
            /**
             * <p>Attaches event on the specified ManagedObject.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sEventName <p>Event name</p>
             * @param {string} sFunctionPath <p>Absolute path to a function</p>
             * @param {any} vData <p>Predefined values for event handler function</p>
             */
            function attachEvent(vControl: sap.ui.base.ManagedObject | HTMLElement, sEventName: string, sFunctionPath: string, vData: any): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">sap.ui.base.ManagedObject#bindAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             * @param {any} vBindingInfos <p>Binding info</p>
             */
            function bindAggregation(vControl: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string, vBindingInfos: any): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindProperty">sap.ui.base.ManagedObject#bindProperty</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @param {any} vBindingInfos <p>Binding info</p>
             */
            function bindProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string, vBindingInfos: any): void;
            /**
             * <p>Function determining the control targeted by the change. The function distinguishes between local IDs generated starting with 1.40 and the global IDs generated in previous versions.</p>
             * @param {any} oSelector <p>Target of a flexibility change</p>
             * @param {sap.ui.core.UIComponent} oAppComponent <p>Application component</p>
             * @param {HTMLElement} oView <p>For XML processing only: XML node of the view</p>
             * @returns sap.ui.base.ManagedObject|Element <p>Control representation targeted within the selector</p>
             */
            function bySelector(oSelector: any, oAppComponent: sap.ui.core.UIComponent, oView: HTMLElement): sap.ui.base.ManagedObject | HTMLElement;
            /**
             * <p>Creates the control in the corresponding representation.</p>
             * @param {string} sClassName <p>Class name for the control (for example, <code>sap.m.Button</code>), ensure the class is loaded (no synchronous requests are called)</p>
             * @param {sap.ui.core.UIComponent} oAppComponent <p>Needed to calculate the correct ID in case you provide an ID</p>
             * @param {HTMLElement} oView <p>XML node of the view, required for XML case to create nodes and to find elements</p>
             * @param {any} oSelector <p>Selector to calculate the ID for the control that is created</p>
             * @param {any} mSettings <p>Further settings or properties for the control that is created</p>
             * @param {boolean} bAsync <p>Determines whether a synchronous (promise) or an asynchronous value should be returned</p>
             * @returns Element|Promise <p>Element or promise with element of the control that is created</p>
             */
            function createControl(sClassName: string, oAppComponent: sap.ui.core.UIComponent, oView: HTMLElement, oSelector: any, mSettings: any, bAsync: boolean): HTMLElement | Promise<any>;
            /**
             * <p>Cleans up the resources associated with this object and all its aggregated children. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/destroy">sap.ui.base.ManagedObject#destroy</a> method.</p><p>After an object has been destroyed, it can no longer be used! Applications should call this method if they don't need the object any longer.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             */
            function destroy(vControl: sap.ui.base.ManagedObject | HTMLElement): void;
            /**
             * <p>Detaches event from the specified ManagedObject.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sEventName <p>Event name</p>
             * @param {string} sFunctionPath <p>Absolute path to a function</p>
             */
            function detachEvent(vControl: sap.ui.base.ManagedObject | HTMLElement, sEventName: string, sFunctionPath: string): void;
            /**
             * <p>Finds the index of the control in its parent aggregation.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control representation</p>
             * @returns number <p>Index of the control</p>
             */
            function findIndexInParentAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement): number;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getAggregation">sap.ui.base.ManagedObject#getAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control which has the aggregation</p>
             * @param {string} sName <p>Aggregation name</p>
             * @returns sap.ui.base.ManagedObject[]|Element[] <p>Aggregation content</p>
             */
            function getAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement, sName: string): sap.ui.base.ManagedObject[] | HTMLElement[];
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObjectMetadata/methods/getAllAggregations">sap.ui.base.ManagedObjectMetadata#getAllAggregations</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns { [key: string]: any } <p>Map of aggregation info objects keyed by aggregation names</p>
             */
            function getAllAggregations(vControl: sap.ui.base.ManagedObject | HTMLElement): { [key: string]: any };
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getAssociation">sap.ui.base.ManagedObject#getAssociation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control which has the association</p>
             * @param {string} sName <p>Association name</p>
             * @returns string|string[] <p>ID of the associated managed object or an array of such IDs; may be null if the association has not been populated</p>
             */
            function getAssociation(vParent: sap.ui.base.ManagedObject | HTMLElement, sName: string): string | string[];
            /**
             * <p>Get the binding template from an aggregation. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getBindingInfo">sap.ui.base.ManagedObject#getBindingInfo</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             */
            function getBindingTemplate(vControl: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string): void;
            /**
             * <p>Returns the module path of an instance specific change handler.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns string <p>Module path</p>
             */
            function getChangeHandlerModulePath(vControl: sap.ui.base.ManagedObject | HTMLElement): string;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Metadata/methods/getName">sap.ui.base.Metadata#getName</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns string <p>Control type</p>
             */
            function getControlType(vControl: sap.ui.base.ManagedObject | HTMLElement): string;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getId">sap.ui.base.ManagedObject#getId</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns string <p>ID</p>
             */
            function getId(vControl: sap.ui.base.ManagedObject | HTMLElement): string;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getParent">sap.ui.base.ManagedObject#getParent</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns sap.ui.base.ManagedObject|Element <p>Parent control in its representation</p>
             */
            function getParent(vControl: sap.ui.base.ManagedObject | HTMLElement): sap.ui.base.ManagedObject | HTMLElement;
            /**
             * <p>Removes all objects from the aggregation of the given control.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control representation of the parent only needed in XML case</p>
             * @returns string <p>Parent aggregation name</p>
             */
            function getParentAggregationName(vControl: sap.ui.base.ManagedObject | HTMLElement, vParent?: sap.ui.base.ManagedObject | HTMLElement): string;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getProperty">sap.ui.base.ManagedObject#getProperty</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>Value of the property</p>
             */
            function getProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string): any;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/getBindingInfo">sap.ui.base.ManagedObject#getBindingInfo</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>Binding info</p>
             */
            function getPropertyBinding(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string): any;
            /**
             * <p>Checks if there is a property binding and returns it if available, otherwise returns the value of the property.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>Binding info object or value of the property</p>
             */
            function getPropertyBindingOrProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string): any;
            /**
             * <p>Function for determining the selector that is used later to apply a change for a given control. The function distinguishes between local IDs generated starting with 1.40 and the global IDs generated in previous versions.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement | string} vControl <p>Control or ID string for which the selector should be determined</p>
             * @param {sap.ui.core.Component} oAppComponent <p>Application component, needed only if vControl is a string or XML node</p>
             * @param {any} mAdditionalSelectorInformation <p>Additional mapped data which is added to the selector</p>
             * @returns any <p>oSelector</p>
             */
            function getSelector(vControl: sap.ui.base.ManagedObject | HTMLElement | string, oAppComponent: sap.ui.core.Component, mAdditionalSelectorInformation?: any): any;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.StashedControlSupport/methods/getVisible">sap.ui.core.StashedControlSupport#getVisible</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns boolean <p>Whether the control is stashed or not</p>
             */
            function getStashed(vControl: sap.ui.base.ManagedObject | HTMLElement): boolean;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/getVisible">sap.ui.core.Control#getVisible</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @returns boolean <p>Whether the control's <code>visible</code> property is set or not</p>
             */
            function getVisible(vControl: sap.ui.base.ManagedObject | HTMLElement): boolean;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/insertAggregation">sap.ui.base.ManagedObject#insertAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control which has the aggregation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} oObject <p>XML node or element of the control that will be inserted</p>
             * @param {number} iIndex <p>Index for <code>oObject</code> in the aggregation</p>
             * @param {HTMLElement} oView <p>XML node of the view - needed in XML case to potentially create (aggregation) nodes</p>
             */
            function insertAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string, oObject: sap.ui.base.ManagedObject | HTMLElement, iIndex: number, oView?: HTMLElement): void;
            /**
             * <p>Loads a fragment and turns the result into an array of nodes; also prefixes all the controls with a given namespace; throws an error if there is at least one control in the fragment without a stable ID or has a duplicate ID in the given view.</p>
             * @param {string} sFragment <p>XML fragment as string</p>
             * @param {string} sNamespace <p>Namespace of the app</p>
             * @param {sap.ui.core.mvc.View} oView <p>View for the fragment</p>
             * @returns HTMLElement[] <p>Array with the nodes of the controls of the fragment</p>
             */
            function instantiateFragment(sFragment: string, sNamespace: string, oView: sap.ui.core.mvc.View): HTMLElement[];
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/isPropertyInitial">sap.ui.base.ManagedObject#isPropertyInitial</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns boolean <p><code>true</code> if the property is initial</p>
             */
            function isPropertyInitial(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string): boolean;
            /**
             * <p>Removes the object from the aggregation of the given control. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/removeAggregation">sap.ui.base.ManagedObject#removeAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} oObject <p>Aggregated object to be set</p>
             */
            function removeAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string, oObject: sap.ui.base.ManagedObject | HTMLElement): void;
            /**
             * <p>Removes all objects from the aggregation of the given control. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/removeAllAggregation">sap.ui.base.ManagedObject#removeAllAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             */
            function removeAllAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/setAssociation">sap.ui.base.ManagedObject#setAssociation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control which has the association</p>
             * @param {string} sName <p>Association name</p>
             * @param {string | sap.ui.base.ManagedObject | HTMLElement} sId <p>ID of the managed object that is set as an association, or the managed object or XML node itself or <code>null</code></p>
             */
            function setAssociation(vParent: sap.ui.base.ManagedObject | HTMLElement, sName: string, sId: string | sap.ui.base.ManagedObject | HTMLElement): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/setProperty">sap.ui.base.ManagedObject#setProperty</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @param {any} vPropertyValue <p>New value for the property</p>
             */
            function setProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string, vPropertyValue: any): void;
            /**
             * <p>Similar as <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="bindProperty" href="#/api/sap.ui.core.util.reflection.BaseTreeModifier/methods/bindProperty">#bindProperty</a>, but allows to specify binding like in control constructor.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @param {any} vPropertyBinding <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/extractBindingInfo">sap.ui.base.ManagedObject#extractBindingInfo</a> method</p>
             */
            function setPropertyBinding(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string, vPropertyBinding: any): void;
            /**
             * <p>Calls <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.reflection.BaseTreeModifier/methods/setPropertyBinding">sap.ui.core.util.reflection.BaseTreeModifier#setPropertyBinding</a> if the passed value is a binding info object or binding string, otherwise calls <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.reflection.BaseTreeModifier/methods/setProperty">sap.ui.core.util.reflection.BaseTreeModifier#setProperty</a>.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @param {any} vBindingOrValue <p>Property binding or property value</p>
             */
            function setPropertyBindingOrProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string, vBindingOrValue: any): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.StashedControlSupport/methods/setVisible">sap.ui.core.StashedControlSupport#setVisible</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {boolean} bVisible <p>New value for <code>stashed</code> property</p>
             */
            function setStashed(vControl: sap.ui.base.ManagedObject | HTMLElement, bVisible: boolean): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Control/methods/setVisible">sap.ui.core.Control#setVisible</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {boolean} bVisible <p>New value for <code>visible</code> property</p>
             */
            function setVisible(vControl: sap.ui.base.ManagedObject | HTMLElement, bVisible: boolean): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/unbindAggregation">sap.ui.base.ManagedObject#unbindAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name to be unbound</p>
             */
            function unbindAggregation(vControl: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/unbindProperty">sap.ui.base.ManagedObject#unbindProperty</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control representation</p>
             * @param {string} sPropertyName <p>Property name to be unbound</p>
             */
            function unbindProperty(vControl: sap.ui.base.ManagedObject | HTMLElement, sPropertyName: string): void;
            /**
             * <p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/updateAggregation">sap.ui.base.ManagedObject#updateAggregation</a> method.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Control representation</p>
             * @param {string} sAggregationName <p>Aggregation name</p>
             */
            function updateAggregation(vParent: sap.ui.base.ManagedObject | HTMLElement, sAggregationName: string): void;
            /**
             * <p>Validates if the control has the correct type for the aggregation.</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vControl <p>Control whose type is to be checked</p>
             * @param {any} mAggregationMetadata <p>Aggregation info object</p>
             * @param {sap.ui.base.ManagedObject | HTMLElement} vParent <p>Parent of the control</p>
             * @param {string} sFragment <p>Path to the fragment that contains the control, whose type is to be checked</p>
             * @param {number} iIndex <p>Index of the current control in the parent aggregation</p>
             * @returns boolean <p><code>true</code> if the type matches</p>
             */
            function validateType(vControl: sap.ui.base.ManagedObject | HTMLElement, mAggregationMetadata: any, vParent: sap.ui.base.ManagedObject | HTMLElement, sFragment: string, iIndex: number): boolean;
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        namespace reflection {
          /**
           * <p><p>Static utility class to access ManagedObjects in a harmonized way with XMLNodes.</p></p>
           */
          namespace JsControlTreeModifier {
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        namespace reflection {
          /**
           * <p><p>Static utility class to access XMLNodes like ManageObjects, inside this classes oControl usually means XML node.</p></p>
           */
          namespace XmlTreeModifier {
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        /**
         * <p><p>The XML pre-processor for template instructions in XML views.</p></p>
         */
        namespace XMLPreprocessor {
          /**
           * <p><p>Context interface provided by XML template processing as an additional first argument to any formatter function which opts in to this mechanism. Candidates for such formatter functions are all those used in binding expressions which are evaluated during XML template processing, including those used inside template instructions like <code>&lt;template:if></code>. The formatter function needs to be marked with a property <code>requiresIContext = true</code> to express that it requires this extended signature (compared to ordinary formatter functions). The usual arguments are provided after the first one (currently: the raw value from the model).</p><p>This interface provides callback functions to access the model and path which are needed to process OData V4 annotations. It initially offers a subset of methods from <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Context">sap.ui.model.Context</a> so that formatters might also be called with a context object for convenience, e.g. outside of XML template processing (see below for an exception to this rule).</p><p><b>Example:</b> Suppose you have a formatter function called "foo" like below and it is used within an XML template like <code>&lt;template:if test="{path: '...', formatter: 'foo'}"></code>. In this case <code>foo</code> is called with arguments <code>oInterface, vRawValue</code> such that <code>oInterface.getModel().getObject(oInterface.getPath()) === vRawValue</code> holds. <pre>
          window.foo = function (oInterface, vRawValue) {
              //TODO ...
          };
          window.foo.requiresIContext = true;
          </pre></p><p><b>Composite Binding Examples:</b> Suppose you have the same formatter function and it is used in a composite binding like <code>&lt;Text text="{path: 'Label', formatter: 'foo'}: {path: 'Value', formatter: 'foo'}"/></code>. In this case <code>oInterface.getPath()</code> refers to ".../Label" in the 1st call and ".../Value" in the 2nd call. This means each formatter call knows which part of the composite binding it belongs to and behaves just as if it was an ordinary binding.</p><p>Suppose your formatter is not used within a part of the composite binding, but at the root of the composite binding in order to aggregate all parts like <code> &lt;Text text="{parts: [{path: 'Label'}, {path: 'Value'}], formatter: 'foo'}"/></code>. In this case <code>oInterface.getPath(0)</code> refers to ".../Label" and <code>oInterface.getPath(1)</code> refers to ".../Value". This means, the root formatter can access the ith part of the composite binding at will (since 1.31.0); see also <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.util.XMLPreprocessor.IContext.getInterface" href="#/api/sap.ui.core.util.XMLPreprocessor.IContext/methods/sap.ui.core.util.XMLPreprocessor.IContext.getInterface">getInterface</a>. The function <code>foo</code> is called with arguments such that <code> oInterface.getModel(i).getObject(oInterface.getPath(i)) === arguments[i + 1]</code> holds. This use is not supported within an expression binding, that is, <code>&lt;Text text="{= ${parts: [{path: 'Label'}, {path: 'Value'}], formatter: 'foo'} }"/></code> does not work as expected because the property <code>requiresIContext = true</code> is ignored.</p><p>To distinguish those two use cases, just check whether <code>oInterface.getModel() === undefined</code>, in which case the formatter is called on root level of a composite binding. To find out the number of parts, probe for the smallest non-negative integer where <code>oInterface.getModel(i) === undefined</code>. This additional functionality is, of course, not available from <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Context">sap.ui.model.Context</a>, i.e. such formatters MUST be called with an instance of this context interface.</p></p>
           */
          export interface IContext {
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       * <p><p>Helper functionality for value state support.</p></p>
       */
      namespace ValueStateSupport {
        /**
         * <p>Appends a generic success, warning or error message to the given tooltip text if the given Element has a property "valueState" with one of these three states.</p>
         * @param {sap.ui.core.Element} oElement <p>the Element of which the tooltip needs to be modified</p>
         * @param {string} sTooltipText <p>the original tooltip text (may be null)</p>
         * @returns string <p>the given text, with appended success/warning/error text, if appropriate</p>
         */
        function enrichTooltip(oElement: sap.ui.core.Element, sTooltipText: string): string;
        /**
         * <p>Returns a ValueState object based on the given integer value</p><p>0 : ValueState.None 1 : ValueState.Warning 2 : ValueState.Success 3 : ValueState.Error 4 : ValueState.Information</p>
         * @param {number} iState <p>the state as an integer</p>
         * @returns sap.ui.core.ValueState <p>the corresponding ValueState object</p>
         */
        function formatValueState(iState: number): sap.ui.core.ValueState;
        /**
         * <p>Returns a generic success, warning or error message if the given Element has a property "valueState" with one of these three states or the given ValueState represents one of these states.</p>
         * @param {sap.ui.core.Element | sap.ui.core.ValueState} vValue <p>the Element of which the valueState needs to be checked, or the ValueState explicitly</p>
         * @returns string <p>the success/warning/error text, if appropriate; otherwise null</p>
         */
        function getAdditionalText(vValue: sap.ui.core.Element | sap.ui.core.ValueState): string;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     * <p><p>Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events like media queries, orientation change or resizing.</p><p>This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap dynamically depending on the capabilities of the browser or device.</p></p>
     */
    namespace Device {
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Contains information about the used browser.</p></p>
       */
      namespace browser {
        /**
         * <p>If this flag is set to <code>true</code>, a browser featuring a Blink rendering engine is used.</p>
         */
        var blink: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Google Chrome browser is used.</p>
         */
        var chrome: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Microsoft Edge browser is used.</p>
         */
        var edge: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.</p>
         */
        var firefox: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.</p><p><b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected, technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g. the availability of <a target="_self" class="jsdoclink" href="#/api/version">sap.ui.Device.browser.version</a>.</p>
         */
        var fullscreen: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.<span class="sapUiDeprecated"><br>Deprecated as of version 1.20. use <a target="_self" class="jsdoclink" href="#/api/msie">sap.ui.Device.browser.msie</a> instead.</span></p>
         */
        var internet_explorer: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the mobile variant of the browser is used or a tablet or phone device is detected.</p><p><b>Note:</b> This information might not be available for all browsers.</p>
         */
        var mobile: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.</p>
         */
        var mozilla: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.</p>
         */
        var msie: boolean;
        /**
         * <p>The name of the browser.</p>
         */
        var name: String;
        /**
         * <p>If this flag is set to <code>true</code>, the Apple Safari browser is used.</p><p><b>Note:</b> This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices. Please also note the flags <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.browser.fullscreen">sap.ui.Device.browser.fullscreen</a> and <a target="_self" class="jsdoclink" href="#/api/webview">sap.ui.Device.browser.webview</a>.</p>
         */
        var safari: boolean;
        /**
         * <p>The version of the browser as <code>float</code>.</p><p>Might be <code>-1</code> if no version can be determined.</p>
         */
        var version: number;
        /**
         * <p>The version of the browser as <code>string</code>.</p><p>Might be empty if no version can be determined.</p>
         */
        var versionStr: String;
        /**
         * <p>If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.</p><p><b>Note:</b> This flag is also <code>true</code> when the used browser was based on the Webkit engine, but uses another rendering engine in the meantime. For example the Chrome browser started from version 28 and above uses the Blink rendering engine.</p>
         */
        var webkit: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.</p><p><b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected, technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g. the availability of <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.browser.version">sap.ui.Device.browser.version</a>.</p>
         */
        var webview: boolean;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      namespace browser {
        /**
         * <p><p>Enumeration containing the names of known browsers.</p></p>
         */
        export enum BROWSER {
          /**
           * <p>Android stock browser name.</p>
           */
          ANDROID = "ANDROID",
          /**
           * <p>Chrome browser name.</p>
           */
          CHROME = "CHROME",
          /**
           * <p>Edge browser name.</p>
           */
          EDGE = "EDGE",
          /**
           * <p>Firefox browser name.</p>
           */
          FIREFOX = "FIREFOX",
          /**
           * <p>Internet Explorer browser name.</p>
           */
          INTERNET_EXPLORER = "INTERNET_EXPLORER",
          /**
           * <p>Safari browser name.</p>
           */
          SAFARI = "SAFARI",
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Event API for screen width changes.</p><p>This API is based on media queries but can also be used if media queries are not natively supported by the used browser. In this case, the behavior of media queries is simulated by this API.</p><p>There are several predefined <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media.RANGESETS">range sets</a> available. Each of them defines a set of intervals for the screen width (from small to large). Whenever the screen width changes and the current screen width is in a different interval to the one before the change, the registered event handlers for the range set are called.</p><p>If needed, it is also possible to define a custom set of intervals.</p><p>The following example shows a typical use case: <pre>
      function sizeChanged(mParams) {
          switch(mParams.name) {
              case "Phone":
                  // Do what is needed for a little screen
                  break;
              case "Tablet":
                  // Do what is needed for a medium sized screen
                  break;
              case "Desktop":
                  // Do what is needed for a large screen
          }
      }
      
      // Register an event handler to changes of the screen size
      sap.ui.Device.media.attachHandler(sizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
      // Do some initialization work based on the current size
      sizeChanged(sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD));
      </pre></p></p>
       */
      namespace media {
        /**
         * <p>Registers the given event handler to change events of the screen width based on the range set with the specified name.</p><p>The event is fired whenever the screen width changes and the current screen width is in a different interval of the given range set than before the width change.</p><p>The event handler is called with a single argument: a map <code>mParams</code> which provides the following information about the entered interval: <ul> <li><code>mParams.from</code>: The start value (inclusive) of the entered interval as a number</li> <li><code>mParams.to</code>: The end value (exclusive) range of the entered interval as a number or undefined for the last interval (infinity)</li> <li><code>mParams.unit</code>: The unit used for the values above, e.g. <code>"px"</code></li> <li><code>mParams.name</code>: The name of the entered interval, if available</li> </ul></p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information about the entered range set is provided as a single argument to the handler (see details above).</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.</p>
         * @param {string} sName <p>The name of the range set to listen to. The range set must be initialized beforehand (<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.Device.media.initRangeSet" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a>). If no name is provided, the <a target="_self" class="jsdoclink" href="#/api/SAP_STANDARD">default range set</a> is used.</p>
         */
        function attachHandler(fnFunction: Function, oListener?: any, sName?: string): void;
        /**
         * <p>Removes a previously attached event handler from the change events of the screen width.</p><p>The passed parameters must match those used for registration with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.Device.media.attachHandler" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.attachHandler">#.attachHandler</a> beforehand.</p>
         * @param {Function} fnFunction <p>The handler function to detach from the event</p>
         * @param {any} oListener <p>The object that wanted to be notified when the event occurred</p>
         * @param {string} sName <p>The name of the range set to listen to. If no name is provided, the <a target="_self" class="jsdoclink" href="#/api/SAP_STANDARD">default range set</a> is used.</p>
         */
        function detachHandler(fnFunction: Function, oListener?: any, sName?: string): void;
        /**
         * <p>Returns information about the current active range of the range set with the given name.</p><p>If the optional parameter <code>iWidth</iWidth> is given, the active range will be determined for that width, otherwise it is determined for the current window size.</p>
         * @param {string} sName <p>The name of the range set. The range set must be initialized beforehand (<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.Device.media.initRangeSet" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a>)</p>
         * @param {number} iWidth <p>An optional width, based on which the range should be determined; If <code>iWidth</code> is not a number, the window size will be used.</p>
         * @returns { [key: string]: any } <p>Information about the current active interval of the range set. The returned map has the same structure as the argument of the event handlers (<a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.attachHandler">sap.ui.Device.media.attachHandler</a>)</p>
         */
        function getCurrentRange(sName: string, iWidth?: number): { [key: string]: any };
        /**
         * <p>Returns <code>true</code> if a range set with the given name is already initialized.</p>
         * @param {string} sName <p>The name of the range set.</p>
         * @returns boolean <p>Returns <code>true</code> if a range set with the given name is already initialized</p>
         */
        function hasRangeSet(sName: string): boolean;
        /**
         * <p>Initializes a screen width media query range set.</p><p>This initialization step makes the range set ready to be used for one of the other functions in namespace <code>sap.ui.Device.media</code>. The most important <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media.RANGESETS">predefined range sets</a> are initialized automatically.</p><p>To make a not yet initialized <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media.RANGESETS">predefined range set</a> ready to be used, call this function with the name of the range set to be initialized: <pre>
        sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);
        </pre></p><p>Alternatively it is possible to define custom range sets as shown in the following example: <pre>
        sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"]);
        </pre> This example defines the following named ranges: <ul> <li><code>"Small"</code>: For screens smaller than 200 pixels.</li> <li><code>"Medium"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li> <li><code>"Large"</code>: For screens greater than or equal to 400 pixels.</li> </ul> The range names are optional. If they are specified a CSS class (e.g. <code>sapUiMedia-MyRangeSet-Small</code>) is also added to the document root depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.</p>
         * @param {string} sName <p>The name of the range set to be initialized - either a <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media.RANGESETS">predefined</a> or custom one. The name must be a valid id and consist only of letters and numeric digits.</p>
         * @param {number[]} aRangeBorders <p>The range borders</p>
         * @param {string} sUnit <p>The unit which should be used for the values given in <code>aRangeBorders</code>. The allowed values are <code>"px"</code> (default), <code>"em"</code> or <code>"rem"</code></p>
         * @param {string[]} aRangeNames <p>The names of the ranges. The names must be a valid id and consist only of letters and digits. If names are specified, CSS classes are also added to the document root as described above. This behavior can be switched off explicitly by using <code>bSuppressClasses</code>. <b>Note:</b> <code>aRangeBorders</code> with <code>n</code> entries define <code>n+1</code> ranges. Therefore <code>n+1</code> names must be provided.</p>
         * @param {boolean} bSuppressClasses <p>Whether or not writing of CSS classes to the document root should be suppressed when <code>aRangeNames</code> are provided</p>
         */
        function initRangeSet(sName: string, aRangeBorders?: number[], sUnit?: string, aRangeNames?: string[], bSuppressClasses?: boolean): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      namespace media {
        /**
         * <p><p>Enumeration containing the names and settings of predefined screen width media query range sets.</p></p>
         */
        export enum RANGESETS {
          /**
           * <p>A 3-step range set (S-L).</p><p>The ranges of this set are: <ul> <li><code>"S"</code>: For screens smaller than 520 pixels.</li> <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 960 pixels.</li> <li><code>"L"</code>: For screens greater than or equal to 960 pixels.</li> </ul></p><p>To use this range set, you must initialize it explicitly (<a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a>).</p><p>If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current screen width range: <code>sapUiMedia-3Step-<i>NAME_OF_THE_INTERVAL</i></code>.</p>
           */
          SAP_3STEPS = "SAP_3STEPS",
          /**
           * <p>A 4-step range set (S-XL).</p><p>The ranges of this set are: <ul> <li><code>"S"</code>: For screens smaller than 520 pixels.</li> <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 760 pixels.</li> <li><code>"L"</code>: For screens greater than or equal to 760 pixels and smaller than 960 pixels.</li> <li><code>"XL"</code>: For screens greater than or equal to 960 pixels.</li> </ul></p><p>To use this range set, you must initialize it explicitly (<a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a>).</p><p>If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current screen width range: <code>sapUiMedia-4Step-<i>NAME_OF_THE_INTERVAL</i></code>.</p>
           */
          SAP_4STEPS = "SAP_4STEPS",
          /**
           * <p>A 6-step range set (XS-XXL).</p><p>The ranges of this set are: <ul> <li><code>"XS"</code>: For screens smaller than 241 pixels.</li> <li><code>"S"</code>: For screens greater than or equal to 241 pixels and smaller than 400 pixels.</li> <li><code>"M"</code>: For screens greater than or equal to 400 pixels and smaller than 541 pixels.</li> <li><code>"L"</code>: For screens greater than or equal to 541 pixels and smaller than 768 pixels.</li> <li><code>"XL"</code>: For screens greater than or equal to 768 pixels and smaller than 960 pixels.</li> <li><code>"XXL"</code>: For screens greater than or equal to 960 pixels.</li> </ul></p><p>To use this range set, you must initialize it explicitly (<a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a>).</p><p>If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current screen width range: <code>sapUiMedia-6Step-<i>NAME_OF_THE_INTERVAL</i></code>.</p>
           */
          SAP_6STEPS = "SAP_6STEPS",
          /**
           * <p>A 3-step range set (Phone, Tablet, Desktop).</p><p>The ranges of this set are: <ul> <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li> <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li> <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels.</li> </ul></p><p>This range set is initialized by default. An initialization via <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a> is not needed.</p><p>A CSS class is added to the page root (<code>html</code> tag) which indicates the current screen width range: <code>sapUiMedia-Std-<i>NAME_OF_THE_INTERVAL</i></code>. Furthermore there are 5 additional CSS classes to hide elements based on the width of the screen: <ul> <li><code>sapUiHideOnPhone</code>: Will be hidden if the screen has 600px or more</li> <li><code>sapUiHideOnTablet</code>: Will be hidden if the screen has less than 600px or more than 1023px</li> <li><code>sapUiHideOnDesktop</code>: Will be hidden if the screen is smaller than 1024px</li> <li><code>sapUiVisibleOnlyOnPhone</code>: Will be visible if the screen has less than 600px</li> <li><code>sapUiVisibleOnlyOnTablet</code>: Will be visible if the screen has 600px or more but less than 1024px</li> <li><code>sapUiVisibleOnlyOnDesktop</code>: Will be visible if the screen has 1024px or more</li> </ul></p>
           */
          SAP_STANDARD = "SAP_STANDARD",
          /**
           * <p>A 4-step range set (Phone, Tablet, Desktop, LargeDesktop).</p><p>The ranges of this set are: <ul> <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li> <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li> <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.</li> <li><code>"LargeDesktop"</code>: For screens greater than or equal to 1440 pixels.</li> </ul></p><p>This range set is initialized by default. An initialization via <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media/methods/sap.ui.Device.media.initRangeSet">sap.ui.Device.media.initRangeSet</a> is not needed.</p><p>A CSS class is added to the page root (<code>html</code> tag) which indicates the current screen width range: <code>sapUiMedia-StdExt-<i>NAME_OF_THE_INTERVAL</i></code>.</p>
           */
          SAP_STANDARD_EXTENDED = "SAP_STANDARD_EXTENDED",
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Common API for orientation change notifications across all platforms.</p><p>For browsers or devices that do not provide native support for orientation change events the API simulates them based on the ratio of the document's width and height.</p></p>
       */
      namespace orientation {
        /**
         * <p>If this flag is set to <code>true</code>, the screen is currently in landscape mode (the width is greater than the height).</p>
         */
        var landscape: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the screen is currently in portrait mode (the height is greater than the width).</p>
         */
        var portrait: boolean;
        /**
         * <p>Registers the given event handler to orientation change events of the document's window.</p><p>The event is fired whenever the screen orientation changes and the width of the document's window becomes greater than its height or the other way round.</p><p>The event handler is called with a single argument: a map <code>mParams</code> which provides the following information: <ul> <li><code>mParams.landscape</code>: If this flag is set to <code>true</code>, the screen is currently in landscape mode, otherwise in portrait mode.</li> </ul></p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information about the orientation is provided as a single argument to the handler (see details above).</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.</p>
         */
        function attachHandler(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Removes a previously attached event handler from the orientation change events.</p><p>The passed parameters must match those used for registration with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.Device.orientation.attachHandler" href="#/api/sap.ui.Device.orientation/methods/sap.ui.Device.orientation.attachHandler">#.attachHandler</a> beforehand.</p>
         * @param {Function} fnFunction <p>The handler function to detach from the event</p>
         * @param {any} oListener <p>The object that wanted to be notified when the event occurred</p>
         */
        function detachHandler(fnFunction: Function, oListener?: any): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Contains information about the operating system of the Device.</p></p>
       */
      namespace os {
        /**
         * <p>If this flag is set to <code>true</code>, an Android operating system is used.</p>
         */
        var android: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, a Blackberry operating system is used.</p>
         */
        var blackberry: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, an iOS operating system is used.</p>
         */
        var ios: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, a Linux operating system is used.</p>
         */
        var linux: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, a Mac operating system is used.</p>
         */
        var macintosh: boolean;
        /**
         * <p>The name of the operating system.</p>
         */
        var name: String;
        /**
         * <p>The version of the operating system as <code>float</code>.</p><p>Might be <code>-1</code> if no version can be determined.</p>
         */
        var version: number;
        /**
         * <p>The version of the operating system as <code>string</code>.</p><p>Might be empty if no version can be determined.</p>
         */
        var versionStr: String;
        /**
         * <p>If this flag is set to <code>true</code>, a Windows operating system is used.</p>
         */
        var windows: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, a Windows Phone operating system is used.</p>
         */
        var windows_phone: boolean;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      namespace os {
        /**
         * <p><p>Enumeration containing the names of known operating systems.</p></p>
         */
        export enum OS {
          /**
           * <p>Android operating system name.</p>
           */
          ANDROID = "ANDROID",
          /**
           * <p>Blackberry operating system name.</p>
           */
          BLACKBERRY = "BLACKBERRY",
          /**
           * <p>iOS operating system name.</p>
           */
          IOS = "IOS",
          /**
           * <p>Linux operating system name.</p>
           */
          LINUX = "LINUX",
          /**
           * <p>MAC operating system name.</p>
           */
          MACINTOSH = "MACINTOSH",
          /**
           * <p>Windows operating system name.</p>
           */
          WINDOWS = "WINDOWS",
          /**
           * <p>Windows Phone operating system name.</p>
           */
          WINDOWS_PHONE = "WINDOWS_PHONE",
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Common API for document window size change notifications across all platforms.</p></p>
       */
      namespace resize {
        /**
         * <p>The current height of the document's window in pixels.</p>
         */
        var height: number;
        /**
         * <p>The current width of the document's window in pixels.</p>
         */
        var width: number;
        /**
         * <p>Registers the given event handler to resize change events of the document's window.</p><p>The event is fired whenever the document's window size changes.</p><p>The event handler is called with a single argument: a map <code>mParams</code> which provides the following information: <ul> <li><code>mParams.height</code>: The height of the document's window in pixels.</li> <li><code>mParams.width</code>: The width of the document's window in pixels.</li> </ul></p>
         * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information about the size is provided as a single argument to the handler (see details above).</p>
         * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.</p>
         */
        function attachHandler(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Removes a previously attached event handler from the resize events.</p><p>The passed parameters must match those used for registration with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.Device.resize.attachHandler" href="#/api/sap.ui.Device.resize/methods/sap.ui.Device.resize.attachHandler">#.attachHandler</a> beforehand.</p>
         * @param {Function} fnFunction <p>The handler function to detach from the event</p>
         * @param {any} oListener <p>The object that wanted to be notified when the event occurred</p>
         */
        function detachHandler(fnFunction: Function, oListener?: any): void;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Contains information about detected capabilities of the used browser or Device.</p></p>
       */
      namespace support {
        /**
         * <p>If this flag is set to <code>true</code>, the used browser natively supports media queries via JavaScript.</p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media">media queries API</a> of the device API can also be used when there is no native support.</p>
         */
        var matchmedia: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the used browser natively supports events of media queries via JavaScript.</p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.media">media queries API</a> of the device API can also be used when there is no native support.</p>
         */
        var matchmedialistener: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the used browser natively supports the <code>orientationchange</code> event.</p><p><b>Note:</b> The <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.orientation">orientation event</a> of the device API can also be used when there is no native support.</p>
         */
        var orientation: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the used browser supports pointer events.</p>
         */
        var pointer: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the device has a display with a high resolution.</p>
         */
        var retina: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the used browser supports touch events.</p><p><b>Note:</b> This flag indicates whether the used browser supports touch events or not. This does not necessarily mean that the used device has a touchable screen.</p>
         */
        var touch: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the used browser supports web sockets.</p>
         */
        var websocket: boolean;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace Device {
      /**
       * <p><p>Provides a basic categorization of the used device based on various indicators.</p><p>These indicators are for example the support of touch events, the screen size, the used operation system or the user agent of the browser.</p><p><b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.</p></p>
       */
      namespace system {
        /**
         * <p>If this flag is set to <code>true</code>, the device is recognized as a combination of a desktop system and tablet.</p><p>Furthermore, a CSS class <code>sap-combi</code> is added to the document root element.</p><p><b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.</p>
         */
        var combi: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the device is recognized as a desktop system.</p><p>Furthermore, a CSS class <code>sap-desktop</code> is added to the document root element.</p>
         */
        var desktop: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the device is recognized as a phone.</p><p>Furthermore, a CSS class <code>sap-phone</code> is added to the document root element.</p>
         */
        var phone: boolean;
        /**
         * <p>If this flag is set to <code>true</code>, the device is recognized as a tablet.</p><p>Furthermore, a CSS class <code>sap-tablet</code> is added to the document root element.</p><p><b>Note:</b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher. Also see the documentation for <a target="_self" class="jsdoclink" href="#/api/sap.ui.Device.system.combi">sap.ui.Device.system.combi</a> devices. You can use the following logic to ensure that the current device is a tablet device:</p><p><pre>
        if(sap.ui.Device.system.tablet && !sap.ui.Device.system.desktop){
          ...tablet related commands...
        }
        </pre></p>
         */
        var tablet: boolean;
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     * <p><p>Provides access to UI5 loader configuration.</p><p>The configuration is used by <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.require">sap.ui.require</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.define">sap.ui.define</a>.</p></p>
     */
    namespace loader {
      /**
       * <p>Sets the configuration for the UI5 loader. The configuration can be updated multiple times. Later changes do not impact modules that have been loaded before.</p><p>If no parameter is given, a partial copy of UI5 loader configuration in use is returned.</p><p>The configuration options are aligned with the "Common Config" draft of the AMD spec (https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md).</p><p>The following code shows an example of what a UI5 loader configuration might look like: <pre>
      
        sap.ui.loader.config({
      
          // location from where to load all modules by default
          baseUrl: '../../resources/',
      
          paths: {
            // load modules whose ID equals to or starts with 'my/module' from example.com
            'my/module': 'https://example.com/resources/my/module'
          },
      
          map: {
            // if any module requires 'sinon', load module 'sap/ui/thirdparty/sinon-4'
            '*': {
              'sinon': 'sap/ui/thirdparty/sinon-4'
            },
            // but if a module whose ID equals to or starts with 'app' requires 'sinon'
            // then load a legacy version instead
            "app": {
              'sinon': 'sap/ui/legacy/sinon'
            }
          },
      
          // activate real async loading and module definitions
          async: true,
      
          // provide dependency and export metadata for non-UI5 modules
          shim: {
            'sap/ui/thirdparty/blanket': {
              amd: true,
              exports: 'blanket'
            }
          }
      
        });
      
      </pre></p>
       * @param {any | undefined} cfg <p>The provided configuration gets merged with the UI5 loader configuration in use. If <code>cfg</code> is omitted or <code>undefined</code>, a copy of the current configuration gets returned, containing at least the properties <code>amd</code> and <code>async</code>.</p>
       * @returns object|undefined <p>UI5 loader configuration in use.</p>
       */
      function config(cfg?: any | undefined): any | undefined;
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     * <p><p>The SAPUI5 Data Binding API.</p><p>The default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model are one way, two way and one time. The default binding mode can be changed by the application for each model instance. A model implementation should specify its supported binding modes and set the default binding mode accordingly (e.g. if the model supports only one way binding the default binding mode should also be set to one way).</p><p>The default size limit for models is 100. The size limit determines the number of entries used for the list bindings.</p></p>
     */
    namespace model {
      /**
       * <p>The Binding is the object, which holds the necessary information for a data binding, like the binding path and the binding context, and acts like an interface to the model for the control, so it is the event provider for changes in the data model and provides getters for accessing properties or lists.</p>
       */
      export abstract class Binding extends sap.ui.base.EventProvider {
        /**
         * <p>Constructor for Binding class.</p>
         * @param {sap.ui.model.Model} oModel <p>the model</p>
         * @param {string} sPath <p>the path</p>
         * @param {sap.ui.model.Context} oContext <p>the context object</p>
         * @param {any} mParameters undefined
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        attachChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        attachDataReceived(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        attachDataRequested(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach multiple events.</p>
         * @param {any} oEvents 
         */
        protected attachEvents(oEvents: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachRefresh(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.<br><br>References: <ul><li>sap.ui.base.EventProvider#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        detachChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        detachDataReceived(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        detachDataRequested(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach multiple events.</p>
         * @param {any} oEvents 
         */
        protected detachEvents(oEvents: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachRefresh(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Fire event dataReceived to attached listeners. This event may also be fired when an error occured.</p>
         * @param {{ [key: string]: any }} mArguments <p>the arguments to pass along with the event.</p>
         */
        protected fireDataReceived(mArguments: { [key: string]: any }): void;
        /**
         * <p>Fire event dataRequested to attached listeners.</p>
         * @param {{ [key: string]: any }} mArguments <p>the arguments to pass along with the event.</p>
         */
        protected fireDataRequested(mArguments: { [key: string]: any }): void;
        /**
         * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).</p>
         */
        protected initialize(): void;
        /**
         * <p>Returns whether the binding is initial, which means it did not get an initial value yet</p>
         * @returns boolean <p>whether binding is initial</p>
         */
        isInitial(): boolean;
        /**
         * <p>Returns whether the binding is relative, which means it did not start with a /</p>
         * @returns boolean <p>whether binding is relative</p>
         */
        isRelative(): boolean;
        /**
         * <p>Returns true if the binding is suspended or false if not.</p>
         * @returns boolean <p>whether binding is suspended</p>
         */
        isSuspended(): boolean;
        /**
         * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
         * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
         */
        refresh(bForceUpdate: boolean): void;
        /**
         * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
         */
        resume(): void;
        /**
         * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
         */
        suspend(): void;
        /**
         * <p>Determines if the binding should be updated by comparing the current model against a specified model.</p>
         * @param {any} oModel <p>The model instance to compare against</p>
         * @returns boolean <p>true if this binding should be updated</p>
         */
        protected updateRequired(oModel: any): boolean;
      }
      /**
       * <p><p>Binding type definitions.</p></p>
       */
      export enum BindingMode {
        /**
         * <p>BindingMode default means that the binding mode of the model is used</p>
         */
        Default = "Default",
        /**
         * <p>BindingMode one time means value is only read from the model once</p>
         */
        OneTime = "OneTime",
        /**
         * <p>BindingMode one way means from model to view</p>
         */
        OneWay = "OneWay",
        /**
         * <p>BindingMode two way means from model to view and vice versa</p>
         */
        TwoWay = "TwoWay",
      }
      /**
       * <p><p>Change Reason for Model/ListBinding/TreeBinding.</p></p>
       */
      export enum ChangeReason {
        /**
         * <p>A context was added to a binding.</p>
         */
        Add = "Add",
        /**
         * <p>Binding changes a model property value</p>
         */
        Binding = "Binding",
        /**
         * <p>The list has changed</p>
         */
        Change = "Change",
        /**
         * <p>The tree node was collapsed</p>
         */
        Collapse = "Collapse",
        /**
         * <p>The list context has changed</p>
         */
        Context = "Context",
        /**
         * <p>The tree node was expanded</p>
         */
        Expand = "Expand",
        /**
         * <p>The List was filtered</p>
         */
        Filter = "Filter",
        /**
         * <p>The list was refreshed</p>
         */
        Refresh = "Refresh",
        /**
         */
        Remove = "Remove",
        /**
         * <p>The list was sorted</p>
         */
        Sort = "Sort",
      }
      /**
       * <p>The ContextBinding is a specific binding for setting a context for the model.</p>
       */
      export abstract class ClientContextBinding extends sap.ui.model.ContextBinding {
        /**
         * <p>Creates a new ClientContextBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindContext">Model#bindContext</a> on the corresponding model implementation instead.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding is created for and that it belongs to</p>
         * @param {string} sPath <p>Binding path to be used for this binding, syntax depends on the concrete subclass</p>
         * @param {sap.ui.model.Context} oContext <p>Binding context relative to which a relative binding path will be resolved</p>
         * @param {any} mParameters <p>Map of optional parameters as defined by subclasses; this class does not introduce any own parameters</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
      }
      /**
       * <p>List binding implementation for client models.</p>
       */
      export class ClientListBinding extends sap.ui.model.ListBinding {
        /**
         * <p>Creates a new ClientListBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindList">Model#bindList</a> on the corresponding model implementation instead.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding is created for and that it belongs to</p>
         * @param {string} sPath <p>Binding path to be used for this binding, syntax depends on the concrete subclass</p>
         * @param {sap.ui.model.Context} oContext <p>Binding context relative to which a relative binding path will be resolved</p>
         * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order (can be either a sorter or an array of sorters)</p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filter/s (can be either a filter or an array of filters)</p>
         * @param {any} mParameters <p>Map of optional parameters as defined by subclasses; this class does not introduce any own parameters</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any);
        /**
         * <p>Applies a new set of filters to the list represented by this binding.</p><p>Depending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.</p><h4>Application and Control Filters</h4><p> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>By using the second parameter <code>sFilterType</code> of method <code>filter</code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.</p><h4>Auto-Grouping of Filters</h4><p> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.</p>
         * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation</p>
         * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
         */
        filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
        /**
         * <p>Applies a new set of filters to the list represented by this binding.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/filter">ListBinding#filter</a> for a more detailed description of list filtering.</p><p>When no <code>sFilterType</code> is given, any previously configured application filters are cleared and the given filters are used as control filters</p>
         * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, then any previously configured application filters are cleared and the given filters are used as control filters</p>
         * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
         */
        filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
      }
      /**
       * <p>Model implementation for Client models</p>
       */
      export abstract class ClientModel extends sap.ui.model.Model {
        /**
         * <p>Constructor for a new ClientModel.</p>
         * @param {string} oData <p>URL where to load the data from</p>
         */
        constructor(oData?: string);
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Destroys the MessageProcessor Instance</p>
         */
        destroy(): void;
        /**
         * <p>Destroys the model and clears the model data. A model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.<br><br>References: <ul><li>sap.ui.base.Object.prototype.destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>References: <ul><li>sap.ui.model.Model.prototype.destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Force no caching.</p>
         * @param {boolean} bForceNoCache <p>whether to force not to cache</p>
         */
        forceNoCache(bForceNoCache?: boolean): void;
        /**
         * <p>Returns the current data of the model. Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.</p>
         * @returns undefined <p>the data object</p>
         */
        getData(): undefined;
        /**
         * <p>update all bindings</p>
         * @param {boolean} bForceUpdate <p>true/false: Default = false. If set to false an update will only be done when the value of a binding changed.</p>
         */
        updateBindings(bForceUpdate: boolean): void;
      }
      /**
       * <p>Property binding implementation for client models.</p>
       */
      export class ClientPropertyBinding extends sap.ui.model.PropertyBinding {
        /**
         * <p>Creates a new ClientPropertyBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindProperty">Model#bindProperty</a> on the corresponding model implementation instead.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding is created for and that it belongs to</p>
         * @param {string} sPath <p>Binding path to be used for this binding, syntax depends on the concrete subclass</p>
         * @param {sap.ui.model.Context} oContext <p>Binding context relative to which a relative binding path will be resolved</p>
         * @param {any} mParameters <p>Map of optional parameters as defined by subclasses; this class does not introduce any own parameters</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
      }
      /**
       * <p>Tree binding implementation for client models.</p><p>Please Note that a hierarchy's "state" (i.e. the information about expanded, collapsed, selected, and deselected nodes) may become inconsistent when the structure of the model data is changed at runtime. This is because each node is identified internally by its index position relative to its parent, plus its parent's ID. Therefore, inserting or removing a node in the model data will likely lead to a shift in the index positions of other nodes, causing them to lose their state and/or to gain the state of another node.</p>
       */
      export class ClientTreeBinding extends sap.ui.model.TreeBinding {
        /**
         * <p>Creates a new ClientTreeBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindTree">Model#bindTree</a> on the corresponding model implementation instead.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding is created for and that it belongs to</p>
         * @param {string} sPath <p>Binding path pointing to the tree / array that should be bound; syntax is defined by subclasses</p>
         * @param {sap.ui.model.Context} oContext <p>Context object for this binding, mandatory when when a relative binding path is given</p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aApplicationFilters <p>Predefined application filter, either a single instance or an array</p>
         * @param {any} mParameters <p>Additional model specific parameters as defined by subclasses; this class does not introduce any own parameters</p>
         * @param {sap.ui.model.Sorter[]} aSorters <p>Predefined sorter/s contained in an array (optional)</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext?: sap.ui.model.Context, aApplicationFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any, aSorters?: sap.ui.model.Sorter[]);
        /**
         * <p>Filters the tree according to the filter definitions.</p>
         * @param {sap.ui.model.Filter[]} aFilters <p>Array of sap.ui.model.Filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
         */
        filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): void;
        /**
         * <p>Filters the tree according to the filter definitions.</p><p>The filtering is applied recursively through the tree. The parent nodes of filtered child nodes will also be displayed if they don't match the filter conditions. All filters belonging to a group (=have the same path) are ORed and after that the results of all groups are ANDed.<br><br>References: <ul><li>sap.ui.model.TreeBinding.prototype.filter</li></ul></p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Single filter object or an array of filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
         * @returns sap.ui.model.ClientTreeBinding <p><code>this</code> to facilitate method chaining</p>
         */
        filter(aFilters: sap.ui.model.Filter | sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ClientTreeBinding;
        /**
         * <p>Returns if the node has child nodes</p>
         * @param {any} oContext <p>the context element of the node</p>
         * @returns boolean <p>true if node has children</p>
         */
        hasChildren(oContext: any): boolean;
        /**
         * <p>Returns if the node has child nodes.</p>
         * @param {any} oContext <p>the context element of the node</p>
         * @returns boolean <p>true if node has children</p>
         */
        hasChildren(oContext: any): boolean;
        /**
         * <p>Sorts the tree according to the sorter definitions.</p>
         * @param {sap.ui.model.Sorter[]} aSorters <p>Array of sap.ui.model.Sorter objects</p>
         */
        sort(aSorters: sap.ui.model.Sorter[]): void;
        /**
         * <p>Sorts the contexts of this ClientTreeBinding. The tree will be sorted level by level. So the nodes are NOT sorted absolute, but relative to their parent node, to keep the hierarchy untouched.</p>
         * @param {sap.ui.model.Sorter[]} an <p>array of Sorter instances which will be applied</p>
         * @returns sap.ui.model.ClientTreeBinding <p>returns <code>this</code> to facilitate method chaining</p>
         */
        sort(an: sap.ui.model.Sorter[]): sap.ui.model.ClientTreeBinding;
      }
      /**
       */
      export class ClientTreeBindingAdapter {
        /**
         * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.</p>
         */
        constructor();
      }
      /**
       * <p>The CompositeBinding is used to bundle multiple property bindings which are be used to provide a single binding against these property bindings.</p>
       */
      export class CompositeBinding extends sap.ui.model.PropertyBinding {
        /**
         * <p>Constructor for CompositeBinding</p>
         */
        constructor();
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>. The 'AggregatedDataStateChange' event is fired asynchronously, meaning that the datastate object given as parameter of the event contains all changes that were applied to the datastate in the running thread.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected attachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachAggregatedDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/></p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>object on which to call the given function.</p>
         */
        protected detachDataStateChange(fnFunction: Function, oListener?: any): void;
        /**
         * <p>Returns the property bindings contained in this composite binding.</p>
         * @returns any[] <p>the property bindings in this composite binding</p>
         */
        getBindings(): any[];
        /**
         * <p>Returns the current external value of the bound target which is formatted via a type or formatter function.</p>
         * @returns any <p>the current value of the bound target</p>
         */
        getExternalValue(): any;
        /**
         * <p>Returns the current external value of the bound target which is formatted via a type or formatter function.</p>
         * @returns any <p>the current value of the bound target</p>
         */
        getExternalValue(): any;
        /**
         * <p>Returns the related JavaScript primitive value of the bound target which is parsed by the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/getModelFormat">model format</a> of this binding's type. If this binding doesn't have a type, the original value which is stored in the model is returned.</p><p>This method will be used when targetType if set to "internal" or it's included in a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeBinding">CompositeBinding</a> and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.</p>
         * @returns any <p>the value which is parsed by the model format of the bound target or the original value in case of no type.</p>
         */
        getInternalValue(): any;
        /**
         * <p>Returns the current internal value of the bound target which is an array of the internal (JS native) values of nested bindings</p>
         * @returns any[] <p>the current values of the nested bindings</p>
         */
        getInternalValue(): any[];
        /**
         * <p>Returns the raw model value, as it exists in the model dataset</p><p>This method will be used when targetType of a binding is set to "raw" or it's included in a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeBinding">CompositeBinding</a> and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.</p>
         * @returns any <p>the value which is parsed by the model format of the bound target or the original value in case of no type.</p>
         */
        getRawValue(): any;
        /**
         * <p>Returns the current raw value of the bound target which is an array of the raw (model) values of nested bindings</p>
         * @returns any[] <p>the current values of the nested bindings</p>
         */
        getRawValue(): any[];
        /**
         * <p>Returns the current value of the bound target</p>
         * @returns any <p>the current value of the bound target</p>
         */
        getValue(): any;
        /**
         * <p>Returns the raw values of the property bindings in an array.</p>
         * @returns any <p>the values of the internal property bindings in an array</p>
         */
        getValue(): any;
        /**
         * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).</p>
         */
        protected initialize(): void;
        /**
         * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true). Prevent checkUpdate to be triggered while initializing nestend bindings, it is sufficient to call checkUpdate when all nested bindings are initialized.</p>
         */
        protected initialize(): void;
        /**
         * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
         */
        resume(): void;
        /**
         * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed and the control value was changed in the meantime, the control value will be set to the current value from the model and a change event will be fired.</p>
         */
        resume(): void;
        /**
         * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
         */
        resume(): void;
        /**
         * <p>Sets the value for this binding. The value is parsed and validated against its type and then set to the binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         * @returns undefined|Promise <p>a Promise in case asynchronous parsing/validation is done</p>
         */
        setExternalValue(vValue: any): undefined | Promise<any>;
        /**
         * <p>Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default implementation assumes a space separated list of values. This will cause the setValue to be called for each nested binding, except for undefined values in the array.</p>
         * @param {any} oValue <p>the value to set for this binding</p>
         */
        setExternalValue(oValue: any): void;
        /**
         * <p>Sets the value for this binding with the related JavaScript primitive type. The value is formatted with the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/getModelFormat">model format</a> and validated against its type and then set to the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setInternalValue(vValue: any): void;
        /**
         * <p>Sets the internal value of the bound target. Parameter must be an array of values matching the internal (JS native) types of nested bindings.</p>
         * @param {any[]} aValues <p>the new values of the nested bindings</p>
         */
        setInternalValue(aValues: any[]): void;
        /**
         * <p>Sets the value for this binding with the raw model value. This setter will perform type validation, in case a type is defined on the binding.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setRawValue(vValue: any): void;
        /**
         * <p>Sets the raw value of the bound target. Parameter must be an array of values matching the raw (model) types of nested bindings.</p>
         * @param {any[]} aValues <p>the new values of the nested bindings</p>
         */
        setRawValue(aValues: any[]): void;
        /**
         * <p>Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.</p>
         * @param {sap.ui.model.Type} oType <p>the type for the binding</p>
         * @param {string} sInternalType <p>the internal type of the element property which this binding is bound against.</p>
         */
        setType(oType: sap.ui.model.Type, sInternalType: string): void;
        /**
         * <p>Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.</p>
         * @param {sap.ui.model.CompositeType} oType <p>the type for the binding</p>
         * @param {string} sInternalType <p>the internal type of the element property which this binding is bound against.</p>
         */
        setType(oType: sap.ui.model.CompositeType, sInternalType: string): void;
        /**
         * <p>Sets the value for this binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setValue(vValue: any): void;
        /**
         * <p>Sets the values. This will cause the setValue to be called for each nested binding, except for undefined values in the array.</p>
         * @param {any[]} aValues <p>the values to set for this binding</p>
         */
        setValue(aValues: any[]): void;
        /**
         * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
         */
        suspend(): void;
        /**
         * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
         */
        suspend(): void;
        /**
         * <p>Determines if the binding should be updated by comparing the current model against a specified model.</p>
         * @param {any} oModel <p>The model instance to compare against</p>
         * @returns boolean <p>true if this binding should be updated</p>
         */
        protected updateRequired(oModel: any): boolean;
        /**
         * <p>Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.</p>
         * @param {any} oModel <p>The model instance to compare against</p>
         * @returns boolean <p>true if this binding should be updated</p>
         */
        protected updateRequired(oModel: any): boolean;
      }
      /**
       * <p>Provides and update the status data of a binding. Depending on the models state and controls state changes, the data state is used to propagated changes to a control. The control can react on these changes by implementing the <code>refreshDataState</code> method for the control. Here the data state object is passed as a parameter.</p><p>Using the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChanges" href="#/api/sap.ui.model.CompositeDataState/methods/getChanges">getChanges</a> method the control can determine the changed properties and their old and new value. <pre>
          //sample implementation to handle message changes
          myControl.prototype.refreshDataState = function(oDataState) {
             var aMessages = oDataState.getChanges().messages;
             if (aMessages) {
                 for (var i = 0; i &lt; aMessages.length; i++) {
                     console.log(aMessages.message);
                 }
             }
          }
      
          //sample implementation to handle laundering state
          myControl.prototype.refreshDataState = function(oDataState) {
             var bLaundering = oDataState.getChanges().laundering || false;
             this.setBusy(bLaundering);
          }
      
          //sample implementation to handle dirty state
          myControl.prototype.refreshDataState = function(oDataState) {
             if (oDataState.isDirty()) console.log("Control " + this.getId() + " is now dirty");
          }
      </pre></p><p>Using the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProperty" href="#/api/sap.ui.model.CompositeDataState/methods/getProperty">getProperty</a> method the control can read the properties of the data state. The properties are <ul> <li><code>value</code> The value formatted by the formatter of the binding <li><code>originalValue</code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue</code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages</code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel</code> <li><code>controlMessages</code> The messages that were applied due to type validation errors <li><code>messages</code> All messages of the data state <li><code>dirty</code> true if the value was not yet confirmed by the server </ul></p>
       */
      export class CompositeDataState extends sap.ui.model.DataState {
        /**
         */
        constructor();
        /**
         * <p>Returns or sets whether the data state is changed. As long as changed was not set to false the data state is dirty and the corresponding binding will fire data state change events.</p>
         * @param {boolean} bNewState <p>the optional new state</p>
         * @returns boolean <p>whether the data state was changed.</p>
         */
        protected changed(bNewState?: boolean): boolean;
        /**
         * <p>Returns or sets whether the data state is changed. As long as changed was not set to false the data state is dirty and the corresponding binding will fire data state change events.</p>
         * @param {boolean} bNewState <p>the optional new state</p>
         * @returns boolean <p>whether the data state was changed.</p>
         */
        protected changed(bNewState?: boolean): boolean;
        /**
         * <p>Returns the changes of the data state in a map that the control can use in the <code>refreshDataState</code> method. The changed property's name is the key in the map. Each element in the map contains an object of below structure. <pre>
           {
               oldValue : The old value of the property,
               value    : The new value of the property
           }
        </pre> The map only contains the changed properties.</p>
         * @returns { [key: string]: any } <p>the changed of the data state</p>
         */
        getChanges(): { [key: string]: any };
        /**
         * <p>Returns the changes of the data state in a map that the control can use in the <code>refreshDataState</code> method. The changed property's name is the key in the map. Each element in the map contains an object of below structure. <pre>
           {
               oldValue : The old value of the property,
               value    : The new value of the property
           }
        </pre> The map only contains the changed properties.</p>
         * @returns { [key: string]: any } <p>the changed of the data state</p>
         */
        getChanges(): { [key: string]: any };
        /**
         * <p>Returns the dirty value of a binding that was rejected by a type validation. This value was of an incorrect type and could not be applied to the model. If the value was not rejected it will return null. In this case the current model value can be accessed using the <code>getValue</code> method.</p>
         * @returns any <p>the value that was rejected or null</p>
         */
        getInvalidValue(): any;
        /**
         * <p>Returns the dirty value of a binding that was rejected by a type validation. This value was of an incorrect type and could not be applied to the model. If the value was not rejected it will return null. In this case the current model value can be accessed using the <code>getValue</code> method.</p>
         * @returns any <p>the value that was rejected or null</p>
         */
        getInvalidValue(): any;
        /**
         * <p>Returns the array of all state messages or null. This combines the model and control messages.</p>
         * @returns sap.ui.core.Message[] <p>the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the array of all state messages or null. This combines the model and control messages.</p>
         * @returns sap.ui.core.Message[] <p>the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the array of state messages of the model or undefined</p>
         * @returns sap.ui.core.Message[] <p>the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getModelMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the array of state messages of the model or undefined</p>
         * @returns sap.ui.core.Message[] <p>the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getModelMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isControlDirty(): boolean;
        /**
         * <p>Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isControlDirty(): boolean;
        /**
         * <p>Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet confirmed by a server or the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isDirty(): boolean;
        /**
         * <p>Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet confirmed by a server or the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isDirty(): boolean;
        /**
         * <p>Returns whether the data state is in laundering. If data is sent to the server, the data state becomes laundering until the data was accepted or rejected.</p>
         * @returns boolean <p>true if the data is laundering</p>
         */
        isLaundering(): boolean;
        /**
         * <p>Returns whether the data state is in laundering. If data is send to the server the data state becomes laundering until the data was accepted or rejected.</p>
         * @returns boolean <p>true if the data is laundering</p>
         */
        isLaundering(): boolean;
      }
      /**
       * <p>This is an abstract base class for composite types. Composite types have multiple input values and know how to merge/split them upon formatting/parsing the value. Typical use case a currency or amount values.</p><p>Subclasses of CompositeTypes can define boolean properties in the constructor: - bUseRawValues: the format and parse method will handle raw model values, types of embedded bindings are ignored - bParseWithValues: the parse method call will include the current binding values as a third parameter</p>
       */
      export abstract class CompositeType extends sap.ui.model.SimpleType {
        /**
         * <p>Constructor for a new CompositeType.</p>
         * @param {any} oFormatOptions <p>options as provided by concrete subclasses</p>
         * @param {any} oConstraints <p>constraints as supported by concrete subclasses</p>
         */
        constructor(oFormatOptions?: any, oConstraints?: any);
        /**
         * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
         * @param {any} oValue <p>the value to be formatted</p>
         * @param {string} sInternalType <p>the target type</p>
         * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
         */
        formatValue(oValue: any, sInternalType: string): any | Promise<any>;
        /**
         * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
         * @param {any[]} aValues <p>the values to be formatted</p>
         * @param {string} sInternalType <p>the target type</p>
         * @returns any <p>the formatted output value</p>
         */
        formatValue(aValues: any[], sInternalType: string): any;
        /**
         * <p>Parse a value of an internal type to the expected value of the model type.</p>
         * @param {any} oValue <p>the value to be parsed</p>
         * @param {string} sInternalType <p>the source type</p>
         * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
         */
        parseValue(oValue: any, sInternalType: string): any | Promise<any>;
        /**
         * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
         * @param {any} oValue <p>the value to be parsed</p>
         * @param {string} sInternalType <p>the source type</p>
         * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
         * @returns any[] <p>the parse result array</p>
         */
        parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
        /**
         * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
         * @param {any} oValue <p>the value to be validated</p>
         * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
         */
        validateValue(oValue: any): undefined | Promise<any>;
        /**
         * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
         * @param {any[]} aValues <p>the set of values to be validated</p>
         */
        validateValue(aValues: any[]): void;
      }
      /**
       * <p>The Context is a pointer to an object in the model data, which is used to allow definition of relative bindings, which are resolved relative to the defined object. Context elements are created either by the ListBinding for each list entry or by using createBindingContext.</p>
       */
      export abstract class Context extends sap.ui.base.Object {
        /**
         * <p>Constructor for Context class.</p>
         * @param {sap.ui.model.Model} oModel <p>the model</p>
         * @param {string} sPath <p>the binding path</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string);
        /**
         * <p>Getter for model</p>
         * @returns sap.ui.model.Model <p>the model</p>
         */
        getModel(): sap.ui.model.Model;
        /**
         * <p>Gets the (model dependent) object the context points to or the object with the given relative binding path</p>
         * @param {string} sPath <p>the binding path</p>
         * @param {any} mParameters <p>additional model specific parameters (optional)</p>
         * @returns any <p>the context object</p>
         */
        getObject(sPath?: string, mParameters?: any): any;
        /**
         * <p>Getter for path of the context itself or a subpath</p>
         * @param {string} sPath <p>the binding path (optional)</p>
         * @returns string <p>the binding path</p>
         */
        getPath(sPath?: string): string;
        /**
         * <p>Gets the property with the given relative binding path</p>
         * @param {string} sPath <p>the binding path</p>
         * @returns any <p>the property value</p>
         */
        getProperty(sPath: string): any;
      }
      /**
       * <p>The ContextBinding is a specific binding for a setting context for the model</p>
       */
      export abstract class ContextBinding extends sap.ui.model.Binding {
        /**
         * <p>Constructor for ContextBinding</p>
         * @param {sap.ui.model.Model} oModel undefined
         * @param {string} sPath undefined
         * @param {sap.ui.model.Context} oContext undefined
         * @param {any} mParameters undefined
         * @param {any} oEvents <p>object defining event handlers</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any, oEvents?: any);
        /**
         * <p>Return the bound context.</p>
         * @returns sap.ui.model.Context <p>Context object used by this context binding or <code>null</code></p>
         */
        getBoundContext(): sap.ui.model.Context;
      }
      /**
       * <p>Provides and update the status data of a binding. Depending on the models state and controls state changes, the data state is used to propagated changes to a control. The control can react on these changes by implementing the <code>refreshDataState</code> method for the control. Here the data state object is passed as a parameter.</p><p>Using the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getChanges" href="#/api/sap.ui.model.DataState/methods/getChanges">getChanges</a> method the control can determine the changed properties and their old and new value. <pre>
          //sample implementation to handle message changes
          myControl.prototype.refreshDataState = function(oDataState) {
             var aMessages = oDataState.getChanges().messages;
             if (aMessages) {
                 for (var i = 0; i &lt; aMessages.length; i++) {
                     console.log(aMessages.message);
                 }
             }
          }
      
          //sample implementation to handle laundering state
          myControl.prototype.refreshDataState = function(oDataState) {
             var bLaundering = oDataState.getChanges().laundering || false;
             this.setBusy(bLaundering);
          }
      
          //sample implementation to handle dirty state
          myControl.prototype.refreshDataState = function(oDataState) {
             if (oDataState.isDirty()) console.log("Control " + this.getId() + " is now dirty");
          }
      </pre></p><p>Using the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProperty" href="#/api/sap.ui.model.DataState/methods/getProperty">getProperty</a> method the control can read the properties of the data state. The properties are <ul> <li><code>value</code> The value formatted by the formatter of the binding <li><code>originalValue</code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue</code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages</code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel</code> <li><code>controlMessages</code> The messages that were applied due to type validation errors <li><code>messages</code> All messages of the data state <li><code>dirty</code> true if the value was not yet confirmed by the server </ul></p>
       */
      export class DataState extends sap.ui.base.Object {
        /**
         */
        constructor();
        /**
         * <p>Returns or sets whether the data state is changed. As long as changed was not set to false the data state is dirty and the corresponding binding will fire data state change events.</p>
         * @param {boolean} bNewState <p>the optional new state</p>
         * @returns boolean <p>whether the data state was changed.</p>
         */
        protected changed(bNewState?: boolean): boolean;
        /**
         * <p>Returns the changes of the data state in a map that the control can use in the <code>refreshDataState</code> method. The changed property's name is the key in the map. Each element in the map contains an object of below structure. <pre>
           {
               oldValue : The old value of the property,
               value    : The new value of the property
           }
        </pre> The map only contains the changed properties.</p>
         * @returns { [key: string]: any } <p>the changed of the data state</p>
         */
        getChanges(): { [key: string]: any };
        /**
         * <p>Returns the array of state messages of the control or undefined.</p>
         * @returns sap.ui.core.Message[] <p>the array of messages of the control or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getControlMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the dirty value of a binding that was rejected by a type validation. This value was of an incorrect type and could not be applied to the model. If the value was not rejected it will return null. In this case the current model value can be accessed using the <code>getValue</code> method.</p>
         * @returns any <p>the value that was rejected or null</p>
         */
        getInvalidValue(): any;
        /**
         * <p>Returns the array of all state messages or null. This combines the model and control messages.</p>
         * @returns sap.ui.core.Message[] <p>the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the array of state messages of the model or undefined</p>
         * @returns sap.ui.core.Message[] <p>the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.</p>
         */
        getModelMessages(): sap.ui.core.Message[];
        /**
         * <p>Returns the formatted original value of the data. The original value is the last confirmed value.</p>
         * @returns any <p>the original confirmed value of the server</p>
         */
        getOriginalValue(): any;
        /**
         * <p>Returns the formatted value of the data state.</p>
         * @returns any <p>The value of the data.</p>
         */
        getValue(): any;
        /**
         * <p>Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isControlDirty(): boolean;
        /**
         * <p>Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet confirmed by a server or the entered value did not yet pass the type validation.</p>
         * @returns boolean <p>true if the data state is dirty</p>
         */
        isDirty(): boolean;
        /**
         * <p>Returns whether the data state is in laundering. If data is sent to the server, the data state becomes laundering until the data was accepted or rejected.</p>
         * @returns boolean <p>true if the data is laundering</p>
         */
        isLaundering(): boolean;
        /**
         * <p>Sets an array of control state messages.</p>
         * @param {sap.ui.core.Message[]} the <p>control messages</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        protected setControlMessages(the: sap.ui.core.Message[]): sap.ui.model.DataState;
        /**
         * <p>Sets the dirty value that was rejected by the type validation.</p>
         * @param {any} vInvalidValue <p>the value that was rejected by the type validation or null if the value was valid</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        protected setInvalidValue(vInvalidValue: any): sap.ui.model.DataState;
        /**
         * <p>Sets the laundering state of the data state.</p>
         * @param {boolean} bLaundering <p>true if the state is laundering</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        protected setLaundering(bLaundering: boolean): sap.ui.model.DataState;
        /**
         * <p>Sets an array of model state messages.</p>
         * @param {any[]} the <p>model messages for this data state.</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        setModelMessages(the: any[]): sap.ui.model.DataState;
        /**
         * <p>Sets the formatted original value of the data.</p>
         * @param {boolean} vOriginalValue <p>the original value</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        protected setOriginalValue(vOriginalValue: boolean): sap.ui.model.DataState;
        /**
         * <p>Sets the formatted value of the data state,</p>
         * @param {any} vValue <p>the value</p>
         * @returns sap.ui.model.DataState <p><code>this</code> to allow method chaining</p>
         */
        protected setValue(vValue: any): sap.ui.model.DataState;
      }
      /**
       * <p>Filter for the list binding.</p>
       */
      export class Filter extends sap.ui.base.Object {
        /**
         * <p>Compares two values</p><p>This is the default comparator function used for clientside filtering, if no custom comparator is given in the constructor. It does compare just by using equal/less than/greater than with automatic type casting, except for null values, which are neither less or greater, and string values where localeCompare is used.</p><p>The comparator method returns -1, 0, 1 for comparable values and NaN for non-comparable values.</p>
         * @param {any} a <p>the first value to compare</p>
         * @param {any} b <p>the second value to compare</p>
         * @returns number <p>-1, 0, 1 or NaN depending on the compare result</p>
         */
        static defaultComparator(a: any, b: any): number;
        /**
         * <p>Constructor for Filter.</p><p>You either pass a single object literal with the filter parameters or use the individual constructor arguments. No matter which variant is used, only certain combinations of parameters are supported (the following list uses the names from the object literal): <ul> <li>A <code>path</code>, <code>operator</code> and one or two values (<code>value1</code>, <code>value2</code>), depending on the operator</li> <li>A <code>path</code> and a custom filter function <code>test</code></li> <li>An array of other filters named <code>filters</code> and a Boolean flag <code>and</code> that specifies whether to combine the filters with an AND (<code>true</code>) or an OR (<code>false</code>) operator.</li> </ul> An error will be logged to the console if an invalid combination of parameters is provided. Please note that a model implementation may not support a custom filter function, e.g. if the model does not perform client side filtering. It also depends on the model implementation if the filtering is case sensitive or not. Client models filter case insensitive compared to the OData models which filter case sensitive by default. See particular model documentation for details The filter operators <code>Any</code> and <code>All</code> are only supported in V4 OData models. When creating a filter instance with these filter operators, the argument <code>variable</code> only accepts a string identifier and <code>condition</code> needs to be another filter instance.</p>
         * @param {any | string | sap.ui.model.Filter[]} vFilterInfo <p>Filter info object or a path or an array of filters</p>
         * @param {sap.ui.model.FilterOperator | Function | boolean} vOperator <p>Either a filter operator or a custom filter function or a Boolean flag that defines how to combine multiple filters</p>
         * @param {any} vValue1 <p>First value to use with the given filter operator</p>
         * @param {any} vValue2 <p>Second value to use with the given filter operator (only for some operators)</p>
         */
        constructor(vFilterInfo: any | string | sap.ui.model.Filter[], vOperator?: sap.ui.model.FilterOperator | Function | boolean, vValue1?: any, vValue2?: any);
      }
      /**
       * <p><p>Operators for the Filter.</p></p>
       */
      export enum FilterOperator {
        /**
         * <p>Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems. <code>All</code> returns a list of those items for which <b>all</b> dependent subitems match the filter criteria of the nested filter. For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past. The filter returns a list of those customers that <b>always</b> ordered a specific product.</p><p>This filter operator is only supported in OData V4 models.</p>
         */
        All = "All",
        /**
         * <p>Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems. <code>Any</code> returns a list of those items for which <b>at least one</b> dependent subitem matches the filter criteria of the nested filter. For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past. The filter returns a list of those customers that <b>at least once</b> ordered a specific product.</p><p>This filter operator is only supported in OData V4 models.</p>
         */
        Any = "Any",
        /**
         * <p>FilterOperator between</p><p>Used to filter all entries between the given boundaries. The filter result contains the boundaries, but no entries before or further. The order of the entries in the filter results is based on their occurence in the input list.</p><p><b>Note, when used on strings:</b> The String comparison is based on lexicographical ordering. Characters are ranked in their alphabetical order. Words with the same preceding substring are ordered based on their length e.g. "Chris" comes before "Christian".</p><p>The filtering includes the right boundary, but no strings further in the lexicographical ordering. e.g. between "A" and "C" includes the string "C", but not "Chris".</p>
         */
        BT = "BT",
        /**
         * <p>FilterOperator contains</p>
         */
        Contains = "Contains",
        /**
         * <p>FilterOperator ends with</p>
         */
        EndsWith = "EndsWith",
        /**
         * <p>FilterOperator equals</p>
         */
        EQ = "EQ",
        /**
         * <p>FilterOperator greater or equals</p>
         */
        GE = "GE",
        /**
         * <p>FilterOperator greater than</p>
         */
        GT = "GT",
        /**
         * <p>FilterOperator less or equals</p>
         */
        LE = "LE",
        /**
         * <p>FilterOperator less than</p>
         */
        LT = "LT",
        /**
         * <p>FilterOperator "Not Between"</p><p>Used to filter all entries, which are not between the given boundaries. The filter result does not contains the boundaries, but only entries outside of the boundaries. The order of the entries in the filter results is based on their occurence in the input list.</p><p><b>Note, when used on strings:</b> The String comparison is based on lexicographical ordering. Characters are ranked in their alphabetical order. Words with the same preceding substring are ordered based on their length e.g. "Chris" comes before "Christian".</p>
         */
        NB = "NB",
        /**
         * <p>FilterOperator not equals</p>
         */
        NE = "NE",
        /**
         * <p>FilterOperator not contains</p>
         */
        NotContains = "NotContains",
        /**
         * <p>FilterOperator not ends with</p>
         */
        NotEndsWith = "NotEndsWith",
        /**
         * <p>FilterOperator not starts with</p>
         */
        NotStartsWith = "NotStartsWith",
        /**
         * <p>FilterOperator starts with</p>
         */
        StartsWith = "StartsWith",
      }
      /**
       * <p><p>Enumeration of the possible filter types.</p><p>Each <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding">list binding</a> maintains two separate lists of filters: one for filters defined by the control that owns the binding, and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>See method <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/filter">ListBinding#filter</a> on how to specify the filter type. When no filter type is given to that method, the behavior depends on the specific model implementation and should be documented in the API reference for that model.</p></p>
       */
      export enum FilterType {
        /**
         * <p>Filters which are provided by the application.</p>
         */
        Application = "Application",
        /**
         * <p>Filters which are set by a control itself.</p><p>Some controls implement filter capabilities as part of their behavior, e.g. table columns or facet filters. When such controls define filters for a binding, they should use filter type <code>Control</code> to keep their filters separated from filters that the application might define in addition.</p>
         */
        Control = "Control",
      }
      /**
       * <p>Instances of this exception are thrown when an error occurs while trying to convert a value of the model to a specific property value in the UI.</p>
       */
      export class FormatException {
        /**
         * <p>Creates a new FormatException.</p>
         * @param {string} message <p>Message explaining how the validation failed</p>
         */
        constructor(message: string);
      }
      /**
       * <p>ListBinding is a specific binding for lists in the model, which can be used to populate Tables or ItemLists.</p>
       */
      export abstract class ListBinding extends sap.ui.model.Binding {
        /**
         * <p>Constructor for ListBinding.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding belongs to</p>
         * @param {string} sPath <p>Binding path for this binding; a relative path will be resolved relative to a given context</p>
         * @param {sap.ui.model.Context} oContext <p>Context to be used to resolve a relative path</p>
         * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order (can be either a sorter or an array of sorters)</p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filter/s (can be either a filter or an array of filters)</p>
         * @param {any} mParameters <p>Additional, implementation-specific parameters that should be used by the new list binding; this base class doesn't define any parameters, check the API reference for the concrete model implementations to learn about their supported parameters (if any)</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any);
        /**
         * <p>Calculates delta of specified old data array and new data array.</p><p>For more information, see <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Futil%2Farray%2Fdiff">module:sap/base/util/array/diff</a>.</p>
         * @param {any[]} aOld <p>Old data array</p>
         * @param {any[]} aNew <p>New data array</p>
         * @returns any <p>List of update operations</p>
         */
        protected diffData(aOld: any[], aNew: any[]): any;
        /**
         * <p>Enable extended change detection. When extended change detection is enabled, the list binding provides detailed information about changes, for example which entries have been removed or inserted. This can be utilized by a control for fine-grained update of its elements. Please see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getContexts">sap.ui.model.ListBinding.prototype.getContexts</a> for more information.</p><p>For models that do not have a unique key on each entry by default, a key property or function can be set which is used to identify entries.</p>
         * @param {boolean} bDetectUpdates <p>Whether changes within the same entity should cause a delete and insert command</p>
         * @param {Function | string} vKey <p>The path of the property containing the key or a function getting the context as only parameter to calculate a key to identify an entry</p>
         */
        protected enableExtendedChangeDetection(bDetectUpdates: boolean, vKey: Function | string): void;
        /**
         * <p>Applies a new set of filters to the list represented by this binding.</p><p>Depending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.</p><h4>Application and Control Filters</h4><p> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>By using the second parameter <code>sFilterType</code> of method <code>filter</code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.</p><h4>Auto-Grouping of Filters</h4><p> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.</p>
         * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation</p>
         * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
         */
        filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
        /**
         * <p>Returns an array of binding contexts for the bound target list.</p><h4>Extended Change Detection</h4><p> If extended change detection is enabled using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/enableExtendedChangeDetection">sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection</a>, the context array may carry an additional property named <code>diff</code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()</code>. In case no <code>diff</code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff</code> property contains an empty array, there have been no changes on the list.</p><p>Sample diff array: <code>[{index: 1, type: "delete"}, {index: 4, type: "insert}]</code></p><p><strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getCurrentContexts">sap.ui.model.ListBinding.prototype.getCurrentContexts</a> instead.</p>
         * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
         * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
         * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
         */
        protected getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
        /**
         * <p>Returns an array of currently used binding contexts of the bound control</p><p>This method does not trigger any data requests from the backend or delta calculation, but just returns the context array as last requested by the control. This can be used by the application to get access to the data currently displayed by a list control.</p>
         * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
         */
        getCurrentContexts(): sap.ui.model.Context[];
        /**
         * <p>Returns list of distinct values for the given relative binding path</p>
         * @param {string} sPath <p>the relative binding path</p>
         * @returns any[] <p>the array of distinct values.</p>
         */
        getDistinctValues(sPath: string): any[];
        /**
         * <p>Gets the group for the given context. Must only be called if isGrouped() returns that grouping is enabled for this binding. The grouping will be performed using the first sorter (in case multiple sorters are defined).<br><br>References: <ul><li>sap.ui.model.Sorter#getGroup</li></ul></p>
         * @param {sap.ui.model.Context} oContext <p>the binding context</p>
         * @returns any <p>the group object containing a key property and optional custom properties</p>
         */
        getGroup(oContext: sap.ui.model.Context): any;
        /**
         * <p>Returns the number of entries in the list. This might be an estimated or preliminary length, in case the full length is not known yet, see method isLengthFinal().</p>
         * @returns number <p>returns the number of entries in the list</p>
         */
        getLength(): number;
        /**
         * <p>Indicates whether grouping is enabled for the binding. Grouping is enabled for a list binding, if at least one sorter exists on the binding and the first sorter is a grouping sorter.</p>
         * @returns boolean <p>whether grouping is enabled</p>
         */
        isGrouped(): boolean;
        /**
         * <p>Returns whether the length which can be retrieved using getLength() is a known, final length, or a preliminary or estimated length which may change if further data is requested.</p>
         * @returns boolean <p>returns whether the length is final</p>
         */
        isLengthFinal(): boolean;
        /**
         * <p>Sorts the list according to the sorter object.</p><p>Instead of a single sorter also an array of sorters can be passed to the sort method. In this case they are processed in the sequence in which they are contained in the array.</p><h4>Grouping</h4><p> Sorting and grouping are closely related, in case a list should be grouped, it must be sorted by the property to group with. Grouping is enabled by setting the <code>group</code> property on the sorter object. If it is enabled, you can get the current group of an item using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getGroup">sap.ui.model.ListBinding.prototype.getGroup</a>. In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping is not supported.</p>
         * @param {sap.ui.model.Sorter | any[]} aSorters <p>the Sorter object or an array of sorters which defines the sort order</p>
         * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
         */
        sort(aSorters: sap.ui.model.Sorter | any[]): sap.ui.model.ListBinding;
      }
      /**
       * <p>Model implementation for meta models</p>
       */
      export abstract class MetaModel extends sap.ui.model.Model {
        /**
         * <p>Constructor for a new MetaModel.</p>
         */
        constructor();
      }
      /**
       * <p>This is an abstract base class for model objects.</p>
       */
      export abstract class Model extends sap.ui.core.message.MessageProcessor {
        /**
         * <p>Constructor for a new Model.</p><p>Every Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax in the target.</p>
         */
        constructor();
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/></p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        attachParseError(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.Model;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'propertyChange' event of this <code>sap.ui.model.Model</code>.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        attachPropertyChange(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.Model;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        attachRequestCompleted(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.Model;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/></p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, this Model is used.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        attachRequestFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.Model;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        attachRequestSent(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.Model;
        /**
         * <p>Create ContextBinding</p>
         * @param {string | any} sPath <p>the path pointing to the property that should be bound or an object which contains the following parameter properties: path, context, parameters</p>
         * @param {any} oContext <p>the context object for this databinding (optional)</p>
         * @param {any} mParameters <p>additional model specific parameters (optional)</p>
         * @param {any} oEvents <p>event handlers can be passed to the binding ({change:myHandler})</p>
         * @returns sap.ui.model.ContextBinding 
         */
        bindContext(sPath: string | any, oContext?: any, mParameters?: any, oEvents?: any): sap.ui.model.ContextBinding;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {string} sPath <p>the path pointing to the list / array that should be bound</p>
         * @param {any} oContext <p>the context object for this databinding (optional)</p>
         * @param {sap.ui.model.Sorter} aSorters <p>initial sort order (can be either a sorter or an array of sorters) (optional)</p>
         * @param {any[]} aFilters <p>predefined filter/s (can be either a filter or an array of filters) (optional)</p>
         * @param {any} mParameters <p>additional model specific parameters (optional)</p>
         * @returns sap.ui.model.ListBinding 
         */
        bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {string} sPath <p>the path pointing to the property that should be bound</p>
         * @param {any} oContext <p>the context object for this databinding (optional)</p>
         * @param {any} mParameters <p>additional model specific parameters (optional)</p>
         * @returns sap.ui.model.PropertyBinding 
         */
        bindProperty(sPath: string, oContext?: any, mParameters?: any): sap.ui.model.PropertyBinding;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {string} sPath <p>the path pointing to the tree / array that should be bound</p>
         * @param {any} oContext <p>the context object for this databinding (optional)</p>
         * @param {any[]} aFilters <p>predefined filter/s contained in an array (optional)</p>
         * @param {any} mParameters <p>additional model specific parameters (optional)</p>
         * @param {any[]} aSorters <p>predefined sap.ui.model.sorter/s contained in an array (optional)</p>
         * @returns sap.ui.model.TreeBinding 
         */
        bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
        /**
         * <p>Checks whether the given filters contain an unsupported operator.</p><p>OData v1, v2 and Client Bindings cannot be filtered with <code>sap.ui.model.FilterOperator</code> <code>"Any"</code> and <code>"All"</code>. The model property <code>mUnsupportedFilterOperators</code> can be configured in each model subclass to describe the unsupported operators.</p><p>If any of the given filters contains nested filters, those are checked recursively.</p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} vFilters <p>Single filter or an array of filter instances</p>
         */
        protected checkFilterOperation(vFilters: sap.ui.model.Filter | sap.ui.model.Filter[]): void;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {string} sPath <p>the path to create the new context from</p>
         * @param {any} oContext <p>the context which should be used to create the new binding context</p>
         * @param {any} mParameters <p>the parameters used to create the new binding context</p>
         * @param {Function} fnCallBack <p>the function which should be called after the binding context has been created</p>
         * @param {boolean} bReload <p>force reload even if data is already available. For server side models this should refetch the data from the server</p>
         * @returns sap.ui.model.Context <p>the binding context, if it could be created synchronously</p>
         */
        createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: Function, bReload?: boolean): sap.ui.model.Context;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Destroys the MessageProcessor Instance</p>
         */
        destroy(): void;
        /**
         * <p>Destroys the model and clears the model data. A model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.<br><br>References: <ul><li>sap.ui.base.Object.prototype.destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {any} oContext <p>to destroy</p>
         */
        destroyBindingContext(oContext: any): void;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        detachParseError(fnFunction: Function, oListener: any): sap.ui.model.Model;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'propertyChange' event of this <code>sap.ui.model.Model</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        detachPropertyChange(fnFunction: Function, oListener: any): sap.ui.model.Model;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        detachRequestCompleted(fnFunction: Function, oListener: any): sap.ui.model.Model;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        detachRequestFailed(fnFunction: Function, oListener: any): sap.ui.model.Model;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        detachRequestSent(fnFunction: Function, oListener: any): sap.ui.model.Model;
        /**
         * <p>Fire event parseError to attached listeners.</p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        protected fireParseError(mArguments?: any): sap.ui.model.Model;
        /**
         * <p>Fire event propertyChange to attached listeners.</p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        protected firePropertyChange(mArguments?: any): sap.ui.model.Model;
        /**
         * <p>Fire event requestCompleted to attached listeners.</p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        protected fireRequestCompleted(mArguments?: any): sap.ui.model.Model;
        /**
         * <p>Fire event requestFailed to attached listeners.</p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        protected fireRequestFailed(mArguments?: any): sap.ui.model.Model;
        /**
         * <p>Fire event requestSent to attached listeners.</p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.Model <p><code>this</code> to allow method chaining</p>
         */
        protected fireRequestSent(mArguments?: any): sap.ui.model.Model;
        /**
         * <p>Get the default binding mode for the model</p>
         * @returns sap.ui.model.BindingMode <p>default binding mode of the model</p>
         */
        getDefaultBindingMode(): sap.ui.model.BindingMode;
        /**
         * <p>Returns the meta model associated with this model if it is available for the concrete model type.</p>
         * @returns sap.ui.model.MetaModel <p>The meta model or undefined if no meta model exists.</p>
         */
        getMetaModel(): sap.ui.model.MetaModel;
        /**
         * <p>Returns the original value for the property with the given path and context. The original value is the value that was last responded by a server if using a server model implementation.</p>
         * @param {string} sPath <p>the path/name of the property</p>
         * @param {any} oContext <p>the context if available to access the property value</p>
         * @returns any <p>vValue the value of the property</p>
         */
        getOriginalProperty(sPath: string, oContext?: any): any;
        /**
         * <p>Check if the specified binding mode is supported by the model.</p>
         * @param {sap.ui.model.BindingMode} sMode <p>the binding mode to check</p>
         */
        isBindingModeSupported(sMode: sap.ui.model.BindingMode): void;
        /**
         * <p>Returns whether legacy path syntax is used</p>
         * @returns boolean 
         */
        isLegacySyntax(): boolean;
        /**
         * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
         * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
         */
        refresh(bForceUpdate: boolean): void;
        /**
         * <p>Set the default binding mode for the model. If the default binding mode should be changed, this method should be called directly after model instance creation and before any binding creation. Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.</p>
         * @param {sap.ui.model.BindingMode} sMode <p>the default binding mode to set for the model</p>
         * @returns sap.ui.model.Model <p>this pointer for chaining</p>
         */
        setDefaultBindingMode(sMode: sap.ui.model.BindingMode): sap.ui.model.Model;
        /**
         * <p>Enables legacy path syntax handling</p><p>This defines, whether relative bindings, which do not have a defined binding context, should be compatible to earlier releases which means they are resolved relative to the root element or handled strict and stay unresolved until a binding context is set</p>
         * @param {boolean} bLegacySyntax <p>the path syntax to use</p>
         */
        setLegacySyntax(bLegacySyntax: boolean): void;
        /**
         * <p>Implement in inheriting classes</p>
         * @param {{ [key: string]: any }} vMessages <p>map of messages: {'target': [array of messages],...}</p>
         */
        setMessages(vMessages: { [key: string]: any }): void;
        /**
         * <p>Sets messages</p>
         * @param {any} mMessages <p>Messages for this model</p>
         */
        setMessages(mMessages: any): void;
        /**
         * <p>Set the maximum number of entries which are used for list bindings.</p><p>The default size limit for models is 100.</p>
         * @param {number} iSizeLimit <p>Collection size limit</p>
         */
        setSizeLimit(iSizeLimit: number): void;
      }
      /**
       * <p>Instances of this exception are thrown when an error occurs while converting a string value to a specific property type in the model.</p>
       */
      export class ParseException {
        /**
         * <p>Create a new ParseException.</p>
         * @param {string} message <p>Message explaining how the validation failed</p>
         */
        constructor(message: string);
      }
      /**
       * <p>The PropertyBinding is used to access single data values in the data model.</p>
       */
      export abstract class PropertyBinding extends sap.ui.model.Binding {
        /**
         * <p>Constructor for PropertyBinding</p>
         * @param {sap.ui.model.Model} oModel undefined
         * @param {string} sPath undefined
         * @param {sap.ui.model.Context} oContext undefined
         * @param {any} mParameters undefined
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
        /**
         * <p>Returns the binding mode</p>
         * @returns sap.ui.model.BindingMode <p>the binding mode</p>
         */
        getBindingMode(): sap.ui.model.BindingMode;
        /**
         * <p>Returns the current external value of the bound target which is formatted via a type or formatter function.</p>
         * @returns any <p>the current value of the bound target</p>
         */
        getExternalValue(): any;
        /**
         * <p>Returns the formatter function</p>
         * @returns Function <p>the formatter function</p>
         */
        getFormatter(): Function;
        /**
         * <p>Returns the related JavaScript primitive value of the bound target which is parsed by the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/getModelFormat">model format</a> of this binding's type. If this binding doesn't have a type, the original value which is stored in the model is returned.</p><p>This method will be used when targetType if set to "internal" or it's included in a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeBinding">CompositeBinding</a> and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.</p>
         * @returns any <p>the value which is parsed by the model format of the bound target or the original value in case of no type.</p>
         */
        getInternalValue(): any;
        /**
         * <p>Returns the raw model value, as it exists in the model dataset</p><p>This method will be used when targetType of a binding is set to "raw" or it's included in a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeBinding">CompositeBinding</a> and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.</p>
         * @returns any <p>the value which is parsed by the model format of the bound target or the original value in case of no type.</p>
         */
        getRawValue(): any;
        /**
         * <p>Returns the type if any for the binding.</p>
         * @returns sap.ui.model.Type <p>the binding type</p>
         */
        getType(): sap.ui.model.Type;
        /**
         * <p>Returns the current value of the bound target</p>
         * @returns any <p>the current value of the bound target</p>
         */
        getValue(): any;
        /**
         * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
         */
        resume(): void;
        /**
         * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed and the control value was changed in the meantime, the control value will be set to the current value from the model and a change event will be fired.</p>
         */
        resume(): void;
        /**
         * <p>Sets the binding mode</p>
         * @param {sap.ui.model.BindingMode} sBindingMode <p>the binding mode</p>
         */
        protected setBindingMode(sBindingMode: sap.ui.model.BindingMode): void;
        /**
         * <p>Sets the value for this binding. The value is parsed and validated against its type and then set to the binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         * @returns undefined|Promise <p>a Promise in case asynchronous parsing/validation is done</p>
         */
        setExternalValue(vValue: any): undefined | Promise<any>;
        /**
         * <p>Sets the optional formatter function for the binding.</p>
         * @param {Function} fnFormatter <p>the formatter function for the binding</p>
         */
        setFormatter(fnFormatter: Function): void;
        /**
         * <p>Sets the value for this binding with the related JavaScript primitive type. The value is formatted with the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/getModelFormat">model format</a> and validated against its type and then set to the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setInternalValue(vValue: any): void;
        /**
         * <p>Sets the value for this binding with the raw model value. This setter will perform type validation, in case a type is defined on the binding.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setRawValue(vValue: any): void;
        /**
         * <p>Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.</p>
         * @param {sap.ui.model.Type} oType <p>the type for the binding</p>
         * @param {string} sInternalType <p>the internal type of the element property which this binding is bound against.</p>
         */
        setType(oType: sap.ui.model.Type, sInternalType: string): void;
        /**
         * <p>Sets the value for this binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.</p>
         * @param {any} vValue <p>the value to set for this binding</p>
         */
        setValue(vValue: any): void;
      }
      /**
       */
      export class SelectionModel extends sap.ui.base.EventProvider {
        /**
         * <p>Constructs an instance of an sap.ui.model.SelectionModel.</p>
         * @param {number} iSelectionMode <p><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code></p>
         */
        constructor(iSelectionMode: number);
        /**
         * <p>SelectionMode: Multi Selection</p>
         */
        MULTI_SELECTION: any;
        /**
         * <p>SelectionMode: Single Selection</p>
         */
        SINGLE_SELECTION: any;
        /**
         * <p>Changes the selection to be the union of the current selection and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.</p><p>In <code>SINGLE_SELECTION</code> selection mode, this is equivalent to calling <code>setSelectionInterval</code>, and only the second index is used.</p><p>If this call results in a change to the current selection or lead selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iFromIndex <p>one end of the interval.</p>
         * @param {number} iToIndex <p>other end of the interval</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        addSelectionInterval(iFromIndex: number, iToIndex: number): sap.ui.model.SelectionModel;
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/></p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, this Model is used.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        attachSelectionChanged(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.SelectionModel;
        /**
         * <p>Change the selection to the empty set and clears the lead selection.</p><p>If this call results in a change to the current selection or lead selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        clearSelection(): sap.ui.model.SelectionModel;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        detachSelectionChanged(fnFunction: Function, oListener: any): sap.ui.model.SelectionModel;
        /**
         * <p>Fire event 'selectionChanged' to attached listeners.</p><p>Expects following event parameters: <ul> <li>'leadIndex' of type <code>int</code> Lead selection index.</li> <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li> </ul></p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        protected fireSelectionChanged(mArguments: any): sap.ui.model.SelectionModel;
        /**
         * <p>Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().</p>
         * @returns number <p>lead selected index</p>
         */
        getLeadSelectedIndex(): number;
        /**
         * <p>Returns the selected indices as array.</p>
         * @returns number[] <p>array of selected indices</p>
         */
        getSelectedIndices(): number[];
        /**
         * <p>Returns the current selection mode.</p>
         * @returns number <p>the current selection mode</p>
         */
        getSelectionMode(): number;
        /**
         * <p>Returns true if the specified index is selected.</p>
         * @param {number} iIndex 
         * @returns boolean <p>true if the specified index is selected.</p>
         */
        isSelectedIndex(iIndex: number): boolean;
        /**
         * <p>Moves all selected indices starting at the position <code>iStartIndex</code> <code>iMove</code> items.</p><p>This can be used if new items are inserted to the item set and you want to keep the selection. To handle a deletion of items use <code>sliceSelectionInterval</code>.</p><p>If this call results in a change to the current selection or lead selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iStartIndex <p>start at this position</p>
         * @param {number} iMove 
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        moveSelectionInterval(iStartIndex: number, iMove: number): sap.ui.model.SelectionModel;
        /**
         * <p>Changes the selection to be the set difference of the current selection and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.</p><p>If the range of removed selection indices includes the current lead selection, then the lead selection will be unset (set to -1).</p><p>If this call results in a change to the current selection or lead selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iFromIndex <p>one end of the interval.</p>
         * @param {number} iToIndex <p>other end of the interval</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        removeSelectionInterval(iFromIndex: number, iToIndex: number): sap.ui.model.SelectionModel;
        /**
         * <p>Selects all rows up to the <code>iToIndex</iToIndex>.</p><p>If this call results in a change to the current selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iToIndex <p>end of the interval</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        selectAll(iToIndex: number): sap.ui.model.SelectionModel;
        /**
         * <p>Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code> inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.</p><p>In <code>SINGLE_SELECTION</code> selection mode, only <code>iToIndex</iToIndex> is used.</p><p>If this call results in a change to the current selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iFromIndex <p>one end of the interval.</p>
         * @param {number} iToIndex <p>other end of the interval</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        setSelectionInterval(iFromIndex: number, iToIndex: number): sap.ui.model.SelectionModel;
        /**
         * <p>Sets the selection mode. The following list describes the accepted selection modes: <ul> <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> - Only one list index can be selected at a time. In this mode, <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are equivalent, both replacing the current selection with the index represented by the second argument (the "lead"). <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> - In this mode, there's no restriction on what can be selected. </ul></p>
         * @param {number} iSelectionMode <p>selection mode</p>
         */
        setSelectionMode(iSelectionMode: number): void;
        /**
         * <p>Slices a the indices between the two indices from the selection. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.</p><p>If the range of removed selection indices includes the current lead selection, then the lead selection will be unset (set to -1).</p><p>If this call results in a change to the current selection or lead selection, then a <code>SelectionChanged</code> event is fired.</p>
         * @param {number} iFromIndex <p>one end of the interval.</p>
         * @param {number} iToIndex <p>other end of the interval</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        sliceSelectionInterval(iFromIndex: number, iToIndex: number): sap.ui.model.SelectionModel;
      }
      /**
       * <p>This is an abstract base class for simple types.</p>
       */
      export abstract class SimpleType extends sap.ui.model.Type {
        /**
         * <p>Constructor for a new SimpleType.</p>
         * @param {any} oFormatOptions <p>options as provided by concrete subclasses</p>
         * @param {any} oConstraints <p>constraints as supported by concrete subclasses</p>
         */
        constructor(oFormatOptions?: any, oConstraints?: any);
        /**
         * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
         * @param {any} oValue <p>the value to be formatted</p>
         * @param {string} sInternalType <p>the target type</p>
         * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
         */
        formatValue(oValue: any, sInternalType: string): any | Promise<any>;
        /**
         * <p>Returns an object which has <code>format</code> and <code>parse</code> method. These two methods are used for converting between the raw value which is stored in the model and the related primitive type in JavaScript.</p><p>If a instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/constructor">DateFormat</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/constructor">NumberFormat</a> fits the needs, they could also be used as return value.</p><p>The default implementation of the <code>format</code> and <code>parse</code> method simply returns the given parameter. The subclass of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/constructor">SimpleType</a> should override this method if the raw value isn't already a JavaScript primitive type. The overwritten method must return an object which has the <code>format</code> and <code>parse</code> method implemented.</p><p>For example<br> If the type is related to a JavaScript Date object, but the raw value isn't, this method should return an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/constructor">DateFormat</a>, which is able to convert between the raw value and a JavaScript Date object.</p>
         * @returns any <p>The format which converts between the raw value from the model and the related JavaScript primitive type</p>
         */
        protected getModelFormat(): any;
        /**
         * <p>Parse a value of an internal type to the expected value of the model type.</p>
         * @param {any} oValue <p>the value to be parsed</p>
         * @param {string} sInternalType <p>the source type</p>
         * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
         */
        parseValue(oValue: any, sInternalType: string): any | Promise<any>;
        /**
         * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
         * @param {any} oValue <p>the value to be validated</p>
         * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
         */
        validateValue(oValue: any): undefined | Promise<any>;
      }
      /**
       * <p>Sorter for list bindings.</p><p>Instances of this class define the sort order for a list binding.</p>
       */
      export class Sorter extends sap.ui.base.Object {
        /**
         * <p>Compares two values</p><p>This is the default comparator function used for clientside sorting, if no custom comparator is given in the constructor. It does compare just by using equal/less than/greater than with automatic type casting, except for null values, which are last in ascending order, and string values where localeCompare is used.</p><p>The comparator method returns -1, 0 or 1, depending on the order of the two items and is suitable to be used as a comparator method for Array.sort.</p>
         * @param {any} a <p>the first value to compare</p>
         * @param {any} b <p>the second value to compare</p>
         * @returns number <p>-1, 0 or 1 depending on the compare result</p>
         */
        static defaultComparator(a: any, b: any): number;
        /**
         * <p>Constructor for Sorter.</p>
         * @param {string} sPath <p>the binding path used for sorting</p>
         * @param {boolean} bDescending <p>whether the sort order should be descending</p>
         * @param {boolean | Function} vGroup <p>configure grouping of the content, can either be true to enable grouping based on the raw model property value, or a function which calculates the group value out of the context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to implement the grouping behaviour for the aggregation which you want to group. In case a function is provided it must either return a primitive type value as the group key or an object containing a "key" property and additional properties needed for group visualization. <b>Note:</b> Grouping is only possible (and only makes sense) for the primary sort property.</p>
         * @param {Function} fnComparator <p>A custom comparator function, which is used for client-side sorting instead of the default comparator method. Information about parameters and expected return values of such a method can be found in the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.Sorter.defaultComparator" href="#/api/sap.ui.model.Sorter/methods/sap.ui.model.Sorter.defaultComparator">default comparator</a> documentation. <b>Note:</b> Custom comparator functions are meant to be used on the client. Models that implement sorting in the backend usually don't support custom comparator functions. Consult the documentation of the specific model implementation.</p>
         */
        constructor(sPath: string, bDescending?: boolean, vGroup?: boolean | Function, fnComparator?: Function);
        /**
         * <p>Returns a group object, at least containing a key property for group detection. May contain additional properties as provided by a custom group function.</p>
         * @param {sap.ui.model.Context} oContext <p>the binding context</p>
         * @returns any <p>An object containing a key property and optional custom properties</p>
         */
        getGroup(oContext: sap.ui.model.Context): any;
        /**
         * <p>Returns the group function of this Sorter. If grouping is not enabled on this Sorter, it will return undefined, if no explicit group function has been defined the default group function is returned. The returned function is bound to its Sorter, so it will group according to its own property path, even if it is used in the context of another Sorter.</p>
         * @returns Function <p>The group function</p>
         */
        getGroupFunction(): Function;
      }
      /**
       * <p>The StaticBinding allows to define static values within a CompositeBinding. It behaves like a property binding but always returns the value, which is stored in the binding itself.</p>
       */
      export class StaticBinding extends sap.ui.model.PropertyBinding {
        /**
         * <p>Constructor for StaticBinding</p>
         */
        constructor();
      }
      /**
       * <p><p>Different modes for setting the auto expand mode on tree or analytical bindings.</p></p>
       */
      export enum TreeAutoExpandMode {
        /**
         * <p>If supported by a backend provider with analytical capabilities, the requests needed for an automatic node expansion are bundled.</p>
         */
        Bundled = "Bundled",
        /**
         * <p>Tree nodes will be expanded in sequence, level by level (Single requests are sent).</p>
         */
        Sequential = "Sequential",
      }
      /**
       * <p>The TreeBinding is a specific binding for trees in the model, which can be used to populate Trees.</p>
       */
      export abstract class TreeBinding extends sap.ui.model.Binding {
        /**
         * <p>Constructor for TreeBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/bindTree">Model#bindTree</a> on the corresponding model instead.</p>
         * @param {sap.ui.model.Model} oModel <p>Model instance that this binding is created for and that it belongs to</p>
         * @param {string} sPath <p>Path pointing to the tree / array that should be bound</p>
         * @param {any} oContext <p>Context object for this binding (optional)</p>
         * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filter or an array of filters (optional)</p>
         * @param {string} mParameters <p>Additional model specific parameters (optional)</p>
         * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Predefined sorter or an array of sorters (optional)</p>
         */
        constructor(oModel: sap.ui.model.Model, sPath: string, oContext?: any, aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: string, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[]);
        /**
         * <p>Filters the tree according to the filter definitions.</p>
         * @param {sap.ui.model.Filter[]} aFilters <p>Array of sap.ui.model.Filter objects</p>
         * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
         */
        filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): void;
        /**
         * <p>Returns the number of child nodes of a specific context</p>
         * @param {any} oContext <p>the context element of the node</p>
         * @returns number <p>the number of children</p>
         */
        getChildCount(oContext: any): number;
        /**
         * <p>Returns the current value of the bound target</p>
         * @param {any} oContext <p>the context element of the node</p>
         * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
         * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
         * @returns any[] <p>the array of child contexts for the given node</p>
         */
        getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
        /**
         * <p>Returns the current value of the bound target</p>
         * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
         * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
         * @returns any[] <p>the array of child contexts for the root node</p>
         */
        getRootContexts(iStartIndex: number, iLength: number): any[];
        /**
         * <p>Returns if the node has child nodes</p>
         * @param {any} oContext <p>the context element of the node</p>
         * @returns boolean <p>true if node has children</p>
         */
        hasChildren(oContext: any): boolean;
        /**
         * <p>Sorts the tree according to the sorter definitions.</p>
         * @param {sap.ui.model.Sorter[]} aSorters <p>Array of sap.ui.model.Sorter objects</p>
         */
        sort(aSorters: sap.ui.model.Sorter[]): void;
      }
      /**
       */
      export class TreeBindingAdapter {
        /**
         * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.</p>
         */
        constructor();
        /**
         * <p>Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/> Event is fired if the selection of tree nodes is changed in any way.</p>
         * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
         * @param {any} oListener <p>Object on which to call the given function. If empty, this <code>TreeBindingAdapter</code> is used.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        attachSelectionChanged(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.SelectionModel;
        /**
         * <p>Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
         * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
         * @param {any} oListener <p>Object on which the given function had to be called.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        detachSelectionChanged(fnFunction: Function, oListener: any): sap.ui.model.SelectionModel;
        /**
         * <p>Fire event 'selectionChanged' to attached listeners.</p><p>Expects following event parameters: <ul> <li>'leadIndex' of type <code>int</code> Lead selection index.</li> <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li> </ul></p>
         * @param {any} mArguments <p>the arguments to pass along with the event.</p>
         * @returns sap.ui.model.SelectionModel <p><code>this</code> to allow method chaining</p>
         */
        protected fireSelectionChanged(mArguments: any): sap.ui.model.SelectionModel;
        /**
         * <p>Retrieves the requested part from the tree and returns node objects.</p>
         * @param {number} iStartIndex 
         * @param {number} iLength 
         * @param {number} iThreshold 
         * @returns any <p>Tree Node</p>
         */
        protected getNodes(iStartIndex: number, iLength: number, iThreshold: number): any;
      }
      /**
       */
      export class TreeBindingCompatibilityAdapter {
        /**
         * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.</p><p>This module is only for experimental and internal use!</p>
         */
        constructor();
      }
      /**
       * <p>This is an abstract base class for type objects.</p>
       */
      export abstract class Type extends sap.ui.base.Object {
        /**
         * <p>Constructor for a new Type.</p>
         */
        constructor();
        /**
         * <p>Returns the name of this type.</p>
         * @returns string <p>the name of this type</p>
         */
        getName(): string;
        /**
         * <p>Returns a simple string representation of this type.</p><p>Mainly useful for tracing purposes.</p>
         * @returns string <p>a string description of this type</p>
         */
        toString(): string;
      }
      /**
       * <p>Instances of this exception are thrown when a validation error occurs while checking the defined constraints for a type.</p>
       */
      export class ValidateException {
        /**
         * <p>Creates a new ValidateException.</p>
         * @param {string} message <p>Message explaining how the validation failed</p>
         * @param {string[]} violatedConstraints <p>Names of the constraints that will be violated; names should be the same as documented for the type constructor</p>
         */
        constructor(message: string, violatedConstraints?: string[]);
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>Analytical Adapter for ODataModels</p></p>
       */
      namespace analytics {
        /**
         * <p>Tree binding implementation for OData entity sets with aggregate semantics.</p><p>Note on the handling of different count modes: The AnalyticalBinding always uses the OData $inlinecount system query option to determine the total count of matching entities. It ignores the default count mode set in the ODataModel instance and the count mode specified in the binding parameters. If the default count mode is None, a warning is added to the log to remind the application that OData requests generated by the AnalyticalBinding will include a $inlinecount. If a count mode has been specified in the binding parameters, an error message will be logged if it is None, because the binding will still add the $inlinecount to OData requests. If a binding count mode is set to Request or Both, a warning will be logged to remind the application that the OData requests generated by the AnalyticalBinding will include a $inlinecount.</p>
         */
        export class AnalyticalBinding extends sap.ui.model.TreeBinding {
          /**
           * @param {sap.ui.model.Model} oModel undefined
           * @param {string} sPath <p>the path pointing to the tree / array that should be bound</p>
           * @param {any} oContext <p>the context object for this data binding</p>
           * @param {any[]} aSorter <p>predefined sorter/s contained in an array</p>
           * @param {any[]} aFilters <p>predefined filter/s contained in an array</p>
           * @param {any} mParameters <p>a map which contains additional control parameters.</p>
           */
          constructor(oModel: sap.ui.model.Model, sPath: string, oContext?: any, aSorter?: any[], aFilters?: any[], mParameters?: any);
          /**
           * <p>Filters the tree according to the filter definitions.</p>
           * @param {sap.ui.model.Filter[]} aFilters <p>Array of sap.ui.model.Filter objects</p>
           * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
           */
          filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): void;
          /**
           * <p>Sets filters for matching only a subset of the entities in the bound OData entity set.</p><p>Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these filters.</p>
           * @param {sap.ui.model.Filter[] | sap.ui.model.Filter} aFilter <p>an Array of sap.ui.model.Filter objects or a single Filter instance.</p>
           * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted.</p>
           * @returns sap.ui.model.analytics.AnalyticalBinding <p>returns <code>this</code> to facilitate method chaining</p>
           */
          filter(aFilter: sap.ui.model.Filter[] | sap.ui.model.Filter, sFilterType?: sap.ui.model.FilterType): sap.ui.model.analytics.AnalyticalBinding;
          /**
           * <p>Gets the analytical information for a column with a given name.</p>
           * @param {string} sColumnName <p>the column name.</p>
           * @returns any <p>analytical information for the column; see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="updateAnalyticalInfo" href="#/api/sap.ui.model.analytics.AnalyticalBinding/methods/updateAnalyticalInfo">#updateAnalyticalInfo</a> for an explanation of the object structure</p>
           */
          getAnalyticalInfoForColumn(sColumnName: string): any;
          /**
           * <p>Gets analytical metadata for the bound OData entity set.</p>
           * @returns sap.ui.model.analytics.odata4analytics.QueryResult <p>analytical metadata for the bound OData entity set</p>
           */
          getAnalyticalQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
          /**
           * <p>Gets details about the dimension properties included in the bound OData entity set.</p>
           * @returns { [key: string]: any } <p>details for every dimension property addressed by its name. The details object provides these properties: name of the dimension, keyPropertyName for the name of the property holding the dimension key, textPropertyName for the name of the property holding the text for the dimension, aAttributeName listing all properties holding dimension attributes, grouped as indicator whether or not this dimension is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed from the AnalyticalBinding's consumer via call to function updateAnalyticalInfo.</p>
           */
          getDimensionDetails(): { [key: string]: any };
          /**
           * <p>Get a download URL with the specified format considering the sort/filter/custom parameters.</p><p>The download URL also takes into account the selected dimensions and measures, depending on the given column definitions of the AnalyticalTable. This is based on the visible/inResult flags of the columns, as well as integrity dependencies, e.g. for mandatory Unit properties.</p>
           * @param {string} sFormat <p>Value for the $format Parameter</p>
           * @returns string <p>URL which can be used for downloading</p>
           */
          getDownloadUrl(sFormat: string): string;
          /**
           * <p>Gets the names of the filterable properties in the bound OData entity set.</p>
           * @returns any[] <p>names of properties that can be filtered.</p>
           */
          getFilterablePropertyNames(): any[];
          /**
           * <p>Gets a printable name for a group.</p><p>The printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]</code>, where <code>label</code> is the label of the dimension property used at the aggregation level for the group, <code>key-value</code> is the key value of that dimension for the group, and <code>text-value</code> is the value of the associated text property, if it is also used in the binding.</p><p>Whenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value of this function is applied for the group name instead of the respective key or text value.</p>
           * @param {sap.ui.model.Context} oContext <p>the parent context identifying the requested group.</p>
           * @param {number} iLevel <p>the level number of oContext (because the context might occur at multiple levels)</p>
           * @returns string <p>a printable name for the group.</p>
           */
          getGroupName(oContext: sap.ui.model.Context, iLevel: number): string;
          /**
           * <p>Gets the total number of contexts contained in a group, if known.</p><p>For a given group, be aware that the group size might vary over time. In principle, this can happen if the bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of a group at once, but only a page with a certain range, such size changes might happen after every page access.</p>
           * @param {sap.ui.model.Context} oContext <p>the parent context identifying the requested group of child contexts.</p>
           * @param {number} iLevel <p>the level number of oContext (because the context might occur at multiple levels)</p>
           * @returns number <p>The currently known group size, or -1, if not yet determined</p>
           */
          getGroupSize(oContext: sap.ui.model.Context, iLevel: number): number;
          /**
           * <p>Gets details about the measure properties included in the bound OData entity set.</p>
           * @returns { [key: string]: any } <p>details for every measure property addressed by its name. The details object provides these properties: name of the measure, rawValuePropertyName for the name of the property holding the raw value, unitPropertyName for the name of the property holding the related value unit or currency, if any, and analyticalInfo, which contains the binding information for this measure passed from the AnalyticalBinding's consumer via call to function updateAnalyticalInfo.</p>
           */
          getMeasureDetails(): { [key: string]: any };
          /**
           * <p>Returns the current value of the bound target</p>
           * @param {any} oContext <p>the context element of the node</p>
           * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
           * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
           * @returns any[] <p>the array of child contexts for the given node</p>
           */
          getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
          /**
           * <p>Gets child contexts for a specified parent context.</p><p>Contexts are returned in a stable order imposed by the dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property, or the entries are returned in ascending order of the values of this dimension property by default.</p><p>If any of the requested data is missing, an OData request will be triggered to load it.</p>
           * @param {{ [key: string]: any }} mParameters <p>specifying the aggregation level for which contexts shall be fetched. Supported parameters are: <ul> <li>oContext: parent context identifying the requested group of child contexts</li> <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>"/"</code> has level 0</li> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li> <li>startIndex: index of first child entry to return from the parent context (zero-based)</li> <li>length: number of entries to return; counting begins at the given start index</li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to child entries of the given parent context. </li> </ul></p>
           * @returns any[] <p>Array containing the requested contexts of class sap.ui.model.Context, limited by the number of entries contained in the entity set at that aggregation level. The array will contain less than the requested number of contexts, if some are not locally available and an OData request is pending to fetch them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.</p>
           */
          getNodeContexts(mParameters: { [key: string]: any }): any[];
          /**
           * <p>Gets the metadata of a property with a given name.</p>
           * @param {string} sPropertyName <p>The property name.</p>
           * @returns any <p>OData metadata of this property or null if it does not exist.</p>
           */
          getProperty(sPropertyName: string): any;
          /**
           * <p>Gets the label of a property with a given name.</p>
           * @param {string} sPropertyName <p>The property name.</p>
           * @returns string <p>The heading maintained for this property or null if it does not exist.</p>
           */
          getPropertyHeading(sPropertyName: string): string;
          /**
           * <p>Gets the label of a property with a given name.</p>
           * @param {string} sPropertyName <p>The property name.</p>
           * @returns string <p>The label maintained for this property or null if it does not exist.</p>
           */
          getPropertyLabel(sPropertyName: string): string;
          /**
           * <p>Gets the quick info of a property with a given name.</p>
           * @param {string} sPropertyName <p>The property name.</p>
           * @returns string <p>The quick info maintained for this property or null if it does not exist.</p>
           */
          getPropertyQuickInfo(sPropertyName: string): string;
          /**
           * <p>Returns the current value of the bound target</p>
           * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
           * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
           * @returns any[] <p>the array of child contexts for the root node</p>
           */
          getRootContexts(iStartIndex: number, iLength: number): any[];
          /**
           * <p>Gets the context for the root aggregation level representing the grand total for all bound measure properties.</p><p>The context is assigned to parent group ID <code>null</code>. If the binding is configured not to provide a grand total, this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.</p><p>This function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions, modifying filter conditions, etc.</p>
           * @param {{ [key: string]: any }} mParameters <p>specifying how the top-most aggregation level shall be fetched. Supported parameters are: <ul> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li> <li>startIndex: index of first entry to return from parent group ID <code>"/"</code> (zero-based)</li> <li>length: number of entries to return at and after the given start index</li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to contexts of parent group ID <code>"/"</code> or below, if auto-expanding is selected</li> </ul></p>
           * @returns any[] <p>Array with a single object of class sap.ui.model.Context for the root context, or an empty array if an OData request is pending to fetch requested contexts that are not yet locally available.</p>
           */
          getRootContexts(mParameters: { [key: string]: any }): any[];
          /**
           * <p>Gets the names of the sortable properties in the bound OData entity set.</p>
           * @returns any[] <p>names of properties that can be used for sorting the result entities.</p>
           */
          getSortablePropertyNames(): any[];
          /**
           * <p>Gets the total number of entities in the bound OData entity set.</p><p>Counting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of dimension properties included in the bound entity set. This means that intermediate aggregate entities with sub-totals at higher aggregation levels are not counted.</p>
           * @returns number <p>the total number of addressed entities in the OData entity set</p>
           */
          getTotalSize(): number;
          /**
           * <p>Determines if the binding has the entries of a given aggregation level locally available.</p><p>If so, no further OData request is required to fetch any of them.</p>
           * @param {sap.ui.model.Context} oContext <p>the parent context identifying the aggregation level.</p>
           * @param {number} iLevel <p>the level number of oContext (because the context might occur at multiple levels).</p>
           * @returns boolean <p>property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus, indicating whether all, some, or none of the entries are locally available.</p>
           */
          hasAvailableNodeContexts(oContext: sap.ui.model.Context, iLevel: number): boolean;
          /**
           * <p>Returns if the node has child nodes</p>
           * @param {any} oContext <p>the context element of the node</p>
           * @returns boolean <p>true if node has children</p>
           */
          hasChildren(oContext: any): boolean;
          /**
           * <p>Determines if the contexts in a specified group have further children. If so, any of these group contexts can be a parent context of a nested sub-group in a subsequent aggregation level.</p>
           * @param {sap.ui.model.Context} oContext <p>the parent context identifying the requested group of child contexts.</p>
           * @param {{ [key: string]: any }} mParameters <p>The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)</p>
           * @returns boolean <p>true if and only if the contexts in the specified group have further children.</p>
           */
          hasChildren(oContext: sap.ui.model.Context, mParameters: { [key: string]: any }): boolean;
          /**
           * <p>Determines if any of the properties included in the bound OData entity set is a measure property.</p>
           * @returns boolean <p>true if and only one or more properties are measure properties.</p>
           */
          hasMeasures(): boolean;
          /**
           * <p>Determines if a given name refers to a measure property</p>
           * @param {string} sPropertyName <p>The property name.</p>
           * @returns boolean <p>true if and only if the bound OData entity set includes a measure property with this name.</p>
           */
          isMeasure(sPropertyName: string): boolean;
          /**
           * <p>Loads child contexts of multiple groups.</p>
           * @param {{ [key: string]: any }} mGroupIdRanges <p>specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects.</p>
           */
          loadGroups(mGroupIdRanges: { [key: string]: any }): void;
          /**
           * <p>Determines if the binding has been configured to provide a grand total for the selected measure properties.</p>
           * @returns boolean <p>true if and only if the binding provides a context for the grand totals of all selected measure properties.</p>
           */
          providesGrandTotal(): boolean;
          /**
           * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
           * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
           */
          refresh(bForceUpdate: boolean): void;
          /**
           * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter bForceUpdate.</p>
           * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
           */
          refresh(bForceUpdate?: boolean): void;
          /**
           * <p>Sorts the tree according to the sorter definitions.</p>
           * @param {sap.ui.model.Sorter[]} aSorters <p>Array of sap.ui.model.Sorter objects</p>
           */
          sort(aSorters: sap.ui.model.Sorter[]): void;
          /**
           * <p>Sets sorters for retrieving the entities in the bound OData entity set in a specific order.</p><p>Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these sorters.</p>
           * @param {sap.ui.model.Sorter | any[]} aSorter <p>a sorter object or an array of sorter objects which define the sort order.</p>
           * @returns sap.ui.model.analytics.AnalyticalBinding <p>returns <code>this</code> to facilitate method chaining.</p>
           */
          sort(aSorter: sap.ui.model.Sorter | any[]): sap.ui.model.analytics.AnalyticalBinding;
          /**
           * <p>Updates the binding's structure with new analytical information.</p><p>Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains the name of the bound property and in addition: <ol> <li>A column bound to a dimension property has further boolean properties: <ul> <li>grouped: dimension will be used for building groups</li> <li>visible: if the column is visible, values for the related property will be fetched from the OData service</li> <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property will also be fetched from the OData service</li> </ul> </li> <li>A column bound to a measure property has further boolean properties: <ul> <li>total: totals and sub-totals will be provided for the measure at all aggregation levels</li> </ul> </li> <li>A column bound to a hierarchy property has further properties: <ul> <li>grouped: boolean value; indicates whether the hierarchy will be used for building groups</li> <li>level: integer value; the hierarchy level is mandatory for at least one of those columns that represent the same hierarchy.</li> </ul> </li> </ol></p><p>Invoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with this analytical information.</p><p>Please be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on. Whenever possible use the API of the analytical control, instead of relying on the binding.</p>
           * @param {any[]} aColumns <p>an array with objects holding the analytical information for every column, from left to right.</p>
           */
          protected updateAnalyticalInfo(aColumns: any[]): void;
        }
        /**
         */
        export class AnalyticalTreeBindingAdapter {
          /**
           * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.</p>
           */
          constructor();
          /**
           * <p>Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).</p>
           * @returns number <p>the number of expanded levels</p>
           */
          protected getNumberOfExpandedLevels(): number;
          /**
           * <p>Checks if the AnalyticalBinding has totaled measures available. Used for rendering sum rows.</p>
           * @returns boolean <p>Whether the binding has totaled measures or not</p>
           */
          hasTotaledMeasures(): boolean;
          /**
           * <p>Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding). This is NOT the same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand. Setting the number of expanded levels leads to different requests. This function is used by the AnalyticalTable for the ungroup/ungroup-all feature.</p>
           * @param {number} iLevels <p>the number of levels which should be expanded, minimum is 0</p>
           */
          protected setNumberOfExpandedLevels(iLevels: number): void;
        }
        /**
         * <p>Simple Response Collection Component, collects the responses for each sub-request inside a bigger batch request.</p><p>Also handles clean-up after all responses (either success or error) have been collected. Instantiated in AnalyticalBinding.prototype._executeBatchRequest()</p>
         */
        export class BatchResponseCollector {
          /**
           * <p>Constructor for a batch response collecting component.</p>
           * @param {any} mParams <p>optional Setup-Parameter, @see BatchResponseCollector#setup</p>
           */
          constructor(mParams?: any);
          /**
           * <p>Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.</p><p>Keeps track of all collected responses and fires the necessary events after all responses for the requests, given in the constructor, have returned.</p>
           * @param {any} oResponse <p>the response which should be collected</p>
           * @param {string} sResponseType <p>the type of the response, either BatchResponseCollector.TYPE_SUCCESS or BatchResponseCollector.TYPE_ERROR</p>
           */
          collect(oResponse: any, sResponseType?: string): void;
          /**
           * <p>Convenience function to collect an error response.</p><p>Internally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR</p>
           * @param {any} oResponse <p>the erroneous response object</p>
           */
          error(oResponse: any): void;
          /**
           * <p>Setup-Function to initialize/reset the BatchResponseCollector.</p>
           * @param {any} mParams <p>optional Setup-Parameter</p>
           */
          setup(mParams: any): void;
          /**
           * <p>Convenience function to collect a success response.</p><p>Internally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS</p>
           * @param {any} oResponse <p>the successful response, which should be collected</p>
           */
          success(oResponse: any): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      namespace analytics {
        /**
         * <p><p>The OData4Analytics API is purely experimental, not yet functionally complete and not meant for productive usage. At present, its only purpose is to demonstrate how easy analytical extensions of OData4SAP can be consumed.</p><p><em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES DIRECTLY !</em></p><p>Lazy initialization of attributes will cause unexpected values when you access object attributes directly.</p></p>
         */
        namespace odata4analytics {
          /**
           * <p>Specify which components of the dimension shall be included in the value set.</p>
           * @param {boolean} bIncludeText <p>Indicator whether or not to include the dimension text (if available) in the value set.</p>
           * @param {boolean} bIncludeAttributes <p>Indicator whether or not to include all dimension attributes (if available) in the value set.</p>
           */
          function includeDimensionTextAttributes(bIncludeText: boolean, bIncludeAttributes: boolean): void;
          /**
           * <p>Representation of a property annotated with sap:aggregation-role="dimension".</p>
           */
          export class Dimension {
            /**
             * <p>Create a representation of a dimension provided by an analytic query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.QueryResult} oQueryResult <p>The query result containing this dimension</p>
             * @param {any} oProperty <p>The datajs object object representing the dimension</p>
             */
            constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
            /**
             * <p>Find attribute by name</p>
             * @param {string} sName <p>Attribute name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Dimension <p>The dimension attribute object with this name or null if it does not exist</p>
             */
            findAttributeByName(sName: string): sap.ui.model.analytics.odata4analytics.Dimension;
            /**
             * <p>Get the names of all attributes included in this dimension</p>
             * @returns string[] <p>List of all attribute names</p>
             */
            getAllAttributeNames(): string[];
            /**
             * <p>Get all attributes of this dimension</p>
             * @returns any <p>An object with individual JS properties for each attribute of this dimension. The JS object properties all are objects of type odata4analytics.DimensionAttribute. The names of the JS object properties are given by the OData entity type property names representing the dimension attribute keys.</p>
             */
            getAllAttributes(): any;
            /**
             * <p>Get query result containing this dimension</p>
             * @returns sap.ui.model.analytics.odata4analytics.QueryResult <p>The query result object</p>
             */
            getContainingQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
            /**
             * <p>Get associated hierarchy</p>
             * @returns any <p>The hierarchy object or null if there is none. It can be an instance of class odata4analytics.RecursiveHierarchy (TODO later: or a leveled hierarchy). Use methods isLeveledHierarchy and isRecursiveHierarchy to determine object type.</p>
             */
            getHierarchy(): any;
            /**
             * <p>Get the key property</p>
             * @returns any <p>The datajs object representing the property for the dimension key</p>
             */
            getKeyProperty(): any;
            /**
             * <p>Get label</p>
             * @returns string <p>The (possibly language-dependent) label text for this dimension</p>
             */
            getLabelText(): string;
            /**
             * <p>Get master data entity set for this dimension</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntitySet <p>The master data entity set for this dimension, or null, if it does not exist</p>
             */
            getMasterDataEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
            /**
             * <p>Get the name of the dimension</p>
             * @returns string <p>The name of this dimension, which is identical to the name of the dimension key property in the entity type</p>
             */
            getName(): string;
            /**
             * <p>Get super-ordinate dimension</p>
             * @returns any <p>The super-ordinate dimension or null if there is none</p>
             */
            getSuperOrdinateDimension(): any;
            /**
             * <p>Get text property related to this dimension</p>
             * @returns any <p>The datajs object representing the text property or null if it does not exist</p>
             */
            getTextProperty(): any;
            /**
             * <p>Get indicator whether or not master data is available for this dimension</p>
             * @returns boolean <p>True iff master data is available</p>
             */
            hasMasterData(): boolean;
          }
          /**
           * <p>Representation of a dimension attribute.</p>
           */
          export class DimensionAttribute {
            /**
             * <p>Create a representation of a dimension attribute provided by an analytic query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.QueryResult} oQueryResult <p>The query result containing this dimension attribute</p>
             * @param {any} oProperty <p>The datajs object object representing the dimension attribute</p>
             */
            constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
            /**
             * <p>Get dimension</p>
             * @returns sap.ui.model.analytics.odata4analytics.Dimension <p>The dimension object containing this attribute</p>
             */
            getDimension(): sap.ui.model.analytics.odata4analytics.Dimension;
            /**
             * <p>Get the key property</p>
             * @returns any <p>The datajs object representing the property for the key of this dimension attribute</p>
             */
            getKeyProperty(): any;
            /**
             * <p>Get label</p>
             * @returns string <p>The (possibly language-dependent) label text for this dimension attribute</p>
             */
            getLabelText(): string;
            /**
             * <p>Get the name of the dimension attribute</p>
             * @returns string <p>The name of the dimension attribute, which is identical to the name of the property in the entity type holding the attribute value</p>
             */
            getName(): string;
            /**
             * <p>Get text property related to this dimension attribute</p>
             * @returns any <p>The datajs object representing the text property or null if it does not exist</p>
             */
            getTextProperty(): any;
          }
          /**
           * <p>Creation of URIs for fetching a query dimension value set.</p>
           */
          export class DimensionMemberSetRequest {
            /**
             * <p>Create a request object for interaction with a dimension value help. Such a value help is served by either the query result entity set, in which case the returned dimension members are limited to those also used in the query result data. Or, the value help is populated by a master data entity set, if made available by the service. In this case, the result will include all valid members for that dimension.</p>
             * @param {sap.ui.model.analytics.odata4analytics.Dimension} oDimension <p>Description of a dimension</p>
             * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest} oParameterizationRequest <p>(optional) Request object for interactions with the parameterization of the query result or (not yet supported) master data entity set Such an object is required if the entity set holding the dimension members includes parameters.</p>
             * @param {boolean} bUseMasterData <p>(optional) Indicates use of master data for determining the dimension members.</p>
             */
            constructor(oDimension: sap.ui.model.analytics.odata4analytics.Dimension, oParameterizationRequest: sap.ui.model.analytics.odata4analytics.ParameterizationRequest, bUseMasterData: boolean);
            /**
             * <p>Get the filter expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>The filter object associated to this request.</p>
             */
            getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Returns the current page boundaries as object with properties <code>start</code> and <code>end</code>. If the end of the page is unbounded, <code>end</code> is null.</p>
             * @returns any <p>the current page boundaries as object</p>
             */
            getResultPageBoundaries(): any;
            /**
             * <p>Get the sort expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.SortExpression <p>The sort object associated to this request.</p>
             */
            getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
            /**
             * <p>Get the value of a query option for the OData request URI corresponding to this request.</p>
             * @param {String} sQueryOptionName <p>Identifies the query option: $select, $filter,... or any custom query option</p>
             * @returns String <p>The value of the requested query option or null, if this option is not used for the OData request.</p>
             */
            getURIQueryOptionValue(sQueryOptionName: String): String;
            /**
             * <p>Get the URI to locate the entity set for the dimension memebers.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns String <p>The resource path of the URI pointing to the entity set. It is a relative URI unless a service root is given, which would then prefixed in order to return a complete URL.</p>
             */
            getURIToDimensionMemberEntitySet(sServiceRootURI: String): String;
            /**
             * <p>Get the unescaped URI to fetch the dimension members, optionally augmented by text and attributes.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns String <p>The unescaped URI that contains the OData resource path and OData system query options to express the request for the parameter value set..</p>
             */
            getURIToDimensionMemberEntries(sServiceRootURI: String): String;
            /**
             * <p>Set the filter expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.FilterExpression} oFilter <p>The filter object to be associated with this request.</p>
             */
            setFilterExpression(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression): void;
            /**
             * <p>Set the parameterization request required for retrieving dimension members directly from the query result, if it is parameterized.</p>
             * @param {undefined} oParameterizationRequest <p>Request object for interactions with the parameterization of this query result</p>
             */
            setParameterizationRequest(oParameterizationRequest: undefined): void;
            /**
             * <p>Set further options to be applied for the OData request</p>
             * @param {Boolean} bIncludeCount <p>Indicates whether or not the result shall include a count for the returned entities. Default is not to include it. Pass null to keep current setting.</p>
             */
            setRequestOptions(bIncludeCount: Boolean): void;
            /**
             * <p>Specify that only a page of the query result shall be returned. A page is described by its boundaries, that are row numbers for the first and last rows in the query result to be returned.</p>
             * @param {Number} start <p>The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to start with the first row.</p>
             * @param {Number} end <p>The last row of the query result to be returned. Passing null is equivalent to get all rows up to the end of the query result.</p>
             */
            setResultPageBoundaries(start: Number, end: Number): void;
            /**
             * <p>Set the sort expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.SortExpression} oSorter <p>The sort object to be associated with this request.</p>
             */
            setSortExpression(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression): void;
          }
          /**
           * <p>Representation of an OData entity set.</p>
           */
          export class EntitySet {
            /**
             * <p>Create a representation of an OData entity set in the context of an analytic query. Do not create your own instances.</p>
             * @param {any} oModel <p>datajs object for the OData model containing this entity set</p>
             * @param {any} oSchema <p>datajs object for the schema surrounding the container of this entity set</p>
             * @param {any} oContainer <p>datajs object for the container holding this entity set</p>
             * @param {any} oEntitySet <p>datajs object for the entity set</p>
             * @param {any} oEntityType <p>datajs object for the entity type</p>
             */
            constructor(oModel: any, oSchema: any, oContainer: any, oEntitySet: any, oEntityType: any);
            /**
             * <p>Get entity type used for this entity set</p>
             * @returns any <p>The datajs object representing the entity type</p>
             */
            getEntityType(): any;
            /**
             * <p>Get the fully qualified name for this entity type</p>
             * @returns string <p>The fully qualified name</p>
             */
            getQName(): string;
            /**
             * <p>Get full description for this entity set</p>
             * @returns any <p>The datajs object representing the entity set</p>
             */
            getSetDescription(): any;
            /**
             * <p>Get names of properties in this entity set that can be updated</p>
             * @returns any <p>An object with individual JS properties for each updatable property. For testing whether propertyName is the name of an updatable property, use <code>getUpdatablePropertyNameSet()[propertyName]</code>. The included JS object properties are all set to true.</p>
             */
            getUpdatablePropertyNameSet(): any;
          }
          /**
           * <p>Representation of an OData entity type.</p>
           */
          export class EntityType {
            /**
             * <p>Create a representation of an OData entity type in the context of an analytic query. Do not create your own instances.</p>
             * @param {any} oModel <p>datajs object for the OData model containing this entity type</p>
             * @param {any} oSchema <p>datajs object for the schema containing this entity type</p>
             * @param {any} oEntityType <p>datajs object for the entity type</p>
             */
            constructor(oModel: any, oSchema: any, oEntityType: any);
            /**
             * <p>Find property by name</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>The datajs object representing the property or null if it does not exist</p>
             */
            findPropertyByName(sPropertyName: string): any;
            /**
             * <p>Get the names of all properties with an associated hierarchy</p>
             * @returns string[] <p>List of all property names</p>
             */
            getAllHierarchyPropertyNames(): string[];
            /**
             * <p>Get names of properties that can be filtered, that is they can be used in $filter expressions</p>
             * @returns string[] <p>Array with names of properties that can be filtered.</p>
             */
            getFilterablePropertyNames(): string[];
            /**
             * <p>Get heading of the property with specified name (identified by property metadata annotation sap:heading)</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns string <p>The heading string</p>
             */
            getHeadingOfProperty(sPropertyName: string): string;
            /**
             * <p>Get the hierarchy associated to a given property Based on the current specification, hierarchies are always recursive. TODO: Extend behavior when leveled hierarchies get in scope</p>
             * @param {string} sName <p>Parameter name</p>
             * @returns sap.ui.model.analytics.odata4analytics.RecursiveHierarchy <p>The hierarchy object or null if it does not exist</p>
             */
            getHierarchy(sName: string): sap.ui.model.analytics.odata4analytics.RecursiveHierarchy;
            /**
             * <p>Get key properties of this type</p>
             * @returns string[] <p>The list of key property names</p>
             */
            getKeyProperties(): string[];
            /**
             * <p>Get label of the property with specified name (identified by property metadata annotation sap:label)</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns string <p>The label string</p>
             */
            getLabelOfProperty(sPropertyName: string): string;
            /**
             * <p>Get all properties</p>
             * @returns any <p>Object with (JavaScript) properties, one for each (OData entity type) property. These (JavaScript) properties hold the datajs object representing the property</p>
             */
            getProperties(): any;
            /**
             * <p>Get properties for which filter restrictions have been specified</p>
             * @returns any <p>Object with (JavaScript) properties, one for each (OData entity type) property. The property value is from odata4analytics.EntityType.propertyFilterRestriction and indicates the filter restriction for this property.</p>
             */
            getPropertiesWithFilterRestrictions(): any;
            /**
             * <p>Get the fully qualified name for this entity type</p>
             * @returns string <p>The fully qualified name</p>
             */
            getQName(): string;
            /**
             * <p>Get quick info of the property with specified name (identified by property metadata annotation sap:quickinfo)</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns string <p>The quick info string</p>
             */
            getQuickInfoOfProperty(sPropertyName: string): string;
            /**
             * <p>Get names of properties that must be filtered, that is they must appear in every $filter expression</p>
             * @returns string[] <p>Array with names of properties that must be filtered.</p>
             */
            getRequiredFilterPropertyNames(): string[];
            /**
             * <p>Get names of properties that can be sorted, that is they can be used in $orderby expressions</p>
             * @returns string[] <p>Array with names of properties that can be sorted.</p>
             */
            getSortablePropertyNames(): string[];
            /**
             * <p>Get the super-ordinate property related to the property with specified name (identified by property metadata annotation sap:super-ordinate)</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>The datajs object representing the super-ordinate property or null if it does not exist</p>
             */
            getSuperOrdinatePropertyOfProperty(sPropertyName: string): any;
            /**
             * <p>Get the text property related to the property with specified name (identified by property metadata annotation sap:text)</p>
             * @param {string} sPropertyName <p>Property name</p>
             * @returns any <p>The datajs object representing the text property or null if it does not exist</p>
             */
            getTextPropertyOfProperty(sPropertyName: string): any;
            /**
             * <p>Get full description for this entity type</p>
             * @returns any <p>The datajs object representing the entity type</p>
             */
            getTypeDescription(): any;
          }
          /**
           * <p>Representation of a $filter expression for an OData entity type.</p>
           */
          export class FilterExpression {
            /**
             * <p>Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system query option.</p>
             * @param {any} oModel <p>datajs object for the OData model containing this entity type</p>
             * @param {any} oSchema <p>datajs object for the schema containing this entity type</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntityType} oEntityType <p>object for the entity type</p>
             */
            constructor(oModel: any, oSchema: any, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType);
            /**
             * <p>Add a condition to the filter expression.</p><p>Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions for different properties are combined with a logical AND.</p>
             * @param {string} sPropertyName <p>The name of the property bound in the condition</p>
             * @param {sap.ui.model.FilterOperator} sOperator <p>operator used for the condition</p>
             * @param {any} oValue <p>value to be used for this condition</p>
             * @param {any} oValue2 <p>(optional) as second value to be used for this condition</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>This object for method chaining</p>
             */
            addCondition(sPropertyName: string, sOperator: sap.ui.model.FilterOperator, oValue: any, oValue2: any): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Add a set condition to the filter expression.</p><p>A set condition tests if the value of a property is included in a set of given values. It is a convenience method for this particular use case eliminating the need for multiple API calls.</p>
             * @param {string} sPropertyName <p>The name of the property bound in the condition</p>
             * @param {any[]} aValues <p>values defining the set</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>This object for method chaining</p>
             */
            addSetCondition(sPropertyName: string, aValues: any[]): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Add an array of UI5 filter conditions to the filter expression.</p><p>The UI5 filter condition is combined with the other given conditions using a logical AND. This method is particularly useful for passing forward already created UI5 filter arrays.</p>
             * @param {sap.ui.model.Filter[]} aUI5Filter <p>Array of UI5 filter objects</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>This object for method chaining</p>
             */
            addUI5FilterConditions(aUI5Filter: sap.ui.model.Filter[]): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Check if request is compliant with basic filter constraints expressed in metadata:</p><p>(a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed</p>
             * @returns boolean <p>The value true. In case the expression violates some of the rules, an exception with some explanatory message is thrown</p>
             */
            checkValidity(): boolean;
            /**
             * <p>Clear expression from any conditions that may have been set previously</p>
             */
            clear(): void;
            /**
             * <p>Get description for this entity type</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntityType <p>The object representing the entity type</p>
             */
            getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
            /**
             * <p>Get an array of SAPUI5 Filter objects corresponding to this expression.</p>
             * @returns sap.ui.model.Filter[] <p>List of filter objects representing this expression</p>
             */
            getExpressionAsUI5FilterArray(): sap.ui.model.Filter[];
            /**
             * <p>Get the value for the OData system query option $filter corresponding to this expression.</p>
             * @returns string <p>The $filter value for the filter expression</p>
             */
            getURIFilterOptionValue(): string;
            /**
             * <p>Remove all conditions for some property from the filter expression.</p><p>All previously set conditions for some property are removed from the filter expression.</p>
             * @param {string} sPropertyName <p>The name of the property bound in the condition</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>This object for method chaining</p>
             */
            removeConditions(sPropertyName: string): sap.ui.model.analytics.odata4analytics.FilterExpression;
          }
          /**
           * <p>Representation of a property annotated with sap:aggregation-role="measure".</p>
           */
          export class Measure {
            /**
             * <p>Create a representation of a measure provided by an analytic query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.QueryResult} oQueryResult <p>The query result containing this measure</p>
             * @param {any} oProperty <p>The datajs object object representing the measure</p>
             */
            constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
            /**
             * <p>Get the text property associated to the raw value property holding the formatted value related to this measure</p>
             * @returns any <p>The datajs object representing the property holding the formatted value text of this measure or null if this measure does not have a unit</p>
             */
            getFormattedValueProperty(): any;
            /**
             * <p>Get label</p>
             * @returns string <p>The (possibly language-dependent) label text for this measure</p>
             */
            getLabelText(): string;
            /**
             * <p>Get the name of the measure</p>
             * @returns string <p>The name of the measure, which is identical to the name of the measure raw value property in the entity type</p>
             */
            getName(): string;
            /**
             * <p>Get the raw value property</p>
             * @returns any <p>The datajs object representing the property holding the raw value of this measure</p>
             */
            getRawValueProperty(): any;
            /**
             * <p>Get the unit property related to this measure</p>
             * @returns any <p>The datajs object representing the unit property or null if this measure does not have a unit</p>
             */
            getUnitProperty(): any;
            /**
             * <p>Get indicator whether or not the measure is updatable</p>
             * @returns boolean <p>True iff the measure is updatable</p>
             */
            isUpdatable(): boolean;
          }
          /**
           * <p>Representation of an OData model with analytical annotations defined by OData4SAP.</p>
           */
          export class Model {
            /**
             * <p>Create a representation of the analytical semantics of OData service metadata</p>
             * @param {any} oModelReference <p>An instance of ReferenceByURI, ReferenceByModel or ReferenceWithWorkaround for locating the OData service.</p>
             * @param {any} mParameter <p>Additional parameters for controlling the model construction. Currently supported are: <li> sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the structure of the given service </li> <li> modelVersion - Parameter to define which ODataModel version should be used, in you use 'odata4analytics.Model.ReferenceByURI': 1 (default), 2 see also: AnalyticalVersionInfo constants </li></p>
             */
            constructor(oModelReference: any, mParameter?: any);
            /**
             * <p>Find analytic query result by name</p>
             * @param {string} sName <p>Fully qualified name of query result entity set</p>
             * @returns sap.ui.model.analytics.odata4analytics.QueryResult <p>The query result object with this name or null if it does not exist</p>
             */
            findQueryResultByName(sName: string): sap.ui.model.analytics.odata4analytics.QueryResult;
            /**
             * <p>Get the names of all query results (entity sets) offered by the model</p>
             * @returns string[] <p>List of all query result names</p>
             */
            getAllQueryResultNames(): string[];
            /**
             * <p>Get all query results offered by the model</p>
             * @returns any <p>An object with individual JS properties for each query result included in the model. The JS object properties all are objects of type odata4analytics.QueryResult. The names of the JS object properties are given by the entity set names representing the query results.</p>
             */
            getAllQueryResults(): any;
            /**
             * <p>Get underlying OData model provided by SAPUI5</p>
             * @returns any <p>The SAPUI5 representation of the model.</p>
             */
            getODataModel(): any;
          }
          namespace Model {
            /**
             * <p>Handle to an already instantiated SAPUI5 OData model.</p>
             */
            export class ReferenceByModel {
              /**
               * <p>Create a reference to an OData model already loaded elsewhere with the help of SAPUI5.</p>
               * @param {any} oModel <p>holding the OData model.</p>
               */
              constructor(oModel: any);
            }
            /**
             * <p>Handle to an OData model by the URI pointing to it.</p>
             */
            export class ReferenceByURI {
              /**
               * <p>Create a reference to an OData model by the URI of the related OData service.</p>
               * @param {string} sURI <p>holding the URI.</p>
               */
              constructor(sURI: string);
            }
            /**
             * <p>Handle to an already instantiated SAPUI5 OData model.</p>
             */
            export class ReferenceWithWorkaround {
              /**
               * <p>Create a reference to an OData model having certain workarounds activated. A workaround is an implementation that changes the standard behavior of the API to overcome some gap or limitation in the OData provider. The workaround implementation can be conditionally activated by passing the identifier in the constructor.</p><p>Known workaround identifiers are:</p><p><li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it gets generated from the property name.</li></p><p><li>"IdentifyTextPropertiesByName" -If a dimension property has no text and another property with the same name and an appended "Name", "Text" etc. exists, they are linked via annotation.</li></p>
               * @param {any} oModel <p>holding a reference to the OData model, obtained by odata4analytics.Model.ReferenceByModel or by sap.odata4analytics.Model.ReferenceByURI.</p>
               * @param {string[]} aWorkaroundID <p>listing all workarounds to be applied.</p>
               */
              constructor(oModel: any, aWorkaroundID: string[]);
            }
          }
          /**
           * <p>Representation of a property annotated with sap:parameter.</p>
           */
          export class Parameter {
            /**
             * <p>Create a representation of a single parameter contained in a parameterization. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.Parameterization} oParameterization <p>The parameterization containing this parameter</p>
             * @param {any} oProperty <p>The datajs object object representing the text property</p>
             */
            constructor(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization, oProperty: any);
            /**
             * <p>Get parameterization containing this parameter</p>
             * @returns sap.ui.model.analytics.odata4analytics.Parameterization <p>The parameterization object</p>
             */
            getContainingParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
            /**
             * <p>Get label</p>
             * @returns string <p>The (possibly language-dependent) label text for this parameter</p>
             */
            getLabelText(): string;
            /**
             * <p>Get the name of the parameter</p>
             * @returns string <p>The name of the parameter, which is identical with the name of the property representing the parameter in the parameterization entity type</p>
             */
            getName(): string;
            /**
             * <p>Get property for the parameter representing the peer boundary of the same interval</p>
             * @returns sap.ui.model.analytics.odata4analytics.Parameter <p>The parameter representing the peer boundary of the same interval. This means that if *this* parameter is a lower boundary, the returned object</p>
             */
            getPeerIntervalBoundaryParameter(): sap.ui.model.analytics.odata4analytics.Parameter;
            /**
             * <p>Get property</p>
             * @returns any <p>The datajs object representing the property of this parameter</p>
             */
            getProperty(): any;
            /**
             * <p>Get text property related to this parameter</p>
             * @returns any <p>The datajs object representing the text property or null if it does not exist</p>
             */
            getTextProperty(): any;
            /**
             * <p>Get the URI to locate the entity set holding the value set, if it is available.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns undefined <p>The resource path of the URI pointing to the entity set. It is a relative URI unless a service root is given, which would then prefixed in order to return a complete URL.</p>
             */
            getURIToValueEntitySet(sServiceRootURI: String): undefined;
            /**
             * <p>Get indicator if the parameter represents an interval boundary</p>
             * @returns boolean <p>True iff it represents an interval boundary, otherwise false</p>
             */
            isIntervalBoundary(): boolean;
            /**
             * <p>Get indicator if the parameter represents the lower boundary of an interval</p>
             * @returns boolean <p>True iff it represents the lower boundary of an interval, otherwise false</p>
             */
            isLowerIntervalBoundary(): boolean;
            /**
             * <p>Get indicator whether or not the parameter is optional</p>
             * @returns boolean <p>True iff the parameter is optional</p>
             */
            isOptional(): boolean;
            /**
             * <p>Get indicator if a set of values is available for this parameter. Typically, this is true for parameters with a finite set of known values such as products, business partners in different roles, organization units, and false for integer or date parameters</p>
             * @returns boolean <p>True iff a value set is available, otherwise false</p>
             */
            isValueSetAvailable(): boolean;
          }
          /**
           * <p>Representation of an entity type annotated with sap:semantics="parameters".</p>
           */
          export class Parameterization {
            /**
             * <p>Create a representation of a parameterization for an analytic query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntityType} oEntityType <p>The OData entity type for this parameterization</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntitySet} oEntitySet <p>The OData entity set for this parameterization offered by the OData service</p>
             */
            constructor(oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet);
            /**
             * <p>Find parameter by name</p>
             * @param {string} sName <p>Parameter name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Parameter <p>The parameter object with this name or null if it does not exist</p>
             */
            findParameterByName(sName: string): sap.ui.model.analytics.odata4analytics.Parameter;
            /**
             * <p>Get the names of all parameters part of the parameterization</p>
             * @returns string[] <p>List of all parameter names</p>
             */
            getAllParameterNames(): string[];
            /**
             * <p>Get all parameters included in this parameterization</p>
             * @returns any <p>An object with individual JS properties for each parameter included in the query result. The JS object properties all are objects of type odata4analytics.Parameter. The names of the JS object properties are given by the OData entity type property names representing the parameter keys.</p>
             */
            getAllParameters(): any;
            /**
             * <p>Get the entity set representing this query result in the OData model</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntitySet <p>The OData entity set representing this query result</p>
             */
            getEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
            /**
             * <p>Get the entity type defining the type of this query result in the OData model</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntityType <p>The OData entity type for this query result</p>
             */
            getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
            /**
             * <p>Get the name of the parameter</p>
             * @returns string <p>The name of the parameterization, which is identical with the name of the entity set representing the parameterization in the OData service</p>
             */
            getName(): string;
            /**
             * <p>Get navigation property to query result</p>
             * @returns sap.ui.model.analytics.odata4analytics.QueryResult <p>The parameter object with this name or null if it does not exist</p>
             */
            getNavigationPropertyToQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
          }
          /**
           * <p>Creation of URIs for query parameterizations.</p>
           */
          export class ParameterizationRequest {
            /**
             * <p>Create a request object for interaction with a query parameterization.</p>
             * @param {sap.ui.model.analytics.odata4analytics.Parameterization} oParameterization <p>Description of a query parameterization</p>
             */
            constructor(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization);
            /**
             * <p>Get the description of the parameterization on which this request operates on</p>
             * @returns sap.ui.model.analytics.odata4analytics.Parameterization <p>Description of a query parameterization</p>
             */
            getParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
            /**
             * <p>Get the URI to locate the entity set for the query parameterization.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns undefined <p>The resource path of the URI pointing to the entity set. It is a relative URI unless a service root is given, which would then prefixed in order to return a complete URL.</p>
             */
            getURIToParameterizationEntitySet(sServiceRootURI: String): undefined;
            /**
             * <p>Get the URI to locate the parameterization entity for the values assigned to all parameters beforehand. Notice that a value must be supplied for every parameter including those marked as optional. For optional parameters, assign the special value that the service provider uses as an "omitted" value. For example, for services based on BW Easy Queries, this would be an empty string.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns undefined <p>The resource path of the URI pointing to the entity set. It is a relative URI unless a service root is given, which would then prefixed in order to return a complete URL.</p>
             */
            getURIToParameterizationEntry(sServiceRootURI: String): undefined;
            /**
             * <p>Assign a value to a parameter</p>
             * @param {String} sParameterName <p>Name of the parameter. In case of a range value, provide the name of the lower boundary parameter.</p>
             * @param {String} sValue <p>Assigned value. Pass null to remove a value assignment.</p>
             * @param {String} sToValue <p>Omit it or set it to null for single values. If set, it will be assigned to the upper boundary parameter</p>
             */
            setParameterValue(sParameterName: String, sValue: String, sToValue: String): void;
          }
          /**
           * <p>Creation of URIs for fetching a query parameter value set.</p>
           */
          export class ParameterValueSetRequest {
            /**
             * <p>Create a request object for interaction with a query parameter value help.</p>
             * @param {sap.ui.model.analytics.odata4analytics.Parameter} oParameter <p>Description of a query parameter</p>
             */
            constructor(oParameter: sap.ui.model.analytics.odata4analytics.Parameter);
            /**
             * <p>Get the filter expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>The filter object associated to this request.</p>
             */
            getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Get the sort expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.SortExpression <p>The sort object associated to this request.</p>
             */
            getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
            /**
             * <p>Get the value of a query option for the OData request URI corresponding to this request.</p>
             * @param {String} sQueryOptionName <p>Identifies the query option: $select, $filter,... or any custom query option</p>
             * @returns String <p>The value of the requested query option or null, if this option is not used for the OData request.</p>
             */
            getURIQueryOptionValue(sQueryOptionName: String): String;
            /**
             * <p>Get the unescaped URI to fetch the parameter value set.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns String <p>The unescaped URI that contains the OData resource path and OData system query options to express the request for the parameter value set..</p>
             */
            getURIToParameterValueSetEntries(sServiceRootURI: String): String;
            /**
             * <p>Specify which components of the parameter shall be included in the value set.</p>
             * @param {boolean} bIncludeText <p>Indicator whether or not to include the parameter text (if available) in the value set. Pass null to keep current setting.</p>
             */
            includeParameterText(bIncludeText: boolean): void;
            /**
             * <p>Set the filter expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.FilterExpression} oFilter <p>The filter object to be associated with this request.</p>
             */
            setFilterExpression(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression): void;
            /**
             * <p>Set the sort expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.SortExpression} oSorter <p>The sort object to be associated with this request.</p>
             */
            setSortExpression(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression): void;
          }
          /**
           * <p>Representation of an entity type annotated with sap:semantics="aggregate".</p>
           */
          export class QueryResult {
            /**
             * <p>Create a representation of an analytic query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.Model} oModel <p>The analytical model containing this query result entity set</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntityType} oEntityType <p>The OData entity type for this query</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntitySet} oEntitySet <p>The OData entity set for this query offered by the OData service</p>
             * @param {sap.ui.model.analytics.odata4analytics.Parameterization} oParameterization <p>The parameterization of this query, if any</p>
             */
            constructor(oModel: sap.ui.model.analytics.odata4analytics.Model, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet, oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization);
            /**
             * <p>Find dimension by name</p>
             * @param {string} sName <p>Dimension name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Dimension <p>The dimension object with this name or null if it does not exist</p>
             */
            findDimensionByName(sName: string): sap.ui.model.analytics.odata4analytics.Dimension;
            /**
             * <p>Find dimension by property name</p>
             * @param {string} sName <p>Property name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Dimension <p>The dimension object to which the given property name is related, because the property holds the dimension key, its text, or is an attribute of this dimension. If no such dimension exists, null is returned.</p>
             */
            findDimensionByPropertyName(sName: string): sap.ui.model.analytics.odata4analytics.Dimension;
            /**
             * <p>Find measure by name</p>
             * @param {string} sName <p>Measure name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Measure <p>The measure object with this name or null if it does not exist</p>
             */
            findMeasureByName(sName: string): sap.ui.model.analytics.odata4analytics.Measure;
            /**
             * <p>Find measure by property name</p>
             * @param {string} sName <p>Property name</p>
             * @returns sap.ui.model.analytics.odata4analytics.Measure <p>The measure object to which the given property name is related, because the property holds the raw measure value or its formatted value. If no such measure exists, null is returned.</p>
             */
            findMeasureByPropertyName(sName: string): sap.ui.model.analytics.odata4analytics.Measure;
            /**
             * <p>Get the names of all dimensions included in the query result</p>
             * @returns string[] <p>List of all dimension names</p>
             */
            getAllDimensionNames(): string[];
            /**
             * <p>Get all dimensions included in this query result</p>
             * @returns any <p>An object with individual JS properties for each dimension included in the query result. The JS object properties all are objects of type odata4analytics.Dimension. The names of the JS object properties are given by the OData entity type property names representing the dimension keys.</p>
             */
            getAllDimensions(): any;
            /**
             * <p>Get the names of all measures included in the query result</p>
             * @returns string[] <p>List of all measure names</p>
             */
            getAllMeasureNames(): string[];
            /**
             * <p>Get all measures included in this query result</p>
             * @returns any <p>An object with individual JS properties for each measure included in the query result. The JS object properties all are objects of type odata4analytics.Measure. The names of the JS object properties are given by the OData entity type property names representing the measure raw values.</p>
             */
            getAllMeasures(): any;
            /**
             * <p>Get the entity set representing this query result in the OData model</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntitySet <p>The OData entity set representing this query result</p>
             */
            getEntitySet(): sap.ui.model.analytics.odata4analytics.EntitySet;
            /**
             * <p>Get the entity type defining the type of this query result in the OData model</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntityType <p>The OData entity type for this query result</p>
             */
            getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
            /**
             * <p>Get the analytical model containing the entity set for this query result</p>
             * @returns any <p>The analytical representation of the OData model</p>
             */
            getModel(): any;
            /**
             * <p>Get the name of the query result</p>
             * @returns string <p>The fully qualified name of the query result, which is identical with the name of the entity set representing the query result in the OData service</p>
             */
            getName(): string;
            /**
             * <p>Get the parameterization of this query result</p>
             * @returns sap.ui.model.analytics.odata4analytics.Parameterization <p>The object for the parameterization or null if the query result is not parameterized</p>
             */
            getParameterization(): sap.ui.model.analytics.odata4analytics.Parameterization;
            /**
             * <p>Get property holding the totaled property list</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getTotaledPropertiesListProperty(): any;
          }
          /**
           * <p>Creation of URIs for fetching query results.</p>
           */
          export class QueryResultRequest {
            /**
             * <p>Create a request object for interaction with a query result.</p>
             * @param {sap.ui.model.analytics.odata4analytics.QueryResult} oQueryResult <p>Description of a query parameterization</p>
             * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest} oParameterizationRequest <p>Request object for interactions with the parameterization of this query. Only required if the query service includes parameters.</p>
             */
            constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oParameterizationRequest?: sap.ui.model.analytics.odata4analytics.ParameterizationRequest);
            /**
             * <p>Adds a recursive hierarchy to the aggregation level.</p>
             * @param {string} sHierarchyDimensionName <p>Name of dimension whose hierarchy shall be part of the aggregation level</p>
             * @param {boolean} bIncludeExternalKey <p>Indicator whether or not to include the external node key (if available) in the query result</p>
             * @param {boolean} bIncludeText <p>Indicator whether or not to include the node text (if available) in the query result</p>
             */
            addRecursiveHierarchy(sHierarchyDimensionName: string, bIncludeExternalKey: boolean, bIncludeText: boolean): void;
            /**
             * <p>Add one or more dimensions to the aggregation level</p>
             * @param {undefined} aDimensionName <p>Array of dimension names to be added to the already defined aggregation level.</p>
             */
            addToAggregationLevel(aDimensionName: undefined): void;
            /**
             * <p>Get the names of the dimensions included in the aggregation level</p>
             * @returns any[] <p>The dimension names included in the aggregation level</p>
             */
            getAggregationLevel(): any[];
            /**
             * <p>Get details about a dimensions included in the aggregation level</p>
             * @param {undefined} sDImensionName <p>Name of a dimension included in the aggregation level of this request, for which details shall be returned</p>
             * @returns any <p>An object with three properties named key and text, both with Boolean values indicating whether the key and text of this dimension are included in this request. The third property named attributes is an array of attribute names of this dimension included in this request, or null, if there are none.</p>
             */
            getAggregationLevelDetails(sDImensionName: undefined): any;
            /**
             * <p>Get the filter expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.FilterExpression <p>The filter object associated to this request.</p>
             */
            getFilterExpression(): sap.ui.model.analytics.odata4analytics.FilterExpression;
            /**
             * <p>Get the names of the measures included in the query result request</p>
             * @returns any[] <p>The measure names included in the query result request</p>
             */
            getMeasureNames(): any[];
            /**
             * <p>Retrieves the current parametrization request</p>
             * @returns sap.ui.model.analytics.odata4analytics.ParameterizationRequest 
             */
            getParameterizationRequest(): sap.ui.model.analytics.odata4analytics.ParameterizationRequest;
            /**
             * <p>Get the description of the query result on which this request operates on</p>
             * @returns sap.ui.model.analytics.odata4analytics.QueryResult <p>Description of a query result</p>
             */
            getQueryResult(): sap.ui.model.analytics.odata4analytics.QueryResult;
            /**
             * <p>Returns the current page boundaries as object with properties <code>start</code> and <code>end</code>. If the end of the page is unbounded, <code>end</code> is null.</p>
             * @returns any <p>the current page boundaries as object</p>
             */
            getResultPageBoundaries(): any;
            /**
             * <p>Get the sort expression for this request.</p><p>Expressions are represented by separate objects. If none exists so far, a new expression object gets created.</p>
             * @returns sap.ui.model.analytics.odata4analytics.SortExpression <p>The sort object associated to this request.</p>
             */
            getSortExpression(): sap.ui.model.analytics.odata4analytics.SortExpression;
            /**
             * <p>Get the value of a query option for the OData request URI corresponding to this request.</p>
             * @param {String} sQueryOptionName <p>Identifies the query option: $select, $filter,$orderby ... or any custom query option</p>
             * @returns String <p>The value of the requested query option or null, if this option is not used for the OData request.</p>
             */
            getURIQueryOptionValue(sQueryOptionName: String): String;
            /**
             * <p>Get the URI to locate the entity set for the query result.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @returns String <p>The resource path of the URI pointing to the entity set. It is a relative URI unless a service root is given, which would then prefixed in order to return a complete URL.</p>
             */
            getURIToQueryResultEntitySet(sServiceRootURI: String): String;
            /**
             * <p>Get the unescaped URI to fetch the query result.</p>
             * @param {String} sServiceRootURI <p>(optional) Identifies the root of the OData service</p>
             * @param {String} sResourcePath <p>(optional) OData resource path to be considered. If provided, it overwrites any parameterization object that might have been specified separately.</p>
             * @returns String <p>The unescaped URI that contains the OData resource path and OData system query options to express the aggregation level, filter expression and further options.</p>
             */
            getURIToQueryResultEntries(sServiceRootURI: String, sResourcePath: String): String;
            /**
             * <p>Specify which dimension components shall be included in the query result. The settings get applied to the currently defined aggregation level.</p>
             * @param {string} sDimensionName <p>Name of the dimension for which the settings get applied. Specify null to apply the settings to all dimensions in the aggregation level.</p>
             * @param {boolean} bIncludeKey <p>Indicator whether or not to include the dimension key in the query result. Pass null to keep current setting.</p>
             * @param {boolean} bIncludeText <p>Indicator whether or not to include the dimension text (if available) in the query result. Pass null to keep current setting.</p>
             * @param {undefined} aAttributeName <p>Array of dimension attribute names to be included in the result. Pass null to keep current setting. This argument is ignored if sDimensionName is null.</p>
             */
            includeDimensionKeyTextAttributes(sDimensionName: string, bIncludeKey: boolean, bIncludeText: boolean, aAttributeName: undefined): void;
            /**
             * <p>Specify which measure components shall be included in the query result. The settings get applied to the currently set measures.</p>
             * @param {string} sMeasureName <p>Name of the measure for which the settings get applied. Specify null to apply the settings to all currently set measures.</p>
             * @param {boolean} bIncludeRawValue <p>Indicator whether or not to include the raw value in the query result. Pass null to keep current setting.</p>
             * @param {boolean} bIncludeFormattedValue <p>Indicator whether or not to include the formatted value (if available) in the query result. Pass null to keep current setting.</p>
             * @param {boolean} bIncludeUnit <p>Indicator whether or not to include the unit (if available) in the query result. Pass null to keep current setting.</p>
             */
            includeMeasureRawFormattedValueUnit(sMeasureName: string, bIncludeRawValue: boolean, bIncludeFormattedValue: boolean, bIncludeUnit: boolean): void;
            /**
             * <p>Remove one or more dimensions from the aggregation level. The method also removed a potential sort expression on the dimension.</p>
             * @param {undefined} aDimensionName <p>Array of dimension names to be removed from the already defined aggregation level.</p>
             */
            removeFromAggregationLevel(aDimensionName: undefined): void;
            /**
             * <p>Set the aggregation level for the query result request. By default, the query result will include the properties holding the keys of the given dimensions. This setting can be changed using includeDimensionKeyTextAttributes.</p>
             * @param {undefined} aDimensionName <p>Array of dimension names to be part of the aggregation level. If null, the aggregation level includes all dimensions, if empty, no dimension is included.</p>
             */
            setAggregationLevel(aDimensionName: undefined): void;
            /**
             * <p>Set the filter expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.FilterExpression} oFilter <p>The filter object to be associated with this request.</p>
             */
            setFilterExpression(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression): void;
            /**
             * <p>Set the measures to be included in the query result request. By default, the query result will include the properties holding the raw values of the given measures. This setting can be changed using includeMeasureRawFormattedValueUnit.</p>
             * @param {undefined} aMeasureName <p>Array of measure names to be part of the query result request. If null, the request includes all measures, if empty, no measure is included.</p>
             */
            setMeasures(aMeasureName: undefined): void;
            /**
             * <p>Set the parameterization request required for interactions with the query result of parameterized queries. This method provides an alternative way to assign a parameterization request to a query result request.</p>
             * @param {undefined} oParameterizationRequest <p>Request object for interactions with the parameterization of this query</p>
             */
            setParameterizationRequest(oParameterizationRequest: undefined): void;
            /**
             * <p>Set further options to be applied for the OData request to fetch the query result</p>
             * @param {Boolean} bIncludeEntityKey <p>Indicates whether or not the entity key should be returned for every entry in the query result. Default is not to include it. Pass null to keep current setting.</p>
             * @param {Boolean} bIncludeCount <p>Indicates whether or not the result shall include a count for the returned entities. Default is not to include it. Pass null to keep current setting.</p>
             * @param {Boolean} bReturnNoEntities <p>Indicates whether or not the result shall be empty. This will translate to $top=0 in the OData request and override any setting done with setResultPageBoundaries. The default is not to suppress entities in the result. Pass null to keep current setting. The main use case for this option is to create a request with $inlinecount returning an entity count.</p>
             */
            setRequestOptions(bIncludeEntityKey: Boolean, bIncludeCount: Boolean, bReturnNoEntities: Boolean): void;
            /**
             * <p>Set the resource path to be considered for the OData request URI of this query request object. This method provides an alternative way to assign a path comprising a parameterization. If a path is provided, it overwrites any parameterization object that might have been specified separately.</p>
             * @param {string} sResourcePath <p>Resource path pointing to the entity set of the query result. Must include a valid parameterization if query contains parameters.</p>
             */
            setResourcePath(sResourcePath: string): void;
            /**
             * <p>Specify that only a page of the query result shall be returned. A page is described by its boundaries, that are row numbers for the first and last rows in the query result to be returned.</p>
             * @param {Number} start <p>The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to start with the first row.</p>
             * @param {Number} end <p>The last row of the query result to be returned. Passing null is equivalent to get all rows up to the end of the query result.</p>
             */
            setResultPageBoundaries(start: Number, end: Number): void;
            /**
             * <p>Set the sort expression for this request.</p><p>Expressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.</p>
             * @param {sap.ui.model.analytics.odata4analytics.SortExpression} oSorter <p>The sort object to be associated with this request.</p>
             */
            setSortExpression(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression): void;
          }
          /**
           * <p>Representation of a recursive hierarchy.</p>
           */
          export class RecursiveHierarchy {
            /**
             * <p>Create a representation of a recursive hierarchy defined on one multiple properties in an OData entity type query. Do not create your own instances.</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntityType} oEntityType <p>object for the entity type</p>
             * @param {any} oNodeIDProperty <p>datajs object for the property holding the hierarchy node ID identifying the hierarchy node to which the OData entry belongs</p>
             * @param {any} oParentNodeIDProperty <p>datajs object for the property holding the node ID of the parent of the hierarchy node pointed to by the value of oNodeIDProperty</p>
             * @param {any} oNodeLevelProperty <p>datajs object for the property holding the level number for the of the hierarchy node pointed to by the value of oNodeIDProperty</p>
             * @param {any} oNodeValueProperty <p>datajs object for the property holding the data value for the of the hierarchy node pointed to by the value of oNodeIDProperty</p>
             * @param {any} oNodeExternalKeyProperty <p>datajs object for the property holding the node external key of the hierarchy node. The external key is a human-readable identification of a node. The value of the <code>hierarchy-node-external-key-for</code> attribute is always the name of another property in the same type. It points to the related property holding the hierarchy node ID.</p>
             */
            constructor(oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oNodeIDProperty: any, oParentNodeIDProperty: any, oNodeLevelProperty: any, oNodeValueProperty: any, oNodeExternalKeyProperty: any);
            /**
             * <p>Get the property holding the node external key of the hierarchy node</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getNodeExternalKeyProperty(): any;
            /**
             * <p>Get the property holding the node ID of the hierarchy node</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getNodeIDProperty(): any;
            /**
             * <p>Get the property holding the level of the hierarchy node</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getNodeLevelProperty(): any;
            /**
             * <p>Get the property holding the value that is structurally organized by the hierarchy</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getNodeValueProperty(): any;
            /**
             * <p>Get the property holding the parent node ID of the hierarchy node</p>
             * @returns any <p>The datajs object representing this property</p>
             */
            getParentNodeIDProperty(): any;
            /**
             * <p>Get indicator if this is a leveled hierarchy</p>
             * @returns boolean <p>False</p>
             */
            isLeveledHierarchy(): boolean;
            /**
             * <p>Get indicator if this is a recursive hierarchy</p>
             * @returns boolean <p>True</p>
             */
            isRecursiveHierarchy(): boolean;
          }
          /**
           * <p>Representation of a $orderby expression for an OData entity type.</p>
           */
          export class SortExpression {
            /**
             * <p>Create a representation of an order by expression for a given entity type. It can be rendered as value for the $orderby system query option.</p>
             * @param {any} oModel <p>datajs object for the OData model containing this entity type</p>
             * @param {any} oSchema <p>datajs object for the schema containing this entity type</p>
             * @param {sap.ui.model.analytics.odata4analytics.EntityType} oEntityType <p>object for the entity type</p>
             */
            constructor(oModel: any, oSchema: any, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType);
            /**
             * <p>Add a condition to the order by expression. It replaces any previously specified sort order for the property.</p>
             * @param {string} sPropertyName <p>The name of the property bound in the condition</p>
             * @param {sap.ui.model.analytics.odata4analytics.SortOrder} sSortOrder <p>sorting order used for the condition</p>
             * @returns sap.ui.model.analytics.odata4analytics.SortExpression <p>This object for method chaining</p>
             */
            addSorter(sPropertyName: string, sSortOrder: sap.ui.model.analytics.odata4analytics.SortOrder): sap.ui.model.analytics.odata4analytics.SortExpression;
            /**
             * <p>Clear expression from any sort conditions that may have been set previously</p>
             */
            clear(): void;
            /**
             * <p>Get description for this entity type</p>
             * @returns sap.ui.model.analytics.odata4analytics.EntityType <p>The object representing the entity type</p>
             */
            getEntityType(): sap.ui.model.analytics.odata4analytics.EntityType;
            /**
             * <p>Get the first SAPUI5 Sorter object.</p>
             * @returns sap.ui.model.Sorter <p>first sorter object or null if empty</p>
             */
            getExpressionAsUI5Sorter(): sap.ui.model.Sorter;
            /**
             * <p>Get an array of SAPUI5 Sorter objects corresponding to this expression.</p>
             * @returns sap.ui.model.Sorter[] <p>List of sorter objects representing this expression</p>
             */
            getExpressionsAsUI5SorterArray(): sap.ui.model.Sorter[];
            /**
             * <p>Get the value for the OData system query option $orderby corresponding to this expression.</p>
             * @param {any} oSelectedPropertyNames <p>Object with properties requested for $select</p>
             * @returns string <p>The $orderby value for the sort expressions</p>
             */
            getURIOrderByOptionValue(oSelectedPropertyNames: any): string;
            /**
             * <p>Removes the order by expression for the given property name from the list of order by expression. If no order by expression with this property name exists the method does nothing.</p>
             * @param {string} sPropertyName <p>The name of the property to be removed from the condition</p>
             */
            removeSorter(sPropertyName: string): void;
          }
          /**
           * <p><p>Sort order of a property.</p></p>
           */
          export enum SortOrder {
            /**
             * <p>Sort Order: ascending.</p>
             */
            Ascending = "Ascending",
            /**
             * <p>Sort Order: descending.</p>
             */
            Descending = "Descending",
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>Control-based DataBinding.</p><p><strong>Note</strong>: Although this namespace was declared as 'public', the contained classes never have been declared 'public' and are not supported. We do not recommended to use them. As of 1.58, the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.base.ManagedObjectModel">sap.ui.model.base.ManagedObjectModel</a> can be tested as an alternative. It is much more powerful, but still in an experimental state.</p></p>
       */
      namespace control {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>JSON-based DataBinding</p></p>
       */
      namespace json {
        /**
         * <p>List binding implementation for JSON format.</p>
         */
        export class JSONListBinding extends sap.ui.model.ClientListBinding {
          /**
           * <p>Creates a new JSONListBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.json.JSONModel/methods/bindList">JSONModel#bindList</a> on the corresponding model instance instead.</p>
           * @param {sap.ui.model.json.JSONModel} oModel <p>Model instance that this binding is created for and that it belongs to</p>
           * @param {string} sPath <p>Binding path to be used for this binding</p>
           * @param {sap.ui.model.Context} oContext <p>Binding context relative to which a relative binding path will be resolved</p>
           * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order (can be either a sorter or an array of sorters)</p>
           * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filter/s (can be either a filter or an array of filters)</p>
           * @param {any} mParameters <p>Map of optional parameters as defined by subclasses; this class does not introduce any own parameters</p>
           */
          constructor(oModel: sap.ui.model.json.JSONModel, sPath: string, oContext: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any);
          /**
           * <p>Returns an array of binding contexts for the bound target list.</p><h4>Extended Change Detection</h4><p> If extended change detection is enabled using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/enableExtendedChangeDetection">sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection</a>, the context array may carry an additional property named <code>diff</code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()</code>. In case no <code>diff</code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff</code> property contains an empty array, there have been no changes on the list.</p><p>Sample diff array: <code>[{index: 1, type: "delete"}, {index: 4, type: "insert}]</code></p><p><strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getCurrentContexts">sap.ui.model.ListBinding.prototype.getCurrentContexts</a> instead.</p>
           * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
           * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
           * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
           */
          protected getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
          /**
           * <p>Return contexts for the list or a specified subset of contexts</p>
           * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
           * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index. Default is the whole list length.</p>
           * @returns any[] <p>the contexts array</p>
           */
          protected getContexts(iStartIndex?: number, iLength?: number): any[];
        }
        /**
         * <p>Model implementation for JSON format</p>
         */
        export class JSONModel extends sap.ui.model.ClientModel {
          /**
           * <p>Constructor for a new JSONModel.</p><p>The observation feature is experimental! When observation is activated, the application can directly change the JS objects without the need to call setData, setProperty or refresh. Observation does only work for existing properties in the JSON, it cannot detect new properties or new array entries.</p>
           * @param {any | string} oData <p>Either the URL where to load the JSON from or a JS object</p>
           * @param {boolean} bObserve <p>Whether to observe the JSON data for property changes (experimental)</p>
           */
          constructor(oData?: any | string, bObserve?: boolean);
          /**
           * <p>Returns a Promise of the current data-loading state. Every currently running <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.json.JSONModel/methods/loadData">sap.ui.model.json.JSONModel#loadData</a> call is respected by the returned Promise. This also includes a potential loadData call from the JSONModel's constructor in case a URL was given. The data-loaded Promise will resolve once all running requests have finished. Only request, which have been queued up to the point of calling this function will be respected by the returned Promise.</p>
           * @returns Promise<any> <p>a Promise, which resolves if all pending data-loading requests have finished</p>
           */
          dataLoaded(): Promise<any>;
          /**
           * <p>Serializes the current JSON data of the model into a string. Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)</p>
           * @returns string <p>the JSON data serialized as string</p>
           */
          getJSON(): string;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the attribute value</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Returns the value for the property with the given <code>sPropertyName</code></p>
           * @param {string} sPath <p>the path to the property</p>
           * @param {sap.ui.model.Context} oContext <p>the context which will be used to retrieve the property</p>
           * @returns any <p>the value of the property</p>
           */
          getProperty(sPath: string, oContext?: sap.ui.model.Context): any;
          /**
           * <p>Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model. Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.</p>
           * @param {string} sURL <p>A string containing the URL to which the request is sent.</p>
           * @param {any | string} oParameters <p>A map or string that is sent to the server with the request. Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is an object (map), it is converted to a string and url-encoded before it is appended to the URL.</p>
           * @param {boolean} bAsync <p>By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.</p>
           * @param {string} sType <p>The type of request to make ("POST" or "GET"), default is "GET". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.</p>
           * @param {boolean} bMerge <p>Whether the data should be merged instead of replaced</p>
           * @param {boolean} bCache <p>Disables caching if set to false. Default is true.</p>
           * @param {any} mHeaders <p>An object of additional header key/value pairs to send along with the request</p>
           * @returns Promise|undefined <p>in case bAsync is set to true a Promise is returned; this promise resolves/rejects based on the request status</p>
           */
          loadData(sURL: string, oParameters?: any | string, bAsync?: boolean, sType?: string, bMerge?: boolean, bCache?: boolean, mHeaders?: any): Promise<any> | undefined;
          /**
           * <p>Sets the data, passed as a JS object tree, to the model.</p>
           * @param {any} oData <p>the data to set on the model</p>
           * @param {boolean} bMerge <p>whether to merge the data instead of replacing it</p>
           */
          setData(oData: any, bMerge?: boolean): void;
          /**
           * <p>Sets the data, passed as a string in JSON format, to the model.</p>
           * @param {string} sJSON <p>the JSON data to set on the model</p>
           * @param {boolean} bMerge <p>whether to merge the data instead of replacing it</p>
           */
          setJSON(sJSON: string, bMerge?: boolean): void;
          /**
           * <p>Sets a new value for the given property <code>sPropertyName</code> in the model. If the model value changed all interested parties are informed.</p>
           * @param {string} sPath <p>path of the property to set</p>
           * @param {any} oValue <p>value to set the property to</p>
           * @param {any} oContext <p>the context which will be used to set the property</p>
           * @param {boolean} bAsyncUpdate <p>whether to update other bindings dependent on this property asynchronously</p>
           * @returns boolean <p>true if the value was set correctly and false if errors occurred like the entry was not found.</p>
           */
          setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
        }
        /**
         * <p>Property binding implementation for JSON format.</p>
         */
        export class JSONPropertyBinding extends sap.ui.model.ClientPropertyBinding {
          /**
           * <p>Creates a new JSONListBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.json.JSONModel/methods/bindProperty">JSONModel#bindProperty</a> on the corresponding model instance instead.</p>
           * @param {sap.ui.model.json.JSONModel} oModel <p>Model instance that this binding is created for and that it belongs to</p>
           * @param {string} sPath <p>Binding path to be used for this binding</p>
           * @param {sap.ui.model.Context} oContext <p>Binding context relative to which a relative binding path will be resolved</p>
           * @param {any} mParameters <p>Map of optional parameters as defined by subclasses; this class does not introduce any own parameters</p>
           */
          constructor(oModel: sap.ui.model.json.JSONModel, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
        }
        /**
         * <p>Tree binding implementation for JSON format.</p><p>The bound data can contain JSON objects and arrays. Both will be used to build the tree structure. You can optionally define a set of arrays to be used for the tree structure in the parameter <code>arrayNames</code>. If this parameter is set, all other objects and arrays will be ignored.</p>
         */
        export class JSONTreeBinding extends sap.ui.model.ClientTreeBinding {
          /**
           * <p>Creates a new JSONListBinding.</p><p>This constructor should only be called by subclasses or model implementations, not by application or control code. Such code should use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.json.JSONModel/methods/bindTree">JSONModel#bindTree</a> on the corresponding model instance instead.</p>
           * @param {sap.ui.model.json.JSONModel} oModel <p>Model instance that this binding is created for and that it belongs to</p>
           * @param {string} sPath <p>Path pointing to the tree or array that should be bound</p>
           * @param {any} oContext <p>Context object for this binding, mandatory when a relative binding path is given</p>
           * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filters contained in an array</p>
           * @param {any} mParameters <p>Additional model-specific parameters</p>
           */
          constructor(oModel: sap.ui.model.json.JSONModel, sPath: string, oContext?: any, aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any);
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>Message DataBinding</p></p>
       */
      namespace message {
        /**
         * <p>Model implementation for Messages</p>
         */
        export class MessageModel extends sap.ui.model.ClientModel {
          /**
           * <p>Constructor for a new JSONModel.</p>
           * @param {sap.ui.core.message.MessageManager} oMessageManager <p>The MessageManager instance</p>
           */
          constructor(oMessageManager: sap.ui.core.message.MessageManager);
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the attribute value</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Returns the value for the property with the given <code>sPropertyName</code></p>
           * @param {string} sPath <p>the path to the property</p>
           * @param {any} oContext <p>the context which will be used to retrieve the property</p>
           * @returns any <p>the value of the property</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Sets the message data to the model.</p>
           * @param {any} oData <p>the data to set on the model</p>
           */
          setData(oData: any): void;
          /**
           * <p>Sets a new value for the given property <code>sPropertyName</code> in the model. If the model value changed all interested parties are informed.</p>
           * @param {string} sPath <p>path of the property to set</p>
           * @param {any} oValue <p>value to set the property to</p>
           * @param {any} oContext <p>the context which will be used to set the property</p>
           */
          setProperty(sPath: string, oValue: any, oContext?: any): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>OData-based DataBinding Utility Class</p></p>
       */
      namespace odata {
        /**
         * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls. Only usable with the sap.ui.table.TreeTable control. The functions defined here are only available when you are using a TreeTable and an ODataModel.</p>
         */
        function ODataTreeBindingAdapter(): void;
        /**
         * <p>Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.</p>
         */
        function ODataTreeBindingFlat(): void;
        /**
         * <p><p>A collection of methods which help to consume <a href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html"> OData V4 annotations</a> in XML template views. Every context argument must belong to a <code>sap.ui.model.odata.ODataMetaModel</code> instance.</p><p>Formatter functions like <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.format" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.format">format</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.simplePath" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.simplePath">simplePath</a> can be used in complex bindings to turn OData V4 annotations into texts or data bindings, e.g. <code>&lt;sfi:SmartField value="{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/></code>.</p><p>Helper functions like <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.resolvePath" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.resolvePath">resolvePath</a> can be used by template instructions in XML template views, e.g. <code>&lt;template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target"></code>.</p><p>Since 1.31.0, you DO NOT need to <a target="_self" class="jsdoclink" href="#/api/jQuery.sap/methods/jQuery.sap.require">jQuery.sap.require</a> this module before use.</p></p>
         */
        namespace AnnotationHelper {
          /**
           * <p>Creates a property setting (which is either a constant value or a binding info object) from the given parts and from the optional root formatter function. Each part can have one of the following types: <ul> <li><code>boolean</code>, <code>number</code>, <code>undefined</code>: The part is a constant value.</p><p><li><code>string</code>: The part is a data binding expression with complex binding syntax (for example, as created by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.format" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.format">format</a>) and is parsed accordingly to create either a constant value or a binding info object. Proper backslash escaping must be used for constant values with curly braces.</p><p><li><code>object</code>: The part is a binding info object if it has a "path" or "parts" property, otherwise it is a constant value. </ul> If a binding info object is not the only part and has a "parts" property itself, then it must have no other properties except "formatter"; this is the case for expression bindings and data binding expressions created by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.format" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.format">format</a>.</p><p>If all parts are constant values, the resulting property setting is also a constant value computed by applying the root formatter function to the constant parts once. If at least one part is a binding info object, the resulting property setting is also a binding info object and the root formatter function will be applied again and again to the current values of all parts, no matter whether constant or variable.</p><p>Note: The root formatter function should not rely on its <code>this</code> value because it depends on how the function is called.</p><p>Note: A single data binding expression can be given directly to <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">applySettings</a>, no need to call this function first.</p><p>Example: <pre>
          function myRootFormatter(oValue1, oValue2, sFullName, sGreeting, iAnswer) {
              return ...; //TODO compute something useful from the given values
          }
          
          oSupplierContext = oMetaModel.getMetaContext("/ProductSet('HT-1021')/ToSupplier");
          oValueContext = oMetaModel.createBindingContext("com.sap.vocabularies.UI.v1.DataPoint/Value", oSupplierContext);
          
          vPropertySetting =  sap.ui.model.odata.AnnotationHelper.createPropertySetting([
              sap.ui.model.odata.AnnotationHelper.format(oValueContext),
              "{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}",
              "{:= 'Mr. ' + ${/FirstName} + ' ' + ${/LastName}}",
              "hello, world!",
              42
          ], myRootFormatter);
          
          oControl.applySettings({"someProperty" : vPropertySetting});
          </pre></p>
           * @param {any[]} aParts <p>array of parts</p>
           * @param {Function} fnRootFormatter <p>root formatter function; default: <code>Array.prototype.join(., " ")</code> in case of multiple parts, just like <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.CompositeBinding/methods/getExternalValue">getExternalValue</a></p>
           * @returns any|object <p>constant value or binding info object for a property as expected by <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/applySettings">applySettings</a></p>
           */
          function createPropertySetting(aParts: any[], fnRootFormatter?: Function): any | any;
          /**
           * <p>A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about <ul> <li> the "14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int", "edm:TimeOfDay". <li> the constant "14.4.11 Expression edm:String": This is turned into a fixed text (e.g. <code>"Width"</code>) or into a data binding expression (e.g. <code> "{/##/dataServices/schema/0/entityType/1/com.sap.vocabularies.UI.v1.FieldGroup#Dimensions/Data/0/Label/String}" </code>). Data binding expressions are used in case XML template processing has been started with the setting <code>bindTexts : true</code>. The purpose is to reference translatable texts from OData V4 annotations, especially for XML template processing at design time. Since 1.31.0, string constants that contain a simple binding <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li> the dynamic "14.5.1 Comparison and Logical Operators": These are turned into expression bindings to perform the operations at run-time. <li> the dynamic "14.5.3 Expression edm:Apply": <ul> <li> "14.5.3.1.1 Function odata.concat": This is turned into a data binding expression relative to an entity. <li> "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an expression binding to fill the template at run-time. <li> "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding to encode the parameter at run-time. <li> Apply functions may be nested arbitrarily. </ul> <li> the dynamic "14.5.6 Expression edm:If": This is turned into an expression binding to be evaluated at run-time. The expression is a conditional expression like <code>"{=condition ? expression1 : expression2}"</code>. <li> the dynamic "14.5.10 Expression edm:Null": This is turned into a <code>null</code> value. In <code>odata.concat</code> it is ignored. <li> the dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath": This is turned into a data binding relative to an entity, including type information and constraints as available from metadata, e.g. <code>"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'255'}}"</code>. Depending on the used type, some additional constraints of this type are set: <ul> <li>Edm.DateTime: The "displayFormat" constraint is set to the value of the "sap:display-format" annotation of the referenced property. <li>Edm.Decimal: The "precision" and "scale" constraints are set to the values of the corresponding attributes of the referenced property. The "minimum", "maximum", "minimumExclusive" and "maximumExlusive" constraints are set to the values of the corresponding "Org.OData.Validation.V1" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <li>Edm.String: The "maxLength" constraint is set to the value of the corresponding attribute of the referenced property and the "isDigitSequence" constraint is set to the value of the "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. </ul> </ul> Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. Proper escaping is used to make sure that data binding syntax is not corrupted. An error describing the problem is logged to the console in such a case.</p><p>Example: <pre>
          &lt;Text text="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}" />
          </pre></p>
           * @param {sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context} oInterface <p>the callback interface related to the current formatter call</p>
           * @param {any} vRawValue <p>the raw value from the meta model, which is embedded within an entity set or entity type: <ul> <li>if this function is used as formatter the value is provided by the framework</li> <li>if this function is called directly, provide the parameter only if it is already calculated</li> <li>if the parameter is omitted, it is calculated automatically through <code>oInterface.getObject("")</code></li> </ul></p>
           * @returns string <p>the resulting string value to write into the processed XML</p>
           */
          function format(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: any): string;
          /**
           * <p>A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about the following dynamic expressions: <ul> <li>"14.5.2 Expression edm:AnnotationPath"</li> <li>"14.5.11 Expression edm:NavigationPropertyPath"</li> <li>"14.5.12 Expression edm:Path"</li> <li>"14.5.13 Expression edm:PropertyPath"</li> </ul> It returns a binding expression for a navigation path in an OData model, starting at an entity. Currently supports navigation properties. Term casts and annotations of navigation properties terminate the navigation path.</p><p>Examples: <pre>
          &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}">
              &lt;form:SimpleForm binding="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}" />
          &lt;/template:if>
          </pre></p>
           * @param {sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context} oInterface <p>the callback interface related to the current formatter call</p>
           * @param {any} vRawValue <p>the raw value from the meta model, e.g. <code>{AnnotationPath : "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code> {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>; embedded within an entity set or entity type; <ul> <li>if this function is used as formatter the value is provided by the framework</li> <li>if this function is called directly, provide the parameter only if it is already calculated</li> <li>if the parameter is omitted, it is calculated automatically through <code>oInterface.getObject("")</code></li> </ul></p>
           * @returns string <p>the resulting string value to write into the processed XML, e.g. "{ToSupplier}" or "{}" (in case no navigation is needed); returns "" in case the navigation path cannot be determined (this is treated as falsy in <code>template:if</code> statements!)</p>
           */
          function getNavigationPath(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: any): string;
          /**
           * <p>Helper function for a <code>template:with</code> instruction that depending on how it is called goes to the entity set with the given name or to the one determined by the last navigation property. Supports the following dynamic expressions: <ul> <li>"14.5.2 Expression edm:AnnotationPath"</li> <li>"14.5.11 Expression edm:NavigationPropertyPath"</li> <li>"14.5.12 Expression edm:Path"</li> <li>"14.5.13 Expression edm:PropertyPath"</li> </ul></p><p>Example: <pre>
            &lt;template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
            &lt;template:with path="associationSetEnd>entitySet" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
          </pre></p>
           * @param {sap.ui.model.Context} oContext <p>a context which must point to a simple string or to an annotation (or annotation property) of type <code>Edm.AnnotationPath</code>, <code>Edm.NavigationPropertyPath</code>, <code>Edm.Path</code>, or <code>Edm.PropertyPath</code> embedded within an entity set or entity type; the context's model must be an <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel">sap.ui.model.odata.ODataMetaModel</a></p>
           * @returns string <p>the path to the entity set, or <code>undefined</code> if no such set is found. In this case, a warning is logged to the console.</p>
           */
          function gotoEntitySet(oContext: sap.ui.model.Context): string;
          /**
           * <p>Helper function for a <code>template:with</code> instruction that goes to the entity type with the qualified name which <code>oContext</code> points at.</p><p>Example: Assume that "entitySet" refers to an entity set within an OData meta model; the helper function is then called on the "entityType" property of that entity set (which holds the qualified name of the entity type) and in turn the path of that entity type is assigned to the variable "entityType". <pre>
            &lt;template:with path="entitySet>entityType" helper="sap.ui.model.odata.AnnotationHelper.gotoEntityType" var="entityType">
          </pre></p>
           * @param {sap.ui.model.Context} oContext <p>a context which must point to the qualified name of an entity type; the context's model must be an <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel">sap.ui.model.odata.ODataMetaModel</a></p>
           * @returns string <p>the path to the entity type with the given qualified name, or <code>undefined</code> if no such type is found. In this case, a warning is logged to the console.</p>
           */
          function gotoEntityType(oContext: sap.ui.model.Context): string;
          /**
           * <p>Helper function for a <code>template:with</code> instruction that goes to the function import with the name which <code>oContext</code> points at.</p><p>Example: Assume that "dataField" refers to a DataFieldForAction within an OData meta model; the helper function is then called on the "Action" property of that data field (which holds an object with the qualified name of the function import in the <code>String</code> property) and in turn the path of that function import is assigned to the variable "function". <pre>
            &lt;template:with path="dataField>Action"
            helper="sap.ui.model.odata.AnnotationHelper.gotoFunctionImport" var="function">
          </pre></p>
           * @param {sap.ui.model.Context} oContext <p>a context which must point to an object with a <code>String</code> property, which holds the qualified name of the function import; the context's model must be an <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel">sap.ui.model.odata.ODataMetaModel</a></p>
           * @returns string <p>the path to the function import with the given qualified name, or <code>undefined</code> if no function import is found. In this case, a warning is logged to the console.</p>
           */
          function gotoFunctionImport(oContext: sap.ui.model.Context): string;
          /**
           * <p>A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about the following dynamic expressions: <ul> <li>"14.5.2 Expression edm:AnnotationPath"</li> <li>"14.5.11 Expression edm:NavigationPropertyPath"</li> <li>"14.5.12 Expression edm:Path"</li> <li>"14.5.13 Expression edm:PropertyPath"</li> </ul> It returns the information whether the navigation path ends with an association end with multiplicity "*". It throws an error if the navigation path has an association end with multiplicity "*" which is not the last one. Currently supports navigation properties. Term casts and annotations of navigation properties terminate the navigation path.</p><p>Examples: <pre>
          &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'}">
          </pre></p>
           * @param {sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context} oInterface <p>the callback interface related to the current formatter call</p>
           * @param {any} vRawValue <p>the raw value from the meta model, e.g. <code>{AnnotationPath : "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code> {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>; embedded within an entity set or entity type; <ul> <li>if this function is used as formatter the value is provided by the framework</li> <li>if this function is called directly, provide the parameter only if it is already calculated</li> <li>if the parameter is omitted, it is calculated automatically through <code>oInterface.getObject("")</code></li> </ul></p>
           * @returns string <p><code>"true"</code> if the navigation path ends with an association end with multiplicity "*", <code>""</code> in case the navigation path cannot be determined, <code>"false"</code> otherwise (the latter are both treated as falsy in <code>template:if</code> statements!)</p>
           */
          function isMultiple(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: any): string;
          /**
           * <p>Helper function for a <code>template:with</code> instruction that resolves a dynamic "14.5.2 Expression edm:AnnotationPath", "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path" or "14.5.13 Expression edm:PropertyPath". Currently supports navigation properties and term casts.</p><p>Example: <pre>
            &lt;template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target">
          </pre></p>
           * @param {sap.ui.model.Context} oContext <p>a context which must point to an annotation or annotation property of type <code>Edm.AnnotationPath</code>, <code>Edm.NavigationPropertyPath</code>, <code>Edm.Path</code> or <code>Edm.PropertyPath</code>, embedded within an entity set or entity type; the context's model must be an <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel">sap.ui.model.odata.ODataMetaModel</a></p>
           * @returns string <p>the path to the target, or <code>undefined</code> in case the path cannot be resolved. In this case, a warning is logged to the console.</p>
           */
          function resolvePath(oContext: sap.ui.model.Context): string;
          /**
           * <p>Formatter function that is used in a complex binding inside an XML template view. The function is used to interpret OData V4 annotations, supporting the same annotations as <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.AnnotationHelper.format" href="#/api/sap.ui.model.odata.AnnotationHelper/methods/sap.ui.model.odata.AnnotationHelper.format">format</a> but with a simplified output aimed at design-time templating with smart controls.</p><p>In contrast to <code>format</code>, "14.5.12 Expression edm:Path" or "14.5.13 Expression edm:PropertyPath" is turned into a simple binding path without type or constraint information. In certain cases, a complex binding is required to allow for proper escaping of the path.</p><p>Example: <pre>
            &lt;sfi:SmartField value="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/>
          </pre></p>
           * @param {sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context} oInterface <p>the callback interface related to the current formatter call</p>
           * @param {any} vRawValue <p>the raw value from the meta model, which is embedded within an entity set or entity type: <ul> <li>if this function is used as formatter the value is provided by the framework</li> <li>if this function is called directly, provide the parameter only if it is already calculated</li> <li>if the parameter is omitted, it is calculated automatically through <code>oInterface.getObject("")</code></li> </ul></p>
           * @returns string <p>the resulting string value to write into the processed XML</p>
           */
          function simplePath(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: any): string;
        }
        /**
         * <p><p>Different modes for retrieving the count of collections</p></p>
         */
        export enum BatchMode {
          /**
           * <p>Batch grouping enabled</p>
           */
          Group = "Group",
          /**
           * <p>No batch requests</p>
           */
          None = "None",
        }
        /**
         * <p><p>Different modes for retrieving the count of collections.</p><br><br>References: <ul><li>sap.ui.model.ODataModel#bindList</li><li>sap.ui.model.ODataModel#constructor</li><li>sap.ui.model.v2.ODataModel#bindList</li><li>sap.ui.model.v2.ODataModel#constructor</li></ul></p>
         */
        export enum CountMode {
          /**
           * <p>Count is retrieved by a separate request upfront and inline with each data request.</p><p>The only purpose of this mode is to reflect the behavior of the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataModel">ODataModel (v1)</a> before the introduction of the <code>CountMode</code>. For compatibility reasons, it is the default for the <code>ODataModel</code> (v1) and shouldn't be used otherwise.<span class="sapUiDeprecated"><br>Deprecated as of version 1.43. this shouldn't be used any longer, decide for one of the other modes.</span></p>
           */
          Both = "Both",
          /**
           * <p>Count is retrieved by adding <code>$inlinecount=allpages</code> to data requests as long as no count has been determined yet.</p>
           */
          Inline = "Inline",
          /**
           * <p>Count is retrieved by adding <code>$inlinecount=allpages</code> to every data request.</p>
           */
          InlineRepeat = "InlineRepeat",
          /**
           * <p>Count is not requested from the server.</p>
           */
          None = "None",
          /**
           * <p>Count is retrieved by sending a separate <code>$count</code> request before requesting data.</p><p>It depends on the concrete model implementation whether and how the <code>$count</code> request and the data request are synchronized.</p>
           */
          Request = "Request",
        }
        /**
         * <p>Filter for the list binding</p>
         */
        export class Filter extends sap.ui.base.Object {
          /**
           * <p>Constructor for Filter</p>
           * @param {string} sPath <p>the binding path for this filter</p>
           * @param {object[]} aValues <p>Array of FilterOperators and their values: [{operator:"GE",value1:"val1"},{operator:"LE",value1:"val1"},{operator:"BT",value1:"val1",value2:"val2"}]</p>
           * @param {boolean} bAND <p>If true the values from aValues will be ANDed; otherwise ORed</p>
           */
          constructor(sPath: string, aValues: object[], bAND?: boolean);
          /**
           * <p>Converts the <code>sap.ui.model.odata.Filter</code> into a <code>sap.ui.model.Filter</code>.</p>
           * @returns sap.ui.model.Filter <p>a <code>sap.ui.model.Filter</code> object</p>
           */
          convert(): sap.ui.model.Filter;
        }
        /**
         * <p><p>Different scopes for retrieving messages from a service.</p><br><br>References: <ul><li>sap.ui.model.ODataModel#constructor</li></ul></p>
         */
        export enum MessageScope {
          /**
           * <p>Retrieve messages for the whole business object. If the service does not support this option it fallbacks to requested.</p>
           */
          BusinessObject = "BusinessObject",
          /**
           * <p>Retrieve messages only for the requested/changed entities.</p>
           */
          RequestedObjects = "RequestedObjects",
        }
        /**
         * <p>Implementation to access OData Annotations</p>
         */
        export class ODataAnnotations extends sap.ui.base.EventProvider {
          /**
           * @param {string | string[]} aAnnotationURI <p>The annotation-URL or an array of URLS that should be parsed and merged</p>
           * @param {sap.ui.model.odata.ODataMetadata} oMetadata undefined
           * @param {any} mParams undefined
           */
          constructor(aAnnotationURI: string | string[], oMetadata: sap.ui.model.odata.ODataMetadata, mParams: any);
          /**
           * <p>Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations data which can be retrieved using the getAnnotations-method.</p>
           * @param {string | string[]} vUrl <p>Either one URL as string or an array of URL strings</p>
           * @returns Promise<any> <p>The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one failed to load. The argument is an object containing the annotations object, success (an array of sucessfully loaded URLs), fail (an array ob of failed URLs).</p>
           */
          addUrl(vUrl: string | string[]): Promise<any>;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          attachFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          attachLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          detachFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          detachLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>Fire event failed to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          protected fireFailed(mArguments?: any): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>Fire event loaded to attached listeners.</p>
           * @param {{ [key: string]: any }} mArguments <p>Map of arguments that will be given as parameters to the event handler</p>
           * @returns sap.ui.model.odata.ODataAnnotations <p><code>this</code> to allow method chaining</p>
           */
          protected fireLoaded(mArguments?: { [key: string]: any }): sap.ui.model.odata.ODataAnnotations;
          /**
           * <p>returns the raw annotation data</p>
           * @returns any <p>returns annotations data</p>
           */
          getAnnotationsData(): any;
          /**
           * <p>Checks whether annotations loading of at least one of the given URLs has already failed. Note: For asynchronous annotations <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="attachFailed" href="#/api/sap.ui.model.odata.ODataAnnotations/methods/attachFailed">#attachFailed</a> has to be used.</p>
           * @returns boolean <p>whether annotations request has failed</p>
           */
          isFailed(): boolean;
          /**
           * <p>Checks whether annotations from at least one source are available</p>
           * @returns boolean <p>returns whether annotations is already loaded</p>
           */
          isLoaded(): boolean;
          /**
           * <p>Set custom headers which are provided in a key/value map. These headers are used for all requests. The Accept-Language header cannot be modified and is set using the Core's language setting.</p><p>To remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.</p>
           * @param {{ [key: string]: any }} mHeaders <p>the header name/value map.</p>
           */
          setHeaders(mHeaders: { [key: string]: any }): void;
          /**
           * <p>Sets an XML document.</p>
           * @param {any} oXMLDocument <p>The XML document to parse for annotations</p>
           * @param {string} sXMLContent <p>The XML content as string to parse for annotations</p>
           * @param {{ [key: string]: any }} mOptions <p>Additional options</p>
           * @returns boolean <p>Whether or not parsing was successful</p>
           */
          setXML(oXMLDocument: any, sXMLContent: string, mOptions?: { [key: string]: any }): boolean;
        }
        /**
         * <p>The ContextBinding is a specific binding for a setting context for the model</p>
         */
        export abstract class ODataContextBinding extends sap.ui.model.ContextBinding {
          /**
           * <p>Constructor for odata.ODataContextBinding</p>
           * @param {sap.ui.model.Model} oModel undefined
           * @param {string} sPath undefined
           * @param {sap.ui.model.Context} oContext undefined
           * @param {any} mParameters undefined
           */
          constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
        }
        /**
         * <p>List binding implementation for OData format.</p>
         */
        export class ODataListBinding extends sap.ui.model.ListBinding {
          /**
           * @param {sap.ui.model.odata.ODataModel} oModel <p>Model that this list binding belongs to</p>
           * @param {string} sPath <p>Path into the model data, relative to the given <code>oContext</code></p>
           * @param {sap.ui.model.Context} oContext <p>Context that the <code>sPath</code> is based on</p>
           * @param {any[]} aSorters <p>Initial sort order (can be either a sorter or an array of sorters)</p>
           * @param {any[]} aFilters <p>Predefined filter/s (can be either a filter or an array of filters)</p>
           * @param {any} mParameters <p>A map which contains additional parameters for the binding</p>
           */
          constructor(oModel: sap.ui.model.odata.ODataModel, sPath: string, oContext: sap.ui.model.Context, aSorters?: any[], aFilters?: any[], mParameters?: any);
          /**
           * <p>Applies a new set of filters to the list represented by this binding.</p><p>Depending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.</p><h4>Application and Control Filters</h4><p> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>By using the second parameter <code>sFilterType</code> of method <code>filter</code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.</p><h4>Auto-Grouping of Filters</h4><p> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.</p>
           * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
           * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation</p>
           * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
           */
          filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
          /**
           * <p>Filters the list.</p><p>When using sap.ui.model.Filter the filters are first grouped according to their binding path. All filters belonging to a group are combined with OR and after that the results of all groups are combined with AND. Usually this means, all filters applied to a single table column are combined with OR, while filters on different table columns are combined with AND. Please note that a custom filter function is not supported.</p>
           * @param {sap.ui.model.Filter[] | sap.ui.model.odata.Filter[]} aFilters <p>Array of filter objects</p>
           * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
           * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
           */
          filter(aFilters: sap.ui.model.Filter[] | sap.ui.model.odata.Filter[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
          /**
           * <p>Returns an array of binding contexts for the bound target list.</p><h4>Extended Change Detection</h4><p> If extended change detection is enabled using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/enableExtendedChangeDetection">sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection</a>, the context array may carry an additional property named <code>diff</code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()</code>. In case no <code>diff</code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff</code> property contains an empty array, there have been no changes on the list.</p><p>Sample diff array: <code>[{index: 1, type: "delete"}, {index: 4, type: "insert}]</code></p><p><strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getCurrentContexts">sap.ui.model.ListBinding.prototype.getCurrentContexts</a> instead.</p>
           * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
           * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
           * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
           */
          protected getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
          /**
           * <p>Return contexts for the list</p>
           * @param {number} iStartIndex <p>the start index of the requested contexts</p>
           * @param {number} iLength <p>the requested amount of contexts</p>
           * @param {number} iThreshold 
           * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
           */
          protected getContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
          /**
           * <p>Get a download URL with the specified format considering the sort/filter/custom parameters.</p>
           * @param {string} sFormat <p>Value for the $format Parameter</p>
           * @returns string <p>URL which can be used for downloading</p>
           */
          getDownloadUrl(sFormat: string): string;
          /**
           * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
           * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
           */
          refresh(bForceUpdate: boolean): void;
          /**
           * <p>Refreshes the binding, checks whether the model data has been changed and fires a change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate</code>.</p>
           * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
           */
          refresh(bForceUpdate?: boolean): void;
          /**
           * <p>Sorts the list according to the sorter object.</p><p>Instead of a single sorter also an array of sorters can be passed to the sort method. In this case they are processed in the sequence in which they are contained in the array.</p><h4>Grouping</h4><p> Sorting and grouping are closely related, in case a list should be grouped, it must be sorted by the property to group with. Grouping is enabled by setting the <code>group</code> property on the sorter object. If it is enabled, you can get the current group of an item using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getGroup">sap.ui.model.ListBinding.prototype.getGroup</a>. In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping is not supported.</p>
           * @param {sap.ui.model.Sorter | any[]} aSorters <p>the Sorter object or an array of sorters which defines the sort order</p>
           * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
           */
          sort(aSorters: sap.ui.model.Sorter | any[]): sap.ui.model.ListBinding;
          /**
           * <p>Sorts the list.</p>
           * @param {sap.ui.model.Sorter | any[]} aSorters <p>the Sorter or an array of sorter objects object which define the sort order</p>
           * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
           */
          sort(aSorters: sap.ui.model.Sorter | any[]): sap.ui.model.ListBinding;
        }
        /**
         * <p>OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.</p>
         */
        export abstract class ODataMessageParser extends sap.ui.core.message.MessageParser {
          /**
           * <p>OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.</p>
           */
          constructor();
          /**
           * <p>Returns the name of the header field that is used to parse the server messages</p>
           * @returns string <p>The name of the header field</p>
           */
          getHeaderField(): string;
          /**
           * <p>Abstract parse method must be implemented in the inheriting class.</p>
           */
          parse(): void;
          /**
           * <p>Parses the given response for messages, calculates the delta and fires the messageChange-event on the MessageProcessor if messages are found.</p>
           * @param {any} oResponse <p>The response from the server containing body and headers</p>
           * @param {any} oRequest <p>The original request that lead to this response</p>
           * @param {{ [key: string]: any }} mGetEntities <p>A map containing the entities requested from the back-end as keys</p>
           * @param {{ [key: string]: any }} mChangeEntities <p>A map containing the entities changed on the back-end as keys</p>
           */
          parse(oResponse: any, oRequest: any, mGetEntities: { [key: string]: any }, mChangeEntities: { [key: string]: any }): void;
          /**
           * <p>Sets the header field name that should be used for parsing the JSON messages</p>
           * @param {string} sFieldName <p>The name of the header field that should be used as source of the message object</p>
           * @returns sap.ui.model.odata.ODataMessageParser <p>Instance reference for method chaining</p>
           */
          setHeaderField(sFieldName: string): sap.ui.model.odata.ODataMessageParser;
        }
        /**
         * <p>Implementation to access OData metadata</p>
         */
        export class ODataMetadata extends sap.ui.base.EventProvider {
          /**
           * <p>Constructor for a new ODataMetadata.</p>
           * @param {string} sMetadataURI <p>needs the correct metadata uri including $metadata</p>
           * @param {any} mParams <p>optional map of parameters.</p>
           */
          constructor(sMetadataURI: string, mParams?: any);
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          attachFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          attachLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          detachFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          detachLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Fire event failed to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          protected fireFailed(mArguments?: any): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Fire event loaded to attached listeners.</p>
           * @returns sap.ui.model.odata.ODataMetadata <p><code>this</code> to allow method chaining</p>
           */
          protected fireLoaded(): sap.ui.model.odata.ODataMetadata;
          /**
           * <p>Return the metadata object</p>
           * @returns any <p>metdata object</p>
           */
          getServiceMetadata(): any;
          /**
           * <p>Get the use-batch extension value if any</p>
           * @returns boolean <p>true/false</p>
           */
          getUseBatch(): boolean;
          /**
           * <p>Checks whether metadata loading has already failed</p>
           * @returns boolean <p>returns whether metadata request has failed</p>
           */
          isFailed(): boolean;
          /**
           * <p>Checks whether metadata is available</p>
           * @returns boolean <p>returns whether metadata is already loaded</p>
           */
          isLoaded(): boolean;
          /**
           * <p>Returns a promise for the loaded state of the metadata</p>
           * @returns Promise<any> <p>returns a promise on metadata loaded state</p>
           */
          loaded(): Promise<any>;
          /**
           * <p>Refreshes the metadata creating a new request to the server. Returns a new promise which can be resolved or rejected depending on the metadata loading state.</p>
           * @returns Promise<any> <p>returns a promise on metadata loaded state</p>
           */
          refresh(): Promise<any>;
        }
        /**
         * <p>Implementation of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetadata">sap.ui.model.odata.ODataMetadata</a> as a foundation and merges V4 annotations from the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataAnnotations">sap.ui.model.odata.ODataAnnotations</a> directly into the corresponding model element.</p><p>Also, annotations from the "http://www.sap.com/Protocols/SAPData" namespace are lifted up from the <code>extensions</code> array and transformed from objects into simple properties with an "sap:" prefix for their name. Note that this happens in addition, thus the following example shows both representations. This way, such annotations can be addressed via a simple relative path instead of searching an array. <pre>
            {
              "name" : "BusinessPartnerID",
              "extensions" : [{
                "name" : "label",
                "value" : "Bus. Part. ID",
                "namespace" : "http://www.sap.com/Protocols/SAPData"
              }],
              "sap:label" : "Bus. Part. ID"
            }
        </pre></p><p>As of 1.29.0, the corresponding vocabulary-based annotations for the following "<a href="http://www.sap.com/Protocols/SAPData">SAP Annotations for OData Version 2.0</a>" are added, if they are not yet defined in the V4 annotations: <ul> <li><code>label</code>;</li> <li><code>schema-version</code> (since 1.53.0) on schemas;</li> <li><code>creatable</code>, <code>deletable</code>, <code>deletable-path</code>, <code>pageable</code>, <code>requires-filter</code>, <code>searchable</code>, <code>topable</code>, <code>updatable</code> and <code>updatable-path</code> on entity sets; </li> <li><code>creatable</code> (since 1.41.0), <code>creatable-path</code> (since 1.41.0) and <code>filterable</code> (since 1.39.0) on navigation properties;</li> <li><code>aggregation-role</code> ("dimension" and "measure", both since 1.45.0), <code>creatable</code>, <code>display-format</code> ("UpperCase" and "NonNegative"), <code>field-control</code>, <code>filterable</code>, <code>filter-restriction</code>, <code>heading</code>, <code>precision</code>, <code>quickinfo</code>, <code>required-in-filter</code>, <code>sortable</code>, <code>text</code>, <code>unit</code>, <code>updatable</code> and <code>visible</code> on properties;</li> <li><code>semantics</code>; the following values are supported: <ul> <li>"bday", "city", "country", "email" (including support for types, for example "email;type=home,pref"), "familyname", "givenname", "honorific", "middlename", "name", "nickname", "note", "org", "org-unit", "org-role", "photo", "pobox", "region", "street", "suffix", "tel" (including support for types, for example "tel;type=cell,pref"), "title" and "zip" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Contact</code>); </li> <li>"class", "dtend", "dtstart", "duration", "fbtype", "location", "status", "transp" and "wholeday" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Event</code>);</li> <li>"body", "from", "received", "sender" and "subject" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Message</code>);</li> <li>"completed", "due", "percent-complete" and "priority" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Task</code>);</li> <li>"fiscalyear", "fiscalyearperiod" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsFiscal(Year|YearPeriod)</code>);</li> <li>"year", "yearmonth", "yearmonthday", "yearquarter", "yearweek" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsCalendar(Year|YearMonth|Date|YearQuarter|YearWeek)</code>); </li> <li>"url" (mapped to V4 annotation <code>Org.OData.Core.V1.IsURL"</code>).</li> </ul> </ul> For example: <pre>
            {
              "name" : "BusinessPartnerID",
              ...
              "sap:label" : "Bus. Part. ID",
              "com.sap.vocabularies.Common.v1.Label" : {
                "String" : "Bus. Part. ID"
              }
            }
        </pre> <b>Note:</b> Annotation terms are not merged, but replaced as a whole ("PUT" semantics). That means, if you have, for example, an OData V2 annotation <code>sap:sortable=false</code> at a property <code>PropA</code>, the corresponding OData V4 annotation is added to each entity set to which this property belongs: <pre>
            "Org.OData.Capabilities.V1.SortRestrictions": {
              "NonSortableProperties" : [
                {"PropertyPath" : "BusinessPartnerID"}
              ]
            }
        </pre> If the same term <code>"Org.OData.Capabilities.V1.SortRestrictions"</code> targeting one of these entity sets is also contained in an annotation file, the complete OData V4 annotation converted from the OData V2 annotation is replaced by the one contained in the annotation file for the specified target. Converted annotations never use a qualifier and are only overwritten by the same annotation term without a qualifier.</p><p>This model is read-only and thus only supports <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.BindingMode.OneTime">OneTime</a> binding mode. No events (<a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/events/parseError">parseError</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/events/requestCompleted">requestCompleted</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/events/requestFailed">requestFailed</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/events/requestSent">requestSent</a>) are fired!</p><p>Within the meta model, the objects are arranged in arrays. <code>/dataServices/schema</code>, for example, is an array of schemas where each schema has an <code>entityType</code> property with an array of entity types, and so on. So, <code>/dataServices/schema/0/entityType/16</code> can be the path to the entity type with name "Order" in the schema with namespace "MySchema". However, these paths are not stable: If an entity type with lower index is removed from the schema, the path to <code>Order</code> changes to <code>/dataServices/schema/0/entityType/15</code>.</p><p>To avoid problems with changing indexes, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/getObject">getObject</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/getProperty">getProperty</a> support XPath-like queries for the indexes (since 1.29.1). Each index can be replaced by a query in square brackets. You can, for example, address the schema using the path <code>/dataServices/schema/[${namespace}==='MySchema']</code> or the entity using <code>/dataServices/schema/[${namespace}==='MySchema']/entityType/[sap.ui.core==='Order']</code>.</p><p>The syntax inside the square brackets is the same as in expression binding. The query is executed for each object in the array until the result is true (truthy) for the first time. This object is then chosen.</p><p><b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="loaded" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/loaded">loaded</a> has been resolved!</p>
         */
        export class ODataMetaModel extends sap.ui.model.MetaModel {
          /**
           * <p>DO NOT CALL this private constructor for a new <code>ODataMetaModel</code>, but rather use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataModel/methods/getMetaModel">getMetaModel</a> instead!</p>
           * @param {sap.ui.model.odata.ODataMetadata} oMetadata <p>the OData model's metadata object</p>
           * @param {sap.ui.model.odata.ODataAnnotations} oAnnotations <p>the OData model's annotations object</p>
           * @param {any} oODataModelInterface <p>the private interface object of the OData model which provides friend access to selected methods</p>
           */
          constructor(oMetadata: sap.ui.model.odata.ODataMetadata, oAnnotations?: sap.ui.model.odata.ODataAnnotations, oODataModelInterface?: any);
          /**
           * <p>Returns the OData meta model context corresponding to the given OData model path.</p>
           * @param {string} sPath <p>an absolute path pointing to an entity or property, e.g. "/ProductSet(1)/ToSupplier/BusinessPartnerID"; this equals the <a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions#ResourcePath"> resource path</a> component of a URI according to OData V2 URI conventions</p>
           * @returns sap.ui.model.Context <p>the context for the corresponding metadata object, i.e. an entity type or its property, or <code>null</code> in case no path is given</p>
           */
          getMetaContext(sPath?: string): sap.ui.model.Context;
          /**
           * <p>Returns the OData association end corresponding to the given entity type's navigation property of given name.</p>
           * @param {any} oEntityType <p>an entity type as returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getODataEntityType" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/getODataEntityType">getODataEntityType</a></p>
           * @param {string} sName <p>the name of a navigation property within this entity type</p>
           * @returns any <p>the OData association end or <code>null</code> if no such association end is found</p>
           */
          getODataAssociationEnd(oEntityType: any, sName: string): any;
          /**
           * <p>Returns the OData association <em>set</em> end corresponding to the given entity type's navigation property of given name.</p>
           * @param {any} oEntityType <p>an entity type as returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getODataEntityType" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/getODataEntityType">getODataEntityType</a></p>
           * @param {string} sName <p>the name of a navigation property within this entity type</p>
           * @returns any <p>the OData association set end or <code>null</code> if no such association set end is found</p>
           */
          getODataAssociationSetEnd(oEntityType: any, sName: string): any;
          /**
           * <p>Returns the OData complex type with the given qualified name, either as a path or as an object, as indicated.</p>
           * @param {string} sQualifiedName <p>a qualified name, e.g. "ACME.Address"</p>
           * @param {boolean} bAsPath <p>determines whether the complex type is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the complex type with the given qualified name; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no such type is found</p>
           */
          getODataComplexType(sQualifiedName: string, bAsPath?: boolean): any | string;
          /**
           * <p>Returns the OData default entity container. If there is only a single schema with a single entity container, the entity container does not need to be marked as default explicitly.</p>
           * @param {boolean} bAsPath <p>determines whether the entity container is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the default entity container; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no such container is found</p>
           */
          getODataEntityContainer(bAsPath?: boolean): any | string;
          /**
           * <p>Returns the OData entity set with the given simple name from the default entity container.</p>
           * @param {string} sName <p>a simple name, e.g. "ProductSet"</p>
           * @param {boolean} bAsPath <p>determines whether the entity set is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the entity set with the given simple name; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no such set is found</p>
           */
          getODataEntitySet(sName: string, bAsPath?: boolean): any | string;
          /**
           * <p>Returns the OData entity type with the given qualified name, either as a path or as an object, as indicated.</p>
           * @param {string} sQualifiedName <p>a qualified name, e.g. "ACME.Product"</p>
           * @param {boolean} bAsPath <p>determines whether the entity type is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the entity type with the given qualified name; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no such type is found</p>
           */
          getODataEntityType(sQualifiedName: string, bAsPath?: boolean): any | string;
          /**
           * <p>Returns the OData function import with the given simple or qualified name from the default entity container or the respective entity container specified in the qualified name.</p>
           * @param {string} sName <p>a simple or qualified name, e.g. "Save" or "MyService.Entities/Save"</p>
           * @param {boolean} bAsPath <p>determines whether the function import is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the function import with the given simple name; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no such function import is found</p>
           */
          getODataFunctionImport(sName: string, bAsPath?: boolean): any | string;
          /**
           * <p>Returns the given OData type's property (not navigation property!) of given name.</p><p>If an array is given instead of a single name, it is consumed (via <code>Array.prototype.shift</code>) piece by piece. Each element is interpreted as a property name of the current type, and the current type is replaced by that property's type. This is repeated until an element is encountered which cannot be resolved as a property name of the current type anymore; in this case, the last property found is returned and <code>vName</code> contains only the remaining names, with <code>vName[0]</code> being the one which was not found.</p><p>Examples: <ul> <li> Get address property of business partner: <pre>
          var oEntityType = oMetaModel.getODataEntityType("GWSAMPLE_BASIC.BusinessPartner"),
              oAddressProperty = oMetaModel.getODataProperty(oEntityType, "Address");
          oAddressProperty.name === "Address";
          oAddressProperty.type === "GWSAMPLE_BASIC.CT_Address";
          </pre> </li> <li> Get street property of address type: <pre>
          var oComplexType = oMetaModel.getODataComplexType("GWSAMPLE_BASIC.CT_Address"),
              oStreetProperty = oMetaModel.getODataProperty(oComplexType, "Street");
          oStreetProperty.name === "Street";
          oStreetProperty.type === "Edm.String";
          </pre> </li> <li> Get address' street property directly from business partner: <pre>
          var aParts = ["Address", "Street"];
          oMetaModel.getODataProperty(oEntityType, aParts) === oStreetProperty;
          aParts.length === 0;
          </pre> </li> <li> Trying to get address' foo property directly from business partner: <pre>
          aParts = ["Address", "foo"];
          oMetaModel.getODataProperty(oEntityType, aParts) === oAddressProperty;
          aParts.length === 1;
          aParts[0] === "foo";
          </pre> </li> </ul></p>
           * @param {any} oType <p>a complex type as returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getODataComplexType" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/getODataComplexType">getODataComplexType</a>, or an entity type as returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getODataEntityType" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/getODataEntityType">getODataEntityType</a></p>
           * @param {string | string[]} vName <p>the name of a property within this type (e.g. "Address"), or an array of such names (e.g. <code>["Address", "Street"]</code>) in order to drill-down into complex types; <b>BEWARE</b> that this array is modified by removing each part which is understood!</p>
           * @param {boolean} bAsPath <p>determines whether the property is returned as a path or as an object</p>
           * @returns object|string <p>(the path to) the last OData property found; <code>undefined</code> (for a path) or <code>null</code> (for an object) if no property was found at all</p>
           */
          getODataProperty(oType: any, vName: string | string[], bAsPath?: boolean): any | string;
          /**
           * <p>Returns a <code>Promise</code> which is resolved with a map representing the <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations of the given property or rejected with an error. The key in the map provided on successful resolution is the qualifier of the annotation or the empty string if no qualifier is defined. The value in the map is the JSON object for the annotation. The map is empty if the property has no <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations.</p>
           * @param {sap.ui.model.Context} oPropertyContext <p>a model context for a structural property of an entity type or a complex type, as returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMetaContext" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/getMetaContext">getMetaContext</a></p>
           * @returns Promise<any> <p>a Promise that gets resolved as soon as the value lists as well as the required model elements have been loaded</p>
           */
          getODataValueLists(oPropertyContext: sap.ui.model.Context): Promise<any>;
          /**
           * <p>Returns a promise which is fulfilled once the meta model data is loaded and can be used.</p>
           * @returns Promise<any> <p>a Promise</p>
           */
          loaded(): Promise<any>;
          /**
           * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
           * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
           */
          refresh(bForceUpdate: boolean): void;
          /**
           * <p>Refresh not supported by OData meta model!</p>
           */
          refresh(): void;
          /**
           * <p>Enables legacy path syntax handling</p><p>This defines, whether relative bindings, which do not have a defined binding context, should be compatible to earlier releases which means they are resolved relative to the root element or handled strict and stay unresolved until a binding context is set</p>
           * @param {boolean} bLegacySyntax <p>the path syntax to use</p>
           */
          setLegacySyntax(bLegacySyntax: boolean): void;
          /**
           * <p>Legacy syntax not supported by OData meta model!</p>
           * @param {boolean} bLegacySyntax <p>must not be true!</p>
           */
          setLegacySyntax(bLegacySyntax: boolean): void;
        }
        /**
         * <p>Model implementation for OData format</p>
         */
        export class ODataModel extends sap.ui.model.Model {
          /**
           * <p>Constructor for a new ODataModel.</p>
           * @param {string} sServiceUrl <p>base uri of the service to request data from; additional URL parameters appended here will be appended to every request can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!</p>
           * @param {any} mParameters <p>(optional) a map which contains the following parameter properties:</p>
           */
          constructor(sServiceUrl?: string, mParameters?: any);
          /**
           * <p>Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.</p>
           * @param {string | string[]} vUrl <p>Either one URL as string or an array or URL strings</p>
           * @returns Promise<any> <p>The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load. If this promise resolves it returns the following parameters: annotations: The annotation object entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests. the structure is the same as in the metadata object reached by the getServiceMetadata() method. For non $metadata requests the array will be empty.</p>
           */
          protected addAnnotationUrl(vUrl: string | string[]): Promise<any>;
          /**
           * <p>Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the getServiceAnnotations()-method.</p>
           * @param {string} sXMLContent <p>The string that should be parsed as annotation XML</p>
           * @param {boolean} bSuppressEvents <p>Whether not to fire annotationsLoaded event on the annotationParser</p>
           * @returns Promise<any> <p>The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur</p>
           */
          protected addAnnotationXML(sXMLContent: string, bSuppressEvents?: boolean): Promise<any>;
          /**
           * <p>Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array. The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again. If an illegal batch operation is added to the change set nothing will be performed and false will be returned.</p>
           * @param {any[]} aChangeOperations <p>an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE</p>
           */
          addBatchChangeOperations(aChangeOperations: any[]): void;
          /**
           * <p>Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array. If an illegal batch operation is added to the batch nothing will be performed and false will be returned.</p>
           * @param {any[]} aReadOperations <p>an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET</p>
           */
          addBatchReadOperations(aReadOperations: any[]): void;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          attachAnnotationsFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          attachAnnotationsLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          attachMetadataFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.</p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          attachMetadataLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path pointing to the list / array that should be bound</p>
           * @param {any} oContext <p>the context object for this databinding (optional)</p>
           * @param {sap.ui.model.Sorter} aSorters <p>initial sort order (can be either a sorter or an array of sorters) (optional)</p>
           * @param {any[]} aFilters <p>predefined filter/s (can be either a filter or an array of filters) (optional)</p>
           * @param {any} mParameters <p>additional model specific parameters (optional)</p>
           * @returns sap.ui.model.ListBinding 
           */
          bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
          /**
           * <p>Creates a new list binding for this model.<br><br>References: <ul><li>sap.ui.model.Model.prototype.bindList</li></ul></p>
           * @param {string} sPath <p>Binding path, either absolute or relative to a given <code>oContext</code></p>
           * @param {sap.ui.model.Context} oContext <p>Binding context referring to this model</p>
           * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order, can be either a sorter or an array of sorters</p>
           * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filter/s, can be either a filter or an array of filters</p>
           * @param {{ [key: string]: any }} mParameters <p>Map which contains additional parameters for the binding</p>
           * @returns sap.ui.model.ListBinding <p>oBinding new list binding object</p>
           */
          bindList(sPath: string, oContext?: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: { [key: string]: any }): sap.ui.model.ListBinding;
          /**
           * <p>Trigger a request to the function import odata service that was specified in the model constructor.</p>
           * @param {string} sFunctionName <p>A string containing the name of the function to call. The name is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          callFunction(sFunctionName: string, mParameters?: { [key: string]: any }): any;
          /**
           * <p>Removes all operations in the current batch.</p>
           */
          clearBatch(): void;
          /**
           * <p>Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported and may not work.</p>
           * @param {string} sPath <p>A string containing the path to the collection where an entry should be created. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {any} oData <p>data of the entry that should be created.</p>
           * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          create(sPath: string, oData: any, mParameters?: { [key: string]: any }): any;
          /**
           * <p>Creates a single batch operation (read or change operation) which can be used in a batch request.</p>
           * @param {string} sPath <p>A string containing the path to the collection or entry where the batch operation should be performed. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {string} sMethod <p>for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE</p>
           * @param {any} oData <p>optional data payload which should be created, updated, deleted in a change batch operation.</p>
           * @param {any} oParameters <p>optional parameter for additional information introduced in SAPUI5 1.9.1,</p>
           */
          createBatchOperation(sPath: string, sMethod: string, oData?: any, oParameters?: any): void;
          /**
           * <p>Creates a new entry object which is described by the metadata of the entity type of the specified sPath Name. A context object is returned which can be used to bind against the newly created object.</p><p>For each created entry a request is created and stored in a request queue. The request queue can be submitted by calling submitChanges. To delete a created entry from the request queue call deleteCreateEntry.</p><p>The optional vProperties parameter can be used as follows:</p><p>- vProperties could be an array containing the property names which should be included in the new entry. Other properties defined in the entity type are not included. - vProperties could be an object which includes the desired properties and the values which should be used for the created entry.</p><p>If vProperties is not specified, all properties in the entity type will be included in the created entry.</p><p>If there are no values specified the properties will have undefined values.</p><p>Please note that deep creates (including data defined by navigationproperties) are not supported</p>
           * @param {string} sPath <p>Name of the path to the collection</p>
           * @param {any[] | any} vProperties <p>An array that specifies a set of properties or the entry</p>
           * @returns sap.ui.model.Context <p>oContext A Context object that point to the new created entry.</p>
           */
          createEntry(sPath: string, vProperties: any[] | any): sap.ui.model.Context;
          /**
           * <p>Creates the key from the given collection name and property map</p>
           * @param {string} sCollection <p>The name of the collection</p>
           * @param {any} oKeyParameters <p>The object containing at least all the key properties of the entity type</p>
           * @param {boolean} bDecode <p>Whether the URI decoding should be applied on the key</p>
           */
          createKey(sCollection: string, oKeyParameters: any, bDecode: boolean): void;
          /**
           * <p>Deletes a created entry from the request queue and the model.</p>
           * @param {sap.ui.model.Context} oContext <p>The context object pointing to the created entry</p>
           */
          deleteCreatedEntry(oContext: sap.ui.model.Context): void;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Destroys the MessageProcessor Instance</p>
           */
          destroy(): void;
          /**
           * <p>Destroys the model and clears the model data. A model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.<br><br>References: <ul><li>sap.ui.base.Object.prototype.destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>References: <ul><li>sap.ui.model.Model.prototype.destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          detachAnnotationsFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          detachAnnotationsLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          detachMetadataFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          detachMetadataLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Fire event annotationsFailed to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          protected fireAnnotationsFailed(mArguments?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Fire event annotationsLoaded to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          protected fireAnnotationsLoaded(mArguments?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Fire event metadataFailed to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          protected fireMetadataFailed(mArguments?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Fire event metadataLoaded to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.model.odata.ODataModel <p><code>this</code> to allow method chaining</p>
           */
          protected fireMetadataLoaded(mArguments?: any): sap.ui.model.odata.ODataModel;
          /**
           * <p>Returns the default count mode for retrieving the count of collections</p>
           * @returns sap.ui.model.odata.CountMode 
           */
          getDefaultCountMode(): sap.ui.model.odata.CountMode;
          /**
           * <p>Returns all headers and custom headers which are stored in the OData model.</p>
           * @returns any <p>the header map</p>
           */
          getHeaders(): any;
          /**
           * <p>Returns the meta model associated with this model if it is available for the concrete model type.</p>
           * @returns sap.ui.model.MetaModel <p>The meta model or undefined if no meta model exists.</p>
           */
          getMetaModel(): sap.ui.model.MetaModel;
          /**
           * <p>Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetadata">sap.ui.model.odata.ODataMetadata</a> as a foundation and merges V4 annotations from the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataAnnotations">sap.ui.model.odata.ODataAnnotations</a> directly into the corresponding model element.</p><p><b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/loaded">loaded</a> has been resolved!</p>
           * @returns sap.ui.model.odata.ODataMetaModel <p>The meta model for this ODataModel</p>
           */
          getMetaModel(): sap.ui.model.odata.ODataMetaModel;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the attribute value</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Returns the value for the property with the given <code>sPath</code>. If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code> parameter determines if the navigation property should be included in the returned value or not. Please note that this currently works for 1..1 navigation properties only.</p>
           * @param {string} sPath <p>the path/name of the property</p>
           * @param {any} oContext <p>the context if available to access the property value</p>
           * @param {boolean} bIncludeExpandEntries <p>This parameter should be set when a URI or custom parameter with a $expand System Query Option was used to retrieve associated entries embedded/inline. If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any). If false the associated/expanded entry properties are removed and not included in the desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.</p>
           * @returns any <p>the value of the property</p>
           */
          getProperty(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
          /**
           * <p>Returns the current security token. If the token has not been requested from the server it will be requested first.</p>
           * @returns string <p>the CSRF security token</p>
           */
          getSecurityToken(): string;
          /**
           * <p>Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.</p>
           * @returns any <p>metdata object</p>
           */
          getServiceAnnotations(): any;
          /**
           * <p>Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.</p>
           * @returns any <p>metdata object</p>
           */
          getServiceMetadata(): any;
          /**
           * <p>Checks if there exist pending changes in the model created by the setProperty method.</p>
           * @returns boolean <p>true/false</p>
           */
          hasPendingChanges(): boolean;
          /**
           * <p>Trigger a GET request to the odata service that was specified in the model constructor. The data will not be stored in the model. The requested data is returned with the response.</p>
           * @param {string} sPath <p>A string containing the path to the data which should be retrieved. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          read(sPath: string, mParameters?: { [key: string]: any }): any;
          /**
           * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
           * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
           */
          refresh(bForceUpdate: boolean): void;
          /**
           * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
           * @param {boolean} bForceUpdate <p>Force update of controls</p>
           * @param {boolean} bRemoveData <p>If set to true then the model data will be removed/cleared. Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.</p>
           */
          refresh(bForceUpdate?: boolean, bRemoveData?: boolean): void;
          /**
           * <p>refreshes the metadata for model, e.g. in case the first request for metadata has failed</p>
           */
          refreshMetadata(): void;
          /**
           * <p>refresh XSRF token by performing a GET request against the service root URL.</p>
           * @param {Function} fnSuccess <p>a callback function which is called when the data has been successfully retrieved.</p>
           * @param {Function} fnError <p>a callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information.</p>
           * @param {boolean} bAsync <p>true for asynchronous requests.</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          refreshSecurityToken(fnSuccess?: Function, fnError?: Function, bAsync?: boolean): any;
          /**
           * <p>Trigger a DELETE request to the odata service that was specified in the model constructor.</p>
           * @param {string} sPath <p>A string containing the path to the data that should be removed. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {any} mParameters <p>Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          remove(sPath: string, mParameters?: any): any;
          /**
           * <p>Resets the collected changes by the setProperty method and reloads the data from the server.</p>
           * @param {Function} fnSuccess <p>a callback function which is called when the data has been successfully resetted. The handler can have the following parameters: oData and response.</p>
           * @param {Function} fnError <p>a callback function which is called when the request failed</p>
           */
          resetChanges(fnSuccess?: Function, fnError?: Function): void;
          /**
           * <p>Sets the default mode how to retrieve the item count for a collection in this model.</p><p>The count can be determined in the following ways <ul> <li>by sending a separate <code>$count</code> request</li> <li>by adding parameter <code>$inlinecount=allpages</code> to one or all data requests</li> <li>a combination of the previous two</li> <li>not at all (questions about the size of the collection can't be answered then)</li> </ul> See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.CountMode">sap.ui.model.odata.CountMode</a> for all enumeration values and more details.</p><p>Note that a call to this method does not modify the count mode for existing list bindings, only bindings that are created afterwards will use the new mode when no mode is defined at their creation.</p><p>If no default count mode is set for an <code>ODataModel</code> (v1), the mode <code>Both</code> will be used for compatibility reasons.</p>
           * @param {sap.ui.model.odata.CountMode} sCountMode <p>The new default count mode for this model</p>
           */
          setDefaultCountMode(sCountMode: sap.ui.model.odata.CountMode): void;
          /**
           * <p>Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend. Private headers which are set in the ODataModel cannot be modified. These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.</p><p>To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.</p>
           * @param {any} mHeaders <p>the header name/value map.</p>
           */
          setHeaders(mHeaders: any): void;
          /**
           * <p>Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request. This can be done by the submitChanges method.</p><p>Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.</p><p>Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the corresponding methods: submitChanges, resetChanges.</p><p>IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.</p>
           * @param {string} sPath <p>path of the property to set</p>
           * @param {any} oValue <p>value to set the property to</p>
           * @param {any} oContext <p>the context which will be used to set the property</p>
           * @param {boolean} bAsyncUpdate <p>whether to update other bindings dependent on this property asynchronously</p>
           * @returns boolean <p>true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.</p>
           */
          setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
          /**
           * <p>Enable/Disable automatic updates of all Bindings after change operations</p>
           * @param {boolean} bRefreshAfterChange 
           */
          setRefreshAfterChange(bRefreshAfterChange: boolean): void;
          /**
           * <p>Enable/Disable XCSRF-Token handling</p>
           * @param {boolean} bTokenHandling <p>whether to use token handling or not</p>
           */
          setTokenHandlingEnabled(bTokenHandling?: boolean): void;
          /**
           * <p>Enable/Disable batch for all requests</p>
           * @param {boolean} bUseBatch <p>whether the requests should be encapsulated in a batch request</p>
           */
          setUseBatch(bUseBatch?: boolean): void;
          /**
           * <p>Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>. The batch will be cleared afterwards. If the batch is empty, no request will be sent and false will be returned.</p><p><b>Note:</b> No data will be stored in the model as long as <code>bImportData</code> is not set.</p>
           * @param {Function} fnSuccess <p>A callback function which is called when the batch request has been successfully sent. Note: Errors that may have come up in the single batch operations can be accessed in the <code>aErrorResponses</code> parameter in the callback handler. The handler can have the following parameters: <code>oData</code>, <code>oResponse</code> and <code>aErrorResponses</code>.</p>
           * @param {Function} fnError <p>A callback function which is called when the batch request failed. The handler can have the parameter <code>oError</code> which contains additional error information.</p>
           * @param {boolean} bAsync <p>true for asynchronous request</p>
           * @param {boolean} bImportData <p>Whether response data should be imported into the model</p>
           * @returns any <p>An object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.</p>
           */
          submitBatch(fnSuccess?: Function, fnError?: Function, bAsync?: boolean, bImportData?: boolean): any;
          /**
           * <p>Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties. If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes. Changes to this entries should be done on the entry itself. So no deep updates are supported.</p>
           * @param {Function} fnSuccess <p>a callback function which is called when the data has been successfully updated. The handler can have the following parameters: oData and response.</p>
           * @param {Function} fnError <p>a callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information</p>
           * @param {any} oParameters <p>optional parameter for additional information introduced in SAPUI5 1.9.1</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          submitChanges(fnSuccess?: Function, fnError?: Function, oParameters?: any): any;
          /**
           * <p>Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported and may not work. These should be done seperate on the entry directly.</p>
           * @param {string} sPath <p>A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
           * @param {any} oData <p>data of the entry that should be updated.</p>
           * @param {{ [key: string]: any }} mParameters <p>Optional, can contain the following attributes:</p>
           * @returns any <p>an object which has an <code>abort</code> function to abort the current request.</p>
           */
          update(sPath: string, oData: any, mParameters?: { [key: string]: any }): any;
          /**
           * <p>update all bindings</p>
           * @param {boolean} bForceUpdate <p>If set to false an update will only be done when the value of a binding changed.</p>
           */
          updateBindings(bForceUpdate?: boolean): void;
        }
        /**
         * <p>Property binding implementation for OData format</p>
         */
        export class ODataPropertyBinding extends sap.ui.model.PropertyBinding {
          /**
           * @param {sap.ui.model.Model} oModel undefined
           * @param {string} sPath undefined
           * @param {sap.ui.model.Context} oContext undefined
           * @param {any} mParameters undefined
           */
          constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
          /**
           * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).</p>
           */
          protected initialize(): void;
          /**
           * <p>Initialize the binding. The message should be called when creating a binding. If metadata is not yet available, do nothing, method will be called again when metadata is loaded.</p>
           */
          protected initialize(): void;
        }
        /**
         */
        namespace ODataUtils {
          /**
           * <p>Compares the given OData values based on their type. All date and time types can also be compared with a number. This number is then interpreted as the number of milliseconds that the corresponding date or time object should hold.</p>
           * @param {any} vValue1 <p>the first value to compare</p>
           * @param {any} vValue2 <p>the second value to compare</p>
           * @param {string} bAsDecimal <p>if <code>true</code>, the string values <code>vValue1</code> and <code>vValue2</code> are compared as a decimal number (only sign, integer and fraction digits; no exponential format). Otherwise they are recognized by looking at their types.</p>
           * @returns number <p>the result of the compare: <code>0</code> if the values are equal, <code>-1</code> if the first value is smaller, <code>1</code> if the first value is larger, <code>NaN</code> if they cannot be compared</p>
           */
          function compare(vValue1: any, vValue2: any, bAsDecimal?: string): number;
          /**
           * <p>Formats a JavaScript value according to the given <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> EDM type</a>.</p>
           * @param {any} vValue <p>the value to format</p>
           * @param {string} sType <p>the EDM type (e.g. Edm.Decimal)</p>
           * @param {boolean} bCaseSensitive <p>Wether strings gets compared case sensitive or not</p>
           * @returns string <p>the formatted value</p>
           */
          function formatValue(vValue: any, sType: string, bCaseSensitive: boolean): string;
          /**
           * <p>Returns a comparator function optimized for the given EDM type.</p>
           * @param {string} sEdmType <p>the EDM type</p>
           * @returns Function <p>the comparator function taking two values of the given type and returning <code>0</code> if the values are equal, <code>-1</code> if the first value is smaller, <code>1</code> if the first value is larger and <code>NaN</code> if they cannot be compared (e.g. one value is <code>null</code> or <code>undefined</code>)</p>
           */
          function getComparator(sEdmType: string): Function;
          /**
           * <p>Adds an origin to the given service URL. If an origin is already present, it will only be replaced if the parameters object contains the flag "force: true". In case the URL already contains URL parameters, these will be kept. As a parameter, a sole alias is sufficient. The parameters vParameters.system and vParameters.client however have to be given in pairs. In case all three origin specifying parameters are given (system/client/alias), the alias has precedence.</p><p>Examples: setOrigin("/backend/service/url/", "DEMO_123"); - result: /backend/service/url;o=DEMO_123/</p><p>setOrigin("/backend/service/url;o=OTHERSYS8?myUrlParam=true&x=4", {alias: "DEMO_123", force: true}); - result /backend/service/url;o=DEMO_123?myUrlParam=true&x=4</p><p>setOrigin("/backend/service;o=NOT_TOUCHED/url;v=2;o=OTHERSYS8;srv=XVC", {alias: "DEMO_123", force: true}); - result /backend/service;o=NOT_TOUCHED/url;v=2;o=DEMO_123;srv=XVC</p><p>setOrigin("/backend/service/url/", {system: "DEMO", client: 134}); - result /backend/service/url;o=sid(DEMO.134)/</p>
           * @param {string} sServiceURL <p>the URL which will be enriched with an origin</p>
           * @param {any | string} vParameters <p>if string then it is asumed its the system alias, else if the argument is an object then additional Parameters can be given</p>
           * @returns string <p>the service URL with the added origin.</p>
           */
          function setOrigin(sServiceURL: string, vParameters: any | string): string;
        }
        /**
         * <p><p>Different modes for executing service operations (filtering, sorting)</p></p>
         */
        export enum OperationMode {
          /**
           * <p>With operation mode <code>Auto</code>, operations are either processed on the client or on the server. The exact behavior depends on the configured <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.CountMode">CountMode</a>, on the <code>threshold</code> and on the size of the data: <ol> <li>Count Modes <code>Request</code> and <code>Both</code><br> Initially the binding will issue a <code>$count</code> request without any filters/sorters. <ol type="a"> <li>If the count is lower or equal to the threshold, the binding will behave like in operation mode <code>Client</code>, and a data request for all entries is issued.</li> <li>If the count exceeds the threshold, the binding will behave like in operation mode <code>Server</code>.</li> </ol> </li></p><p><li>Count Modes <code>Inline</code> or <code>InlineRepeat</code><br> The initial request tries to fetch as many entries as configured with the <code>threshold</code> parameter, without specifying any filters/sorters. In addition, the query parameter <code>$inlinecount</code> is added. The binding assumes, that the threshold given by the application can be met, but it adapts its behavior depending on the response: <ol type="a"> <li>If the response returns fewer (or just as many) entries as the threshold, the binding will behave exactly like when using the operation mode <code>Client</code>. Initially configured filters/sorters will be applied afterwards on the client.</li> <li>If the <code>$inlinecount</code> is higher than the threshold, the binding will behave like in operation mode <code>Server</code>. In this case a new data request containing the initially set filters/sorters will be issued.</li> </ol> It is up to the application to chose an appropriate threshold value. Ideally, it should be high enough to fetch all data in the most common scenarios (to avoid a fallback to operation mode <code>Server</code>, requiring an additional request), but it also should be low enough to ensure a fast response in case there is much more data than expected. </li> <li>Count mode <code>None</code> is not supported together with operation mode <code>Auto</code></li> </ol></p>
           */
          Auto = "Auto",
          /**
           * <p>Operations are executed on the client. This only works if all entries are loaded on the client. The initial request fetches the complete collection, filtering and sorting does not trigger further requests.</p>
           */
          Client = "Client",
          /**
           * <p>By default, all operations are executed on the server in the OData service request (<code>Server</code> mode). Only if the collection is already expanded and all entries are available on the client, all operations are executed on the client (<code>Client</code> mode).</p>
           */
          Default = "Default",
          /**
           * <p>Operations are executed on the server in the OData service request, by appending corresponding URL parameters (<code>$filter</code>, <code>$orderby</code>). Each change in filtering or sorting triggers a new request to the server.</p>
           */
          Server = "Server",
        }
        /**
         * <p><p>The types in this namespace are <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType">simple types</a> corresponding to OData primitive types for both <a target="_blank" href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">OData V2</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> and <a target="_blank" href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html">OData V4</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/> (see "4.4 Primitive Types").</p><p>They can be used in any place where simple types are allowed (and the model representation matches), but they are of course most valuable when used in bindings to a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p><p><b>Example:</b> <pre>
          &lt;Label text="ID"/>
          &lt;Input value="{path : 'id', type : 'sap.ui.model.odata.type.String',
              constraints : {nullable : false, maxLength : 10}}"/>
          &lt;Label text="valid through"/>
          &lt;Input value="{path : 'validThrough', type : 'sap.ui.model.odata.type.DateTime',
              constraints : {displayFormat : 'Date'}}"/>
        </pre></p><p>All types support formatting from the representation used in ODataModel ("model format") to various representations used by UI elements ("target type") and vice versa. Additionally they support validating a given value against the type's constraints.</p><p>The following target types may be supported: <table> <tr><th>Type</th><th>Description</th></tr> <tr><td><code>string</code></td><td>The value is converted to a <code>string</code>, so that it can be displayed in an input field. Supported by all types.</td></tr> <tr><td><code>boolean</code></td><td>The value is converted to a <code>Boolean</code>, so that it can be displayed in a checkbox. Only supported by <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Boolean">sap.ui.model.odata.type.Boolean</a>.</td></tr> <tr><td><code>int</code></td><td>The value is converted to an integer (as <code>number</code>). May cause truncation of decimals and overruns. Supported by all numeric types.</td></tr> <tr><td><code>float</code></td><td>The value is converted to a <code>number</code>. Supported by all numeric types.</td></tr> <tr><td><code>any</code></td><td>A technical format. The value is simply passed through. Only supported by <code>format</code>, not by <code>parse</code>. Supported by all types.</td></tr> </table></p><p>All constraints relevant for OData V2 may be given as strings besides their natural types (e.g. <code>nullable : "false"</code> or <code>maxLength : "10"</code>). This makes the life of template processors easier, but is not needed for OData V4.</p><p><b>Handling of <code>null</code></b>:</p><p>All types handle <code>null</code> in the same way. When formatting to <code>string</code>, it is simply passed through (and <code>undefined</code> becomes <code>null</code>, too). When parsing from <code>string</code>, it is also passed through. Additionally, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.String">String</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Guid">Guid</a> convert the empty string to <code>null</code> when parsing. <code>validate</code> decides based on the constraint <code>nullable</code>: If <code>false</code>, <code>null</code> is not accepted and leads to a (locale-dependent) <code>ParseException</code>.</p><p>This ensures that the user cannot clear an input field bound to an attribute with non-nullable type. However it does not ensure that the user really entered something if the field was empty before.</p><p><b><code>Date</code> vs. <code>DateTime</code></b>:</p><p>The type <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Date">sap.ui.model.odata.type.Date</a> is only valid for an OData V4 service. If you use the type for an OData V2 service, displaying is possible but you get an error message from server if you try to save changes.</p><p>For an OData V2 service use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.DateTime">sap.ui.model.odata.type.DateTime</a> with the constraint <code>displayFormat: "Date"</code> to display only a date.</p></p>
         */
        namespace type {
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Boolean</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>boolean</code>.</p>
           */
          export class Boolean extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.Boolean</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in the interface of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType">sap.ui.model.SimpleType</a>; this type ignores them since it does not support any format options</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Boolean/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given boolean value to the given target type.</p>
             * @param {boolean} bValue <p>the value to be formatted</p>
             * @param {string} sTargetType <p>the target type; may be "any", "boolean", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. If the target type (or its primitive type) is "string", the result is "Yes" or "No" in the current <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Configuration/methods/getLanguage">language</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns boolean|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(bValue: boolean, sTargetType: string): boolean | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value from the given type to a boolean.</p>
             * @param {boolean | string} vValue <p>the value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "boolean", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns boolean <p>the parsed value</p>
             */
            parseValue(vValue: boolean | string, sSourceType: string): boolean;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the given constraints.</p>
             * @param {boolean} bValue <p>the value to be validated</p>
             */
            validateValue(bValue: boolean): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Byte</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class Byte extends sap.ui.model.odata.type.Int {
            /**
             * <p>Constructor for a primitive type <code>Edm.Byte</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Int/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's supported range as object with properties <code>minimum</code> and <code>maximum</code>.</p>
             * @returns any <p>the range</p>
             */
            protected getRange(): any;
          }
          /**
           * <p>This class represents the <code>Currency</code> composite type with the parts amount, currency, and currency customizing. The amount part is formatted according to the customizing for the currency. Use the result of the promise returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestCurrencyCodes">sap.ui.model.odata.v4.ODataMetaModel#requestCurrencyCodes</a> as currency customizing part. If no currency customizing is available, UI5's default formatting applies. The type may only be used for amount and currency parts from a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
           */
          export class Currency extends sap.ui.model.type.Currency {
            /**
             * <p>Constructor for a <code>Currency</code> composite type.</p>
             * @param {any} oFormatOptions <p>See parameter <code>oFormatOptions</code> of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.type.Currency/constructor">sap.ui.model.type.Currency#constructor</a>. Format options are immutable, that is, they can only be set once on construction. Format options that are not supported or have a different default are listed below.</p>
             * @param {any} oConstraints <p>Not supported</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
             * @param {any[]} aValues <p>the values to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any <p>the formatted output value</p>
             */
            formatValue(aValues: any[], sInternalType: string): any;
            /**
             * <p>Format the given array containing amount and currency code to an output value of type string. Other internal types than 'string' are not supported by the Currency type. If a source format has been defined for this type, the formatValue does also accept a string value as input, which will be parsed into an array using the source format. If aValues is not defined or null, null will be returned.</p>
             * @param {any[] | string} vValue <p>the array of values or string value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any <p>the formatted output value</p>
             */
            formatValue(vValue: any[] | string, sInternalType: string): any;
            /**
             * <p>Formats the given values of the parts of the <code>Currency</code> composite type to the given target type.</p>
             * @param {any[]} aValues <p>Array of part values to be formatted; contains in the following order: amount, currency, currency customizing. The first call to this method where all parts are set determines the currency customizing; subsequent calls use this customizing, so that the corresponding part may be omitted. Changes to the currency customizing part after this first method call are not considered: The currency customizing for this <code>Currency</code> instance remains unchanged.</p>
             * @param {string} sTargetType <p>The target type; must be "string" or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>The formatted output value; <code>null</code>, if <code>aValues</code> is <code>undefined</code> or <code>null</code> or if the amount, the currency or the currency customizing contained therein is <code>undefined</code>.</p>
             */
            formatValue(aValues: any[], sTargetType: string): string;
            /**
             * <p>Returns the public facade of this object.</p><p>By default, the public facade is implemented as an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Interface">sap.ui.base.Interface</a>, exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.</p><p>See the documentation of the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.Object.extend" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">extend</a> method for an explanation of <code>publicMethods</code>.</p><p>The facade is created on the first call of <code>getInterface</code> and reused for all later calls.</p>
             */
            getInterface(): any;
            /**
             * <p>References: <ul><li>sap.ui.base.Object#getInterface</li></ul></p>
             * @returns any <p>this</p>
             */
            getInterface(): any;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
             * @returns any[] <p>the parse result array</p>
             */
            parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
            /**
             * <p>Parse a string value to an array containing amount and currency. Parsing of other internal types than 'string' is not supported by the Currency type. In case a source format has been defined, after parsing the currency is formatted using the source format and a string value is returned instead.</p>
             * @param {any} vValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
             * @returns array|string <p>the parse result array</p>
             */
            parseValue(vValue: any, sInternalType: string, aCurrentValues: any[]): any[] | string;
            /**
             * <p>Parses the given string value to an array containing amount and currency.<br><br>References: <ul><li>sap.ui.model.type.Currency#parseValue</li></ul></p>
             * @param {string} vValue <p>The value to be parsed</p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>vValue</code>); must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @param {any[]} aCurrentValues <p>The current values of all binding parts</p>
             * @returns any[] <p>An array containing amount and currency in this order. Both, amount and currency, are string values unless the format option <code>parseAsString</code> is <code>false</code>; in this case, the amount is a number.</p>
             */
            parseValue(vValue: string, sSourceType: string, aCurrentValues: any[]): any[];
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any[]} aValues <p>the set of values to be validated</p>
             */
            validateValue(aValues: any[]): void;
            /**
             * <p>Does nothing as the type does not support constraints.</p>
             * @param {string} vValue <p>The value to be validated</p>
             */
            validateValue(vValue: string): void;
          }
          /**
           * <p>This class represents the OData V4 primitive type <code>Edm.Date</code>.</p><p>In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code> in the format "yyyy-mm-dd".</p><p><b>Note: For an OData V2 service use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.DateTime">sap.ui.model.odata.type.DateTime</a> with the constraint <code>displayFormat: "Date"</code> to display only a date.</b><br><br><span>Documentation links:</span><ul><li><a target="_blank" href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html">http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html</a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/></li></ul></p>
           */
          export class Date extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.Date</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Date/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {string | Date} vValue <p>the value to be formatted</p>
             * @param {string} sTargetType <p>the target type; may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(vValue: string | Date, sTargetType: string): string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value to a date.</p>
             * @param {string} sValue <p>the value to be parsed, maps <code>""</code> to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>sValue</code>); must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the given constraints.</p>
             * @param {string} sValue <p>the value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This class represents the OData V2 primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.DateTime</code></a>.</p><p>If you want to display a date and a time, prefer <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.DateTimeOffset">sap.ui.model.odata.type.DateTimeOffset</a>, specifically designed for this purpose.</p><p>Use <code>DateTime</code> with the SAP-specific annotation <code>display-format=Date</code> (resp. the constraint <code>displayFormat: "Date"</code>) to display only a date.</p><p>In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> this type is represented as a <code>Date</code>. With the constraint <code>displayFormat: "Date"</code>, the time zone is UTC and the time part is ignored, otherwise it is a date/time value in local time.</p>
           */
          export class DateTime extends sap.ui.model.odata.type.DateTimeBase {
            /**
             * <p>Constructor for a primitive type <code>Edm.DateTime</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.DateTimeBase/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
          }
          /**
           * <p>This is an abstract base class for the OData primitive types <code>Edm.DateTime</code> and <code>Edm.DateTimeOffset</code>.</p>
           */
          export abstract class DateTimeBase extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Base constructor for the primitive types <code>Edm.DateTime</code> and <code>Edm.DateTimeOffset</code>.</p>
             * @param {any} oFormatOptions <p>Type-specific format options; see subtypes</p>
             * @param {any} oConstraints <p>Constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.DateTimeBase/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {Date} oValue <p>The value to be formatted, which is represented in the model as a <code>Date</code> instance (OData V2)</p>
             * @param {string} sTargetType <p>The target type, may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date|string <p>The formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(oValue: Date, sTargetType: string): Date | string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value to a <code>Date</code> instance (OData V2).</p>
             * @param {string} sValue <p>The value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>sValue</code>), must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date <p>The parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): Date;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {Date} oValue <p>The value to be validated</p>
             */
            validateValue(oValue: Date): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.DateTimeOffset</code></a>.</p><p>In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> this type is represented as a <code>Date</code> instance in local time. In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code> like "1970-12-31T23:59:58Z". See parameter <code>oConstraints.V4</code> for more information.</p>
           */
          export class DateTimeOffset extends sap.ui.model.odata.type.DateTimeBase {
            /**
             * <p>Constructor for a primitive type <code>Edm.DateTimeOffset</code>.</p>
             * @param {any} oFormatOptions <p>Format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a></p>
             * @param {any} oConstraints <p>Constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.DateTimeBase/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {Date} oValue <p>The value to be formatted, which is represented in the model as a <code>Date</code> instance (OData V2)</p>
             * @param {string} sTargetType <p>The target type, may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date|string <p>The formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(oValue: Date, sTargetType: string): Date | string;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {Date | string} vValue <p>The value to be formatted, which is represented in the model as a <code>Date</code> instance (OData V2) or as a string like "1970-12-31T23:59:58Z" (OData V4); both representations are accepted independent of the model's OData version</p>
             * @param {string} sTargetType <p>The target type, may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date|string <p>The formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(vValue: Date | string, sTargetType: string): Date | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value to a <code>Date</code> instance (OData V2).</p>
             * @param {string} sValue <p>The value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>sValue</code>), must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date <p>The parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): Date;
            /**
             * <p>Parses the given value to a <code>Date</code> instance (OData V2) or a string like "1970-12-31T23:59:58Z" (OData V4), depending on the model's OData version.</p>
             * @param {string} sValue <p>The value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>sValue</code>), must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns Date|string <p>The parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): Date | string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {Date} oValue <p>The value to be validated</p>
             */
            validateValue(oValue: Date): void;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints, depending on the model's OData version.</p>
             * @param {any} vValue <p>The value to be validated</p>
             */
            validateValue(vValue: any): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Decimal</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code>. It never uses exponential format ("1e-5").</p>
           */
          export class Decimal extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a primitive type <code>Edm.Decimal</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>. Note that <code>maxFractionDigits</code> and <code>minFractionDigits</code> are set to the value of the constraint <code>scale</code> unless it is "variable". They can however be overwritten.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Decimal/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type. When formatting to "string" the type's constraint <code>scale</code> is taken into account.</p>
             * @param {string} sValue <p>the value to be formatted, which is represented as a string in the model</p>
             * @param {string} sTargetType <p>the target type; may be "any", "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(sValue: string, sTargetType: string): number | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to a decimal in <code>string</code> representation.</p>
             * @param {string | number} vValue <p>the value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the parsed value</p>
             */
            parseValue(vValue: string | number, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {string} sValue <p>the value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Double</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class Double extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a primitive type <code>Edm.Double</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Double/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type. When formatting to "string", very large or very small values are formatted to the exponential format (e.g. "-3.14 E+15").</p>
             * @param {number | string} vValue <p>the value to be formatted, which is represented as a number in the model</p>
             * @param {string} sTargetType <p>the target type; may be "any", "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(vValue: number | string, sTargetType: string): number | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to an Edm.Double in <code>number</code> representation.</p>
             * @param {string | number} vValue <p>the value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code>; note that there is no way to enter <code>Infinity</code> or <code>NaN</code> values</p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number <p>the parsed value</p>
             */
            parseValue(vValue: string | number, sSourceType: string): number;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {number} fValue <p>the value to be validated</p>
             */
            validateValue(fValue: number): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Guid</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code>.</p>
           */
          export class Guid extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.Guid</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in the interface of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType">sap.ui.model.SimpleType</a>; this type ignores them since it does not support any format options</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Guid/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {string} sValue <p>the value to be formatted</p>
             * @param {string} sTargetType <p>the target type; may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(sValue: string, sTargetType: string): string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value to a GUID.</p>
             * @param {string} sValue <p>the value to be parsed, maps <code>""</code> to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>sValue</code>); must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the given constraints.</p>
             * @param {string} sValue <p>the value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This is an abstract base class for integer-based <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> OData primitive types</a> like <code>Edm.Int16</code> or <code>Edm.Int32</code>.</p>
           */
          export abstract class Int extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a new <code>Int</code>.</p>
             * @param {any} oFormatOptions <p>type-specific format options; see subtypes</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Int/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type. When formatting to <code>string</code> the format options are used.</p>
             * @param {number} iValue <p>the value in model representation to be formatted</p>
             * @param {string} sTargetType <p>the target type; may be "any", "int", "float", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(iValue: number, sTargetType: string): number | string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given source type, to an Int in number representation.</p>
             * @param {number | string} vValue <p>the value to be parsed. The empty string and <code>null</code> are parsed to <code>null</code>.</p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number <p>the parsed value</p>
             */
            parseValue(vValue: number | string, sSourceType: string): number;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {number} iValue <p>the value to be validated</p>
             */
            validateValue(iValue: number): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Int16</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class Int16 extends sap.ui.model.odata.type.Int {
            /**
             * <p>Constructor for a primitive type <code>Edm.Int16</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Int/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's supported range as object with properties <code>minimum</code> and <code>maximum</code>.</p>
             * @returns any <p>the range</p>
             */
            protected getRange(): any;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Int32</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class Int32 extends sap.ui.model.odata.type.Int {
            /**
             * <p>Constructor for a primitive type <code>Edm.Int32</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Int/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's supported range as object with properties <code>minimum</code> and <code>maximum</code>.</p>
             * @returns any <p>the range</p>
             */
            protected getRange(): any;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Int64</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code>.</p>
           */
          export class Int64 extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a primitive type <code>Edm.Int64</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Int64/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions: any, oConstraints: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {string} sValue <p>the value to be formatted, which is represented as a string in the model</p>
             * @param {string} sTargetType <p>the target type; may be "any", "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(sValue: string, sTargetType: string): number | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to an Int64 in <code>string</code> representation.</p>
             * @param {string | number} vValue <p>the value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the parsed value</p>
             */
            parseValue(vValue: string | number, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {string} sValue <p>the value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This class is an abstract base class for all OData primitive types (see <a target="_blank" href="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element">OData V4 Edm Types</a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/> and <a target="_blank" href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">OData V2 Edm Types</a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/>). All subtypes implement the interface of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType">sap.ui.model.SimpleType</a>. That means they implement next to the constructor: <ul> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/getName">getName</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/formatValue">formatValue</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/parseValue">parseValue</a></li> <li><a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType/methods/validateValue">validateValue</a></li> </ul></p><p>All ODataTypes are immutable. All format options and constraints are given to the constructor, they cannot be modified later.</p><p>All ODataTypes use a locale-specific message when throwing an error caused by invalid user input (e.g. if <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Double/methods/parseValue">Double.parseValue</a> cannot parse the given value to a number, or if any type's <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.ODataType/methods/validateValue">validateValue</a> gets a <code>null</code>, but the constraint <code>nullable</code> is <code>false</code>).</p>
           */
          export abstract class ODataType extends sap.ui.model.SimpleType {
            /**
             * <p>Constructor for a new <code>ODataType</code>.</p>
             * @param {any} oFormatOptions <p>type-specific format options; see subtypes</p>
             * @param {any} oConstraints <p>type-specific constraints (e.g. <code>oConstraints.nullable</code>), see subtypes</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the public facade of this object.</p><p>By default, the public facade is implemented as an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Interface">sap.ui.base.Interface</a>, exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.</p><p>See the documentation of the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.Object.extend" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">extend</a> method for an explanation of <code>publicMethods</code>.</p><p>The facade is created on the first call of <code>getInterface</code> and reused for all later calls.</p>
             */
            getInterface(): any;
            /**
             * <p>References: <ul><li>sap.ui.base.Object#getInterface</li></ul></p>
             * @returns any <p>this</p>
             */
            getInterface(): any;
          }
          /**
           * <p>This class represents a placeholder for all unsupported OData primitive types. It can only be used to retrieve raw values "as is" (i.e. <code>formatValue(vValue, "any")</code>), but not to actually convert to or from any other representation or to validate.</p>
           */
          export class Raw extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a placeholder for all unsupported OData primitive types.</p>
             * @param {any} oFormatOptions <p>Must be <code>undefined</code></p>
             * @param {any} oConstraints <p>Must be <code>undefined</code></p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.<br><br>References: <ul><li>sap.ui.model.SimpleType#formatValue</li></ul></p>
             * @param {any} vValue <p>The raw value to be retrieved "as is"</p>
             * @param {string} sTargetType <p>The target type; must be "any"</p>
             * @returns any <p>The raw value "as is"</p>
             */
            formatValue(vValue: any, sTargetType: string): any;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.<br><br>References: <ul><li>sap.ui.model.Type#getName</li></ul></p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.SimpleType#parseValue</li></ul></p>
             */
            parseValue(): void;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.SimpleType#validateValue</li></ul></p>
             */
            validateValue(): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.SByte</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class SByte extends sap.ui.model.odata.type.Int {
            /**
             * <p>Constructor for a primitive type <code>Edm.SByte</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Int/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's supported range as object with properties <code>minimum</code> and <code>maximum</code>.</p>
             * @returns any <p>the range</p>
             */
            protected getRange(): any;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Single</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>number</code>.</p>
           */
          export class Single extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for a primitive type <code>Edm.Single</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat">sap.ui.core.format.NumberFormat</a>. In contrast to NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.</p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Single/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {string | number} vValue <p>the value to be formatted, which is represented as a number in the model</p>
             * @param {string} sTargetType <p>the target type; may be "any", "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number|string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(vValue: string | number, sTargetType: string): number | string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to an Edm.Single in <code>number</code> representation.</p>
             * @param {string | number} vValue <p>the value to be parsed; the empty string and <code>null</code> are parsed to <code>null</code>; note that there is no way to enter <code>Infinity</code> or <code>NaN</code> values</p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>); may be "float", "int", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns number <p>the parsed value</p>
             */
            parseValue(vValue: string | number, sSourceType: string): number;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {number} fValue <p>the value to be validated</p>
             */
            validateValue(fValue: number): void;
          }
          /**
           * <p>This class represents the OData V4 primitive type <a target="_blank" href="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element"><code>Edm.Stream</code></a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/>. The values for stream properties do not appear in the entity payload. Instead, the values are read or written through URLs.</p><p>This type only supports reading streams. For this purpose bind the stream property to a control property of type <code>sap.ui.core.URI</code>. {#formatValue} will then deliver the correct URL to read the stream.</p>
           */
          export class Stream extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.Stream</code>.</p>
             * @param {any} oFormatOptions <p>Must be <code>undefined</code></p>
             * @param {any} oConstraints <p>constraints; they are only stored for documentation purpose, since no validation can occur</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Returns the input value unchanged.<br><br>References: <ul><li>sap.ui.model.SimpleType#formatValue</li></ul></p>
             * @param {string} sValue <p>the read URL</p>
             * @param {string} sTargetType <p>The target type; must be "any" or "string"</p>
             * @returns string <p>The property's read URL</p>
             */
            formatValue(sValue: string, sTargetType: string): string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.<br><br>References: <ul><li>sap.ui.model.Type#getName</li></ul></p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.SimpleType#parseValue</li></ul></p>
             */
            parseValue(): void;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.SimpleType#validateValue</li></ul></p>
             */
            validateValue(): void;
          }
          /**
           * <p>This class represents the OData primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.String</code></a>.</p><p>In both <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">sap.ui.model.odata.v2.ODataModel</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code>.</p>
           */
          export class String extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.String</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in the interface of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.SimpleType">sap.ui.model.SimpleType</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.String/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type. If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and the target type is any or string and the given value contains only digits, the leading zeros are truncated.</p>
             * @param {string} sValue <p>the value to be formatted</p>
             * @param {string} sTargetType <p>the target type; may be "any", "boolean", "float", "int" or "string". See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string|number|boolean <p>the formatted output value in the target type; <code>undefined</code> is always formatted to <code>null</code>; <code>null</code> is formatted to "" if the target type is "string".</p>
             */
            formatValue(sValue: string, sTargetType: string): string | number | boolean;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value which is expected to be of the given type to a string. If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and the parsed string is a sequence of digits, then the parsed string is either enhanced with leading zeros, if <code>maxLength</code> constraint is given, or leading zeros are removed from parsed string.</p><p>Note: Depending on the format option <code>parseKeepsEmptyString</code>, an empty input string (<code>""</code>) is either parsed to <code>""</code> or <code>null</code>. If the constraint <code>nullable</code> is <code>false</code>, a <code>null</code> value is rejected with a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ValidateException">ValidateException</a> raised in the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.String/methods/validateValue">#validateValue</a> method.</p>
             * @param {string | number | boolean} vValue <p>the value to be parsed</p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>vValue</code>). See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the parsed value</p>
             */
            parseValue(vValue: string | number | boolean, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {string} sValue <p>the value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This class represents the OData V2 primitive type <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem"> <code>Edm.Time</code></a>.</p><p>In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataModel">ODataModel</a> this type is represented as an object with two properties: <ul> <li><code>__edmType</code> with the value "Edm.Time" <li><code>ms</code> with the number of milliseconds since midnight </ul></p>
           */
          export class Time extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.Time</code>.</p>
             * @param {any} oFormatOptions <p>format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a></p>
             * @param {any} oConstraints <p>constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.Time/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type</p>
             * @param {any} oValue <p>the value in model representation to be formatted.</p>
             * @param {string} sTargetType <p>the target type; may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>the formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(oValue: any, sTargetType: string): string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>the type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to a time object.</p>
             * @param {string} sValue <p>the value to be parsed, maps <code>""</code> to <code>null</code></p>
             * @param {string} sSourceType <p>the source type (the expected type of <code>sValue</code>); must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns any <p>the parsed value as described in <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="formatValue" href="#/api/sap.ui.model.odata.type.Time/methods/formatValue">formatValue</a></p>
             */
            parseValue(sValue: string, sSourceType: string): any;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates whether the given value in model representation is valid and meets the defined constraints.</p>
             * @param {any} oValue <p>the value to be validated</p>
             */
            validateValue(oValue: any): void;
          }
          /**
           * <p>This class represents the OData V4 primitive type <a target="_blank" href="http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element"><code>Edm.TimeOfDay</code></a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
          title="Information published on non SAP site" class="sapUISDKExternalLink"/>. In <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> this type is represented as a <code>string</code>.</p>
           */
          export class TimeOfDay extends sap.ui.model.odata.type.ODataType {
            /**
             * <p>Constructor for an OData primitive type <code>Edm.TimeOfDay</code>.</p>
             * @param {any} oFormatOptions <p>Format options as defined in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat">sap.ui.core.format.DateFormat</a></p>
             * @param {any} oConstraints <p>Constraints; <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="validateValue" href="#/api/sap.ui.model.odata.type.TimeOfDay/methods/validateValue">validateValue</a> throws an error if any constraint is violated</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Formats the given value to the given target type.</p>
             * @param {string} sValue <p>The value to be formatted, which is represented as a string in the model</p>
             * @param {string} sTargetType <p>The target type, may be "any", "string", or a type with one of these types as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information</p>
             * @returns string <p>The formatted output value in the target type; <code>undefined</code> or <code>null</code> are formatted to <code>null</code></p>
             */
            formatValue(sValue: string, sTargetType: string): string;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parses the given value, which is expected to be of the given type, to a string with an OData V4 Edm.TimeOfDay value.</p>
             * @param {string} sValue <p>The value to be parsed, maps <code>""</code> to <code>null</code></p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>sValue</code>), must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>The parsed value</p>
             */
            parseValue(sValue: string, sSourceType: string): string;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validates the given value in model representation and meets the type's constraints.</p>
             * @param {string} sValue <p>The value to be validated</p>
             */
            validateValue(sValue: string): void;
          }
          /**
           * <p>This class represents the <code>Unit</code> composite type with the parts measure, unit, and unit customizing. The measure part is formatted according to the customizing for the unit. Use the result of the promise returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestUnitsOfMeasure">sap.ui.model.odata.v4.ODataMetaModel#requestUnitsOfMeasure</a> as unit customizing part. If no unit customizing is available, UI5's default formatting applies. The type may only be used for measure and unit parts from a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
           */
          export class Unit extends sap.ui.model.type.Unit {
            /**
             * <p>Constructor for a <code>Unit</code> composite type.</p>
             * @param {any} oFormatOptions <p>See parameter <code>oFormatOptions</code> of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.type.Unit/constructor">sap.ui.model.type.Unit#constructor</a>. Format options are immutable, that is, they can only be set once on construction. Format options that are not supported or have a different default are listed below.</p>
             * @param {any} oConstraints <p>Not supported</p>
             * @param {string[]} aDynamicFormatOptionNames <p>Not supported</p>
             */
            constructor(oFormatOptions?: any, oConstraints?: any, aDynamicFormatOptionNames?: string[]);
            /**
             * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
             * @param {any} oValue <p>the value to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
             */
            formatValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
             * @param {any[]} aValues <p>the values to be formatted</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any <p>the formatted output value</p>
             */
            formatValue(aValues: any[], sInternalType: string): any;
            /**
             * <p>Format the given array containing amount and Unit code to an output value of type string. Other internal types than 'string' are not supported by the Unit type. If a source format has been defined for this type, the formatValue does also accept a string value as input, which will be parsed into an array using the source format. If vValues is not defined or null, null will be returned.</p>
             * @param {any[] | string} vValue <p>the array of values or string value to be formatted. If an array is given, index 0 is the number value, and index 1 is the Unit code (CLDR or custom). Indices 2+ are the bound values for the dynamic format options.</p>
             * @param {string} sInternalType <p>the target type</p>
             * @returns any <p>the formatted output value</p>
             */
            formatValue(vValue: any[] | string, sInternalType: string): any;
            /**
             * <p>Formats the given values of the parts of the <code>Unit</code> composite type to the given target type.</p>
             * @param {any[]} aValues <p>Array of part values to be formatted; contains in the following order: measure, unit, unit customizing. The first call to this method where all parts are set determines the unit customizing; subsequent calls use this customizing, so that the corresponding part may be omitted. Changes to the unit customizing part after this first method call are not considered: The unit customizing for this <code>Unit</code> instance remains unchanged.</p>
             * @param {string} sTargetType <p>The target type; must be "string" or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @returns string <p>The formatted output value; <code>null</code>, if <code>aValues</code> is <code>undefined</code> or <code>null</code> or if the measure, the unit or the unit customizing contained therein is <code>undefined</code>.</p>
             */
            formatValue(aValues: any[], sTargetType: string): string;
            /**
             * <p>Returns the public facade of this object.</p><p>By default, the public facade is implemented as an instance of <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.Interface">sap.ui.base.Interface</a>, exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.</p><p>See the documentation of the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.base.Object.extend" href="#/api/sap.ui.base.Object/methods/sap.ui.base.Object.extend">extend</a> method for an explanation of <code>publicMethods</code>.</p><p>The facade is created on the first call of <code>getInterface</code> and reused for all later calls.</p>
             */
            getInterface(): any;
            /**
             * <p>References: <ul><li>sap.ui.base.Object#getInterface</li></ul></p>
             * @returns any <p>this</p>
             */
            getInterface(): any;
            /**
             * <p>Returns the name of this type.</p>
             * @returns string <p>the name of this type</p>
             */
            getName(): string;
            /**
             * <p>Returns the type's name.</p>
             * @returns string <p>The type's name</p>
             */
            getName(): string;
            /**
             * <p>Parse a value of an internal type to the expected value of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
             */
            parseValue(oValue: any, sInternalType: string): any | Promise<any>;
            /**
             * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
             * @param {any} oValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
             * @returns any[] <p>the parse result array</p>
             */
            parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
            /**
             * <p>Parse a string value to an array containing amount and Unit. Parsing of other internal types than 'string' is not supported by the Unit type. In case a source format has been defined, after parsing the Unit is formatted using the source format and a string value is returned instead.</p>
             * @param {any} vValue <p>the value to be parsed</p>
             * @param {string} sInternalType <p>the source type</p>
             * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
             * @returns array|string <p>the parse result array</p>
             */
            parseValue(vValue: any, sInternalType: string, aCurrentValues: any[]): any[] | string;
            /**
             * <p>Parses the given string value to an array containing measure and unit.<br><br>References: <ul><li>sap.ui.model.type.Unit#parseValue</li></ul></p>
             * @param {string} vValue <p>The value to be parsed</p>
             * @param {string} sSourceType <p>The source type (the expected type of <code>vValue</code>); must be "string", or a type with "string" as its <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.DataType/methods/getPrimitiveType">primitive type</a>. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information.</p>
             * @param {any[]} aCurrentValues <p>The current values of all binding parts</p>
             * @returns any[] <p>An array containing measure and unit in this order. Both, measure and unit, are string values unless the format option <code>parseAsString</code> is <code>false</code>; in this case, the measure is a number.</p>
             */
            parseValue(vValue: string, sSourceType: string, aCurrentValues: any[]): any[];
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any} oValue <p>the value to be validated</p>
             * @returns undefined|Promise <p>a Promise in case validation is asynchronous</p>
             */
            validateValue(oValue: any): undefined | Promise<any>;
            /**
             * <p>Validate whether a given value in model representation is valid and meets the defined constraints (if any).</p>
             * @param {any[]} aValues <p>the set of values to be validated</p>
             */
            validateValue(aValues: any[]): void;
            /**
             * <p>Does nothing as the type does not support constraints.</p>
             * @param {string} vValue <p>The value to be validated</p>
             */
            validateValue(vValue: string): void;
          }
        }
        /**
         * <p><p>Different methods for update operations.</p></p>
         */
        export enum UpdateMethod {
          /**
           * <p>Update requests will be send with HTTP method <code>MERGE</code>.</p>
           */
          Merge = "Merge",
          /**
           * <p>Update requests will be send with HTTP method <code>PUT</code>.</p>
           */
          Put = "Put",
        }
        /**
         * <p><p>OData-based DataBinding</p></p>
         */
        namespace v2 {
          /**
           * <p>Annotation loader for OData V2 services</p>
           */
          export class ODataAnnotations extends sap.ui.base.EventProvider {
            /**
             * <p>Creates a new instance of the ODataAnnotations annotation loader.</p>
             * @param {sap.ui.model.odata.ODataMetadata} oMetadata <p>Metadata object with the metadata information needed to parse the annotations</p>
             * @param {{ [key: string]: any }} mOptions <p>Obligatory options</p>
             */
            constructor(oMetadata: sap.ui.model.odata.ODataMetadata, mOptions: { [key: string]: any });
            /**
             * <p>Adds one or several sources to the annotation loader. Sources will be loaded instantly but merged only after the previously added source has either been successfully merged or failed.</p>
             * @param {string | string[] | sap.ui.model.odata.v2.ODataAnnotations.Source | sap.ui.model.odata.v2.ODataAnnotations.Source[]} vSource <p>One or several annotation source(s). Can be either a string or a map of the type <code>sap.ui.model.odata.v2.ODataAnnotations.Source</code> or an array containing several (either strings or source objects).</p>
             * @returns Promise<any> <p>The promise to (load,) parse and merge the given source(s). The Promise resolves on success with an array of maps containing properties <code>source</code> and <code>data</code>. See the parameters of the <code>success</code> event for more details. The promise fails in case at least one source could not be (loaded,) parsed or merged with an array of objects containing Errors and/or Success objects.</p>
             */
            addSource(vSource: string | string[] | sap.ui.model.odata.v2.ODataAnnotations.Source | sap.ui.model.odata.v2.ODataAnnotations.Source[]): Promise<any>;
            /**
             * <p>This event exists for compatibility with the old Annotation loader Attaches the given callback to the <code>allFailed</code> event. This event is fired when no annotation from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which the sources had been added.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining</p>
             */
            attachAllFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Attaches the given callback to the <code>error</code> event, which is fired whenever a source cannot be loaded, parsed or merged into the annotation data. The following parameters will be set on the event object that is given to the callback function: <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing the data given as source, either a URL or an XML string depending on how the source was added. <code>error</code> - An Error object describing the problem that occurred</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining</p>
             */
            attachError(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Attaches the given callback to the <code>failed</code> event. This event is fired when at least one annotation from a group of sources was not successfully (loaded,) parsed or merged. The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which the sources had been added.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining</p>
             */
            attachFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Attaches the given callback to the <code>loaded</code> event. This event is fired when all annotations from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well as Errors in the order in which they had been added.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining</p>
             */
            attachLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>This event exists for compatibility with the old Annotation loader Attaches the given callback to the <code>someLoaded</code> event. This event is fired when at least one annotation from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well as Errors in the order in which they had been added.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining</p>
             */
            attachSomeLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Attaches the given callback to the <code>success</code> event, which is fired whenever a source has been successfully (loaded,) parsed and merged into the annotation data. The following parameters will be set on the event object that is given to the callback function: <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing the data given as source, either a URL or an XML string depending on how the source was added.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The event callback. This function will be called in the context of the oListener object if given as the next argument.</p>
             * @param {any} oListener <p>Object to use as context of the callback. If empty, the global context is used.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            attachSuccess(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>allFailed</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachFailed">sap.ui.model.odata.v2.ODataAnnotations#attachFailed</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>error</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachAllFailed(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>error</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachError">sap.ui.model.odata.v2.ODataAnnotations#attachError</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>error</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachError(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>failed</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachFailed">sap.ui.model.odata.v2.ODataAnnotations#attachFailed</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>error</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachFailed(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>loaded</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachLoaded">sap.ui.model.odata.v2.ODataAnnotations#attachLoaded</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>error</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachLoaded(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>someLoaded</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachSomeLoaded">sap.ui.model.odata.v2.ODataAnnotations#attachSomeLoaded</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>error</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachSomeLoaded(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Detaches the given callback from the <code>success</code> event. The passed function and listener object must match the ones previously used for attaching to the event.</p>
             * @param {Function} fnFunction <p>The event callback previously used with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations/methods/attachSuccess">sap.ui.model.odata.v2.ODataAnnotations#attachSuccess</a>.</p>
             * @param {any} oListener <p>The same (if any) context object that was used when attaching to the <code>success</code> event.</p>
             * @returns sap.ui.model.odata.v2.ODataAnnotations <p><code>this</code>-reference to allow method chaining.</p>
             */
            detachSuccess(fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataAnnotations;
            /**
             * <p>Returns the parsed and merged annotation data object</p>
             * @returns any <p>returns annotations data</p>
             */
            getData(): any;
            /**
             * <p>Returns a map of custom headers that are sent with every request to an annotation URL.</p>
             * @returns { [key: string]: any } <p>A map of all custom headers.</p>
             */
            getHeaders(): { [key: string]: any };
            /**
             * <p>Returns a promise that resolves when the annotation sources that were added up to this point were successfully (loaded,) parsed and merged</p>
             * @returns Promise<any> <p>The Promise that resolves/rejects after the last added sources have been processed</p>
             */
            loaded(): Promise<any>;
            /**
             * <p>Set custom headers which are provided in a key/value map. These headers are used for all requests. The "Accept-Language" header cannot be modified and is set using the core's language setting.</p><p>To remove these headers, simply set the <code>mHeaders</code> parameter to <code>{}</code>. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the <code>mCustomHeaders</code> parameter.</p>
             * @param {{ [key: string]: any }} mHeaders <p>the header name/value map.</p>
             */
            setHeaders(mHeaders: { [key: string]: any }): void;
          }
          namespace ODataAnnotations {
            /**
             * <p><p>Parameters of the <code>error</code> event</p></p>
             */
            export interface errorParameters {
              /**
               * <p>The error that occurred. Also contains the properties from sap.ui.model.odata.v2.ODataAnnotations.Source that could be filled up to that point</p>
               */
              result: Error;
            }
            /**
             * <p><p>Parameters of the <code>failed</code> event</p></p>
             */
            export interface failedParameters {
              /**
               * <p>An array of Errors (@see sap.ui.model.v2.ODataAnnotations#error) that occurred while loading a group of annotations</p>
               */
              result: Error[];
            }
            /**
             * <p><p>Parameters of the <code>loaded</code> event</p></p>
             */
            export interface loadedParameters {
              /**
               * <p>An array of results and Errors (@see sap.ui.model.v2.ODataAnnotations#success and @see sap.ui.model.v2.ODataAnnotations#error) that occurred while loading a group of annotations</p>
               */
              result: sap.ui.model.odata.v2.ODataAnnotations.Source[] | Error[] | any;
            }
            /**
             * <p><p>An annotation source, containing either a URL to be loaded or an XML string to be parsed.</p></p>
             */
            export interface Source {
              /**
               * <p>The source type. Either "url" or "xml".</p>
               */
              type: string;
              /**
               * <p>Either the data or a Promise that resolves with the data string as argument. In case the type is set to "url" the data must be a URL, in case it is set to "xml" the data must be an XML string.</p>
               */
              data: string | Promise<any>;
              /**
               * <p>(Set internally, available in event-callback) The XML string of the annotation source</p>
               */
              xml: string;
              /**
               * <p>(Set internally, available in event-callback) The parsed XML document of the annotation source</p>
               */
              document: Document;
              /**
               * <p>(Set internally, available in event-callback) The parsed Annotations object of the annotation source</p>
               */
              annotations: { [key: string]: any };
            }
            /**
             * <p><p>Parameters of the <code>success</code> event</p></p>
             */
            export interface successParameters {
              /**
               * <p>The source type. Either "url" or "xml".</p>
               */
              result: sap.ui.model.odata.v2.ODataAnnotations.Source;
            }
          }
          /**
           * <p>The ContextBinding is a specific binding for a setting context for the model</p>
           */
          export abstract class ODataContextBinding extends sap.ui.model.ContextBinding {
            /**
             * <p>Constructor for odata.ODataContextBinding</p>
             * @param {sap.ui.model.Model} oModel undefined
             * @param {string} sPath undefined
             * @param {sap.ui.model.Context} oContext undefined
             * @param {{ [key: string]: any }} mParameters <p>A map which contains additional parameters for the binding.</p>
             */
            constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: { [key: string]: any });
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>References: <ul><li>sap.ui.model.ContextBinding.prototype.refresh</li></ul></p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             * @param {string} sGroupId <p>The group Id for the refresh</p>
             */
            refresh(bForceUpdate?: boolean, sGroupId?: string): void;
          }
          /**
           * <p>List binding implementation for OData format.</p>
           */
          export class ODataListBinding extends sap.ui.model.ListBinding {
            /**
             * @param {sap.ui.model.odata.v2.ODataModel} oModel <p>Model that this list binding belongs to</p>
             * @param {string} sPath <p>Path into the model data, relative to the given <code>oContext</code></p>
             * @param {sap.ui.model.Context} oContext <p>Context that the <code>sPath</code> is based on</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order, can be either a sorter or an array of sorters</p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filters, can be either a filter or an array of filters</p>
             * @param {{ [key: string]: any }} mParameters <p>A map which contains additional parameters for the binding</p>
             */
            constructor(oModel: sap.ui.model.odata.v2.ODataModel, sPath: string, oContext: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: { [key: string]: any });
            /**
             * <p>Applies a new set of filters to the list represented by this binding.</p><p>Depending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.</p><h4>Application and Control Filters</h4><p> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>By using the second parameter <code>sFilterType</code> of method <code>filter</code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.</p><h4>Auto-Grouping of Filters</h4><p> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.</p>
             * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
             * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation</p>
             * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
             */
            filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
            /**
             * <p>Filters the list.</p><p>When using <code>sap.ui.model.Filter</code> the filters are first grouped according to their binding path. All filters belonging to the same group are combined with OR and after that the results of all groups are combined with AND. Usually this means, all filters applied to a single table column are combined with OR, while filters on different table columns are combined with AND. Please note that a custom filter function is only supported with operation mode <code>sap.ui.model.odata.OperationMode.Client</code>.</p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Single filter or array of filter objects</p>
             * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted. If it is not given, the standard behaviour applies</p>
             * @param {boolean} bReturnSuccess <p>Whether the success indicator should be returned instead of <code>this</code></p>
             * @returns sap.ui.model.ListBinding <p>Reference to <code>this</code> to facilitate method chaining or a boolean success indicator</p>
             */
            filter(aFilters: sap.ui.model.Filter | sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType, bReturnSuccess?: boolean): sap.ui.model.ListBinding;
            /**
             * <p>Returns an array of binding contexts for the bound target list.</p><h4>Extended Change Detection</h4><p> If extended change detection is enabled using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/enableExtendedChangeDetection">sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection</a>, the context array may carry an additional property named <code>diff</code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()</code>. In case no <code>diff</code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff</code> property contains an empty array, there have been no changes on the list.</p><p>Sample diff array: <code>[{index: 1, type: "delete"}, {index: 4, type: "insert}]</code></p><p><strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getCurrentContexts">sap.ui.model.ListBinding.prototype.getCurrentContexts</a> instead.</p>
             * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
             * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
             * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
             */
            protected getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
            /**
             * <p>Return contexts for the list.</p>
             * @param {number} iStartIndex <p>The start index of the requested contexts</p>
             * @param {number} iLength <p>The requested amount of contexts</p>
             * @param {number} iThreshold <p>The threshold value</p>
             * @returns sap.ui.model.Context[] <p>The array of contexts for each row of the bound list</p>
             */
            protected getContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
            /**
             * <p>Get a download URL with the specified format considering the sort/filter/custom parameters.</p>
             * @param {string} sFormat <p>Value for the $format Parameter</p>
             * @returns string <p>URL which can be used for downloading</p>
             */
            getDownloadUrl(sFormat: string): string;
            /**
             * <p>Returns the number of entries in the list. This might be an estimated or preliminary length, in case the full length is not known yet, see method isLengthFinal().</p>
             * @returns number <p>returns the number of entries in the list</p>
             */
            getLength(): number;
            /**
             * <p>Return the length of the list.</p><p>In case the final length is unknown (e.g. when searching on a large dataset), this will return an estimated length.</p>
             * @returns number <p>The length</p>
             */
            getLength(): number;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             * @param {string} sGroupId <p>The group Id for the refresh</p>
             */
            refresh(bForceUpdate?: boolean, sGroupId?: string): void;
            /**
             * <p>Sorts the list according to the sorter object.</p><p>Instead of a single sorter also an array of sorters can be passed to the sort method. In this case they are processed in the sequence in which they are contained in the array.</p><h4>Grouping</h4><p> Sorting and grouping are closely related, in case a list should be grouped, it must be sorted by the property to group with. Grouping is enabled by setting the <code>group</code> property on the sorter object. If it is enabled, you can get the current group of an item using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getGroup">sap.ui.model.ListBinding.prototype.getGroup</a>. In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping is not supported.</p>
             * @param {sap.ui.model.Sorter | any[]} aSorters <p>the Sorter object or an array of sorters which defines the sort order</p>
             * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
             */
            sort(aSorters: sap.ui.model.Sorter | any[]): sap.ui.model.ListBinding;
            /**
             * <p>Sorts the list.</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>A new sorter or an array of sorters which define the sort order</p>
             * @param {boolean} bReturnSuccess <p>Whether the success indicator should be returned instead of <code>this</code></p>
             * @returns sap.ui.model.ListBinding <p>Reference to <code>this</code> to facilitate method chaining or the success indicator</p>
             */
            sort(aSorters: sap.ui.model.Sorter | sap.ui.model.Sorter[], bReturnSuccess?: boolean): sap.ui.model.ListBinding;
          }
          /**
           * <p>Model implementation based on the OData protocol.</p>
           */
          export class ODataModel extends sap.ui.model.Model {
            /**
             * <p>Constructor for a new ODataModel.</p>
             * @param {string | any} serviceUrl <p>Base URI of the service to request data from; additional URL parameters appended here will be appended to every request. If you pass an object it will be interpreted as the parameter object (second parameter). Then <code>mParameters.serviceUrl</code> becomes a mandatory parameter.</p>
             * @param {any} mParameters <p>Map which contains the following parameter properties:</p>
             */
            constructor(serviceUrl: string | any, mParameters?: any);
            /**
             * <p>Adds (a) new URL(s) whose content should be parsed as OData annotations, which are then merged into the annotations object which can be retrieved by calling the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getServiceAnnotations" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/getServiceAnnotations">#getServiceAnnotations</a>-method. If a <code>$metadata</code> URL is passed, the data will also be merged into the metadata object, which can be reached by calling the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getServiceMetadata" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/getServiceMetadata">#getServiceMetadata</a> method.</p>
             * @param {string | string[]} vUrl <p>Either one URL as string or an array of URL strings</p>
             * @returns Promise<any> <p>The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load. If this promise resolves it returns an object with the following properties: <code>annotations</code>: The annotation object <code>entitySets</code>: An array of EntitySet objects containing the newly merged EntitySets from a <code>$metadata</code> requests. The structure is the same as in the metadata object reached by the <code>getServiceMetadata()</code> method. For non-<code>$metadata</code> requests the array will be empty.</p>
             */
            protected addAnnotationUrl(vUrl: string | string[]): Promise<any>;
            /**
             * <p>Adds new XML content to be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getServiceAnnotations" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/getServiceAnnotations">#getServiceAnnotations</a>-method.</p>
             * @param {string} sXMLContent <p>The string that should be parsed as annotation XML</p>
             * @param {boolean} bSuppressEvents <p>Whether not to fire annotationsLoaded event on the annotationParser</p>
             * @returns Promise<any> <p>The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur</p>
             */
            protected addAnnotationXML(sXMLContent: string, bSuppressEvents?: boolean): Promise<any>;
            /**
             * <p>Returns a promise that resolves with an array containing information about the initially loaded annotations.</p><p><b>Important</b>: This covers the annotations that were given to the model constructor, not the ones that might have been added later on using the protected API method <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="addAnnotationUrl" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/addAnnotationUrl">#addAnnotationUrl</a>. In order to get information about those, the event <code>annotationsLoaded</code> can be used.</p>
             * @returns Promise<any> <p>A promise to load the annotation URLs that were given to the model on instantiation</p>
             */
            annotationsLoaded(): Promise<any>;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>annotationsFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachAnnotationsFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>annotationsLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachAnnotationsLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>batchRequestCompleted</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachBatchRequestCompleted(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>batchRequestFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, this Model is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachBatchRequestFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>requestSent</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachBatchRequestSent(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>metadataFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachMetadataFailed(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Attach event-handler <code>fnFunction</code> to the <code>metadataLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
             * @param {any} oListener <p>Object on which to call the given function. If empty, the global context (window) is used.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachMetadataLoaded(oData: any, fnFunction: Function, oListener?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Create ContextBinding</p>
             * @param {string | any} sPath <p>the path pointing to the property that should be bound or an object which contains the following parameter properties: path, context, parameters</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @param {any} oEvents <p>event handlers can be passed to the binding ({change:myHandler})</p>
             * @returns sap.ui.model.ContextBinding 
             */
            bindContext(sPath: string | any, oContext?: any, mParameters?: any, oEvents?: any): sap.ui.model.ContextBinding;
            /**
             * <p>Creates new context binding for this model.<br><br>References: <ul><li>sap.ui.model.Model.prototype.bindContext</li></ul></p>
             * @param {string} sPath <p>Resolved path</p>
             * @param {sap.ui.model.Context} oContext <p>Context object</p>
             * @param {{ [key: string]: any }} mParameters <p>Map of parameters</p>
             * @returns sap.ui.model.ContextBinding <p>The new context binding</p>
             */
            bindContext(sPath: string, oContext: sap.ui.model.Context, mParameters?: { [key: string]: any }): sap.ui.model.ContextBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the list / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {sap.ui.model.Sorter} aSorters <p>initial sort order (can be either a sorter or an array of sorters) (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s (can be either a filter or an array of filters) (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.ListBinding 
             */
            bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
            /**
             * <p>Creates a new list binding for this model.<br><br>References: <ul><li>sap.ui.model.Model.prototype.bindList</li></ul></p>
             * @param {string} sPath <p>Binding path, either absolute or relative to a given <code>oContext</code></p>
             * @param {sap.ui.model.Context} oContext <p>Binding context referring to this model</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order, can be either a sorter or an array of sorters</p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filters, can be either a filter or an array of filters</p>
             * @param {{ [key: string]: any }} mParameters <p>Map which contains additional parameters for the binding</p>
             * @returns sap.ui.model.ListBinding <p>The new list binding</p>
             */
            bindList(sPath: string, oContext?: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: { [key: string]: any }): sap.ui.model.ListBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the property that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.PropertyBinding 
             */
            bindProperty(sPath: string, oContext?: any, mParameters?: any): sap.ui.model.PropertyBinding;
            /**
             * <p>Creates a new property binding for this model.<br><br>References: <ul><li>sap.ui.model.Model.prototype.bindProperty</li></ul></p>
             * @param {string} sPath <p>Path pointing to the property that should be bound; either an absolute path or a path relative to a given <code>oContext</code></p>
             * @param {any} oContext <p>A context object for the new binding</p>
             * @param {{ [key: string]: any }} mParameters <p>Map of optional parameters for the binding; the ODataModel (v2) currently supports no additional parameters</p>
             * @returns sap.ui.model.PropertyBinding <p>The new property binding</p>
             */
            bindProperty(sPath: string, oContext?: any, mParameters?: { [key: string]: any }): sap.ui.model.PropertyBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the tree / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s contained in an array (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @param {any[]} aSorters <p>predefined sap.ui.model.sorter/s contained in an array (optional)</p>
             * @returns sap.ui.model.TreeBinding 
             */
            bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
            /**
             * <p>Creates a new tree binding for this model.<br><br>References: <ul><li>sap.ui.model.Model.prototype.bindTree</li></ul></p>
             * @param {string} sPath <p>Binding path, either absolute or relative to a given <code>oContext</code></p>
             * @param {sap.ui.model.Context} oContext <p>Binding context referring to this model</p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Predefined filters, can be either a filter or an array of filters</p>
             * @param {{ [key: string]: any }} mParameters <p>Map of parameters for the tree binding</p>
             * @param {sap.ui.model.Sorter[]} aSorters <p>An array of predefined sorters</p>
             * @returns sap.ui.model.TreeBinding <p>The new tree binding</p>
             */
            bindTree(sPath: string, oContext?: sap.ui.model.Context, aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: { [key: string]: any }, aSorters?: sap.ui.model.Sorter[]): sap.ui.model.TreeBinding;
            /**
             * <p>Trigger a request to the function import OData service that was specified in the model constructor.</p><p>If the return type of the function import is either an entity type or a collection of an entity type, then the changes are reflected in the model. Otherwise they are ignored, and the <code>response</code> can be processed in the <code>success</code> callback.</p>
             * @param {string} sFunctionName <p>A string containing the name of the function to call. The name is concatenated to the service URL which was specified in the model constructor.</p>
             * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
             * @returns any <p>An object which has a <code>contextCreated</code> function that returns a <code>Promise</code>. This resolves with the created <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Context">sap.ui.model.Context</a>. In addition it has an <code>abort</code> function to abort the current request.</p>
             */
            callFunction(sFunctionName: string, mParameters?: { [key: string]: any }): any;
            /**
             * <p>Check whether the canonical requests calculation is switched on. See 'canonicalRequests' parameter of the model constructor.</p>
             * @returns boolean <p>Canonical requests calculation switched on/off</p>
             */
            canonicalRequestsEnabled(): boolean;
            /**
             * <p>Trigger a <code>POST</code> request to the OData service that was specified in the model constructor.</p><p>Please note that deep creates are not supported and may not work.</p>
             * @param {string} sPath <p>A string containing the path to the collection where an entry should be created. The path is concatenated to the service URL which was specified in the model constructor.</p>
             * @param {any} oData <p>Data of the entry that should be created.</p>
             * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request.</p>
             */
            create(sPath: string, oData: any, mParameters?: { [key: string]: any }): any;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path to create the new context from</p>
             * @param {any} oContext <p>the context which should be used to create the new binding context</p>
             * @param {any} mParameters <p>the parameters used to create the new binding context</p>
             * @param {Function} fnCallBack <p>the function which should be called after the binding context has been created</p>
             * @param {boolean} bReload <p>force reload even if data is already available. For server side models this should refetch the data from the server</p>
             * @returns sap.ui.model.Context <p>the binding context, if it could be created synchronously</p>
             */
            createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: Function, bReload?: boolean): sap.ui.model.Context;
            /**
             * <p>Creates a binding context for the given path.</p><p>If the data of the context is not yet available, it can not be created, but first the entity needs to be fetched from the server asynchronously. In case no callback function is provided, the request will not be triggered.</p><p>If a callback function is given, the created binding context for a fetched entity is passed as argument to the given callback function.<br><br>References: <ul><li>sap.ui.model.Model.prototype.createBindingContext</li></ul></p>
             * @param {string} sPath <p>Binding path</p>
             * @param {any} oContext <p>Binding context</p>
             * @param {{ [key: string]: any }} mParameters <p>Map which contains additional parameters for the binding</p>
             * @param {Function} fnCallBack <p>Function to be called when context has been created. The parameter of the callback function is the newly created binding context.</p>
             * @param {boolean} bReload <p>Whether to reload data</p>
             * @returns sap.ui.model.Context <p>The created binding context, only if the data is already available and the binding context could be created synchronously</p>
             */
            createBindingContext(sPath: string, oContext?: any, mParameters?: { [key: string]: any }, fnCallBack?: Function, bReload?: boolean): sap.ui.model.Context;
            /**
             * <p>Creates a new entry object which is described by the metadata of the entity type of the specified <code>sPath</code> Name. A context object is returned which can be used to bind against the newly created object.</p><p>For each created entry a request is created and stored in a request queue. The request queue can be submitted by calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitChanges" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/submitChanges">#submitChanges</a>. To delete a created entry from the request queue call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="deleteCreatedEntry" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/deleteCreatedEntry">#deleteCreatedEntry</a>.</p><p>The optional parameter <code>mParameters.properties</code> can be used as follows: <ul> <li><code>properties</code> could be an array containing the property names which should be included in the new entry. Other properties defined in the entity type won't be included. </li> <li><code>properties</code> could be an object which includes the desired properties and the corresponding values which should be used for the created entry. </li> </ul> If <code>properties</code> is not specified, all properties in the entity type will be included in the created entry.</p><p>If there are no values specified, the properties will have <code>undefined</code> values.</p><p>Please note that deep creates (including data defined by navigation properties) are not supported.</p>
             * @param {string} sPath <p>Name of the path to the EntitySet</p>
             * @param {{ [key: string]: any }} mParameters <p>A map of the following parameters:</p>
             * @returns sap.ui.model.Context <p>A Context object that points to the new created entry.</p>
             */
            createEntry(sPath: string, mParameters: { [key: string]: any }): sap.ui.model.Context;
            /**
             * <p>Creates the key from the given collection name and property map.</p><p>Please make sure that the metadata document is loaded before using this function.</p>
             * @param {string} sCollection <p>Name of the collection</p>
             * @param {any} oKeyProperties <p>Object containing at least all the key properties of the entity type</p>
             * @returns string <p>Key of the entry</p>
             */
            createKey(sCollection: string, oKeyProperties: any): string;
            /**
             * <p>Deletes a created entry from the request queue and from the model.</p>
             * @param {sap.ui.model.Context} oContext <p>The context object pointing to the created entry</p>
             */
            deleteCreatedEntry(oContext: sap.ui.model.Context): void;
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys the MessageProcessor Instance</p>
             */
            destroy(): void;
            /**
             * <p>Destroys the model and clears the model data. A model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.<br><br>References: <ul><li>sap.ui.base.Object.prototype.destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>References: <ul><li>sap.ui.model.Model.prototype.destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>annotationsFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachAnnotationsFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>annotationsLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachAnnotationsLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>batchRequestCompleted</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachBatchRequestCompleted(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>batchRequestFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachBatchRequestFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>batchRequestSent</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachBatchRequestSent(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>metadataFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachMetadataFailed(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Detach event-handler <code>fnFunction</code> from the <code>metadataLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.</p><p>The passed function and listener object must match the ones previously used for event registration.</p>
             * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
             * @param {any} oListener <p>Object on which the given function had to be called.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachMetadataLoaded(fnFunction: Function, oListener: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>annotationsFailed</code> to attached listeners.</p>
             * @param {any} mArguments <p>The arguments to pass along with the event</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireAnnotationsFailed(mArguments?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>annotationsLoaded</code> to attached listeners.</p>
             * @param {any} mArguments <p>The arguments to pass along with the event</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireAnnotationsLoaded(mArguments?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>batchRequestCompleted</code> to attached listeners.</p>
             * @param {any} mArguments <p>parameters to add to the fired event</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireBatchRequestCompleted(mArguments: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>batchRequestFailed</code> to attached listeners.</p>
             * @param {any} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireBatchRequestFailed(mArguments: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>batchRequestSent</code> to attached listeners.</p>
             * @param {any} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireBatchRequestSent(mArguments: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>metadataFailed</code> to attached listeners.</p>
             * @param {any} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireMetadataFailed(mArguments?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Fire event <code>metadataLoaded</code> to attached listeners.</p>
             * @param {any} mArguments <p>the arguments to pass along with the event.</p>
             * @returns sap.ui.model.odata.v2.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            protected fireMetadataLoaded(mArguments?: any): sap.ui.model.odata.v2.ODataModel;
            /**
             * <p>Force the update on the server of an entity by setting its ETag to '*'.</p><p>ETag handling must be active so the force update will work.</p>
             * @param {string} sKey <p>The key to an Entity e.g.: Customer(4711)</p>
             */
            forceEntityUpdate(sKey: string): void;
            /**
             * <p>Returns the definition of groups per entity type for two-way binding changes</p>
             * @returns { [key: string]: any } <p>mChangeGroups Definition of groups for two-way binding changes</p>
             */
            getChangeGroups(): { [key: string]: any };
            /**
             * <p>Returns the default count mode for retrieving the count of collections</p>
             * @returns sap.ui.model.odata.CountMode <p>Returns the default count mode for this model</p>
             */
            getDefaultCountMode(): sap.ui.model.odata.CountMode;
            /**
             * <p>Returns the array of group IDs that are set as deferred.</p>
             * @returns any[] <p>aGroupIds The array of deferred group IDs</p>
             */
            getDeferredGroups(): any[];
            /**
             * <p>Returns the ETag for a given binding path/context or data object.</p>
             * @param {string} sPath <p>The binding path</p>
             * @param {sap.ui.model.Context} oContext <p>The binding context</p>
             * @param {any} oEntity <p>The entity data</p>
             * @returns string <p>The found ETag (or <code>null</code> if none could be found)</p>
             */
            getETag(sPath?: string, oContext?: sap.ui.model.Context, oEntity?: any): string;
            /**
             * <p>Returns all headers and custom headers which are stored in this OData model.</p>
             * @returns any <p>The header map</p>
             */
            getHeaders(): any;
            /**
             * <p>Returns the key part for the given the canonical entry URI, model context or data object or <code>undefined</code> when the <code>vValue</code> can't be interpreted.</p>
             * @param {string | any | sap.ui.model.Context} vValue <p>The canonical entry URI, the context or entry object</p>
             * @returns string <p>Key of the entry or <code>undefined</code></p>
             */
            getKey(vValue: string | any | sap.ui.model.Context): string;
            /**
             * <p>Returns the meta model associated with this model if it is available for the concrete model type.</p>
             * @returns sap.ui.model.MetaModel <p>The meta model or undefined if no meta model exists.</p>
             */
            getMetaModel(): sap.ui.model.MetaModel;
            /**
             * <p>Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetadata">sap.ui.model.odata.ODataMetadata</a> as a foundation and merges V4 annotations from the existing <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v2.ODataAnnotations">sap.ui.model.odata.v2.ODataAnnotations</a> directly into the corresponding model element.</p><p><b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.ODataMetaModel/methods/loaded">loaded</a> has been resolved!</p>
             * @returns sap.ui.model.odata.ODataMetaModel <p>The meta model for this <code>ODataModel</code></p>
             */
            getMetaModel(): sap.ui.model.odata.ODataMetaModel;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path to where to read the object</p>
             * @param {any} oContext <p>the context with which the path should be resolved</p>
             * @param {any} mParameters <p>additional model specific parameters</p>
             */
            getObject(sPath: string, oContext?: any, mParameters?: any): any;
            /**
             * <p>Returns the JSON object for an entity with the given <code>sPath</code> and optional <code>oContext</code>.</p><p>With the <code>mParameters.select</code> parameter it is possible to specify comma-separated property or navigation property names which should be included in the result object. This works like the OData <code>$select</code> parameter. With the <code>mParameters.expand</code> parameter it is possible to specify comma-separated navigation property names which should be included inline in the result object. This works like the OData <code>$expand</code> parameter.</p><p>This method will return a copy and not a reference of the entity. It does not load any data and may not return all requested data if it is not available/loaded. If select entries are contained in the parameters and not all selected properties are available, this method will return <code>undefined</code> instead of incomplete data. If no select entries are defined, all properties available on the client will be returned.</p><p>Example:<br> <code>{select: "Products/ProductName, Products", expand:"Products"}</code> will return no properties of the entity itself, but only the ProductName property of the Products navigation property. If Products/ProductName has not been loaded before, so is not available on the client, it will return <code>undefined</code>.</p><p>Note:<br> If <code>mParameters.select<code> is not specified, the returned object could contain model-internal attributes. This may lead to problems when submitting this data to the service for an update/create operation. To get a copy of the entity without containing such internal attributes, use <code>{select: "*"}</code> instead.</p>
             * @param {string} sPath <p>Path referencing the object</p>
             * @param {any} oContext <p>Context the path should be resolved with, in case it is relative</p>
             * @param {{ [key: string]: any }} mParameters <p>Map of parameters</p>
             * @returns any <p>The value for the given path/context or <code>undefined</code> if data or entity type could not be found or was incomplete</p>
             */
            getObject(sPath: string, oContext?: any, mParameters?: { [key: string]: any }): any;
            /**
             * <p>Returns the original value for the property with the given path and context. The original value is the value that was last responded by a server if using a server model implementation.</p>
             * @param {string} sPath <p>the path/name of the property</p>
             * @param {any} oContext <p>the context if available to access the property value</p>
             * @returns any <p>vValue the value of the property</p>
             */
            getOriginalProperty(sPath: string, oContext?: any): any;
            /**
             * <p>Returns the original value for the property with the given path and context. The original value is the value that was last responded by the server.</p>
             * @param {string} sPath <p>The path/name of the property</p>
             * @param {any} oContext <p>The context if available to access the property value</p>
             * @returns any <p>the value of the property</p>
             */
            getOriginalProperty(sPath: string, oContext?: any): any;
            /**
             * <p>Returns the changed properties of all changed entities in a map which are still pending. The key is the string name of the entity and the value is an object which contains the changed properties.</p><p>In contrast to the two related functions <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/hasPendingChanges">#hasPendingChanges</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resetChanges" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/resetChanges">#resetChanges</a>, only client data changes are supported.</p>
             * @returns { [key: string]: any } <p>the pending changes in a map</p>
             */
            getPendingChanges(): { [key: string]: any };
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path to where to read the attribute value</p>
             * @param {any} oContext <p>the context with which the path should be resolved</p>
             */
            getProperty(sPath: string, oContext?: any): any;
            /**
             * <p>Returns the value for the property with the given <code>sPath</code>.</p><p>If the path points to a navigation property which has been loaded via <code>$expand</code> then the <code>bIncludeExpandEntries</code> parameter determines if the navigation property should be included in the returned value or not. Please note that this currently works for 1..1 navigation properties only.</p>
             * @param {string} sPath <p>Path/name of the property</p>
             * @param {any} oContext <p>Context if available to access the property value</p>
             * @param {boolean} bIncludeExpandEntries <p>@deprecated Please use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getObject" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/getObject">#getObject</a> function with select/expand parameters instead. This parameter should be set when a URI or custom parameter with a <code>$expand</code> system query option was used to retrieve associated entries embedded/inline. If true then the <code>getProperty</code> function returns a desired property value/entry and includes the associated expand entries (if any). Note: A copy and not a reference of the entry will be returned.</p>
             * @returns any <p>Value of the property</p>
             */
            getProperty(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
            /**
             * @returns boolean <p>bRefreshAfterChange Whether to automatically refresh after changes</p>
             */
            getRefreshAfterChange(): boolean;
            /**
             * <p>Returns the current security token.</p><p>If the token has not been requested from the server it will be requested first (synchronously).</p>
             * @returns string <p>The CSRF security token</p>
             */
            getSecurityToken(): string;
            /**
             * <p>Return the annotation object. Please note that the metadata is loaded asynchronously and this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.</p>
             * @returns any <p>Metadata object</p>
             */
            getServiceAnnotations(): any;
            /**
             * <p>Return the parsed XML metadata as a Javascript object.</p><p>Please note that the metadata is loaded asynchronously and this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.</p>
             * @returns any <p>Metadata object</p>
             */
            getServiceMetadata(): any;
            /**
             * <p>Checks if there exist pending changes in the model.</p><p>By default, only client data changes triggered through: <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createEntry" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/createEntry">#createEntry</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setProperty" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/setProperty">#setProperty</a> are taken into account.</p><p>If <code>bAll</code> is set to <code>true</code>, also deferred requests triggered through: <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="create" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/create">#create</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="update" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/update">#update</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="remove" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/remove">#remove</a> are taken into account.</p>
             * @param {boolean} bAll <p>If set to true, deferred requests are also taken into account.</p>
             * @returns boolean <p><code>true</code> if there are pending changes, <code>false</code> otherwise.</p>
             */
            hasPendingChanges(bAll?: boolean): boolean;
            /**
             * <p>Checks if there are pending requests, either ongoing or sequential.</p>
             * @returns boolean <p>Whether there are pending requests</p>
             */
            hasPendingRequests(): boolean;
            /**
             * <p>Invalidate the model data.</p><p>Mark all entries in the model cache as invalid. Next time a context or list is bound (binding), the respective entries will be detected as invalid and will be refreshed from the server.</p><p>To refresh all model data use @link sap.ui.model.odata.v2.ODatamModel#refresh</p>
             * @param {Function} fnCheckEntry <p>A function which can be used to restrict invalidation to specific entries, gets the entity key and object as parameters and should return true for entities to invalidate.</p>
             */
            invalidate(fnCheckEntry?: Function): void;
            /**
             * <p>Invalidate all entries of the given entity type in the model data.</p><p>Mark entries of the provided entity type in the model cache as invalid. Next time a context binding or list binding is done, the entry will be detected as invalid and will be refreshed from the server.</p>
             * @param {string} sEntityType <p>the qualified name of the entity type</p>
             */
            invalidateEntityType(sEntityType: string): void;
            /**
             * <p>Invalidate a single entry in the model data.</p><p>Mark the selected entry in the model cache as invalid. Next time a context binding or list binding is done, the entry will be detected as invalid and will be refreshed from the server.</p>
             * @param {string | sap.ui.model.Context} vEntry <p>the reference to the entry, either by key, absolute path or context object</p>
             */
            invalidateEntry(vEntry: string | sap.ui.model.Context): void;
            /**
             * <p>Checks whether metadata loading has failed in the past.</p>
             * @returns boolean <p>Whether metadata request has failed</p>
             */
            isMetadataLoadingFailed(): boolean;
            /**
             * <p>Returns a promise for the loaded state of the metadata.</p><p>The promise won't get rejected in case the metadata loading failed but is only resolved if the metadata is loaded successfully. If <code>refreshMetadata</code> function is called after this promise is already resolved you should rely on the promise returned by <code>refreshMetadata</code> to get information about the refreshed metadata loaded state.</p><p>The Metadata needs to be loaded prior to performing OData calls. Chaining to the returned promise ensures that all required parameters have been loaded, e.g. authentication token.</p>
             * @returns Promise<any> <p>A promise on metadata loaded state</p>
             */
            metadataLoaded(): Promise<any>;
            /**
             * <p>Trigger a <code>GET</code> request to the OData service that was specified in the model constructor.</p><p>The data will be stored in the model. The requested data is returned with the response.</p>
             * @param {string} sPath <p>A string containing the path to the data which should be retrieved. The path is concatenated to the service URL which was specified in the model constructor.</p>
             * @param {{ [key: string]: any }} mParameters <p>Optional parameter map containing any of the following properties:</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request.</p>
             */
            read(sPath: string, mParameters?: { [key: string]: any }): any;
            /**
             * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
             * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refresh the model.</p><p>This will reload all data stored in the model. This will check all bindings for updated data and update the controls if data has been changed.</p><p>Note: In contrast to an individual Binding refresh, the model refresh ignores Binding-specific parameters/queries.</p>
             * @param {boolean} bForceUpdate <p>Force update of controls</p>
             * @param {boolean} bRemoveData <p>If set to <code>true</code> then the model data will be removed/cleared. Please note that the data might not be there when calling e.g. <code>getProperty</code> too early before the refresh call returned.</p>
             * @param {string} sGroupId <p>ID of a request group; requests belonging to the same group will be bundled in one batch request</p>
             */
            refresh(bForceUpdate?: boolean, bRemoveData?: boolean, sGroupId?: string): void;
            /**
             * <p>Refresh XSRF token by performing a GET request against the service root URL.</p>
             * @param {Function} fnSuccess <p>Callback function which is called when the data has been successfully retrieved.</p>
             * @param {Function} fnError <p>Callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information.</p>
             * @param {boolean} bAsync <p>Whether the request should be sent asynchronously</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request.</p>
             */
            refreshSecurityToken(fnSuccess?: Function, fnError?: Function, bAsync?: boolean): any;
            /**
             * <p>Trigger a <code>DELETE</code> request to the OData service that was specified in the model constructor.</p>
             * @param {string} sPath <p>A string containing the path to the data that should be removed. The path is concatenated to the service URL which was specified in the model constructor.</p>
             * @param {any} mParameters <p>Optional, can contain the following attributes:</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request.</p>
             */
            remove(sPath: string, mParameters?: any): any;
            /**
             * <p>Resets changes that have been collected.</p><p>By default, only client data changes triggered through: <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createEntry" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/createEntry">#createEntry</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setProperty" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/setProperty">#setProperty</a> are taken into account.</p><p>If <code>bAll</code> is set to <code>true</code>, also deferred requests triggered through: <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="create" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/create">#create</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="update" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/update">#update</a> <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="remove" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/remove">#remove</a> are taken into account.</p>
             * @param {any[]} aPath <p>Array of paths that should be reset. If no array is passed, all changes will be reset.</p>
             * @param {boolean} bAll <p>If set to true, also deferred requests are taken into account.</p>
             * @returns Promise<any> <p>Resolves when all regarded changes have been reseted.</p>
             */
            resetChanges(aPath?: any[], bAll?: boolean): Promise<any>;
            /**
             * <p>Returns a promise, which will resolve with the security token as soon as it is available.</p>
             * @returns Promise<any> <p>A promise on the CSRF security token</p>
             */
            securityTokenAvailable(): Promise<any>;
            /**
             * <p>Definition of groups per entity type for two-way binding changes.</p>
             * @param {{ [key: string]: any }} mGroups <p>A map containing the definition of batch groups for two-way binding changes. The map has the following format: <pre>
            {
              "EntityTypeName": {
                groupId: "ID",
                [changeSetId: "ID",]
                [single: true/false,]
              }
            }
            </pre> <ul> <li><code>groupId</code>: Defines the group for changes of the defined <i>EntityTypeName</i></li> <li><code>changeSetId</code>: ID of a <code>ChangeSet</code> which bundles the changes for the entity type.</li> <li><code>single</code>: Defines if every change will get an own change set (defaults to <code>true</code>)</li> </ul></p>
             */
            setChangeGroups(mGroups: { [key: string]: any }): void;
            /**
             * <p>Sets the default mode how to retrieve the item count for a collection in this model.</p><p>The count can be determined in the following ways <ul> <li>by sending a separate <code>$count</code> request</li> <li>by adding parameter <code>$inlinecount=allpages</code> to one or all data requests</li> <li>a combination of the previous two</li> <li>not at all (questions about the size of the collection can't be answered then)</li> </ul> See <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.CountMode">sap.ui.model.odata.CountMode</a> for all enumeration values and more details.</p><p>Note that a call to this method does not modify the count mode for existing list bindings, only bindings that are created afterwards will use the new mode when no mode is defined at their creation.</p><p>If no default count mode is set for an <code>ODataModel</code> (v2), the mode <code>Request</code> will be used.</p>
             * @param {sap.ui.model.odata.CountMode} sCountMode <p>The new default count mode for this model</p>
             */
            setDefaultCountMode(sCountMode: sap.ui.model.odata.CountMode): void;
            /**
             * <p>Setting request groups as deferred.</p><p>Requests that belong to a deferred group will be sent by explicitly calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitChanges" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/submitChanges">#submitChanges</a>.</p>
             * @param {any[]} aGroupIds <p>Array of group IDs that should be set as deferred</p>
             */
            setDeferredGroups(aGroupIds: any[]): void;
            /**
             * <p>Set custom headers which are provided in a key/value map.</p><p>These headers are used for requests against the OData backend. Private headers which are set in the ODataModel cannot be modified. These private headers are: <code>accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion</code>.</p><p>To remove these custom headers simply set the <code>mCustomHeaders</code> parameter to null. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the <code>mCustomHeaders</code> parameter.</p>
             * @param {any} mHeaders <p>The header name/value map.</p>
             */
            setHeaders(mHeaders: any): void;
            /**
             * <p>Sets a new value for the given property <code>sPath</code> in the model.</p><p>If the <code>changeBatchGroup</code> for the changed entity type is set to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setDeferredGroups" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/setDeferredGroups">deferred</a>, changes could be submitted with <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitChanges" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/submitChanges">#submitChanges</a>. Otherwise the change will be submitted directly.</p>
             * @param {string} sPath <p>Path of the property to set</p>
             * @param {any} oValue <p>Value to set the property to</p>
             * @param {sap.ui.model.Context} oContext <p>The context which will be used to set the property</p>
             * @param {boolean} bAsyncUpdate <p>Whether to update other bindings dependent on this property asynchronously</p>
             * @returns boolean <p><code>true</code> if the value was set correctly and <code>false</code> if errors occurred like the entry was not found or another entry was already updated.</p>
             */
            setProperty(sPath: string, oValue: any, oContext?: sap.ui.model.Context, bAsyncUpdate?: boolean): boolean;
            /**
             * <p>Defines whether all bindings are updated after a change operation.</p><p>This flag can be overruled on request level by providing the <code>refreshAfterChange</code> parameter to the corresponding function (for example <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="update" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/update">#update</a>).</p>
             * @param {boolean} bRefreshAfterChange <p>Whether to automatically refresh after changes</p>
             */
            setRefreshAfterChange(bRefreshAfterChange: boolean): void;
            /**
             * <p>Enable/Disable XCSRF-Token handling.</p>
             * @param {boolean} bTokenHandling <p>Whether to use token handling or not</p>
             */
            setTokenHandlingEnabled(bTokenHandling?: boolean): void;
            /**
             * <p>Enable or disable batch mode for future requests.</p>
             * @param {boolean} bUseBatch <p>Whether the requests should be encapsulated in a batch request</p>
             */
            setUseBatch(bUseBatch?: boolean): void;
            /**
             * <p>Submits the collected changes which were collected by the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setProperty" href="#/api/sap.ui.model.odata.v2.ODataModel/methods/setProperty">#setProperty</a> method.</p><p>The update method is defined by the global <code>defaultUpdateMethod</code> parameter which is <code>sap.ui.model.odata.UpdateMethod.Merge</code> by default. In case of a <code>sap.ui.model.odata.UpdateMethod.Merge</code> request only the changed properties will be updated. If a URI with a <code>$expand</code> query option was used then the expand entries will be removed from the collected changes. Changes to this entries should be done on the entry itself. So no deep updates are supported.</p><p><b>Important</b>: The success/error handler will only be called if batch support is enabled. If multiple batch groups are submitted the handlers will be called for every batch group.</p>
             * @param {any} mParameters <p>A map which contains the following parameter properties:</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request or requests</p>
             */
            submitChanges(mParameters?: any): any;
            /**
             * <p>Trigger a <code>PUT/MERGE</code> request to the OData service that was specified in the model constructor.</p><p>The update method used is defined by the global <code>defaultUpdateMethod</code> parameter which is <code>sap.ui.model.odata.UpdateMethod.Merge</code> by default. Please note that deep updates are not supported and may not work. These should be done separately and directly on the corresponding entry.</p>
             * @param {string} sPath <p>A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl which was specified in the model constructor.</p>
             * @param {any} oData <p>Data of the entry that should be updated.</p>
             * @param {{ [key: string]: any }} mParameters <p>Optional, can contain the following attributes:</p>
             * @returns any <p>An object which has an <code>abort</code> function to abort the current request.</p>
             */
            update(sPath: string, oData: any, mParameters?: { [key: string]: any }): any;
            /**
             * <p>Update all bindings.</p>
             * @param {boolean} bForceUpdate <p>If set to <code>false</code>, an update will only be done when the value of a binding changed.</p>
             */
            updateBindings(bForceUpdate?: boolean): void;
          }
          /**
           * <p>Tree binding implementation for OData models.</p><h3>Hierarchy Annotations</h3><p> To use the v2.ODataTreeBinding with an OData service which exposes hierarchy annotations, see the <b>"SAP Annotations for OData Version 2.0"</b> specification. The required property annotations as well as accepted/default values are documented in this specification.</p><p>Services which include the <code>hierarchy-node-descendant-count-for</code> annotation and expose the data points sorted in a depth-first, pre-order manner, can use an optimized auto-expand feature by specifying the <code>numberOfExpandedLevels</code> in the binding parameters. This will pre-expand the hierarchy to the given number of levels, with only a single initial OData request.</p><p>For services without the <code>hierarchy-node-descendant-count-for</code> annotation, the <code>numberOfExpandedLevels</code> property is not supported and deprecated.</p><h3>Navigation Properties</h3><p> <b>Note:</b> The use of navigation properties to build up the hierarchy structure is deprecated and it is recommended to use the hierarchy annotations mentioned above instead.</p><p>In addition to the hierarchy annotations, the <code>ODataTreeBinding</code> also supports (cyclic) references between entities based on navigation properties. They have to be specified with the binding parameter <code>navigation</code>. The value for that parameter has to be structured as a map object where the keys are entity names and the values are names of navigation properties.</p><p>Example: <pre>
            oTree.bindItems({
          
              path: "Employees",
              template: ...
          
               parameters: {
                navigation: {
                  "Employees": "toColleagues"
                }
              }
            });
          </pre></p><h3>Operation Modes</h3><p> For a full definition and explanation of all OData binding operation modes see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.OperationMode">sap.ui.model.odata.OperationMode</a>.</p><h4>OperationMode.Server</h4><p> Filtering on the <code>ODataTreeBinding</code> is only supported with (<a target="_self" class="jsdoclink" href="#/api/sap.ui.model.FilterType.Application">application filters</a>). However please be aware that this applies only to filters which do not prevent the creation of a hierarchy. So filtering on a property (e.g. a "Customer") is fine, as long as the application can ensure that the responses from the backend are sufficient to create a valid hierarchy on the client. Subsequent paging requests for sibling and child nodes must also return responses since the filters will be sent with every request. Using control-defined filters (<a target="_self" class="jsdoclink" href="#/api/sap.ui.model.FilterType.Control">FilterType.Control</a>) via the <code>filter()</code> function is not supported for the operation mode <code>Server</code>.</p><h4>OperationMode.Client and OperationMode.Auto</h4><p> The ODataTreeBinding supports control-defined filters only in operation modes <code>Client</code> and <code>Auto</code>. In these operation modes, the filters and sorters will be applied on the client, like for the <code>v2.ODataListBinding</code>.</p><p>The operation modes <code>Client</code> and <code>Auto</code> are only supported for services which expose the hierarchy annotations mentioned above, but do <b>not</b> expose the <code>hierarchy-node-descendant-count-for</code> annotation. Services with hierarchy annotations including the <code>hierarchy-node-descendant-count-for</code> annotation, do <b>not</b> support the operation modes <code>Client</code> and <code>Auto</code>.<br><br><span>Documentation links:</span><ul><li><a target="_blank" href="https://wiki.scn.sap.com/wiki/display/EmTech/SAP+Annotations+for+OData+Version+2.0">"SAP Annotations for OData Version 2.0" Specification</a>
          <img src="./resources/sap/ui/documentation/sdk/images/link-sap.png"
          title="Information published on SAP site" class="sapUISDKExternalLink"/></li></ul></p>
           */
          export class ODataTreeBinding extends sap.ui.model.TreeBinding {
            /**
             * @param {sap.ui.model.Model} oModel undefined
             * @param {string} sPath undefined
             * @param {sap.ui.model.Context} oContext undefined
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aApplicationFilters <p>Predefined filter/s (can be either a filter or an array of filters). All these filters will be sent with every request. Filtering on the <code>ODataTreeBinding</code> is only supported with initial filters.</p>
             * @param {any} mParameters <p>Parameter Object</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Predefined sorters, can be either a sorter or an array of sorters</p>
             */
            constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aApplicationFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[]);
            /**
             * <p>Expand a nodes subtree to a given level.</p><p>This API is only supported in <code>OperationMode.Server</code> and if the OData service implements the full specification of the "hierarchy-node-for" annotation.</p>
             * @param {number} iIndex <p>Absolute row index</p>
             * @param {number} iLevel <p>Level to which the data should be expanded</p>
             * @param {boolean} bSuppressChange <p>If set to true, no change event will be fired</p>
             * @returns Promise<any> <p>A promise resolving once the expansion process has been completed</p>
             */
            expandNodeToLevel(iIndex: number, iLevel: number, bSuppressChange: boolean): Promise<any>;
            /**
             * <p>Filters the tree according to the filter definitions.</p>
             * @param {sap.ui.model.Filter[]} aFilters <p>Array of sap.ui.model.Filter objects</p>
             * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted, if it is not given, the standard behaviour applies</p>
             */
            filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): void;
            /**
             * <p>Applies the given filters to the ODataTreeBinding.</p><p>Please note that filters of type <code>FilterType.Control</code> are not supported for <code>OperationMode.Server</code>, here only filters of type <code>FilterType.Application</code> are allowed. Filters given via the constructor are always of type <code>Application</code> and will be sent with every backend request. See the constructor documentation for more information.</p><p>Since 1.34.0, complete client-side filtering is supported for <code>OperationMode.Client</code> and also in <code>OperationMode.Auto</code> if the backend count is lower than the threshold. In this case, all types of filters will be applied on the client. See also: <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.OperationMode.Auto">sap.ui.model.odata.OperationMode.Auto</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.FilterType">sap.ui.model.FilterType</a>.</p><p>For the <code>OperationMode.Client</code> and <code>OperationMode.Auto</code>, you may also specify the binding parameter <code>useServersideApplicationFilters</code> in the constructor. If it is set, the filters of type <code>Application</code> will always be applied on the backend and trigger an OData request. See the constructor documentation for more information.<br><br>References: <ul><li>sap.ui.model.TreeBinding.prototype.filter</li></ul></p>
             * @param {sap.ui.model.Filter[] | sap.ui.model.Filter} aFilters <p>Filter or array of filters to apply</p>
             * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted. If it is not given, the type <code>FilterType.Control</code> is assumed</p>
             * @returns sap.ui.model.odata.v2.ODataTreeBinding <p>Returns <code>this</code> to facilitate method chaining</p>
             */
            filter(aFilters: sap.ui.model.Filter[] | sap.ui.model.Filter, sFilterType: sap.ui.model.FilterType): sap.ui.model.odata.v2.ODataTreeBinding;
            /**
             * <p>Returns the number of child nodes of a specific context</p>
             * @param {any} oContext <p>the context element of the node</p>
             * @returns number <p>the number of children</p>
             */
            getChildCount(oContext: any): number;
            /**
             * <p>Returns the number of child nodes. This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.</p>
             * @param {any} oContext <p>the context element of the node</p>
             * @returns number <p>the number of children</p>
             */
            getChildCount(oContext: any): number;
            /**
             * <p>Get a download URL with the specified format considering the sort/filter/custom parameters.</p>
             * @param {string} sFormat <p>Value for the $format Parameter</p>
             * @returns string <p>URL which can be used for downloading</p>
             */
            getDownloadUrl(sFormat: string): string;
            /**
             * <p>Returns the current value of the bound target</p>
             * @param {any} oContext <p>the context element of the node</p>
             * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
             * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
             * @returns any[] <p>the array of child contexts for the given node</p>
             */
            getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
            /**
             * <p>Returns the contexts of the child nodes for the given context. This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.</p>
             * @param {sap.ui.model.Context} oContext <p>the context for which the child nodes should be retrieved</p>
             * @param {number} iStartIndex <p>the start index of the requested contexts</p>
             * @param {number} iLength <p>the requested amount of contexts</p>
             * @param {number} iThreshold 
             * @returns sap.ui.model.Context[] <p>the contexts array</p>
             */
            getNodeContexts(oContext: sap.ui.model.Context, iStartIndex: number, iLength: number, iThreshold: number): sap.ui.model.Context[];
            /**
             * <p>Returns the current value of the bound target</p>
             * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
             * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
             * @returns any[] <p>the array of child contexts for the root node</p>
             */
            getRootContexts(iStartIndex: number, iLength: number): any[];
            /**
             * <p>Returns root contexts for the tree. You can specify the start index and the length for paging requests. This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.</p>
             * @param {number} iStartIndex <p>the start index of the requested contexts</p>
             * @param {number} iLength <p>the requested amount of contexts. If none given, the default value is the size limit of the underlying sap.ui.model.odata.v2.ODataModel instance.</p>
             * @param {number} iThreshold <p>the number of entities which should be retrieved in addition to the given length. A higher threshold reduces the number of backend requests, yet these request blow up in size, since more data is loaded.</p>
             * @returns sap.ui.model.Context[] <p>an array containing the contexts for the entities returned by the backend, might be fewer than requested if the backend does not have enough data.</p>
             */
            getRootContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
            /**
             * <p>Returns the rootLevel</p>
             * @returns number 
             */
            getRootLevel(): number;
            /**
             * <p>Returns if the node has child nodes</p>
             * @param {any} oContext <p>the context element of the node</p>
             * @returns boolean <p>true if node has children</p>
             */
            hasChildren(oContext: any): boolean;
            /**
             * <p>Returns if the node has child nodes. If the ODataTreeBinding is running with hierarchy annotations, a context with the property values "expanded" or "collapsed" for the drilldown state property, returns true. Entities with drilldown state "leaf" return false.</p><p>This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.</p>
             * @param {sap.ui.model.Context} oContext <p>the context element of the node</p>
             * @returns boolean <p>true if node has children</p>
             */
            hasChildren(oContext: sap.ui.model.Context): boolean;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             * @param {string} sGroupId <p>The group Id for the refresh</p>
             */
            refresh(bForceUpdate?: boolean, sGroupId?: string): void;
            /**
             * <p>Sets the rootLevel The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services. This is only possible (and necessary) for OData services implementing the hierarchy annotation specification, or when providing the annotation information locally as a binding parameter. See the constructor for API documentation on this.</p>
             * @param {number} iRootLevel 
             */
            setRootLevel(iRootLevel: number): void;
            /**
             * <p>Sorts the tree according to the sorter definitions.</p>
             * @param {sap.ui.model.Sorter[]} aSorters <p>Array of sap.ui.model.Sorter objects</p>
             */
            sort(aSorters: sap.ui.model.Sorter[]): void;
            /**
             * <p>Sorts the Tree according to the given Sorter(s). In OperationMode.Client or OperationMode.Auto (if the given threshold is satisfied), the sorters are applied locally on the client.</p>
             * @param {sap.ui.model.Sorter[] | sap.ui.model.Sorter} aSorters <p>the Sorter or an Array of sap.ui.model.Sorter instances</p>
             * @returns sap.ui.model.odata.v2.ODataTreeBinding <p>returns <code>this</code> to facilitate method chaining</p>
             */
            sort(aSorters: sap.ui.model.Sorter[] | sap.ui.model.Sorter): sap.ui.model.odata.v2.ODataTreeBinding;
          }
        }
        /**
         * <p><p>Model and related classes like bindings for OData V4.</p></p>
         */
        namespace v4 {
          /**
           * <p><p>A collection of methods which help to consume <a href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html"> OData V4 annotations</a> in XML template views. Every context argument must belong to a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel">sap.ui.model.odata.v4.ODataMetaModel</a> instance.</p></p>
           */
          namespace AnnotationHelper {
            /**
             * <p>A function that helps to interpret OData V4 annotations. It knows about the following expressions: <ul> <li>"14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int", "edm:TimeOfDay". <li>constant "14.4.11 Expression edm:String": This is turned into a fixed text (e.g. <code>"Width"</code>). String constants that contain a simple binding <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li>dynamic "14.5.1 Comparison and Logical Operators": These are turned into expression bindings to perform the operations at runtime. <li>dynamic "14.5.3 Expression edm:Apply": <ul> <li>"14.5.3.1.1 Function odata.concat": This is turned into a data binding expression relative to an entity. <li>"14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an expression binding to fill the template at runtime. <li>"14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding to encode the parameter at runtime. <li>Apply functions may be nested arbitrarily. </ul> <li>dynamic "14.5.6 Expression edm:If": This is turned into an expression binding to be evaluated at runtime. The expression is a conditional expression like <code>"{=condition ? expression1 : expression2}"</code>. <li>dynamic "14.5.10 Expression edm:Null": This is turned into a <code>null</code> value. It is ignored in <code>odata.concat</code>. <li>dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath": This is turned into a data binding relative to an entity, including type information and constraints as available from metadata, e.g. <code>"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'255'}}"</code>. Depending on the used type, some additional constraints of this type are set: <ul> <li>Edm.DateTime: The "displayFormat" constraint is set to the value of the "sap:display-format" annotation of the referenced property. <li>Edm.Decimal: The "precision" and "scale" constraints are set to the values of the corresponding attributes of the referenced property. The "minimum", "maximum", "minimumExclusive" and "maximumExlusive" constraints are set to the values of the corresponding "Org.OData.Validation.V1" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <li>Edm.String: The "maxLength" constraint is set to the value of the corresponding attribute of the referenced property, and the "isDigitSequence" constraint is set to the value of the "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. </ul> </ul></p><p>If <code>oDetails.context.getPath()</code> contains a single "$AnnotationPath" or "$Path" segment, the value corresponding to that segment is considered as a data binding path prefix whenever a dynamic "14.5.12 Expression edm:Path" or "14.5.13 Expression edm:PropertyPath" is turned into a data binding. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.v4.AnnotationHelper.resolve%24Path" href="#/api/sap.ui.model.odata.v4.AnnotationHelper/methods/sap.ui.model.odata.v4.AnnotationHelper.resolve%24Path">sap.ui.model.odata.v4.AnnotationHelper.resolve$Path</a> to avoid these prefixes in cases where they are not applicable.</p><p>Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. Proper escaping is used to make sure that data binding syntax is not corrupted. In such a case, an error describing the problem is logged to the console.</p><p>Example: <pre>
            &lt;Text text="{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
            </pre></p><p>Example for "$Path" in the context's path: <pre>
            &lt;Annotations Target="com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT">
              &lt;Annotation Term="com.sap.vocabularies.UI.v1.LineItem">
                &lt;Collection>
                  &lt;Record Type="com.sap.vocabularies.UI.v1.DataField">
                    &lt;PropertyValue Property="Value" Path="EQUIPMENT_2_PRODUCT/Name" />
                  &lt;/Record>
                &lt;/Collection>
              &lt;/Annotation>
            &lt;/Annotations>
            &lt;Annotations Target="com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product/Name">
              &lt;Annotation Term="com.sap.vocabularies.Common.v1.QuickInfo" Path="PRODUCT_2_SUPPLIER/Supplier_Name" />
            &lt;/Annotations>
            </pre> <pre>
            &lt;Text text="{meta>/Equipments/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path@com.sap.vocabularies.Common.v1.QuickInfo@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
            </pre> <code>format</code> returns a binding with path "EQUIPMENT_2_PRODUCT/PRODUCT_2_SUPPLIER/Supplier_Name".</p><p>Example for "$AnnotationPath" in the context's path: <pre>
            &lt;Annotations Target="com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT">
              &lt;Annotation Term="com.sap.vocabularies.UI.v1.Facets">
                &lt;Collection>
                  &lt;Record Type="com.sap.vocabularies.UI.v1.ReferenceFacet">
                    &lt;PropertyValue Property="Target" AnnotationPath="EQUIPMENT_2_PRODUCT/@com.sap.vocabularies.Common.v1.QuickInfo" />
                  &lt;/Record>
                &lt;/Collection>
              &lt;/Annotation>
            &lt;/Annotations>
            &lt;Annotations Target="com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product">
              &lt;Annotation Term="com.sap.vocabularies.Common.v1.QuickInfo" Path="Name" />
            &lt;/Annotations>
            </pre> <pre>
            &lt;Text text="{meta>/Equipments/@com.sap.vocabularies.UI.v1.Facets/0/Target/$AnnotationPath/@@sap.ui.model.odata.v4.AnnotationHelper.format}" />
            </pre> <code>format</code> returns a binding with path "EQUIPMENT_2_PRODUCT/Name".<br><br>References: <ul><li>sap.ui.model.odata.v4.AnnotationHelper.resolve$Path</li></ul></p>
             * @param {any} vRawValue <p>The raw value from the meta model</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns string | Promise<any> <p>A data binding, or a fixed text, or a sequence thereof, or a <code>Promise</code> resolving with that string, for example if not all type information is already available</p>
             */
            function format(vRawValue: any, oDetails: any): string | Promise<any>;
            /**
             * <p>Returns a data binding according to the result of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath" href="#/api/sap.ui.model.odata.v4.AnnotationHelper/methods/sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath">sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath</a>.</p>
             * @param {string} sPath <p>The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"</p>
             * @returns string <p>A data binding according to the result of <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath" href="#/api/sap.ui.model.odata.v4.AnnotationHelper/methods/sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath">sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath</a>, for example "{ToSupplier}" or ""</p>
             */
            function getNavigationBinding(sPath: string): string;
            /**
             * <p>A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value used by the following dynamic expressions: <ul> <li>"14.5.2 Expression edm:AnnotationPath"</li> <li>"14.5.11 Expression edm:NavigationPropertyPath"</li> <li>"14.5.12 Expression edm:Path"</li> <li>"14.5.13 Expression edm:PropertyPath"</li> </ul> It returns the path of structural and navigation properties from the given path value, but removes "$count", types casts, term casts, and annotations of navigation properties.</p>
             * @param {string} sPath <p>The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"</p>
             * @returns string <p>The path of structural and navigation properties, for example "ToSupplier" or ""</p>
             */
            function getNavigationPath(sPath: string): string;
            /**
             * <p>Determines which type of value list exists for the given property.</p>
             * @param {any} vRawValue <p>The raw value from the meta model; must be either a property or a path pointing to a property (relative to <code>oDetails.schemaChildName</code>)</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns sap.ui.model.odata.v4.ValueListType|Promise <p>The type of the value list or a <code>Promise</code> resolving with the type of the value list or rejected, if the property cannot be found in the metadata</p>
             */
            function getValueListType(vRawValue: any, oDetails: any): sap.ui.model.odata.v4.ValueListType | Promise<any>;
            /**
             * <p>A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value used by the following dynamic expressions: <ul> <li>"14.5.2 Expression edm:AnnotationPath"</li> <li>"14.5.11 Expression edm:NavigationPropertyPath"</li> <li>"14.5.12 Expression edm:Path"</li> <li>"14.5.13 Expression edm:PropertyPath"</li> </ul> It returns the information whether the given path ends with "$count" or with a multi-valued structural or navigation property. Term casts and annotations of navigation properties are ignored.</p><p>Example: <pre>
            &lt;template:if test="{facet>Target/$AnnotationPath@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple}">
            </pre></p>
             * @param {string} sPath <p>The path value from the meta model, for example "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns boolean|Promise <p><code>true</code> if the given path ends with "$count" or with a multi-valued structural or navigation property, <code>false</code> otherwise. If <code>oDetails.$$valueAsPromise</code> is <code>true</code> a <code>Promise</code> may be returned resolving with the boolean value.</p>
             */
            function isMultiple(sPath: string, oDetails: any): boolean | Promise<any>;
            /**
             * <p>Returns the value for the label of a <code>com.sap.vocabularies.UI.v1.DataFieldAbstract</code> from the meta model. If no <code>Label</code> property is available, but the data field has a <code>Value</code> property with an <code>edm:Path</code> expression as value, the label will be taken from the <code>com.sap.vocabularies.Common.v1.Label</code> annotation of the path's target property.</p><p>Example: <pre>
            &lt;Label text="{meta>@@sap.ui.model.odata.v4.AnnotationHelper.label}" />
            </pre></p>
             * @param {any} vRawValue <p>The raw value from the meta model</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns string | Promise<any> <p>A data binding or a fixed text or a sequence thereof or <code>undefined</code>. If <code>oDetails.$$valueAsPromise</code> is <code>true</code> a <code>Promise</code> may be returned resolving with the value for the label.</p>
             */
            function label(vRawValue: any, oDetails: any): string | Promise<any>;
            /**
             * <p>Helper function for a <code>template:with</code> instruction that returns an equivalent to the given context's path, without "$AnnotationPath", "$NavigationPropertyPath", "$Path", and "$PropertyPath" segments.<br><br>References: <ul><li>sap.ui.model.odata.v4.AnnotationHelper.format</li></ul></p>
             * @param {sap.ui.model.Context} oContext <p>A context which belongs to an <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel">sap.ui.model.odata.v4.ODataMetaModel</a></p>
             * @returns string <p>An equivalent to the given context's path, without the mentioned segments</p>
             */
            function resolve$Path(oContext: sap.ui.model.Context): string;
            /**
             * <p>A function that helps to interpret OData V4 annotations. It knows about the following expressions: <ul> <li>"14.4 Constant Expressions" for "edm:Bool", "edm:Date", "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int", "edm:TimeOfDay". <li>constant "14.4.11 Expression edm:String": This is turned into a fixed text (e.g. <code>"Width"</code>). String constants that contain a simple binding <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li>dynamic "14.5.1 Comparison and Logical Operators": These are turned into expression bindings to perform the operations at runtime. <li>dynamic "14.5.3 Expression edm:Apply": <ul> <li>"14.5.3.1.1 Function odata.concat": This is turned into a data binding expression. <li>"14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an expression binding to fill the template at runtime. <li>"14.5.3.1.3 Function odata.uriEncode": This is turned into an expression binding to encode the parameter at runtime. <li>Apply functions may be nested arbitrarily. </ul> <li>dynamic "14.5.6 Expression edm:If": This is turned into an expression binding to be evaluated at runtime. The expression is a conditional expression like <code>"{=condition ? expression1 : expression2}"</code>. <li>dynamic "14.5.10 Expression edm:Null": This is turned into a <code>null</code> value. It is ignored in <code>odata.concat</code>. <li>dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression edm:PropertyPath": This is turned into a simple data binding, e.g. <code>"{Name}"</code>. </ul> Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. In such a case, an error describing the problem is logged to the console.</p><p>Example: <pre>
            &lt;Text text="{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.value}" />
            </pre></p>
             * @param {any} vRawValue <p>The raw value from the meta model</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns string <p>A data binding or a fixed text or a sequence thereof</p>
             */
            function value(vRawValue: any, oDetails: any): string;
          }
          /**
           * <p>Implementation of an OData V4 model's context.</p><p>The context is a pointer to model data as returned by a query from a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding">sap.ui.model.odata.v4.ODataContextBinding</a> or a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding">sap.ui.model.odata.v4.ODataListBinding</a>. Contexts are always and only created by such bindings. A context for a context binding points to the complete query result. A context for a list binding points to one specific entry in the binding's collection. A property binding does not have a context, you can access its value via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/getValue">sap.ui.model.odata.v4.ODataPropertyBinding#getValue</a>.</p><p>Applications can access model data only via a context, either synchronously with the risk that the values are not available yet (<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getProperty" href="#/api/sap.ui.model.odata.v4.Context/methods/getProperty">#getProperty</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getObject" href="#/api/sap.ui.model.odata.v4.Context/methods/getObject">#getObject</a>) or asynchronously (<a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestProperty" href="#/api/sap.ui.model.odata.v4.Context/methods/requestProperty">#requestProperty</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.Context/methods/requestObject">#requestObject</a>).</p><p>Context instances are immutable except for their indexes.</p>
           */
          export class Context extends sap.ui.model.Context {
            /**
             * <p>Returns a promise that is resolved without data when the entity represented by this context has been created in the backend and all selected properties of this entity are available. Expanded navigation properties are only available if the context's binding is refreshable. <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataBinding/methods/refresh">sap.ui.model.odata.v4.ODataBinding#refresh</a> describes which bindings are refreshable.</p><p>As long as the promise is not yet resolved or rejected, the entity represented by this context is transient.</p><p>Once the promise is resolved, <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getPath" href="#/api/sap.ui.model.odata.v4.Context/methods/getPath">#getPath</a> returns a path including the key predicate of the new entity. This requires that all key properties are available.</p>
             * @returns Promise<any> <p>A promise that is resolved without data when the entity represented by this context has been created in the backend. It is rejected with an <code>Error</code> instance where <code>oError.canceled === true</code> if the transient entity is deleted before it is created in the backend, for example via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context/methods/delete">sap.ui.model.odata.v4.Context#delete</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/resetChanges">sap.ui.model.odata.v4.ODataListBinding#resetChanges</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a>. Returns <code>undefined</code> if the context has not been created using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a>.</p>
             */
            created(): Promise<any>;
            /**
             * <p>Deletes the OData entity this context points to.</p><p>The context must not be used anymore after successful deletion.</p>
             * @param {string} sGroupId <p>The group ID to be used for the DELETE request; if not specified, the update group ID for the context's binding is used, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a>; the resulting group ID must not have <a target="_self" class="jsdoclink" href="#/api/API">sap.ui.model.odata.v4.SubmitMode.API</a>.</p>
             * @returns Promise<any> <p>A promise which is resolved without a result in case of success, or rejected with an instance of <code>Error</code> in case of failure, e.g. if the given context does not point to an entity, if it is not part of a list binding, if there are pending changes for the context's binding, if the resulting group ID has SubmitMode.API, or if the deletion on the server fails. <p> The error instance is flagged with <code>isConcurrentModification</code> in case a concurrent modification (e.g. by another user) of the entity between loading and deletion has been detected; this should be shown to the user who needs to decide whether to try deletion again. If the entity does not exist, we assume it has already been deleted by someone else and report success.</p>
             */
            delete(sGroupId?: string): Promise<any>;
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Destroys this context, that is, it removes this context from all dependent bindings and drops references to binding and model, so that the context cannot be used anymore; it keeps path and index for debugging purposes.<br><br>References: <ul><li>sap.ui.model.Context#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Returns the binding this context belongs to.</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding <p>The context's binding</p>
             */
            getBinding(): sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding;
            /**
             * <p>Returns the "canonical path" of the entity for this context. According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL Conventions", this is the "name of the entity set associated with the entity followed by the key predicate identifying the entity within the collection". Use the canonical path in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/bindElement">sap.ui.core.Element#bindElement</a> to create an element binding. Note: For a transient context (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isTransient" href="#/api/sap.ui.model.odata.v4.Context/methods/isTransient">#isTransient</a>) a wrong path is returned unless all key properties are available within the initial data.</p>
             * @returns string <p>The canonical path (e.g. "/SalesOrderList('0500000000')")</p>
             */
            getCanonicalPath(): string;
            /**
             * <p>Returns the context's index within the binding's collection. The return value changes when a new entity is added via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a> without <code>bAtEnd</code>, and when a context representing a created entity is deleted again.</p>
             * @returns number <p>The context's index within the binding's collection or <code>undefined</code> if the context does not belong to a list binding.</p>
             */
            getIndex(): number;
            /**
             * <p>Gets the (model dependent) object the context points to or the object with the given relative binding path</p>
             * @param {string} sPath <p>the binding path</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns any <p>the context object</p>
             */
            getObject(sPath?: string, mParameters?: any): any;
            /**
             * <p>Returns the value for the given path relative to this context. The function allows access to the complete data the context points to (if <code>sPath</code> is "") or any part thereof. The data is a JSON structure as described in <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html"> "OData JSON Format Version 4.0"</a>. Note that the function clones the result. Modify values via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/setValue">sap.ui.model.odata.v4.ODataPropertyBinding#setValue</a>.</p><p>Returns <code>undefined</code> if the data is not (yet) available; no request is triggered. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.Context/methods/requestObject">#requestObject</a> for asynchronous access.<br><br>References: <ul><li>sap.ui.model.Context#getObject</li></ul></p>
             * @param {string} sPath <p>A relative path within the JSON structure</p>
             * @returns any <p>The requested value</p>
             */
            getObject(sPath?: string): any;
            /**
             * <p>Gets the property with the given relative binding path</p>
             * @param {string} sPath <p>the binding path</p>
             * @returns any <p>the property value</p>
             */
            getProperty(sPath: string): any;
            /**
             * <p>Returns the property value for the given path relative to this context. The path is expected to point to a structural property with primitive type. Returns <code>undefined</code> if the data is not (yet) available; no request is triggered. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestProperty" href="#/api/sap.ui.model.odata.v4.Context/methods/requestProperty">#requestProperty</a> for asynchronous access.<br><br>References: <ul><li>sap.ui.model.Context#getProperty</li><li>sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type</li></ul></p>
             * @param {string} sPath <p>A relative path within the JSON structure</p>
             * @param {boolean} bExternalFormat <p>If <code>true</code>, the value is returned in external format using a UI5 type for the given property path that formats corresponding to the property's EDM type and constraints. If the type is not yet available, <code>undefined</code> is returned.</p>
             * @returns any <p>The requested property value</p>
             */
            getProperty(sPath: string, bExternalFormat?: boolean): any;
            /**
             * <p>Returns whether there are pending changes for bindings dependent on this context, or for unresolved bindings which were dependent on this context at the time the pending change was created. This includes the context itself being transient (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isTransient" href="#/api/sap.ui.model.odata.v4.Context/methods/isTransient">#isTransient</a>).</p>
             * @returns boolean <p>Whether there are pending changes</p>
             */
            hasPendingChanges(): boolean;
            /**
             * <p>For a context created using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a>, the method returns <code>true</code> if the context is transient, meaning that the promise returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="created" href="#/api/sap.ui.model.odata.v4.Context/methods/created">#created</a> is not yet resolved or rejected, and returns <code>false</code> if the context is not transient. The result of this function can also be accessed via instance annotation "@$ui5.context.isTransient" at the entity.</p>
             * @returns boolean <p>Whether this context is transient if it is created using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a>; <code>undefined</code> if it is not created using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a></p>
             */
            isTransient(): boolean;
            /**
             * <p>Refreshes the single entity represented by this context.</p>
             * @param {string} sGroupId <p>The group ID to be used for the refresh; if not specified, the group ID for the context's binding is used, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a>.</p>
             * @param {boolean} bAllowRemoval <p>If the context belongs to a list binding, the parameter allows the list binding to remove the context from the list binding's collection because the entity does not match the binding's filter anymore, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/filter">sap.ui.model.odata.v4.ODataListBinding#filter</a>; a removed context is destroyed, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.model.odata.v4.Context/methods/destroy">#destroy</a>. If the context belongs to a context binding, the parameter must not be used. Supported since 1.55.0</p>
             */
            refresh(sGroupId?: string, bAllowRemoval?: boolean): void;
            /**
             * <p>Returns a promise for the "canonical path" of the entity for this context. According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL Conventions", this is the "name of the entity set associated with the entity followed by the key predicate identifying the entity within the collection". Use the canonical path in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Element/methods/bindElement">sap.ui.core.Element#bindElement</a> to create an element binding. Note: For a transient context (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="isTransient" href="#/api/sap.ui.model.odata.v4.Context/methods/isTransient">#isTransient</a>) a wrong path is returned unless all key properties are available within the initial data.</p>
             * @returns Promise<any> <p>A promise which is resolved with the canonical path (e.g. "/SalesOrderList('0500000000')") in case of success, or rejected with an instance of <code>Error</code> in case of failure, e.g. if the given context does not point to an entity</p>
             */
            requestCanonicalPath(): Promise<any>;
            /**
             * <p>Returns a promise on the value for the given path relative to this context. The function allows access to the complete data the context points to (if <code>sPath</code> is "") or any part thereof. The data is a JSON structure as described in <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html"> "OData JSON Format Version 4.0"</a>. Note that the function clones the result. Modify values via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/setValue">sap.ui.model.odata.v4.ODataPropertyBinding#setValue</a>.</p><p>If you want <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.Context/methods/requestObject">#requestObject</a> to read fresh data, call <code>oContext.getBinding().refresh()</code> first.<br><br>References: <ul><li>#getBinding</li><li>sap.ui.model.odata.v4.ODataContextBinding#refresh</li><li>sap.ui.model.odata.v4.ODataListBinding#refresh</li></ul></p>
             * @param {string} sPath <p>A relative path within the JSON structure</p>
             * @returns Promise<any> <p>A promise on the requested value</p>
             */
            requestObject(sPath?: string): Promise<any>;
            /**
             * <p>Returns a promise on the property value for the given path relative to this context. The path is expected to point to a structural property with primitive type.<br><br>References: <ul><li>sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type</li></ul></p>
             * @param {string} sPath <p>A relative path within the JSON structure</p>
             * @param {boolean} bExternalFormat <p>If <code>true</code>, the value is returned in external format using a UI5 type for the given property path that formats corresponding to the property's EDM type and constraints.</p>
             * @returns Promise<any> <p>A promise on the requested value; it is rejected if the value is not primitive</p>
             */
            requestProperty(sPath?: string, bExternalFormat?: boolean): Promise<any>;
            /**
             * <p>Loads side effects for this context using the given "14.5.11 Expression edm:NavigationPropertyPath" or "14.5.13 Expression edm:PropertyPath" objects. Use this method to explicitly load side effects in case implicit loading is switched off via the binding-specific parameter <code>$$patchWithoutSideEffects</code>. The method can be called on <ul> <li> the bound context of a context binding, <li> the return value context of an operation binding, <li> a context of a list binding representing a single entity, <li> the header context of a list binding; side effects are loaded for the whole binding in this case. </ul> Key predicates must be available in this context's path. Avoid navigation properties as part of a binding's $select system query option as they may trigger pointless requests.</p><p>The request always uses the update group ID for this context's binding, see "$$updateGroupId" at <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a>; this way, it can easily be part of the same batch request as the corresponding update. <b>Caution:</b> If a dependent binding uses a different update group ID, it may lose its pending changes.</p><p>The events 'dataRequested' and 'dataReceived' are not fired. Whatever should happen in the event handler attached to... <ul> <li>'dataRequested', can instead be done before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestSideEffects" href="#/api/sap.ui.model.odata.v4.Context/methods/requestSideEffects">#requestSideEffects</a>.</li> <li>'dataReceived', can instead be done once the <code>oPromise</code> returned by <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestSideEffects" href="#/api/sap.ui.model.odata.v4.Context/methods/requestSideEffects">#requestSideEffects</a> fulfills or rejects (using <code>oPromise.then(function () {...}, function () {...})</code>).</li> </ul><br><br>References: <ul><li>sap.ui.model.odata.v4.ODataContextBinding#execute</li><li>sap.ui.model.odata.v4.ODataContextBinding#getBoundContext</li><li>sap.ui.model.odata.v4.ODataListBinding#getHeaderContext</li><li>sap.ui.model.odata.v4.ODataModel#bindContext</li></ul></p>
             * @param {object[]} aPathExpressions <p>The "14.5.11 Expression edm:NavigationPropertyPath" or "14.5.13 Expression edm:PropertyPath" objects describing which properties need to be loaded because they may have changed due to side effects of a previous update, for example <code>[{$PropertyPath : "TEAM_ID"}, {$NavigationPropertyPath : "EMPLOYEE_2_MANAGER"}, {$PropertyPath : "EMPLOYEE_2_TEAM/Team_Id"}]</code></p>
             * @returns Promise<any> <p>Promise resolved with <code>undefined</code>, or rejected with an error if loading of side effects fails. Use it to set fields affected by side effects to read-only before <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestSideEffects" href="#/api/sap.ui.model.odata.v4.Context/methods/requestSideEffects">#requestSideEffects</a> and make them editable again when the promise resolves; in the error handler, you can repeat the loading of side effects.</p>
             */
            requestSideEffects(aPathExpressions: object[]): Promise<any>;
            /**
             * <p>Sets a new value for the property identified by the given path. The path is relative to this context and is expected to point to a structural property with primitive type.<br><br>References: <ul><li>#getProperty</li></ul></p>
             * @param {string} sPath <p>A relative path within the JSON structure</p>
             * @param {any} vValue <p>The new value which must be primitive</p>
             * @param {string} sGroupId <p>The group ID to be used for the PATCH request; if not specified, the update group ID for the context's binding is used, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a>.</p>
             * @returns Promise<any> <p>A promise which is resolved without a result in case of success, or rejected with an instance of <code>Error</code> in case of failure</p>
             */
            setProperty(sPath: string, vValue: any, sGroupId?: string): Promise<any>;
            /**
             * <p>Returns a string representation of this object including the binding path.</p>
             * @returns string <p>A string description of this binding</p>
             */
            toString(): string;
          }
          /**
           * <p>Context binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', and 'DataStateChange'. For other events, an error is thrown.</p><p>A context binding can also be used as an <i>operation binding</i> to support bound actions, action imports, bound functions and function imports. If you want to control the execution time of an operation, for example a function import named "GetNumberOfAvailableItems", create a context binding for the path "/GetNumberOfAvailableItems(...)" (as specified here, including the three dots). Such an operation binding is <i>deferred</i>, meaning that it does not request automatically, but only when you call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="execute" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/execute">#execute</a>. <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/refresh">#refresh</a> is always ignored for actions and action imports. For bound functions and function imports, it is ignored if <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="execute" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/execute">#execute</a> has not yet been called. Afterwards it results in another call of the function with the parameter values of the last execute.</p><p>The binding parameter for bound actions or bound functions may be given in the binding path, for example "/SalesOrderList('42')/name.space.SalesOrder_Confirm". This can be used if the exact entity for the binding parameter is known in advance. If you use a relative binding instead, the operation path is a concatenation of the parent context's canonical path and the deferred binding's path.</p><p><b>Example</b>: You have a table with a list binding to "/SalesOrderList". In each row you have a button to confirm the sales order, with the relative binding "name.space.SalesOrder_Confirm(...)". Then the parent context for such a button refers to an entity in "SalesOrderList", so its canonical path is "/SalesOrderList('<i>SalesOrderID</i>')" and the resulting path for the action is "/SalesOrderList('<i>SalesOrderID</i>')/name.space.SalesOrder_Confirm".</p><p>This also works if the relative path of the deferred operation binding starts with a navigation property. Then this navigation property will be part of the operation's resource path, which is still valid.</p><p>A deferred operation binding is not allowed to have another deferred operation binding as parent.</p>
           */
          export class ODataContextBinding extends sap.ui.model.ContextBinding {
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'patchCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachPatchCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'patchSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachPatchSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Changes this binding's parameters and refreshes the binding.</p><p>If there are pending changes an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="changeParameters" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/changeParameters">#changeParameters</a>.</p><p>The parameters are changed according to the given map of parameters: Parameters with an <code>undefined</code> value are removed, the other parameters are set, and missing parameters remain unchanged.</p>
             * @param {any} mParameters <p>Map of binding parameters, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a></p>
             */
            changeParameters(mParameters: any): void;
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.<br><br>References: <ul><li>sap.ui.base.EventProvider#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys the object. The object must not be used anymore after this function was called.</p>
             */
            destroy(): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'patchCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachPatchCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'patchSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachPatchSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Calls the OData operation that corresponds to this operation binding.</p><p>Parameters for the operation must be set via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setParameter" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/setParameter">#setParameter</a> beforehand.</p><p>The value of this binding is the result of the operation. To access a result of primitive type, bind a control to the path "value", for example <code>&lt;Text text="{value}"/></code>. If the result has a complex or entity type, you can bind properties as usual, for example <code>&lt;Text text="{street}"/></code>.</p>
             * @param {string} sGroupId <p>The group ID to be used for the request; if not specified, the group ID for this binding is used, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/constructor">sap.ui.model.odata.v4.ODataContextBinding#constructor</a>. Valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             * @returns Promise<any> <p>A promise that is resolved without data or with a return value context when the operation call succeeded, or rejected with an instance of <code>Error</code> in case of failure, for instance if the operation metadata is not found, if overloading is not supported, or if a collection-valued function parameter is encountered.</p><p>A return value context is a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a> which represents a bound operation response. It is created only if the operation is bound and has a single entity return value from the same entity set as the operation's binding parameter and has a parent context which is a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a> and points to an entity from an entity set.</p><p>If a return value context is created, it must be used instead of <code>this.getBoundContext()</code>. All bound messages will be related to the return value context only. Such a message can only be connected to a corresponding control if the control's property bindings use the return value context as binding context.</p>
             */
            execute(sGroupId?: string): Promise<any>;
            /**
             * <p>Return the bound context.</p>
             * @returns sap.ui.model.Context <p>Context object used by this context binding or <code>null</code></p>
             */
            getBoundContext(): sap.ui.model.Context;
            /**
             * <p>Returns the bound context.</p>
             * @returns sap.ui.model.odata.v4.Context <p>The bound context</p>
             */
            getBoundContext(): sap.ui.model.odata.v4.Context;
            /**
             * <p>Returns the root binding of this binding's hierarchy, see binding <a target="_self" href="#/topic/54e0ddf695af4a6c978472cecb01c64d">Initialization and Read Requests</a>.</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding|sap.ui.model.odata.v4.ODataPropertyBinding <p>The root binding or <code>undefined</code> if this binding is not yet resolved.</p>
             */
            getRootBinding(): sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding;
            /**
             * <p>Returns <code>true</code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.</p>
             * @returns boolean <p><code>true</code> if the binding has pending changes</p>
             */
            hasPendingChanges(): boolean;
            /**
             * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).</p>
             */
            protected initialize(): void;
            /**
             * <p>Initializes the OData context binding: Fires a 'change' event in case the binding has a resolved path and its root binding is not suspended.<br><br>References: <ul><li>sap.ui.model.Binding#initialize</li><li>#getRootBinding</li></ul></p>
             */
            protected initialize(): void;
            /**
             * <p>Returns whether the binding is initial, which means it did not get an initial value yet</p>
             * @returns boolean <p>whether binding is initial</p>
             */
            isInitial(): boolean;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Binding#isInitial</li></ul></p>
             */
            isInitial(): void;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.</p><p>Refresh is supported for bindings which are not relative to a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a>.</p><p>Note: When calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/refresh">#refresh</a> multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent</b> of the order of calls to <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> with the given group ID.</p><p>If there are pending changes, an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/refresh">#refresh</a>.<br><br>References: <ul><li>sap.ui.model.Binding#refresh</li><li>#getRootBinding</li><li>#hasPendingChanges</li><li>#resetChanges</li><li>#suspend</li></ul></p>
             * @param {string} sGroupId <p>The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resume" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/resume">#resume</a> uses the binding's group ID.</p><p>Valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             */
            refresh(sGroupId?: string): void;
            /**
             * <p>Resets all pending changes of this binding, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/hasPendingChanges">#hasPendingChanges</a>. Resets also invalid user input.</p>
             */
            resetChanges(): void;
            /**
             * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
             */
            resume(): void;
            /**
             * <p>Resumes this binding. The binding can again fire change events and trigger data service requests. Before 1.53.0, this method was not supported and threw an error.<br><br>References: <ul><li>sap.ui.model.Binding#resume</li><li>#suspend</li></ul></p>
             */
            resume(): void;
            /**
             * <p>Sets a parameter for an operation call.</p>
             * @param {string} sParameterName <p>The parameter name</p>
             * @param {any} vValue <p>The parameter value</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding <p><code>this</code> to enable method chaining</p>
             */
            setParameter(sParameterName: string, vValue: any): sap.ui.model.odata.v4.ODataContextBinding;
            /**
             * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
             */
            suspend(): void;
            /**
             * <p>Suspends this binding. A suspended binding does not fire change events nor does it trigger data service requests. Call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resume" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/resume">#resume</a> to resume the binding. Before 1.53.0, this method was not supported and threw an error.<br><br>References: <ul><li>sap.ui.model.Binding#suspend</li><li>sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges</li><li>sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges</li><li>#resume</li></ul></p>
             */
            suspend(): void;
          }
          /**
           * <p>List binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', 'DataStateChange' and 'refresh'. For other events, an error is thrown.</p>
           */
          export class ODataListBinding extends sap.ui.model.ListBinding {
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'createCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachCreateCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'createSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachCreateSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'patchCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachPatchCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'patchSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            attachPatchSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Changes this binding's parameters and refreshes the binding.</p><p>If there are pending changes an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="changeParameters" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/changeParameters">#changeParameters</a>.</p><p>The parameters are changed according to the given map of parameters: Parameters with an <code>undefined</code> value are removed, the other parameters are set, and missing parameters remain unchanged.</p>
             * @param {any} mParameters <p>Map of binding parameters, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a> and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a></p>
             */
            changeParameters(mParameters: any): void;
            /**
             * <p>Creates a new entity and inserts it at the start or the end of the list.</p><p>For creating the new entity, the binding's update group ID is used, see binding parameter $$updateGroupId of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a>.</p><p>You can call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context/methods/delete">sap.ui.model.odata.v4.Context#delete</a> to delete the created context again. As long as the context is transient (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context/methods/isTransient">sap.ui.model.odata.v4.Context#isTransient</a>), <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resetChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/resetChanges">#resetChanges</a> and a call to <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> with the update group ID as parameter also delete the created context together with other changes.</p><p>If the creation of the entity on the server failed, the creation is repeated automatically. If the binding's update group ID has <a target="_self" class="jsdoclink" href="#/api/API">sap.ui.model.odata.v4.SubmitMode.API</a>, it is repeated with the next call of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a>. Otherwise it is repeated with the next update for the entity. Since 1.67.0, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> can also be used for group IDs with <a target="_self" class="jsdoclink" href="#/api/Auto">sap.ui.model.odata.v4.SubmitMode.Auto</a> in order to repeat the creation even if there is no update for the entity.</p><p>Each time the data for the created entity is sent to the server, a <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="createSent" href="#/api/sap.ui.model.odata.v4.ODataListBinding/events/createSent">#event:createSent</a> event is fired and each time the client receives a response for the creation, a <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="createCompleted" href="#/api/sap.ui.model.odata.v4.ODataListBinding/events/createCompleted">#event:createCompleted</a> event is fired, independent of whether the creation was successful or not.</p><p>The initial data for the created entity can be supplied via the parameter <code>oInitialData</code> and modified via property bindings. Properties that are not part of the initial data show the default value from the service metadata on the UI, but they are not sent to the server. If there is no default value, <code>null</code> is used instead, even if the property is not <code>Nullable</code>.</p><p>Note: If a server requires a property in the request, you must supply this property in the initial data, for example if the server requires a unit for an amount. This also applies if this property has a default value.</p><p>Note: After creation, the created entity is refreshed to ensure that the data specified in this list binding's $expand is available; to skip this refresh, set <code>bSkipRefresh</code> to <code>true</code>.</p><p>Note: The binding must have the parameter <code>$count : true</code> when creating an entity at the end. Otherwise the collection length may be unknown and there is no clear position to place this entity at.</p>
             * @param {any} oInitialData <p>The initial data for the created entity</p>
             * @param {boolean} bSkipRefresh <p>Whether an automatic refresh of the created entity will be skipped</p>
             * @param {boolean} bAtEnd <p>Whether the entity is inserted at the end of the list. When creating multiple entities, this parameter must have the same value for each entity. Supported since 1.66.0</p>
             * @returns sap.ui.model.odata.v4.Context <p>The context object for the created entity; its method <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context/methods/created">sap.ui.model.odata.v4.Context#created</a> returns a promise that is resolved when the creation is finished</p>
             */
            create(oInitialData?: any, bSkipRefresh?: boolean, bAtEnd?: boolean): sap.ui.model.odata.v4.Context;
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.<br><br>References: <ul><li>sap.ui.base.EventProvider#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys the object. The object must not be used anymore after this function was called.</p>
             */
            destroy(): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'createCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachCreateCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'createSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachCreateSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'patchCompleted' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachPatchCompleted(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'patchSent' event of this binding.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             */
            detachPatchSent(fnFunction: Function, oListener?: any): void;
            /**
             * <p>Applies a new set of filters to the list represented by this binding.</p><p>Depending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.</p><h4>Application and Control Filters</h4><p> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.</p><p>By using the second parameter <code>sFilterType</code> of method <code>filter</code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.</p><h4>Auto-Grouping of Filters</h4><p> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.</p>
             * @param {sap.ui.model.Filter[]} aFilters <p>Array of filter objects</p>
             * @param {sap.ui.model.FilterType} sFilterType <p>Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation</p>
             * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
             */
            filter(aFilters: sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.ListBinding;
            /**
             * <p>Filters the list with the given filters.</p><p>If there are pending changes an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="filter" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/filter">#filter</a>.<br><br>References: <ul><li>sap.ui.model.ListBinding#filter</li></ul></p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} vFilters <p>The dynamic filters to be used; replaces the dynamic filters given in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a>. The filter executed on the list is created from the following parts, which are combined with a logical 'and': <ul> <li> Dynamic filters of type <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.FilterType.Application">sap.ui.model.FilterType.Application</a> <li> Dynamic filters of type <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.FilterType.Control">sap.ui.model.FilterType.Control</a> <li> The static filters, as defined in the '$filter' binding parameter </ul></p>
             * @param {sap.ui.model.FilterType} sFilterType <p>The filter type to be used</p>
             * @returns sap.ui.model.odata.v4.ODataListBinding <p><code>this</code> to facilitate method chaining</p>
             */
            filter(vFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): sap.ui.model.odata.v4.ODataListBinding;
            /**
             * <p>Returns an array of binding contexts for the bound target list.</p><h4>Extended Change Detection</h4><p> If extended change detection is enabled using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/enableExtendedChangeDetection">sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection</a>, the context array may carry an additional property named <code>diff</code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()</code>. In case no <code>diff</code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff</code> property contains an empty array, there have been no changes on the list.</p><p>Sample diff array: <code>[{index: 1, type: "delete"}, {index: 4, type: "insert}]</code></p><p><strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getCurrentContexts">sap.ui.model.ListBinding.prototype.getCurrentContexts</a> instead.</p>
             * @param {number} iStartIndex <p>the startIndex where to start the retrieval of contexts</p>
             * @param {number} iLength <p>determines how many contexts to retrieve beginning from the start index.</p>
             * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
             */
            protected getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
            /**
             * <p>Returns already created binding contexts for all entities in this list binding for the range determined by the given start index <code>iStart</code> and <code>iLength</code>. If at least one of the entities in the given range has not yet been loaded, fires a <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="change" href="#/api/sap.ui.model.odata.v4.ODataListBinding/events/change">#event:change</a> event on this list binding once these entities have been loaded <b>asynchronously</b>. A further call to this method in the 'change' event handler with the same index range then yields the updated array of contexts.<br><br>References: <ul><li>sap.ui.model.ListBinding#getContexts</li></ul></p>
             * @param {number} iStart <p>The index where to start the retrieval of contexts</p>
             * @param {number} iLength <p>The number of contexts to retrieve beginning from the start index; defaults to the model's size limit, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/setSizeLimit">sap.ui.model.Model#setSizeLimit</a>; <code>Infinity</code> may be used since 1.53.0 to retrieve all data</p>
             * @param {number} iMaximumPrefetchSize <p>The maximum number of contexts to read before and after the given range; with this, controls can prefetch data that is likely to be needed soon, e.g. when scrolling down in a table. Negative values will be treated as 0. Supported since 1.39.0; <code>Infinity</code> may be used since 1.53.0 to prefetch all data and thus disable paging.</p>
             * @returns sap.ui.model.odata.v4.Context[] <p>The array of already created contexts with the first entry containing the context for <code>iStart</code></p>
             */
            protected getContexts(iStart?: number, iLength?: number, iMaximumPrefetchSize?: number): sap.ui.model.odata.v4.Context[];
            /**
             * <p>Returns an array of currently used binding contexts of the bound control</p><p>This method does not trigger any data requests from the backend or delta calculation, but just returns the context array as last requested by the control. This can be used by the application to get access to the data currently displayed by a list control.</p>
             * @returns sap.ui.model.Context[] <p>the array of contexts for each row of the bound list</p>
             */
            getCurrentContexts(): sap.ui.model.Context[];
            /**
             * <p>Returns the contexts that were requested by a control last time. Does not trigger a data request. In the time between the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dataRequested" href="#/api/sap.ui.model.odata.v4.ODataListBinding/events/dataRequested">#event:dataRequested</a> event and the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="dataReceived" href="#/api/sap.ui.model.odata.v4.ODataListBinding/events/dataReceived">#event:dataReceived</a> event, the resulting array contains <code>undefined</code> at those indexes where the data is not yet available.<br><br>References: <ul><li>sap.ui.model.ListBinding#getCurrentContexts</li></ul></p>
             * @returns sap.ui.model.odata.v4.Context[] <p>The contexts</p>
             */
            getCurrentContexts(): sap.ui.model.odata.v4.Context[];
            /**
             * <p>Returns the header context which allows binding to <code>$count</code>. If known, the value of such a binding is the sum of the element count of the collection on the server and the number of transient entities created on the client. Otherwise it is <code>undefined</code>. The value is a number and its type is <code>Edm.Int64</code>.</p><p>The count is known to the binding in the following situations: <ul> <li>The server-side count has been requested via the system query option <code>$count</code>. <li>A "short read" in a paged collection (the server delivered less elements than requested) indicated that the server has no more unread elements. <li>It has been read completely in one request, for example an embedded collection via <code>$expand</code>. </ul></p><p>The <code>$count</code> is unknown, if the binding is relative, but has no context.</p>
             * @returns sap.ui.model.odata.v4.Context <p>The header context or <code>null</code> if the binding is relative and has no context</p>
             */
            getHeaderContext(): sap.ui.model.odata.v4.Context;
            /**
             * <p>Returns the number of entries in the list. This might be an estimated or preliminary length, in case the full length is not known yet, see method isLengthFinal().</p>
             * @returns number <p>returns the number of entries in the list</p>
             */
            getLength(): number;
            /**
             * <p>Returns the number of entries in the list. As long as the client does not know the size on the server, an estimated length is returned.<br><br>References: <ul><li>sap.ui.model.ListBinding#getLength</li></ul></p>
             * @returns number <p>The number of entries in the list</p>
             */
            getLength(): number;
            /**
             * <p>Returns the query options of the binding.</p>
             * @param {boolean} bWithSystemQueryOptions <p>Whether system query options should be returned as well. The parameter value <code>true</code> is not supported.</p>
             * @returns any <p>mQueryOptions The object with the query options. Query options can be provided with <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindContext">sap.ui.model.odata.v4.ODataModel#bindContext</a>, <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/changeParameters">sap.ui.model.odata.v4.ODataListBinding#changeParameters</a>, and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/changeParameters">sap.ui.model.odata.v4.ODataContextBinding#changeParameters</a>. System query options can also be calculated, e.g. <code>$filter</code> can be calculated based on provided filter objects.</p>
             */
            getQueryOptions(bWithSystemQueryOptions?: boolean): any;
            /**
             * <p>Returns the root binding of this binding's hierarchy, see binding <a target="_self" href="#/topic/54e0ddf695af4a6c978472cecb01c64d">Initialization and Read Requests</a>.</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding|sap.ui.model.odata.v4.ODataPropertyBinding <p>The root binding or <code>undefined</code> if this binding is not yet resolved.</p>
             */
            getRootBinding(): sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding;
            /**
             * <p>Returns <code>true</code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.</p>
             * @returns boolean <p><code>true</code> if the binding has pending changes</p>
             */
            hasPendingChanges(): boolean;
            /**
             * <p>Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).</p>
             */
            protected initialize(): void;
            /**
             * <p>Initializes the OData list binding: Fires an event in case the binding has a resolved path and its root binding is not suspended. If the model's parameter <code>autoExpandSelect</code> is used (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/constructor">sap.ui.model.odata.v4.ODataModel#constructor</a>), it fires a 'change' event, else it fires a 'refresh' event (since 1.67.0).<br><br>References: <ul><li>sap.ui.model.Binding#initialize</li><li>#getRootBinding</li></ul></p>
             */
            protected initialize(): void;
            /**
             * <p>Returns whether the binding is initial, which means it did not get an initial value yet</p>
             * @returns boolean <p>whether binding is initial</p>
             */
            isInitial(): boolean;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Binding#isInitial</li></ul></p>
             */
            isInitial(): void;
            /**
             * <p>Returns whether the length which can be retrieved using getLength() is a known, final length, or a preliminary or estimated length which may change if further data is requested.</p>
             * @returns boolean <p>returns whether the length is final</p>
             */
            isLengthFinal(): boolean;
            /**
             * <p>Returns <code>true</code> if the length has been determined by the data returned from server. If the length is a client side estimation <code>false</code> is returned.<br><br>References: <ul><li>sap.ui.model.ListBinding#isLengthFinal</li></ul></p>
             * @returns boolean <p>If <code>true</true> the length is determined by server side data</p>
             */
            isLengthFinal(): boolean;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.</p><p>Refresh is supported for bindings which are not relative to a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a>.</p><p>Note: When calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/refresh">#refresh</a> multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent</b> of the order of calls to <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> with the given group ID.</p><p>If there are pending changes, an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/refresh">#refresh</a>.<br><br>References: <ul><li>sap.ui.model.Binding#refresh</li><li>#getRootBinding</li><li>#hasPendingChanges</li><li>#resetChanges</li><li>#suspend</li></ul></p>
             * @param {string} sGroupId <p>The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resume" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/resume">#resume</a> uses the binding's group ID.</p><p>Valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             */
            refresh(sGroupId?: string): void;
            /**
             * <p>Resets all pending changes of this binding, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/hasPendingChanges">#hasPendingChanges</a>. Resets also invalid user input.</p>
             */
            resetChanges(): void;
            /**
             * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
             */
            resume(): void;
            /**
             * <p>Resumes this binding. The binding can again fire change events and trigger data service requests. Before 1.53.0, this method was not supported and threw an error.<br><br>References: <ul><li>sap.ui.model.Binding#resume</li><li>#suspend</li></ul></p>
             */
            resume(): void;
            /**
             * <p>Sets a new data aggregation object and derives the system query option <code>$apply</code> implicitly from it.</p>
             * @param {any} oAggregation <p>An object holding the information needed for data aggregation; see also <a href="http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/">OData Extension for Data Aggregation Version 4.0</a>.</p>
             */
            setAggregation(oAggregation: any): void;
            /**
             * <p>Sorts the list according to the sorter object.</p><p>Instead of a single sorter also an array of sorters can be passed to the sort method. In this case they are processed in the sequence in which they are contained in the array.</p><h4>Grouping</h4><p> Sorting and grouping are closely related, in case a list should be grouped, it must be sorted by the property to group with. Grouping is enabled by setting the <code>group</code> property on the sorter object. If it is enabled, you can get the current group of an item using <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/getGroup">sap.ui.model.ListBinding.prototype.getGroup</a>. In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping is not supported.</p>
             * @param {sap.ui.model.Sorter | any[]} aSorters <p>the Sorter object or an array of sorters which defines the sort order</p>
             * @returns sap.ui.model.ListBinding <p>returns <code>this</code> to facilitate method chaining</p>
             */
            sort(aSorters: sap.ui.model.Sorter | any[]): sap.ui.model.ListBinding;
            /**
             * <p>Sort the entries represented by this list binding according to the given sorters. The sorters are stored at this list binding and they are used for each following data request.</p><p>If there are pending changes an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sort" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/sort">#sort</a>.<br><br>References: <ul><li>sap.ui.model.ListBinding#sort</li></ul></p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} vSorters <p>The dynamic sorters to be used; they replace the dynamic sorters given in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/bindList">sap.ui.model.odata.v4.ODataModel#bindList</a>. Static sorters, as defined in the '$orderby' binding parameter, are always executed after the dynamic sorters.</p>
             * @returns sap.ui.model.odata.v4.ODataListBinding <p><code>this</code> to facilitate method chaining</p>
             */
            sort(vSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[]): sap.ui.model.odata.v4.ODataListBinding;
            /**
             * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
             */
            suspend(): void;
            /**
             * <p>Suspends this binding. A suspended binding does not fire change events nor does it trigger data service requests. Call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resume" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/resume">#resume</a> to resume the binding. Before 1.53.0, this method was not supported and threw an error.<br><br>References: <ul><li>sap.ui.model.Binding#suspend</li><li>sap.ui.model.odata.v4.ODataContextBinding#hasPendingChanges</li><li>sap.ui.model.odata.v4.ODataListBinding#hasPendingChanges</li><li>#resume</li></ul></p>
             */
            suspend(): void;
            /**
             * <p>Updates the binding's system query option <code>$apply</code> based on the given data aggregation information. Its value is "groupby((&lt;dimension_1,...,dimension_N,unit_or_text_1,...,unit_or_text_K>), aggregate(&lt;measure> with &lt;method> as &lt;alias>, ...))" where the "aggregate" part is only present if measures are given and both "with" and "as" are optional.<br><br>References: <ul><li>sap.ui.model.analytics.AnalyticalBinding#updateAnalyticalInfo</li><li>#changeParameters</li><li>#setAggregation</li></ul></p>
             * @param {object[]} aAggregation <p>An array with objects holding the information needed for data aggregation; see also <a href="http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/">OData Extension for Data Aggregation Version 4.0</a></p>
             * @returns any <p>The return object contains a property <code>measureRangePromise</code> if and only if at least one measure has requested a minimum or maximum value; its value is a promise which resolves with the measure range map as soon as data has been received; the measure range map contains measure names as keys and objects as values which have a <code>min</code> and <code>max</code> property as requested above. In case of multiple calls to this method while the binding's root binding is suspended, only the last call's promise will resolve with the right result; the other calls just get the same result as the last call, which may or may not fit to their <code>aAggregation</code> argument. <code>undefined</code> is returned instead of an empty object.</p>
             */
            protected updateAnalyticalInfo(aAggregation: object[]): any;
          }
          /**
           * <p>Implementation of an OData metadata model which offers access to OData V4 metadata. The meta model does not support any public events; attaching an event handler leads to an error.</p><p>This model is read-only.</p>
           */
          export class ODataMetaModel extends sap.ui.model.MetaModel {
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the list / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {sap.ui.model.Sorter} aSorters <p>initial sort order (can be either a sorter or an array of sorters) (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s (can be either a filter or an array of filters) (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.ListBinding 
             */
            bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
            /**
             * <p>Creates a list binding for this metadata model which iterates content from the given path (relative to the given context), sorted and filtered as indicated.</p><p>By default, OData names are iterated and a trailing slash is implicitly added to the path (see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestObject">#requestObject</a> for the effects this has); technical properties and inline annotations are filtered out.</p><p>A path which ends with an "@" segment can be used to iterate all inline or external targeting annotations; no trailing slash is added implicitly; technical properties and OData names are filtered out.<br><br>References: <ul><li>#requestObject</li><li>sap.ui.model.FilterOperator</li><li>sap.ui.model.Model#bindList</li></ul></p>
             * @param {string} sPath <p>A relative or absolute path within the metadata model, for example "/EMPLOYEES"</p>
             * @param {sap.ui.model.Context} oContext <p>The context to be used as a starting point in case of a relative path</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} aSorters <p>Initial sort order, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/sort">sap.ui.model.ListBinding#sort</a></p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} aFilters <p>Initial application filter(s), see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.ListBinding/methods/filter">sap.ui.model.ListBinding#filter</a>; filters with filter operators "All" or "Any" are not supported</p>
             * @returns sap.ui.model.ListBinding <p>A list binding for this metadata model</p>
             */
            bindList(sPath: string, oContext?: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter | sap.ui.model.Filter[]): sap.ui.model.ListBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the property that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.PropertyBinding 
             */
            bindProperty(sPath: string, oContext?: any, mParameters?: any): sap.ui.model.PropertyBinding;
            /**
             * <p>Creates a property binding for this meta data model which refers to the content from the given path (relative to the given context).<br><br>References: <ul><li>sap.ui.model.Model#bindProperty</li></ul></p>
             * @param {string} sPath <p>A relative or absolute path within the meta data model, for example "/EMPLOYEES/ENTRYDATE"</p>
             * @param {sap.ui.model.Context} oContext <p>The context to be used as a starting point in case of a relative path</p>
             * @param {any} mParameters <p>Optional binding parameters that are passed to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getObject" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getObject">#getObject</a> to compute the binding's value; if they are given, <code>oContext</code> cannot be omitted</p>
             * @returns sap.ui.model.PropertyBinding <p>A property binding for this meta data model</p>
             */
            bindProperty(sPath: string, oContext?: sap.ui.model.Context, mParameters?: any): sap.ui.model.PropertyBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the tree / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s contained in an array (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @param {any[]} aSorters <p>predefined sap.ui.model.sorter/s contained in an array (optional)</p>
             * @returns sap.ui.model.TreeBinding 
             */
            bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Model#bindTree</li></ul></p>
             */
            bindTree(): void;
            /**
             * <p>Returns a snapshot of each $metadata or annotation file loaded so far, combined into a single "JSON" object according to the streamlined OData V4 Metadata JSON Format.<br><br>References: <ul><li>#requestData</li></ul></p>
             * @returns any <p>The OData metadata as a "JSON" object, if it is already available, or <code>undefined</code>.</p>
             */
            getData(): any;
            /**
             * <p>Returns a map of entity tags for each $metadata or annotation file loaded so far.</p>
             * @returns any <p>A map which contains one entry for each $metadata or annotation file loaded so far: the key is the file's URL as a <code>string</code> and the value is the <code>string</code> value of the "ETag" response header for that file. Initially, the map is empty. If no "ETag" response header was sent for a file, the <code>Date</code> value of the "Last-Modified" response header is used instead. The value <code>null</code> is used in case no such header is sent at all. Note that this map may change due to load-on-demand of "cross-service references" (see parameter <code>supportReferences</code> of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/constructor">sap.ui.model.odata.v4.ODataModel#constructor</a>).</p>
             */
            getETags(): any;
            /**
             * <p>Returns the OData metadata model context corresponding to the given OData data model path.</p>
             * @param {string} sPath <p>An absolute data path within the OData data model, for example "/EMPLOYEES/0/ENTRYDATE"</p>
             * @returns sap.ui.model.Context <p>The corresponding metadata context within the OData metadata model, for example with metadata path "/EMPLOYEES/ENTRYDATE"</p>
             */
            getMetaContext(sPath: string): sap.ui.model.Context;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path to where to read the object</p>
             * @param {any} oContext <p>the context with which the path should be resolved</p>
             * @param {any} mParameters <p>additional model specific parameters</p>
             */
            getObject(sPath: string, oContext?: any, mParameters?: any): any;
            /**
             * <p>Returns the metadata object for the given path relative to the given context. Returns <code>undefined</code> in case the metadata is not (yet) available. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestObject">#requestObject</a> for asynchronous access.<br><br>References: <ul><li>#requestObject</li><li>sap.ui.model.Model#getObject</li></ul></p>
             * @param {string} sPath <p>A relative or absolute path within the metadata model</p>
             * @param {sap.ui.model.Context} oContext <p>The context to be used as a starting point in case of a relative path</p>
             * @param {any} mParameters <p>Optional (binding) parameters; if they are given, <code>oContext</code> cannot be omitted</p>
             * @returns any <p>The requested metadata object if it is already available, or <code>undefined</code></p>
             */
            getObject(sPath: string, oContext?: sap.ui.model.Context, mParameters?: any): any;
            /**
             * <p>Returns the UI5 type for the given property path that formats and parses corresponding to the property's EDM type and constraints. The property's type must be a primitive type. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestUI5Type" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestUI5Type">#requestUI5Type</a> for asynchronous access.<br><br>References: <ul><li>#requestUI5Type</li></ul></p>
             * @param {string} sPath <p>An absolute path to an OData property within the OData data model</p>
             * @returns sap.ui.model.odata.type.ODataType <p>The corresponding UI5 type from <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a>, if all required metadata to calculate this type is already available; if no specific type can be determined, a warning is logged and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Raw">sap.ui.model.odata.type.Raw</a> is used</p>
             */
            getUI5Type(sPath: string): sap.ui.model.odata.type.ODataType;
            /**
             * <p>Determines which type of value list exists for the given property.<br><br>References: <ul><li>#requestValueListType</li></ul></p>
             * @param {string} sPropertyPath <p>An absolute path to an OData property within the OData data model</p>
             * @returns sap.ui.model.odata.v4.ValueListType <p>The type of the value list</p>
             */
            getValueListType(sPropertyPath: string): sap.ui.model.odata.v4.ValueListType;
            /**
             * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
             * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Model#refresh</li></ul></p>
             */
            refresh(): void;
            /**
             * <p>Request currency customizing based on the code list reference given in the entity container's <code>com.sap.vocabularies.CodeList.v1.CurrencyCodes</code> annotation.<br><br>References: <ul><li>#requestUnitsOfMeasure</li></ul></p>
             * @param {any} vRawValue <p>If present, it must be this meta model's root entity container</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns Promise<any> <p>A promise resolving with the currency customizing which is a map from currency key to an object with the following properties: <ul> <li>StandardCode: The language-independent standard code (e.g. ISO) for the currency as referred to via the <code>com.sap.vocabularies.CodeList.v1.StandardCode</code> annotation on the currency's key, if present <li>Text: The language-dependent text for the currency as referred to via the <code>com.sap.vocabularies.Common.v1.Text</code> annotation on the currency's key <li>UnitSpecificScale: The decimals for the currency as referred to via the <code>com.sap.vocabularies.Common.v1.UnitSpecificScale</code> annotation on the currency's key; entries where this would be <code>null</code> are ignored, and an error is logged </ul> It resolves with <code>null</code>, if no <code>com.sap.vocabularies.CodeList.v1.CurrencyCodes</code> annotation is found. It is rejected, if there is not exactly one currency key, or if the currency customizing cannot be loaded.</p>
             */
            requestCurrencyCodes(vRawValue?: any, oDetails?: any): Promise<any>;
            /**
             * <p>Requests a snapshot of each $metadata or annotation file loaded so far, combined into a single "JSON" object according to the streamlined OData V4 Metadata JSON Format. It is a map from all currently known qualified names to their values, with the special key "$EntityContainer" mapped to the root entity container's qualified name as a starting point. See <a target="_self" href="#/topic/87aac894a40640f89920d7b2a414499b">OData V4 Metadata JSON Format</a>.</p><p>Note that this snapshot may change due to load-on-demand of "cross-service references" (see parameter <code>supportReferences</code> of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/constructor">sap.ui.model.odata.v4.ODataModel#constructor</a>).<br><br>References: <ul><li>#getData</li></ul></p>
             * @returns Promise<any> <p>A promise which is resolved with the OData metadata as a "JSON" object as soon as it is available.</p>
             */
            requestData(): Promise<any>;
            /**
             * <p>Requests the metadata value for the given path relative to the given context. Returns a <code>Promise</code> which is resolved with the requested metadata value or rejected with an error (only in case metadata cannot be loaded). An invalid path leads to an <code>undefined</code> result and a warning is logged. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getObject" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getObject">#getObject</a> for synchronous access.</p><p>A relative path is appended to the context's path separated by a forward slash("/"). A relative path starting with "@" (that is, an annotation) is appended without a separator. Use "./" as a prefix for such a relative path to enforce a separator.</p><p>Example: <pre>
            &lt;template:with path="/EMPLOYEES/ENTRYDATE" var="property">
              &lt;!-- /EMPLOYEES/ENTRYDATE/$Type -->
              "{property>$Type}"
            
              &lt;!-- /EMPLOYEES/ENTRYDATE@com.sap.vocabularies.Common.v1.Text -->
              "{property>@com.sap.vocabularies.Common.v1.Text}"
            
              &lt;!-- /EMPLOYEES/ENTRYDATE/@com.sap.vocabularies.Common.v1.Text -->
              "{property>./@com.sap.vocabularies.Common.v1.Text}"
            &lt;/template:with>
            </pre></p><p>The basic idea is that every path described in "14.2.1 Attribute Target" in specification "OData Version 4.0 Part 3: Common Schema Definition Language" is a valid absolute path within the metadata model if a leading slash is added; for example "/" + "MySchema.MyEntityContainer/MyEntitySet/MyComplexProperty/MyNavigationProperty". Also, every path described in "14.5.2 Expression edm:AnnotationPath", "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path", and "14.5.13 Expression edm:PropertyPath" is a valid relative path within the metadata model if a suitable prefix is added which addresses an entity container, entity set, singleton, complex type, entity type, or property; for example "/MySchema.MyEntityType/MyProperty" + "@vCard.Address#work/FullName".</p><p>The absolute path is split into segments and followed step-by-step, starting at the global scope of all known qualified OData names. There are two technical properties there: "$Version" (typically "4.0") and "$EntityContainer" with the name of the single entity container for this metadata model's service.</p><p>An empty segment in between is invalid, except to force return type lookup for operation overloads (see below). An empty segment at the end caused by a trailing slash differentiates between a name and the object it refers to. This way, "/$EntityContainer" refers to the name of the single entity container and "/$EntityContainer/" refers to the single entity container as an object.</p><p>The segment "@sapui.name" refers back to the last OData name (simple identifier or qualified name) or annotation name encountered during path traversal immediately before "@sapui.name": <ul> <li> "/EMPLOYEES@sapui.name" results in "EMPLOYEES" and "/EMPLOYEES/@sapui.name" results in the same as "/EMPLOYEES/$Type", that is, the qualified name of the entity set's type (see below how "$Type" is inserted implicitly). Note how the separating slash again makes a difference here. <li> "/EMPLOYEES/@com.sap.vocabularies.Common.v1.Label@sapui.name" results in "@com.sap.vocabularies.Common.v1.Label" and a slash does not make any difference as long as the annotation does not have a "$Type" property. <li> A technical property (that is, a numerical segment or one starting with a "$") immediately before "@sapui.name" is invalid, for example "/$EntityContainer@sapui.name". </ul> The path must not continue after "@sapui.name".</p><p>If the current object is a string value, that string value is treated as a relative path and followed step-by-step before the next segment is processed. Except for this, a path must not continue if it comes across a non-object value. Such a string value can be a qualified name (example path "/$EntityContainer/..."), a simple identifier (example path "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...") or even a path according to "14.5.12 Expression edm:Path" etc. (example path "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/...").</p><p>Segments starting with an "@" character, for example "@com.sap.vocabularies.Common.v1.Label", address annotations at the current object. As the first segment, they refer to the single entity container. For objects which can only be annotated inline (see "14.3 Element edm:Annotation" minus "14.2.1 Attribute Target"), the object already contains the annotations as a property. For objects which can (only or also) be annotated via external targeting, the object does not contain any annotation as a property. Such annotations MUST be accessed via a path. BEWARE of a special case: Actions, functions and their parameters can be annotated inline for a single overload or via external targeting for all overloads at the same time. In this case, the object contains all annotations for the single overload as a property, but annotations MUST nevertheless be accessed via a path in order to include also annotations for all overloads at the same time.</p><p>Segments starting with an OData name followed by an "@" character, for example "/TEAMS@Org.OData.Capabilities.V1.TopSupported", address annotations at an entity set, singleton, or property, not at the corresponding type. In contrast, "/TEAMS/@com.sap.vocabularies.Common.v1.Deletable" (note the separating slash) addresses an annotation at the entity set's type. This is in line with the special rule of "14.5.12 Expression edm:Path" regarding annotations at a navigation property itself.</p><p>"@" can be used as a segment to address a map of all annotations of the current object. This is useful for iteration, for example via <code>&lt;template:repeat list="{entityType>@}" ...></code>.</p><p>Annotations of an annotation are addressed not by two separate segments, but by a single segment like "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.Common.v1.TextArrangement". Each annotation can have a qualifier, for example "@first#foo@second#bar". Note: If the first annotation's value is a record, a separate segment addresses an annotation of that record, not an annotation of the first annotation itself. In a similar way, annotations of "7.2 Element edm:ReferentialConstraint", "7.3 Element edm:OnDelete", "10.2 Element edm:Member" and "14.5.14.2 Element edm:PropertyValue" are addressed by segments like "&lt;7.2.1 Attribute Property>@...", "$OnDelete@...", "&lt;10.2.1 Attribute Name>@..." and "&lt;14.5.14.2.1 Attribute Property>@..." (where angle brackets denote a variable part and sections refer to specification "OData Version 4.0 Part 3: Common Schema Definition Language").</p><p>Annotations starting with "@@", for example "@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple" or "@@.AH.isMultiple" or "@@.isMultiple", represent computed annotations. Their name without the "@@" prefix must refer to a function in <code>mParameters.scope</code> in case of a relative name starting with a dot, which is stripped before lookup; see the <code>&lt;template:alias></code> instruction for XML Templating. In case of an absolute name, it is searched in <code>mParameters.scope</code> first and then in the global namespace. The names "requestCurrencyCodes" and "requestUnitsOfMeasure" default to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestCurrencyCodes" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestCurrencyCodes">#requestCurrencyCodes</a> and <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestUnitsOfMeasure" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestUnitsOfMeasure">#requestUnitsOfMeasure</a> resp. if not present in <code>mParameters.scope</code>. This function is called with the current object (or primitive value) and additional details and returns the result of this <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestObject" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestObject">#requestObject</a> call. The additional details are given as an object with the following properties: <ul> <li><code>{boolean} $$valueAsPromise</code> Whether the computed annotation may return a <code>Promise</code> resolving with its value (since 1.57.0) <li><code><a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Context">sap.ui.model.Context</a> context</code> Points to the current object <li><code>{string} schemaChildName</code> The qualified name of the schema child where the computed annotation has been found </ul> Computed annotations cannot be iterated by "@". The path must not continue after a computed annotation.</p><p>A segment which represents an OData qualified name is looked up in the global scope ("scope lookup") and thus determines a schema child which is used later on. Unknown qualified names are invalid. This way, "/acme.DefaultContainer/EMPLOYEES" addresses the "EMPLOYEES" child of the schema child named "acme.DefaultContainer". This also works indirectly ("/$EntityContainer/EMPLOYEES") and implicitly ("/EMPLOYEES", see below).</p><p>A segment which represents an OData simple identifier needs special preparations. The same applies to the empty segment after a trailing slash. <ol> <li> If the current object has a "$Action", "$Function" or "$Type" property, it is used for scope lookup first. This way, "/EMPLOYEES/ENTRYDATE" addresses the same object as "/EMPLOYEES/$Type/ENTRYDATE", namely the "ENTRYDATE" child of the entity type corresponding to the "EMPLOYEES" child of the entity container. The other cases jump from an action or function import to the corresponding action or function overloads. <li> Else if the segment is the first one within its path, the last schema child addressed via scope lookup is used instead of the current object. This can only happen indirectly as in "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/..." where the schema child is the entity container and the navigation property binding can contain the simple identifier of another entity set within the same container.</p><p>If the segment is the first one overall, "$EntityContainer" is inserted into the path implicitly. In other words, the entity container is used as the initial schema child. This way, "/EMPLOYEES" addresses the same object as "/$EntityContainer/EMPLOYEES", namely the "EMPLOYEES" child of the entity container. <li> Afterwards, if the current object is an array, it represents overloads for an action or function. Annotations of a parameter can be immediately addressed, no matter if they apply across all overloads or to a specific overload only, for example "/TEAMS/acme.NewAction/Team_ID@". Action overloads are then filtered by binding parameter; multiple overloads after filtering are invalid except if addressing all overloads via the segment "@$ui5.overload", for example "/acme.NewAction/@$ui5.overload".</p><p>Once a single overload has been determined, its parameters can be immediately addressed, for example "/TEAMS/acme.NewAction/Team_ID". For all other names, the overload's "$ReturnType/$Type" is used for scope lookup. This way, "/GetOldestWorker/AGE" addresses the same object as "/GetOldestWorker/$Function/0/$ReturnType/$Type/AGE", and "/TEAMS/acme.NewAction/MemberCount" (assuming "MemberCount" is not a parameter in this example) addresses the same object as "/TEAMS/acme.NewAction/@$ui5.overload/0/$ReturnType/$Type/MemberCount". In case a name can refer both to a parameter and to a property of the return type, an empty segment can be used instead of "@$ui5.overload/0/$ReturnType/$Type" to force return type lookup, for example "/TEAMS/acme.NewAction//Team_ID".</p><p>For primitive return types, the special segment "value" can be used to refer to the return type itself (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/execute">sap.ui.model.odata.v4.ODataContextBinding#execute</a>). This way, "/GetOldestAge/value" addresses the same object as "/GetOldestAge/$Function/0/$ReturnType" or as "/GetOldestAge/@$ui5.overload/0/$ReturnType" (which is needed for automatic type determination, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="requestUI5Type" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestUI5Type">#requestUI5Type</a>). </ol></p><p>A trailing slash can be used to continue a path and thus force scope lookup or OData simple identifier preparations, but then stay at the current object. This way, "/EMPLOYEES/$Type/" addresses the entity type itself corresponding to the "EMPLOYEES" child of the entity container. Although the empty segment is not an OData simple identifier, it can be used as a placeholder for one. In this way, "/EMPLOYEES/" addresses the same entity type as "/EMPLOYEES/$Type/". That entity type in turn is a map of all its OData children (that is, structural and navigation properties) and determines the set of possible child names that might be used after the trailing slash.</p><p>"$" can be used as the last segment to continue a path and thus force scope lookup, but no OData simple identifier preparations. In this way, it serves as a placeholder for a technical property. The path must not continue after "$", except for a computed annotation. Example: "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/$" addresses the referenced property itself, not the corresponding type like "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/" does. "/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Target/$NavigationPropertyPath/$@@.isMultiple" calls a computed annotation on the navigation property itself, not on the corresponding type.</p><p>Any other segment, including an OData simple identifier, is looked up as a property of the current object.<br><br>References: <ul><li>#getObject</li></ul></p>
             * @param {string} sPath <p>A relative or absolute path within the metadata model</p>
             * @param {sap.ui.model.Context} oContext <p>The context to be used as a starting point in case of a relative path</p>
             * @param {any} mParameters <p>Optional (binding) parameters; if they are given, <code>oContext</code> cannot be omitted</p>
             * @returns Promise<any> <p>A promise which is resolved with the requested metadata value as soon as it is available; it is rejected if the requested metadata cannot be loaded</p>
             */
            requestObject(sPath: string, oContext?: sap.ui.model.Context, mParameters?: any): Promise<any>;
            /**
             * <p>Requests the UI5 type for the given property path that formats and parses corresponding to the property's EDM type and constraints. The property's type must be a primitive type. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getUI5Type" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getUI5Type">#getUI5Type</a> for synchronous access.<br><br>References: <ul><li>#getUI5Type</li></ul></p>
             * @param {string} sPath <p>An absolute path to an OData property within the OData data model</p>
             * @returns Promise<any> <p>A promise that gets resolved with the corresponding UI5 type from <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a>; if no specific type can be determined, a warning is logged and <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type.Raw">sap.ui.model.odata.type.Raw</a> is used</p>
             */
            requestUI5Type(sPath: string): Promise<any>;
            /**
             * <p>Request unit customizing based on the code list reference given in the entity container's <code>com.sap.vocabularies.CodeList.v1.UnitOfMeasure</code> annotation.<br><br>References: <ul><li>#requestCurrencyCodes</li></ul></p>
             * @param {any} vRawValue <p>If present, it must be this meta model's root entity container</p>
             * @param {any} oDetails <p>The details object</p>
             * @returns Promise<any> <p>A promise resolving with the unit customizing which is a map from unit key to an object with the following properties: <ul> <li>StandardCode: The language-independent standard code (e.g. ISO) for the unit as referred to via the <code>com.sap.vocabularies.CodeList.v1.StandardCode</code> annotation on the unit's key, if present <li>Text: The language-dependent text for the unit as referred to via the <code>com.sap.vocabularies.Common.v1.Text</code> annotation on the unit's key <li>UnitSpecificScale: The decimals for the unit as referred to via the <code>com.sap.vocabularies.Common.v1.UnitSpecificScale</code> annotation on the unit's key; entries where this would be <code>null</code> are ignored, and an error is logged </ul> It resolves with <code>null</code>, if no <code>com.sap.vocabularies.CodeList.v1.UnitOfMeasure</code> annotation is found. It is rejected, if there is not exactly one unit key, or if the unit customizing cannot be loaded.</p>
             */
            requestUnitsOfMeasure(vRawValue?: any, oDetails?: any): Promise<any>;
            /**
             * <p>Requests information to retrieve a value list for the property given by <code>sPropertyPath</code>.</p>
             * @param {string} sPropertyPath <p>An absolute path to an OData property within the OData data model or a (meta) path to an operation parameter, for example "/TEAMS(1)/acme.NewAction/Team_ID"</p>
             * @param {boolean} bAutoExpandSelect <p>The value of the parameter <code>autoExpandSelect</code> for value list models created by this method. If the value list model is the data model associated with this meta model, this flag has no effect. Supported since 1.68.0</p>
             * @returns Promise<any> <p>A promise which is resolved with a map of qualifier to value list mapping objects structured as defined by <code>com.sap.vocabularies.Common.v1.ValueListType</code>; the map entry with key "" represents the mapping without qualifier. Each entry has an additional property "$model" which is the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> instance to read value list data via this mapping.</p><p>For fixed values, only one mapping is expected and the qualifier is ignored. The mapping is available with key "".</p><p>The promise is rejected with an error if there is no value list information available for the given property path. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueListType" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getValueListType">#getValueListType</a> to determine if value list information exists. It is also rejected with an error if the value list metadata is inconsistent.</p><p>An inconsistency can result from one of the following reasons: <ul> <li> There is a reference, but the referenced service does not contain mappings for the property. <li> The referenced service contains annotation targets in the namespace of the data service that are not mappings for the property. <li> Two different referenced services contain a mapping using the same qualifier. <li> A service is referenced twice. <li> There are multiple mappings for a fixed value list. <li> A <code>com.sap.vocabularies.Common.v1.ValueList</code> annotation in a referenced service has the property <code>CollectionRoot</code> or <code>SearchSupported</code>. <li> A <code>com.sap.vocabularies.Common.v1.ValueList</code> annotation in the service itself has the property <code>SearchSupported</code> and additionally the annotation <code>com.sap.vocabularies.Common.v1.ValueListWithFixedValues</code> is defined. </ul></p>
             */
            requestValueListInfo(sPropertyPath: string, bAutoExpandSelect?: boolean): Promise<any>;
            /**
             * <p>Determines which type of value list exists for the given property.<br><br>References: <ul><li>#getValueListType</li></ul></p>
             * @param {string} sPropertyPath <p>An absolute path to an OData property within the OData data model</p>
             * @returns Promise<any> <p>A promise that is resolved with the type of the value list, a constant of the enumeration <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ValueListType">sap.ui.model.odata.v4.ValueListType</a>. The promise is rejected if the property cannot be found in the metadata.</p>
             */
            requestValueListType(sPropertyPath: string): Promise<any>;
            /**
             * <p>Returns a string representation of this object.</p><p>In case there is no class or id information, a simple static string is returned. Subclasses should override this method.</p>
             * @returns string <p>A string description of this event provider</p>
             */
            toString(): string;
            /**
             * <p>Returns a string representation of this object including the URL to the $metadata document of the service.</p>
             * @returns string <p>A string description of this model</p>
             */
            toString(): string;
          }
          /**
           * <p>Model implementation for OData V4.</p><p>Every resource path (relative to the service root URL, no query options) according to "4 Resource Path" in specification "OData Version 4.0 Part 2: URL Conventions" is a valid data binding path within this model if a leading slash is added; for example "/" + "SalesOrderList('A%2FB%26C')" to access an entity instance with key "A/B&C". Note that appropriate URI encoding is necessary, see the example of <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataUtils/methods/sap.ui.model.odata.v4.ODataUtils.formatLiteral">sap.ui.model.odata.v4.ODataUtils.formatLiteral</a>. "4.5.1 Addressing Actions" needs an operation binding, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding">sap.ui.model.odata.v4.ODataContextBinding</a>.</p><p>Note that the OData V4 model has its own <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a> class. Bindings which are relative to such a V4 context depend on their corresponding parent binding and do not access data with their own service requests unless parameters are provided.</p><p><b>Group IDs</b> control the model's use of batch requests. Valid group IDs are: <ul> <li><b>$auto</b> and <b>$auto.*</b>: Bundles requests from the model in a batch request which is sent automatically before rendering. You can use different '$auto.*' group IDs to use different batch requests. The suffix may be any non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. The submit mode for these group IDs is always <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.SubmitMode/methods/Auto">sap.ui.model.odata.v4.SubmitMode#Auto</a>. </li> <li><b>$direct</b>: Sends requests directly without batch. The submit mode for this group ID is always <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.SubmitMode/methods/Direct">sap.ui.model.odata.v4.SubmitMode#Direct</a>. </li> <li>An application group ID, which is a non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. By default, an application group has the submit mode <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.SubmitMode/methods/API">sap.ui.model.odata.v4.SubmitMode#API</a>. It is possible to use a different submit mode; for details see <code>mParameters.groupProperties</code>. </li> </ul></p>
           */
          export class ODataModel extends sap.ui.model.Model {
            /**
             * <p>Constructor for a new ODataModel.</p>
             * @param {any} mParameters <p>The parameters</p>
             */
            constructor(mParameters: any);
            /**
             * <p>Attach event handler <code>fnFunction</code> to the 'sessionTimeout' event of this model.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             * @returns sap.ui.model.odata.v4.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            attachSessionTimeout(fnFunction: Function, oListener?: any): sap.ui.model.odata.v4.ODataModel;
            /**
             * <p>Create ContextBinding</p>
             * @param {string | any} sPath <p>the path pointing to the property that should be bound or an object which contains the following parameter properties: path, context, parameters</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @param {any} oEvents <p>event handlers can be passed to the binding ({change:myHandler})</p>
             * @returns sap.ui.model.ContextBinding 
             */
            bindContext(sPath: string | any, oContext?: any, mParameters?: any, oEvents?: any): sap.ui.model.ContextBinding;
            /**
             * <p>Creates a new context binding for the given path, context and parameters.</p><p>This binding is inactive and will not know the bound context initially. You have to call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Binding/methods/initialize">sap.ui.model.Binding#initialize</a> to get it updated asynchronously and register a change listener at the binding to be informed when the bound context is available.<br><br>References: <ul><li>sap.ui.model.Model#bindContext</li></ul></p>
             * @param {string} sPath <p>The binding path in the model; must not end with a slash</p>
             * @param {sap.ui.model.odata.v4.Context} oContext <p>The context which is required as base for a relative path</p>
             * @param {any} mParameters <p>Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters as specified below. Note: The binding creates its own data service request if it is absolute or if it has any parameters or if it is relative and has a context created via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createBindingContext" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/createBindingContext">#createBindingContext</a>. The following OData query options are allowed: <ul> <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-" <li> The $count, $expand, $filter, $levels, $orderby, $search and $select "5.1 System Query Options"; OData V4 only allows $count, $filter, $levels, $orderby and $search inside resource paths that identify a collection. In our case here, this means you can only use them inside $expand. </ul> All other query options lead to an error. Query options specified for the binding overwrite model query options.</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding <p>The context binding</p>
             */
            bindContext(sPath: string, oContext?: sap.ui.model.odata.v4.Context, mParameters?: any): sap.ui.model.odata.v4.ODataContextBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the list / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {sap.ui.model.Sorter} aSorters <p>initial sort order (can be either a sorter or an array of sorters) (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s (can be either a filter or an array of filters) (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.ListBinding 
             */
            bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
            /**
             * <p>Creates a new list binding for the given path and optional context which must resolve to an absolute OData path for an entity set.<br><br>References: <ul><li>sap.ui.model.Model#bindList</li></ul></p>
             * @param {string} sPath <p>The binding path in the model; must not be empty or end with a slash</p>
             * @param {sap.ui.model.Context} oContext <p>The context which is required as base for a relative path</p>
             * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} vSorters <p>The dynamic sorters to be used initially. Call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/sort">sap.ui.model.odata.v4.ODataListBinding#sort</a> to replace them. Static sorters, as defined in the '$orderby' binding parameter, are always executed after the dynamic sorters. Supported since 1.39.0.</p>
             * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} vFilters <p>The dynamic application filters to be used initially. Call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/filter">sap.ui.model.odata.v4.ODataListBinding#filter</a> to replace them. Static filters, as defined in the '$filter' binding parameter, are always combined with the dynamic filters using a logical <code>AND</code>. Supported since 1.39.0.</p>
             * @param {any} mParameters <p>Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or binding-specific parameters as specified below. Note: The binding creates its own data service request if it is absolute or if it has any parameters or if it is relative and has a context created via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createBindingContext" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/createBindingContext">#createBindingContext</a> or if it has sorters or filters. The following OData query options are allowed: <ul> <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-" <li> The $apply, $count, $expand, $filter, $levels, $orderby, $search, and $select "5.1 System Query Options" </ul> All other query options lead to an error. Query options specified for the binding overwrite model query options.</p>
             * @returns sap.ui.model.odata.v4.ODataListBinding <p>The list binding</p>
             */
            bindList(sPath: string, oContext?: sap.ui.model.Context, vSorters?: sap.ui.model.Sorter | sap.ui.model.Sorter[], vFilters?: sap.ui.model.Filter | sap.ui.model.Filter[], mParameters?: any): sap.ui.model.odata.v4.ODataListBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the property that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @returns sap.ui.model.PropertyBinding 
             */
            bindProperty(sPath: string, oContext?: any, mParameters?: any): sap.ui.model.PropertyBinding;
            /**
             * <p>Creates a new property binding for the given path. This binding is inactive and will not know the property value initially. You have to call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Binding/methods/initialize">sap.ui.model.Binding#initialize</a> to get it updated asynchronously and register a change listener at the binding to be informed when the value is available.</p><p>It is possible to create a property binding pointing to metadata. A '##' in the binding's path is recognized as a separator and splits it into two parts. The part before the separator is resolved with the binding's context and the result is transformed into a metadata context (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getMetaContext">sap.ui.model.odata.v4.ODataMetaModel#getMetaContext</a>). The part following the separator is then interpreted relative to this metadata context, even if it starts with a '/'; a trailing '/' is allowed here, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestObject">sap.ui.model.odata.v4.ODataMetaModel#requestObject</a> for the effect it has.</p><p>If the target type specified in the corresponding control property's binding info is "any" and the binding is relative or points to metadata, the binding may have an object value; in this case and unless the binding refers to an action advertisement the binding's mode must be <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.BindingMode.OneTime">sap.ui.model.BindingMode.OneTime</a>.<br><br>References: <ul><li>sap.ui.base.ManagedObject#bindProperty</li><li>sap.ui.model.Model#bindProperty</li><li>sap.ui.model.PropertyBinding#setType</li></ul></p>
             * @param {string} sPath <p>The binding path in the model; must not be empty. Must not end with a '/' unless the binding points to metadata.</p>
             * @param {sap.ui.model.Context} oContext <p>The context which is required as base for a relative path</p>
             * @param {any} mParameters <p>Map of binding parameters which can be OData query options as specified in "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameter "$$groupId". All "5.2 Custom Query Options" are allowed except for those with a name starting with "sap-". All other query options lead to an error. Query options specified for the binding overwrite model query options. Note: The binding only creates its own data service request if it is absolute or if it is relative to a context created via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="createBindingContext" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/createBindingContext">#createBindingContext</a>. The binding parameters are ignored in case the binding creates no own data service request or in case the binding points to metadata.</p>
             * @returns sap.ui.model.odata.v4.ODataPropertyBinding <p>The property binding</p>
             */
            bindProperty(sPath: string, oContext?: sap.ui.model.Context, mParameters?: any): sap.ui.model.odata.v4.ODataPropertyBinding;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path pointing to the tree / array that should be bound</p>
             * @param {any} oContext <p>the context object for this databinding (optional)</p>
             * @param {any[]} aFilters <p>predefined filter/s contained in an array (optional)</p>
             * @param {any} mParameters <p>additional model specific parameters (optional)</p>
             * @param {any[]} aSorters <p>predefined sap.ui.model.sorter/s contained in an array (optional)</p>
             * @returns sap.ui.model.TreeBinding 
             */
            bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Model#bindTree</li></ul></p>
             */
            bindTree(): void;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {string} sPath <p>the path to create the new context from</p>
             * @param {any} oContext <p>the context which should be used to create the new binding context</p>
             * @param {any} mParameters <p>the parameters used to create the new binding context</p>
             * @param {Function} fnCallBack <p>the function which should be called after the binding context has been created</p>
             * @param {boolean} bReload <p>force reload even if data is already available. For server side models this should refetch the data from the server</p>
             * @returns sap.ui.model.Context <p>the binding context, if it could be created synchronously</p>
             */
            createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: Function, bReload?: boolean): sap.ui.model.Context;
            /**
             * <p>Creates a binding context for the given path. A relative path can only be resolved if a context is provided. Note: The parameters <code>mParameters</code>, <code>fnCallBack</code>, and <code>bReload</code> from <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.Model/methods/createBindingContext">sap.ui.model.Model#createBindingContext</a> are not supported.</p><p>It is possible to create binding contexts pointing to metadata. A '##' is recognized as separator in the resolved path and splits it into two parts; note that '#' may also be used as separator but is deprecated since 1.51. The part before the separator is transformed into a metadata context (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/getMetaContext">sap.ui.model.odata.v4.ODataMetaModel#getMetaContext</a>). The part following the separator is then interpreted relative to this metadata context, even if it starts with a '/'; a trailing '/' is allowed here, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataMetaModel/methods/requestObject">sap.ui.model.odata.v4.ODataMetaModel#requestObject</a> for the effect it has.</p><p>A binding path may also point to an operation advertisement which is addressed with '#<namespace>.<operation>' and is part of the data payload, not the metadata. The metadata of an operation can be addressed via '##' as described above.</p><p>Examples: <ul> <li><code>/Products('42')/Name##@com.sap.vocabularies.Common.v1.Label</code> points to the "Label" annotation of the "Name" property of the entity set "Products". <li><code>/##Products/Name@com.sap.vocabularies.Common.v1.Label</code> has no data path part and thus starts at the metadata root. It also points to the "Label" annotation of the "Name" property of the entity set "Products". <li><code>/Products##/</code> points to the entity type (note the trailing '/') of the entity set "Products". <li><code>/EMPLOYEES('1')/##com.sap.Action</code> points to the metadata of an action bound to the entity set "EMPLOYEES". <li><code>/EMPLOYEES('1')/#com.sap.Action</code> does not point to metadata, but to the action advertisement. </ul><br><br>References: <ul><li>sap.ui.model.Model#createBindingContext</li></ul></p>
             * @param {string} sPath <p>The binding path, may be relative to the provided context</p>
             * @param {sap.ui.model.Context} oContext <p>The context which is required as base for a relative path</p>
             * @returns sap.ui.model.Context <p>The binding context with the resolved path and the model instance</p>
             */
            createBindingContext(sPath: string, oContext?: sap.ui.model.Context): sap.ui.model.Context;
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys the MessageProcessor Instance</p>
             */
            destroy(): void;
            /**
             * <p>Destroys the model and clears the model data. A model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.<br><br>References: <ul><li>sap.ui.base.Object.prototype.destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys this model, its requestor and its meta model.<br><br>References: <ul><li>sap.ui.model.Model#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Implement in inheriting classes</p>
             * @param {any} oContext <p>to destroy</p>
             */
            destroyBindingContext(oContext: any): void;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Model#destroyBindingContext</li></ul></p>
             */
            destroyBindingContext(): void;
            /**
             * <p>Detach event handler <code>fnFunction</code> from the 'sessionTimeout' event of this model.</p>
             * @param {Function} fnFunction <p>The function to call when the event occurs</p>
             * @param {any} oListener <p>Object on which to call the given function</p>
             * @returns sap.ui.model.odata.v4.ODataModel <p><code>this</code> to allow method chaining</p>
             */
            detachSessionTimeout(fnFunction: Function, oListener?: any): sap.ui.model.odata.v4.ODataModel;
            /**
             * <p>Returns the model's group ID.<br><br>References: <ul><li>sap.ui.model.odata.v4.ODataModel#constructor</li></ul></p>
             * @returns string <p>The group ID</p>
             */
            getGroupId(): string;
            /**
             * <p>Returns the meta model associated with this model if it is available for the concrete model type.</p>
             * @returns sap.ui.model.MetaModel <p>The meta model or undefined if no meta model exists.</p>
             */
            getMetaModel(): sap.ui.model.MetaModel;
            /**
             * <p>Returns the meta model for this ODataModel.<br><br>References: <ul><li>sap.ui.model.Model#getMetaModel</li></ul></p>
             * @returns sap.ui.model.odata.v4.ODataMetaModel <p>The meta model for this ODataModel</p>
             */
            getMetaModel(): sap.ui.model.odata.v4.ODataMetaModel;
            /**
             * <p>Returns the version of the OData service.</p>
             * @returns string <p>The version of the OData service</p>
             */
            getODataVersion(): string;
            /**
             * <p>Returns the model's update group ID.<br><br>References: <ul><li>sap.ui.model.odata.v4.ODataModel#constructor</li></ul></p>
             * @returns string <p>The update group ID</p>
             */
            getUpdateGroupId(): string;
            /**
             * <p>Returns <code>true</code> if there are pending changes, meaning updates or created entities (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a>) that have not yet been successfully sent to the server.</p>
             * @returns boolean <p><code>true</code> if there are pending changes</p>
             */
            hasPendingChanges(): boolean;
            /**
             * <p>Refresh the model. This will check all bindings for updated data and update the controls if data has been changed.</p>
             * @param {boolean} bForceUpdate <p>Update controls even if data has not been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the model by calling refresh on all bindings which have a change event handler attached.</p><p>Note: When calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/refresh">#refresh</a> multiple times, the result of the request triggered by the last call determines the model's data; it is <b>independent</b> of the order of calls to <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitBatch" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">#submitBatch</a> with the given group ID.</p><p>If there are pending changes, an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitBatch" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resetChanges" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/refresh">#refresh</a>.<br><br>References: <ul><li>sap.ui.model.Model#refresh</li><li>sap.ui.model.odata.v4.ODataContextBinding#refresh</li><li>sap.ui.model.odata.v4.ODataListBinding#refresh</li><li>sap.ui.model.odata.v4.ODataPropertyBinding#refresh</li></ul></p>
             * @param {string} sGroupId <p>The group ID to be used for refresh; valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>. It is ignored for suspended bindings, because resume uses the binding's group ID</p>
             */
            refresh(sGroupId?: string): void;
            /**
             * <p>Resets all property changes and created entities associated with the given group ID which have not been successfully submitted via <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="submitBatch" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">#submitBatch</a>. Resets also invalid user input for the same group ID. This function does not reset the deletion of entities (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context/methods/delete">sap.ui.model.odata.v4.Context#delete</a>) and the execution of OData operations (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataContextBinding/methods/execute">sap.ui.model.odata.v4.ODataContextBinding#execute</a>).<br><br>References: <ul><li>sap.ui.model.odata.v4.ODataModel#constructor.</li></ul></p>
             * @param {string} sGroupId <p>A valid group ID as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>. If it is <code>undefined</code>, the model's <code>updateGroupId</code> is used. Note that the default <code>updateGroupId</code> is '$auto', which is valid here since 1.67.0.</p>
             */
            resetChanges(sGroupId?: string): void;
            /**
             * <p>Submits the requests associated with the given group ID in one batch request. Requests from subsequent calls to this method for the same group ID may be combined in one batch request using separate change sets. For group IDs with <a target="_self" class="jsdoclink" href="#/api/Auto">sap.ui.model.odata.v4.SubmitMode.Auto</a>, only a single change set is used; this method is useful to repeat failed updates or creates (see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataListBinding/methods/create">sap.ui.model.odata.v4.ODataListBinding#create</a>).</p>
             * @param {string} sGroupId <p>A valid group ID as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             * @returns Promise<any> <p>A promise on the outcome of the HTTP request resolving with <code>undefined</code>; it is rejected with an error if the batch request itself fails</p>
             */
            submitBatch(sGroupId: string): Promise<any>;
            /**
             * <p>Returns a string representation of this object.</p><p>In case there is no class or id information, a simple static string is returned. Subclasses should override this method.</p>
             * @returns string <p>A string description of this event provider</p>
             */
            toString(): string;
            /**
             * <p>Returns a string representation of this object including the service URL.</p>
             * @returns string <p>A string description of this model</p>
             */
            toString(): string;
          }
          /**
           * <p>Property binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested' and 'DataStateChange'. For unsupported events, an error is thrown.</p>
           */
          export class ODataPropertyBinding extends sap.ui.model.PropertyBinding {
            /**
             * <p>Destructor method for objects.</p>
             */
            destroy(): void;
            /**
             * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.<br><br>References: <ul><li>sap.ui.base.EventProvider#destroy</li></ul></p>
             */
            destroy(): void;
            /**
             * <p>Destroys the object. The object must not be used anymore after this function was called.</p>
             */
            destroy(): void;
            /**
             * <p>Returns the root binding of this binding's hierarchy, see binding <a target="_self" href="#/topic/54e0ddf695af4a6c978472cecb01c64d">Initialization and Read Requests</a>.</p>
             * @returns sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding|sap.ui.model.odata.v4.ODataPropertyBinding <p>The root binding or <code>undefined</code> if this binding is not yet resolved.</p>
             */
            getRootBinding(): sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding;
            /**
             * <p>Returns the current value of the bound target</p>
             * @returns any <p>the current value of the bound target</p>
             */
            getValue(): any;
            /**
             * <p>Returns the current value.<br><br>References: <ul><li>sap.ui.model.PropertyBinding#getValue</li></ul></p>
             * @returns any <p>The current value</p>
             */
            getValue(): any;
            /**
             * <p>Determines which type of value list exists for this property.</p>
             * @returns sap.ui.model.odata.v4.ValueListType <p>The value list type</p>
             */
            getValueListType(): sap.ui.model.odata.v4.ValueListType;
            /**
             * <p>Returns <code>true</code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.</p>
             * @returns boolean <p><code>true</code> if the binding has pending changes</p>
             */
            hasPendingChanges(): boolean;
            /**
             * <p>Returns whether the binding is initial, which means it did not get an initial value yet</p>
             * @returns boolean <p>whether binding is initial</p>
             */
            isInitial(): boolean;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Binding#isInitial</li></ul></p>
             */
            isInitial(): void;
            /**
             * <p>Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate</code>.</p>
             * @param {boolean} bForceUpdate <p>Update the bound control even if no data has been changed</p>
             */
            refresh(bForceUpdate: boolean): void;
            /**
             * <p>Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.</p><p>Refresh is supported for bindings which are not relative to a <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.Context">sap.ui.model.odata.v4.Context</a>.</p><p>Note: When calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/refresh">#refresh</a> multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent</b> of the order of calls to <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> with the given group ID.</p><p>If there are pending changes, an error is thrown. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/hasPendingChanges">#hasPendingChanges</a> to check if there are pending changes. If there are changes, call <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a> to submit the changes or <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/resetChanges">sap.ui.model.odata.v4.ODataModel#resetChanges</a> to reset the changes before calling <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="refresh" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/refresh">#refresh</a>.<br><br>References: <ul><li>sap.ui.model.Binding#refresh</li><li>#getRootBinding</li><li>#hasPendingChanges</li><li>#resetChanges</li><li>#suspend</li></ul></p>
             * @param {string} sGroupId <p>The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="resume" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/resume">#resume</a> uses the binding's group ID.</p><p>Valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             */
            refresh(sGroupId?: string): void;
            /**
             * <p>Requests information to retrieve a value list for this property.</p>
             * @param {boolean} bAutoExpandSelect <p>The value of the parameter <code>autoExpandSelect</code> for value list models created by this method. If the value list model is this binding's model, this flag has no effect. Supported since 1.68.0</p>
             * @returns Promise<any> <p>A promise which is resolved with a map of qualifier to value list mapping objects structured as defined by <code>com.sap.vocabularies.Common.v1.ValueListMappingType</code>; the map entry with key "" represents the mapping without qualifier. Each entry has an additional property "$model" which is the <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a> instance to read value list data via this mapping.</p><p>For fixed values, only one mapping is expected and the qualifier is ignored. The mapping is available with key "".</p><p>The promise is rejected with an error if there is no value list information available for this property. Use <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValueListType" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/getValueListType">#getValueListType</a> to determine if value list information exists. It is also rejected with an error if the value list metadata is inconsistent.</p><p>An inconsistency can result from one of the following reasons: <ul> <li> There is a reference, but the referenced service does not contain mappings for the property. <li> The referenced service contains annotation targets in the namespace of the data service that are not mappings for the property. <li> Two different referenced services contain a mapping using the same qualifier. <li> A service is referenced twice. <li> No mappings have been found. </ul></p>
             */
            requestValueListInfo(bAutoExpandSelect?: boolean): Promise<any>;
            /**
             * <p>Determines which type of value list exists for this property.</p>
             * @returns Promise<any> <p>A promise that is resolved with the type of the value list. It is rejected if the property cannot be found in the metadata.</p>
             */
            requestValueListType(): Promise<any>;
            /**
             * <p>Resets all pending changes of this binding, see <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="hasPendingChanges" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/methods/hasPendingChanges">#hasPendingChanges</a>. Resets also invalid user input.</p>
             */
            resetChanges(): void;
            /**
             * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.</p>
             */
            resume(): void;
            /**
             * <p>Resumes the binding update. Change events will be fired again.</p><p>When the binding is resumed and the control value was changed in the meantime, the control value will be set to the current value from the model and a change event will be fired.</p>
             */
            resume(): void;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Binding#resume</li></ul></p>
             */
            resume(): void;
            /**
             * <p>Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.</p>
             * @param {sap.ui.model.Type} oType <p>the type for the binding</p>
             * @param {string} sInternalType <p>the internal type of the element property which this binding is bound against.</p>
             */
            setType(oType: sap.ui.model.Type, sInternalType: string): void;
            /**
             * <p>Sets the optional type and internal type for this binding; used for formatting and parsing. Fires a change event if the type has changed.<br><br>References: <ul><li>sap.ui.model.PropertyBinding#setType</li></ul></p>
             * @param {sap.ui.model.Type} oType <p>The type for this binding</p>
             * @param {string} sInternalType <p>The internal type of the element property which owns this binding, for example "any", "boolean", "float", "int", "string"; see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.type">sap.ui.model.odata.type</a> for more information</p>
             */
            setType(oType: sap.ui.model.Type, sInternalType: string): void;
            /**
             * <p>Sets the value for this binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.</p>
             * @param {any} vValue <p>the value to set for this binding</p>
             */
            setValue(vValue: any): void;
            /**
             * <p>Sets the new current value and updates the cache. If the value cannot be accepted or cannot be updated on the server, an error is logged to the console and added to the message manager as a technical message.<br><br>References: <ul><li>sap.ui.model.PropertyBinding#setValue</li></ul></p>
             * @param {any} vValue <p>The new value which must be primitive</p>
             * @param {string} sGroupId <p>The group ID to be used for this update call; if not specified, the update group ID for this binding (or its relevant parent binding) is used, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataPropertyBinding/constructor">sap.ui.model.odata.v4.ODataPropertyBinding#constructor</a>. Valid values are <code>undefined</code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel">sap.ui.model.odata.v4.ODataModel</a>.</p>
             */
            setValue(vValue: any, sGroupId?: string): void;
            /**
             * <p>Suspends the binding update. No change events will be fired.</p><p>A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.</p>
             */
            suspend(): void;
            /**
             * <p>Method not supported<br><br>References: <ul><li>sap.ui.model.Binding#suspend</li></ul></p>
             */
            suspend(): void;
          }
          /**
           * <p><p>A collection of methods which help to consume OData V4 services.</p></p>
           */
          namespace ODataUtils {
            /**
             * <p>Compares the given OData values.</p>
             * @param {any} vValue1 <p>The first value to compare</p>
             * @param {any} vValue2 <p>The second value to compare</p>
             * @param {boolean | string} vEdmType <p>If <code>true</code> or "Decimal", the string values <code>vValue1</code> and <code>vValue2</code> are assumed to be valid "Edm.Decimal" or "Edm.Int64" values and are compared as a decimal number (only sign, integer and fraction digits; no exponential format). If "DateTime", the string values <code>vValue1</code> and <code>vValue2</code> are assumed to be valid "Edm.DateTimeOffset" values and are compared based on the corresponding number of milliseconds since 1 January, 1970 UTC. Otherwise the values are compared with the JavaScript operators <code>===</code> and <code>></code>.</p>
             * @returns number <p>The result of the comparison: <code>0</code> if the values are equal, <code>1</code> if the first value is larger, <code>-1</code> if the second value is larger, <code>NaN</code> if they cannot be compared</p>
             */
            function compare(vValue1: any, vValue2: any, vEdmType?: boolean | string): number;
            /**
             * <p>Formats the given OData value into a literal suitable for usage in data binding paths and URLs.</p>
             * @param {any} vValue <p>The value according to "OData JSON Format Version 4.0" section "7.1 Primitive Value"</p>
             * @param {string} sType <p>The OData primitive type, e.g. "Edm.String"</p>
             * @returns string <p>The literal according to "OData Version 4.0 Part 2: URL Conventions" section "5.1.1.6.1 Primitive Literals"</p>
             */
            function formatLiteral(vValue: any, sType: string): string;
            /**
             * <p>Parses an "Edm.Date" value and returns the corresponding JavaScript <code>Date</code> value (UTC with a time value of "00:00:00").</p>
             * @param {string} sDate <p>The "Edm.Date" value to parse</p>
             * @returns Date <p>The JavaScript <code>Date</code> value</p>
             */
            function parseDate(sDate: string): Date;
            /**
             * <p>Parses an "Edm.DateTimeOffset" value and returns the corresponding JavaScript <code>Date</code> value.</p>
             * @param {string} sDateTimeOffset <p>The "Edm.DateTimeOffset" value to parse</p>
             * @returns Date <p>The JavaScript <code>Date</code> value</p>
             */
            function parseDateTimeOffset(sDateTimeOffset: string): Date;
            /**
             * <p>Parses an "Edm.TimeOfDay" value and returns the corresponding JavaScript <code>Date</code> value (UTC with a date value of "1970-01-01").</p>
             * @param {string} sTimeOfDay <p>The "Edm.TimeOfDay" value to parse</p>
             * @returns Date <p>The JavaScript <code>Date</code> value</p>
             */
            function parseTimeOfDay(sTimeOfDay: string): Date;
          }
          /**
           * <p><p>Modes to control the use of batch requests for a group ID.</p></p>
           */
          export enum SubmitMode {
            /**
             * <p>Requests associated with the group ID are sent in a batch request via <a target="_self" class="jsdoclink" href="#/api/sap.ui.model.odata.v4.ODataModel/methods/submitBatch">sap.ui.model.odata.v4.ODataModel#submitBatch</a>.</p>
             */
            API = "API",
            /**
             * <p>Requests associated with the group ID are sent in a batch request which is triggered automatically before rendering.</p>
             */
            Auto = "Auto",
            /**
             * <p>Requests associated with the group ID are sent directly without batch.</p>
             */
            Direct = "Direct",
          }
          /**
           * <p><p>Specifies the value list type of a property.</p><br><br>References: <ul><li>sap.ui.model.odata.v4.ODataMetaModel#getValueListType</li></ul></p>
           */
          export enum ValueListType {
            /**
             * <p>There is one enumeration of fixed values.</p>
             */
            Fixed = "Fixed",
            /**
             * <p>There is no value list.</p>
             */
            None = "None",
            /**
             * <p>There is a dynamic value list with multiple queries including selection criteria.</p>
             */
            Standard = "Standard",
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>ResourceBundle-based DataBinding</p></p>
       */
      namespace resource {
        /**
         * <p>Model implementation for resource bundles.</p><p>This model allows to bind control or <code>ManagedObject</code> properties against translatable texts. Its data is taken from a <a target="_self" class="jsdoclink" href="#/api/module%3Asap%2Fbase%2Fi18n%2FResourceBundle">module:sap/base/i18n/ResourceBundle</a> and it only supports property bindings, no aggregation or tree bindings.</p><p>In contrast to most other models, binding paths for a <code>ResourceModel</code> must not start with a slash, they are absolute by default and there's no further structure. Each key in the underlying resource bundle is a valid binding path.</p><p>To allow extensibility scenarios, the texts of the resource bundle can be <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="enhance" href="#/api/sap.ui.model.resource.ResourceModel/methods/enhance">enhanced</a> with additional resource bundles. These additional bundles can define new texts for existing keys, texts for new keys, or both. When texts for existing keys are replaced, the latest enhancement wins.</p><p>This model supports the binding modes <code>OneWay</code> and <code>OneTime</code>, but not <code>TwoWay</code>. When the recommended asynchronous loading of the bundle is used, binding mode <code>OneTime</code> can't be used.</p>
         */
        export class ResourceModel extends sap.ui.model.Model {
          /**
           * <p>Constructor for a new ResourceModel.</p>
           * @param {any} oData <p>Parameters used to initialize the <code>ResourceModel</code>; at least one of <code>bundle</code>, <code>bundleName</code> or <code>bundleUrl</code> must be set; if more than one property is set, they will be evaluated in the mentioned order</p>
           */
          constructor(oData: any);
          /**
           * <p>Enhances the resource model with a custom resource bundle.</p><p>The custom bundle can define new texts for keys existing in the main bundle, texts for new keys, or both. A resource model can be enhanced with multiple resource bundles by calling this method multiple times. Each call appends to the list of enhancements, but no bundle can be removed from the list.</p><p>When looking up a text for a key, the enhancements are processed in reverse order. Texts from the last added resource bundle are preferred over texts from previously added bundles or texts from the main bundle.</p>
           * @param {any | any | any} oData <p>Either an already loaded bundle instance, or a configuration object with parameters to load a new resource bundle. When a configuration object is given, at least one of <code>bundleUrl</code> or <code>bundleName</code> must be set; if both are set, <code>bundleName</code> wins</p>
           * @returns Promise<any> <p>A Promise when this <code>ResourceModel</code> configured to act asynchronously, null otherwise; the Promise resolves when the enhancement is finished</p>
           */
          enhance(oData: any | any | any): Promise<any>;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the attribute value</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Returns the value for the property with the given <code>sPropertyName</code></p>
           * @param {string} sPath <p>the path to the property</p>
           * @returns string <p>the value of the property</p>
           */
          getProperty(sPath: string): string;
          /**
           * <p>Returns the resource bundle of this model.</p>
           * @returns any <p>loaded resource bundle or a Promise on it in asynchronous case</p>
           */
          getResourceBundle(): any | any;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       */
      namespace TreeBindingUtils {
        /**
         * <p>Merges together oNewSection into a set of other sections (aSections) The array/objects are not modified, the function returns a new section array.</p>
         * @param {object[]} aSections <p>the sections into which oNewSection will be merged</p>
         * @param {any} oNewSection <p>the section which should be merged into aNewSections</p>
         * @returns object[] <p>a new array containing all sections from aSections merged with oNewSection</p>
         */
        function mergeSections(aSections: object[], oNewSection: any): object[];
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       * <p><p>XML-based DataBinding</p></p>
       */
      namespace xml {
        /**
         * <p>Model implementation for XML format</p>
         */
        export class XMLModel extends sap.ui.model.ClientModel {
          /**
           * <p>Constructor for a new XMLModel.</p>
           * @param {any} oData <p>either the URL where to load the XML from or an XML</p>
           */
          constructor(oData: any);
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the object</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           * @param {any} mParameters <p>additional model specific parameters</p>
           */
          getObject(sPath: string, oContext?: any, mParameters?: any): any;
          /**
           * <p>Returns the object for the given <code>path</code></p>
           * @param {string} sPath <p>the path to the object</p>
           * @param {any} oContext <p>the context which will be used to retrieve the object</p>
           * @returns any <p>the object</p>
           */
          getObject(sPath: string, oContext?: any): any;
          /**
           * <p>Implement in inheriting classes</p>
           * @param {string} sPath <p>the path to where to read the attribute value</p>
           * @param {any} oContext <p>the context with which the path should be resolved</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Returns the value for the property with the given <code>sPropertyName</code></p>
           * @param {string} sPath <p>the path to the property</p>
           * @param {any} oContext <p>the context which will be used to retrieve the property</p>
           * @returns any <p>the value of the property</p>
           */
          getProperty(sPath: string, oContext?: any): any;
          /**
           * <p>Serializes the current XML data of the model into a string.</p>
           * @returns undefined <p>the XML document serialized as string</p>
           */
          getXML(): undefined;
          /**
           * <p>Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model. Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.</p>
           * @param {string} sURL <p>A string containing the URL to which the request is sent</p>
           * @param {any | string} oParameters <p>A map of parameters or a single parameter string that is sent to the server with the request</p>
           * @param {boolean} bAsync <p>Whether the request should be asynchronous or not</p>
           * @param {string} sType <p>HTTP method of request</p>
           * @param {string} bCache <p>Force no caching if false</p>
           * @param {any} mHeaders <p>An object of additional header key/value pairs to send along with the request</p>
           */
          loadData(sURL: string, oParameters?: any | string, bAsync?: boolean, sType?: string, bCache?: string, mHeaders?: any): void;
          /**
           * <p>Sets the provided XML encoded data object to the model</p>
           * @param {any} oData <p>the data to set to the model</p>
           */
          setData(oData: any): void;
          /**
           * <p>Sets an XML namespace to use in the binding path</p>
           * @param {string} sNameSpace <p>the namespace URI</p>
           * @param {string} sPrefix <p>the prefix for the namespace (optional)</p>
           */
          setNameSpace(sNameSpace: string, sPrefix?: string): void;
          /**
           * <p>Sets a new value for the given property <code>sPropertyName</code> in the model. If the model value changed all interested parties are informed.</p>
           * @param {string} sPath <p>path of the property to set</p>
           * @param {any} oValue <p>value to set the property to</p>
           * @param {any} oContext <p>the context which will be used to set the property</p>
           * @param {boolean} bAsyncUpdate <p>whether to update other bindings dependent on this property asynchronously</p>
           * @returns boolean <p>true if the value was set correctly and false if errors occurred like the entry was not found.</p>
           */
          setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
          /**
           * <p>Sets the specified XML formatted string text to the model</p>
           * @param {string} sXMLText <p>the XML data as string</p>
           */
          setXML(sXMLText: string): void;
        }
        /**
         * <p>Tree binding implementation for XML format</p>
         */
        export class XMLTreeBinding extends sap.ui.model.ClientTreeBinding {
          /**
           * @param {sap.ui.model.xml.XMLModel} oModel undefined
           * @param {string} Path <p>pointing to the tree or array that should be bound</p>
           * @param {any} oContext <p>Context object for this binding</p>
           * @param {any[]} aFilters <p>Predefined filters contained in an array</p>
           * @param {any} mParameters <p>Additional model-specific parameters</p>
           */
          constructor(oModel: sap.ui.model.xml.XMLModel, Path: string, oContext?: any, aFilters?: any[], mParameters?: any);
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace VersionInfo {
      /**
       * <p>Loads the version info file (resources/sap-ui-version.json) asynchronously and returns a Promise. The returned Promise resolves with the version info files content.</p><p>If a library name is specified then the version info of the individual library will be retrieved.</p><p>In case of the version info file is not available an error will occur when calling this function.</p>
       * @param {any} mOptions <p>an object map (see below)</p>
       * @returns Promise<any> <p>a Promise which resolves with one of these values: the full version info, the library specific one, undefined if library is not listed or there was an error during loading.</p>
       */
      function load(mOptions: any): Promise<any>;
    }
  }
}
declare namespace sap {
  /**
   */
  namespace base {
  }
}
declare namespace sap {
  namespace base {
    /**
     */
    namespace i18n {
    }
  }
}
declare namespace sap {
  namespace base {
    /**
     */
    namespace security {
    }
  }
}
declare namespace sap {
  namespace base {
    /**
     */
    namespace strings {
    }
  }
}
declare namespace sap {
  namespace base {
    /**
     */
    namespace util {
    }
  }
}
declare namespace sap {
  namespace base {
    namespace util {
      /**
       */
      namespace array {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace support {
        /**
         * <p>This class represents a plugin for the support tool functionality of UI5. This class is internal and all its functions must not be used by an application.</p>
         */
        export abstract class Plugin extends sap.ui.base.Object {
          /**
           * <p>Creates an instance of sap.ui.core.support.Plugin.</p>
           */
          constructor();
        }
        /**
         * <p>RuleEngineOpaAssertions represents a set of methods with which OPA test assertions can be enhanced. To use this functionality, <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.support.RuleEngineOpaExtension">RuleEngineOpaExtension</a> should be provided in the OPA extensions list.</p>
         */
        export class RuleEngineOpaAssertions {
          /**
           * <p>If there are issues found the assertion result will be false and a report with all the issues will be generated in the message of the test. If no issues were found the assertion result will be true and no report will be generated.</p><p>If "sap-skip-rules-issues=true" is set as an URI parameter, assertion result will be always positive.</p>
           * @returns Promise<any> <p>Promise.</p>
           */
          getFinalReport(): Promise<any>;
          /**
           * <p>This stores the passed history format in window._$files array. Accessing this array give an opportunity to store this history in file</p>
           * @param {any} options <p>The options used for configuration</p>
           * @returns Promise<any> <p>Promise.</p>
           */
          getReportAsFileInFormat(options?: any): Promise<any>;
          /**
           * <p>Run the Support Assistant and analyze against a specific state of the application. Depending on the options passed the assertion might either fail or not if any issues were found.</p><p>If "sap-skip-rules-issues=true" is set as an URI parameter, assertion result will be always positive.</p>
           * @param {any} options <p>The options used to configure an analysis.</p>
           * @returns Promise<any> <p>Promise.</p>
           */
          noRuleFailures(options?: any): Promise<any>;
        }
        /**
         * <p>This class represents an extension for OPA tests which allows running Support Assistant checks.</p><p>It enriches the OPA assertions with the methods described in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.support.RuleEngineOpaAssertions">sap.ui.core.support.RuleEngineOpaAssertions</a>.</p><p>For more information, see <a target="_self" href="#/topic/cfabbd4dfc054936997d9d00916e1668">Integrating the Support Assistant in OPA Tests</a>.</p>
         */
        export class RuleEngineOpaExtension extends sap.ui.base.Object {
          /**
           */
          constructor();
          /**
           * @returns sap.ui.core.support.RuleEngineOpaAssertions <p>Object with the methods which will enhance the OPA assertions.</p>
           */
          getAssertions(): sap.ui.core.support.RuleEngineOpaAssertions;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace dom {
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace dom {
      /**
       */
      namespace jquery {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace dom {
      /**
       */
      namespace units {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace events {
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace events {
      /**
       */
      namespace jquery {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace performance {
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace performance {
      /**
       */
      namespace trace {
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace security {
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace util {
    }
  }
}
declare namespace sap {
  namespace ui {
    /**
     */
    namespace app {
      /**
       * <p>Base class for application classes.</p>
       */
      export abstract class Application extends sap.ui.core.Component {
        /**
         * <p>Abstract application class. Extend this class to create a central application class.</p><p>Only one instance is allowed.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
         * @param {string} sId <p>optional id for the application; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
         * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new application instance</p>
         */
        constructor(sId?: string, mSettings?: any);
        /**
         * <p>Creates and returns the root component. Override this method in your application implementation, if you want to override the default creation by metadata.</p>
         * @returns sap.ui.core.UIComponent <p>the root component</p>
         */
        protected createRootComponent(): sap.ui.core.UIComponent;
        /**
         * <p>Destructor method for objects.</p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.</p>
         * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
         */
        destroy(bSuppressInvalidate?: boolean): void;
        /**
         * <p>References: <ul><li>sap.ui.core.Component#destroy</li></ul></p>
         */
        destroy(): void;
        /**
         * <p>Destroys the rootComponent in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootComponent" href="#/api/sap.ui.app.Application/methods/getRootComponent">rootComponent</a>.</p>
         * @returns sap.ui.app.Application <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        destroyRootComponent(): sap.ui.app.Application;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getConfig" href="#/api/sap.ui.app.Application/methods/getConfig">config</a>.</p>
         * @returns any <p>Value of property <code>config</code></p>
         */
        getConfig(): any;
        /**
         * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRoot" href="#/api/sap.ui.app.Application/methods/getRoot">root</a>.</p>
         * @returns string <p>Value of property <code>root</code></p>
         */
        getRoot(): string;
        /**
         * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootComponent" href="#/api/sap.ui.app.Application/methods/getRootComponent">rootComponent</a>.</p>
         * @returns sap.ui.core.UIComponent 
         */
        getRootComponent(): sap.ui.core.UIComponent;
        /**
         * <p>The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application class implementation to execute code which relies on a loaded DOM / UI5.</p>
         */
        main(): void;
        /**
         * <p>On before exit application hook. Override this method in your Application class implementation, to handle cleanup before the real exit or to prompt a question to the user, if the application should be exited.</p>
         * @returns string <p>return a string if a prompt should be displayed to the user confirming closing the application (e.g. when the application is not yet saved).</p>
         */
        onBeforeExit(): string;
        /**
         * <p>On error hook. Override this method in your Application class implementation to listen to unhandled errors.</p>
         * @param {string} sMessage <p>The error message.</p>
         * @param {string} sFile <p>The file where the error occurred</p>
         * @param {number} iLine <p>The line number of the error</p>
         */
        onError(sMessage: string, sFile: string, iLine: number): void;
        /**
         * <p>On exit application hook. Override this method in your Application class implementation, to handle cleanup of the application.</p>
         */
        onExit(): void;
        /**
         * <p>Sets the configuration model.</p>
         * @param {string | any | sap.ui.model.Model} vConfig <p>the configuration model, the configuration object or a URI string to load a JSON configuration file.</p>
         */
        setConfig(vConfig: string | any | sap.ui.model.Model): void;
        /**
         * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRoot" href="#/api/sap.ui.app.Application/methods/getRoot">root</a>.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
         * @param {string} sRoot <p>New value for property <code>root</code></p>
         * @returns sap.ui.app.Application <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setRoot(sRoot: string): sap.ui.app.Application;
        /**
         * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRootComponent" href="#/api/sap.ui.app.Application/methods/getRootComponent">rootComponent</a>.</p>
         * @param {sap.ui.core.UIComponent} oRootComponent <p>The rootComponent to set</p>
         * @returns sap.ui.app.Application <p>Reference to <code>this</code> in order to allow method chaining</p>
         */
        setRootComponent(oRootComponent: sap.ui.core.UIComponent): sap.ui.app.Application;
      }
      /**
       * <p>Class to mock a server.</p>
       */
      export abstract class MockServer extends sap.ui.base.ManagedObject {
        /**
         * <p>Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without changing the application code. This class can also be used for qunit tests.</p>
         * @param {string} sId <p>id for the new server object; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
         * @param {any} mSettings <p>optional map/JSON-object with initial property values, aggregated objects etc. for the new object</p>
         * @param {any} oScope <p>scope object for resolving string based type and formatter references in bindings</p>
         */
        constructor(sId?: string, mSettings?: any, oScope?: any);
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace hyphenation {
        /**
         * <p>This class provides methods for evaluating the possibility of using browser-native hyphenation or initializing and using a third-party hyphenation module.</p><h3>Overview</h3><p> By using this API, a developer can check if browser-native hyphenation is supported for a particular language.</p><p>When browser-native hyphenation is not supported or if otherwise required, the API can be used to hyphenate texts. A third-party library "Hyphenopoly" is used in that case.</p><p>It is used internally by controls that support the <code>wrappingType:<a target="_self" class="jsdoclink" href="#/api/sap.m.WrappingType">WrappingType.Hyphenated</a></code> property.</p><p>As the class is singleton, an instance should be acquired from <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.hyphenation.Hyphenation.getInstance" href="#/api/sap.ui.core.hyphenation.Hyphenation/methods/sap.ui.core.hyphenation.Hyphenation.getInstance">Hyphenation.getInstance</a>.</p><h3>Usage</h3><h4>When to use:</h4><p> <ul> <li>To check if browser-native hyphenation is available for particular language.</li> <li>To hyphenate texts if browser-native hyphenation is not available.</li> </ul> </p><h4>When not to use:</h4><p> <ul> <li> If the use case is covered by controls that support the property <code>wrappingType:<a target="_self" class="jsdoclink" href="#/api/sap.m.WrappingType">WrappingType.Hyphenated</a></code>. This functionality is supported by <a target="_self" class="jsdoclink" href="#/api/sap.m.Title">sap.m.Title</a>, <a target="_self" class="jsdoclink" href="#/api/sap.m.Label">sap.m.Label</a> and <a target="_self" class="jsdoclink" href="#/api/sap.m.Text">sap.m.Text</a>. </li> <li>If browser-native hyphenation is available</li> </ul></p><h3>Example</h3><p> <pre>
        if (!Hyphenation.getInstance().canUseNativeHyphenation("en")) {
          Hyphenation.getInstance().initialize("en").then(function() {
            console.log(Hyphenation.getInstance().hyphenate("An example text to hyphenate.", "en"));
          });
        }
        </pre></p><p>For more information, see <a target="_self" href="#/topic/6322164936f047de941ec522b95d7b70">Hyphenation for Text Controls</a>.</p><p><code>Caution:</code> Note that as the hyphenation feature uses third-party and browser-native tools, we are not responsible for any grammatical incorrectness or inconsistencies of the hyphenation. Also, the variety of supported languages is outside the scope of our control and may be subject to future changes.</p>
         */
        export class Hyphenation extends sap.ui.base.ManagedObject {
          /**
           * <p>Returns the singleton instance of the Hyphenation API.<br><br>References: <ul><li>sap.ui.core.hyphenation.Hyphenation</li></ul></p>
           * @returns sap.ui.core.hyphenation.Hyphenation <p>The singleton instance of the Hyphenation API</p>
           */
          static getInstance(): sap.ui.core.hyphenation.Hyphenation;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.ui.core.hyphenation.Hyphenation/events/error">error</a> event of this <code>sap.ui.core.hyphenation.Hyphenation</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.hyphenation.Hyphenation</code> itself.</p><p>Fired if an error with initialization or hyphenation occurs.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.hyphenation.Hyphenation</code> itself</p>
           * @returns sap.ui.core.hyphenation.Hyphenation <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachError(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.hyphenation.Hyphenation;
          /**
           * <p>Checks if native hyphenation works in the current browser for the given language.</p>
           * @param {string} sLang <p>For what language to check. The global application language is the default one</p>
           * @returns boolean|null <p>True if native hyphenation works for the given language. False if native hyphenation will not work. Null if the language is not known to the Hyphenation API</p>
           */
          canUseNativeHyphenation(sLang?: string): boolean | null;
          /**
           * <p>Checks if third-party hyphenation works for the given language.</p>
           * @param {string} sLang <p>For what language to check. The global application language is the default one.</p>
           * @returns boolean|null <p>True if third-party hyphenation works for the given language. False if third-party hyphenation doesn't work. Null if the language is not known to the <code>Hyphenation</code> API.</p>
           */
          canUseThirdPartyHyphenation(sLang?: string): boolean | null;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.ui.core.hyphenation.Hyphenation/events/error">error</a> event of this <code>sap.ui.core.hyphenation.Hyphenation</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.hyphenation.Hyphenation <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachError(fnFunction: Function, oListener?: any): sap.ui.core.hyphenation.Hyphenation;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="error" href="#/api/sap.ui.core.hyphenation.Hyphenation/events/error">error</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.hyphenation.Hyphenation <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireError(mParameters?: any): sap.ui.core.hyphenation.Hyphenation;
          /**
           * <p>What languages were initialized with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.hyphenation.Hyphenation/methods/initialize">Hyphenation#initialize</a></p>
           * @returns any[] <p>List of languages which were initialized</p>
           */
          getInitializedLanguages(): any[];
          /**
           * <p>Hyphenates the given text with the third-party library.</p><p>Adds the soft hyphen symbol at the places where words can break.</p>
           * @param {string} sText <p>The text to hyphenate</p>
           * @param {string} sLang <p>The language of the text. The global application language is the default one</p>
           * @returns string <p>The text with the hyphens symbol added</p>
           */
          hyphenate(sText: string, sLang?: string): string;
          /**
           * <p>Initializes the third-party library for the given language.</p><p>Loads required third-party resources and language-specific resources.</p>
           * @param {string} sLang <p>The language for which the third-party library should be initialized. The global application language is the default one</p>
           * @returns Promise<any> <p>A promise which resolves when all language resources are loaded. Rejects if the language is not supported</p>
           */
          initialize(sLang?: string): Promise<any>;
          /**
           * <p>Checks if the given language was initialized with <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.hyphenation.Hyphenation/methods/initialize">Hyphenation#initialize</a></p>
           * @param {string} sLang <p>The language to check for</p>
           * @returns boolean <p>True if the language was initialized</p>
           */
          isLanguageInitialized(sLang: string): boolean;
          /**
           * <p>Checks if <code>Hyphenation</code> API knows about the given language.</p><p>If it is a known language, the API can be used to check browser-native and third-party support.</p>
           * @param {string} sLang <p>For what language to check. The global application language is the default one.</p>
           * @returns boolean <p>True if the language is known to the <code>Hyphenation</code> API</p>
           */
          isLanguageSupported(sLang?: string): boolean;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace postmessage {
        /**
         * <p>Responsible for the communication between different window objects.</p><h3>Overview</h3><p> This class is a singleton. The class instance can be retrieved as follows: <ul> <li>via the constructor <code>new sap.ui.core.postmessage.Bus()</code></li> <li>via the static method <code>sap.ui.core.postmessage.Bus.getInstance()</code></li> </ul></p><p>For supported data types for payload messages, see <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm</a>
        <img src="./resources/sap/ui/documentation/sdk/images/link-external.png"
        title="Information published on non SAP site" class="sapUISDKExternalLink"/>.</p>
         */
        export class Bus extends sap.ui.core.EventBus {
          /**
           * <p>Returns an instance of the class</p>
           * @returns sap.ui.core.postmessage.Bus 
           */
          static getInstance(): sap.ui.core.postmessage.Bus;
          /**
           */
          constructor();
          /**
           * <p>Fires an event using the specified settings and notifies all attached event handlers.</p>
           * @param {string} sChannelId <p>The channel of the event to fire. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there.</p>
           * @param {string} sEventId <p>The identifier of the event to fire</p>
           * @param {any} oData <p>The parameters which should be carried by the event</p>
           */
          publish(sChannelId: string, sEventId: string, oData?: any): void;
          /**
           * <p>Publish message into cross-window communication channel</p>
           * @param {any} mParameters <p>Map with params</p>
           */
          publish(mParameters: any): void;
          /**
           * <p>Attaches an event handler to the event with the given identifier on the given event channel.</p>
           * @param {string} sChannelId <p>The channel of the event to subscribe to. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there.</p>
           * @param {string} sEventId <p>The identifier of the event to listen for</p>
           * @param {Function} fnFunction <p>The handler function to call when the event occurs. This function will be called in the context of the <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present). Handlers must not change the content of this map.</p>
           * @param {any} oListener <p>The object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.</p>
           * @returns sap.ui.core.EventBus <p>Returns <code>this</code> to allow method chaining</p>
           */
          subscribe(sChannelId: string, sEventId: string, fnFunction: Function, oListener?: any): sap.ui.core.EventBus;
          /**
           * <p>Attaches an event handler to the event with the given identifier on the given event channel</p>
           * @param {string} sChannelId <p>Channel of the event to subscribe to. If not given, the default channel is used. The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application can listen to events on this channel, but is not allowed to publish its own events there.</p>
           * @param {string} sEventId <p>Identifier of the event to listen for</p>
           * @param {Function} fnFunction <p>Handler function to call when the event occurs; this function is called in the context of the <code>oListener</code> instance (if present) or on the event bus instance. Arguments: <pre>
          - {string} sChannelId - Channel ID
          - {string} sEventId - Event ID
          - {object} mParameters - Event parameters
              - {Event} originalEvent - Post message original event
              - {string} channelId - Channel ID
              - {string} eventId - Event ID
              - {Window} source - Sender window
              - {string} origin - Sender origin, e.g. https://example.com
              - {*} [data] - Payload data
          </pre></p>
           * @param {any} oListener <p>Object that wants to be notified when the event occurs (<code>this</code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.</p>
           * @returns sap.ui.core.postmessage.Bus <p>Returns <code>this</code> to allow method chaining</p>
           */
          subscribe(sChannelId: string, sEventId: string, fnFunction: Function, oListener?: any): sap.ui.core.postmessage.Bus;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace routing {
        /**
         * <p>Class for manipulating and receiving changes of the browserhash with the hasher framework.</p><p>Fires a <code>hashChanged</code> event if the browser hash changes.</p>
         */
        export class HashChanger extends sap.ui.base.EventProvider {
          /**
           * <p>Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.</p>
           * @returns sap.ui.core.routing.HashChanger <p>The global HashChanger</p>
           */
          static getInstance(): sap.ui.core.routing.HashChanger;
          /**
           */
          constructor();
          /**
           * <p>Fires the hashchanged event, may be extended to modify the hash before fireing the event</p>
           * @param {string} sNewHash <p>the new hash of the browser</p>
           * @param {string} sOldHash <p>the previous hash</p>
           */
          protected fireHashChanged(sNewHash: string, sOldHash: string): void;
          /**
           * <p>Gets the current hash</p>
           * @returns string <p>the current hash</p>
           */
          getHash(): string;
          /**
           * <p>Defines the events and its parameters which should be used for tracking the hash changes</p>
           * @returns Object[] <p>the events info. Each event info object in the array should contain a name property which describes the event name, and an optional paramMapping object where the parameter names in the event are defined for the 'newHash', 'oldHash' and 'fullHash'. If any of them isn't defined in the mapping, the same name is used to get the property value from the event object. Every object can also define a "updateHashOnly" option with boolean value to indicate whether the event is only relevant for the RouterHashChanger instances which are going to be created and the event shouldn't be forwarded to the existing RouterHashChanger instances. If this option is set to true, the new hash is saved RouterHashChanger instances but no "hashChanged" event is fired on any existing RouterHashChanger instance.</p>
           */
          protected getRelevantEventsInfo(): Object[];
          /**
           * <p>Will start listening to hashChanges with the parseHash function. This will also fire a hashchanged event with the initial hash.</p>
           * @returns boolean <p>false if it was initialized before, true if it was initialized the first time</p>
           */
          init(): boolean;
          /**
           * <p>Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setHash" href="#/api/sap.ui.core.routing.HashChanger/methods/setHash">#setHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          replaceHash(sHash: string): void;
          /**
           * <p>Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="replaceHash" href="#/api/sap.ui.core.routing.HashChanger/methods/replaceHash">#replaceHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          setHash(sHash: string): void;
        }
        /**
         * <p>Base Class for manipulating and receiving changes of hash segment.</p><p>Fires a <code>hashChanged</code> event if the relevant hash changes.</p>
         */
        export class HashChangerBase extends sap.ui.base.EventProvider {
          /**
           */
          constructor();
          /**
           * <p>Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setHash" href="#/api/sap.ui.core.routing.HashChangerBase/methods/setHash">#setHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected replaceHash(sHash: string): void;
          /**
           * <p>Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="replaceHash" href="#/api/sap.ui.core.routing.HashChangerBase/methods/replaceHash">#replaceHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected setHash(sHash: string): void;
        }
        /**
         * <p>Used to determine the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.HistoryDirection">sap.ui.core.routing.HistoryDirection</a> of the current or a future navigation, done with a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router">sap.ui.core.routing.Router</a> or <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.HashChanger">sap.ui.core.routing.HashChanger</a>.</p><p><strong>ATTENTION:</strong> this class will not be accurate if someone does hash-replacement without the named classes above. If you are manipulating the hash directly, this class is not supported anymore.</p>
         */
        export class History {
          /**
           * @returns sap.ui.core.routing.History <p>a global singleton that gets created as soon as the sap.ui.core.routing.History is required</p>
           */
          static getInstance(): sap.ui.core.routing.History;
          /**
           * @param {sap.ui.core.routing.HashChanger} oHashChanger <p>required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.</p>
           */
          constructor(oHashChanger: sap.ui.core.routing.HashChanger);
          /**
           * <p>Determines what the navigation direction for a newly given hash would be It will say Unknown if there is a history foo - bar (current history) - foo If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards. For hash replacements, the history stack will be replaced at this position for the history.</p>
           * @param {string} sNewHash <p>optional, if this parameter is not passed the last hashChange is taken.</p>
           * @returns sap.ui.core.routing.HistoryDirection <p>or undefined, if no navigation has taken place yet.</p>
           */
          getDirection(sNewHash?: string): sap.ui.core.routing.HistoryDirection;
          /**
           * <p>gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned</p>
           * @returns string <p>or undefined</p>
           */
          getPreviousHash(): string;
        }
        /**
         * <p><p>Enumaration for different HistoryDirections.</p></p>
         */
        export enum HistoryDirection {
          /**
           * <p>The page has already been navigated to and it was the precessor of the previous page</p>
           */
          Backwards = "Backwards",
          /**
           * <p>The page has already been navigated to and it was the successor of the previous page</p>
           */
          Forwards = "Forwards",
          /**
           * <p>A new Entry is added to the history</p>
           */
          NewEntry = "NewEntry",
          /**
           * <p>A Navigation took place, but it could be any of the other three states</p>
           */
          Unknown = "Unknown",
        }
        /**
         */
        export class Route extends sap.ui.base.EventProvider {
          /**
           * <p>Instantiates an SAPUI5 Route</p>
           * @param {sap.ui.core.routing.Router} oRouter <p>The router instance to which the route will be added</p>
           * @param {any} oConfig <p>configuration object for the route</p>
           * @param {sap.ui.core.routing.Route} oParent <p>The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent(if provided).</p>
           */
          constructor(oRouter: sap.ui.core.routing.Router, oConfig: any, oParent?: sap.ui.core.routing.Route);
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'beforeMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this route is used.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          attachBeforeMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Route;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this route is used.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          attachMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Route;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this route is used.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          attachPatternMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Route;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Destroys a route</p>
           * @returns sap.ui.core.routing.Route <p>this for chaining.</p>
           */
          destroy(): sap.ui.core.routing.Route;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'beforeMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          detachBeforeMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Route;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          detachMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Route;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Route <p><code>this</code> to allow method chaining</p>
           */
          detachPatternMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Route;
          /**
           * <p>Fire event beforeMatched to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          protected fireBeforeMatched(mArguments?: any): sap.ui.core.routing.Router;
          /**
           * <p>Returns the pattern of the route. If there are multiple patterns, the first pattern is returned</p>
           * @returns string <p>the routes pattern</p>
           */
          getPattern(): string;
          /**
           * <p>Returns the URL for the route and replaces the placeholders with the values in oParameters</p>
           * @param {any} oParameters <p>Parameters for the route</p>
           * @returns string <p>the unencoded pattern with interpolated arguments</p>
           */
          getURL(oParameters: any): string;
          /**
           * <p>Returns whether the given hash can be matched by the Route</p>
           * @param {string} hash <p>which will be tested by the Route</p>
           * @returns boolean <p>whether the hash can be matched</p>
           */
          match(hash: string): boolean;
        }
        /**
         */
        export class Router extends sap.ui.base.EventProvider {
          /**
           * <p>Get a registered router</p>
           * @param {string} sName <p>Name of the router</p>
           * @returns sap.ui.core.routing.Router <p>The router with the specified name, else undefined</p>
           */
          static getRouter(sName: string): sap.ui.core.routing.Router;
          /**
           * <p>Instantiates a SAPUI5 Router</p>
           * @param {any | object[]} oRoutes <p>may contain many Route configurations as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Route/constructor">sap.ui.core.routing.Route#constructor</a>.<br/> Each of the routes contained in the array/object will be added to the router.<br/></p><p>One way of defining routes is an array: <pre>
          [
              //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
              {
                  name: "firstRoute"
                  pattern : "usefulPattern"
              },
              //Will create a route called 'anotherRoute' for displaying the target 'targetView' which is defined in 'oTargets'
              {
                  name: "anotherRoute"
                  pattern : "anotherPattern",
                  target: "targetView"
              },
              //Will create a route for displaying a nested component which is defined in 'oTargets' with the prefix 'componentPrefix'
              {
                  pattern: "componentPattern",
                  name: "componentRoute",
                  target: [
                       {
                           name: "subComponent",
                           prefix: "componentPrefix"
                       }
                  ]
              }
          ]
          </pre></p><p>The alternative way of defining routes is an Object.<br/> If you choose this way, the name attribute is the name of the property. <pre>
          {
              //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
              firstRoute : {
                  pattern : "usefulPattern"
              },
              //Will create a route called 'anotherRoute' for displaying the target 'targetView' which is defined in 'oTargets'
              anotherRoute : {
                  pattern : "anotherPattern",
                  target: "targetView"
              },
              //Will create a route for displaying a nested component which is defined in 'oTargets' with the prefix 'componentPrefix'
              componentRoute{
                  pattern: "componentPattern",
                  target: [
                       {
                           name: "subComponent",
                           prefix: "componentPrefix"
                       }
                  ]
              }
          }
          </pre> The values that may be provided are the same as in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Route/constructor">sap.ui.core.routing.Route#constructor</a></p>
           * @param {any} oConfig <p>Default values for route configuration - also takes the same parameters as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Target/constructor">sap.ui.core.routing.Target#constructor</a>.<br/> This config will be used for routes and for targets, used in the router<br/> Eg: if the config object specifies: <pre>
          {
              viewType: "XML"
          }
          </pre> The targets look like this: <pre>
          {
              xmlTarget : {
                  ...
              },
              jsTarget : {
                  viewType : "JS"
                  ...
              }
          }
          </pre> Then the effective config will look like this: <pre>
          {
              xmlTarget : {
                  viewType : "XML"
                  ...
              },
              jsTarget : {
                  viewType : "JS"
                  ...
              }
          }
          </pre></p><p>Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.</p>
           * @param {sap.ui.core.UIComponent} oOwner <p>the Component of all the views that will be created by this Router,<br/> will get forwarded to the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Views/constructor">sap.ui.core.routing.Views#constructor</a>.<br/> If you are using the componentMetadata to define your routes you should skip this parameter.</p>
           * @param {any} oTargetsConfig <p>available @since 1.28 the target configuration, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets/constructor">sap.ui.core.routing.Targets#constructor</a> documentation (the options object).<br/> You should use Targets to create and display views. Since 1.28 the route should only contain routing relevant properties.<br/> <b>Example:</b> <pre>
          <code>
              new Router(
              // Routes
              [
                  {
                      // no view creation related properties are in the route
                      name: "startRoute",
                      //no hash
                      pattern: "",
                      // you can find this target in the targetConfig
                      target: "welcome"
                  }
              ],
              // Default values shared by routes and Targets
              {
                  path: "my.application.namespace",
                  viewType: "XML"
              },
              // You should only use this constructor when you are not using a router with a component.
              // Please use the metadata of a component to define your routes and targets.
              // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
              null,
              // Target config
              {
                   //same name as in the route called 'startRoute'
                   welcome: {
                       // All properties for creating and placing a view go here or in the config
                       type: "View",
                       name: "Welcome",
                       controlId: "app",
                       controlAggregation: "pages"
                   }
              })
          </code>
          </pre></p>
           */
          constructor(oRoutes?: any | object[], oConfig?: any, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: any);
          /**
           * <p>Adds a route to the router</p>
           * @param {any} oConfig <p>configuration object for the route @see sap.ui.core.routing.Route#constructor</p>
           * @param {sap.ui.core.routing.Route} oParent <p>The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent (if provided).</p>
           */
          addRoute(oConfig: any, oParent: sap.ui.core.routing.Route): void;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'beforeRouteMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this router is used.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          attachBeforeRouteMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Router;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/> The event will get fired, if none of the routes of the routes is matching. <br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this router is used.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          attachBypassed(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Router;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this router is used.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          attachRouteMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Router;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/> This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this router is used.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          attachRoutePatternMatched(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Router;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'titleChanged' event of this <code>sap.ui.core.routing.Router</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          attachTitleChanged(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Router;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Removes the router from the hash changer @see sap.ui.core.routing.HashChanger</p>
           * @returns sap.ui.core.routing.Router <p>this for chaining.</p>
           */
          destroy(): sap.ui.core.routing.Router;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'beforeRouteMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          detachBeforeRouteMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Router;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/> The event will get fired, if none of the routes of the routes is matching. <br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          detachBypassed(fnFunction: Function, oListener: any): sap.ui.core.routing.Router;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          detachRouteMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Router;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/> This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          detachRoutePatternMatched(fnFunction: Function, oListener: any): sap.ui.core.routing.Router;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'titleChanged' event of this <code>sap.ui.core.routing.Router</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          detachTitleChanged(fnFunction: Function, oListener: any): sap.ui.core.routing.Router;
          /**
           * <p>Fire event beforeRouteMatched to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          protected fireBeforeRouteMatched(mArguments?: any): sap.ui.core.routing.Router;
          /**
           * <p>Fire event bypassed to attached listeners. The event will get fired, if none of the routes of the routes is matching. <br/></p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          protected fireBypassed(mArguments?: any): sap.ui.core.routing.Router;
          /**
           * <p>Fire event routeMatched to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          protected fireRouteMatched(mArguments?: any): sap.ui.core.routing.Router;
          /**
           * <p>Fire event routePatternMatched to attached listeners. This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/></p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Router <p><code>this</code> to allow method chaining</p>
           */
          protected fireRoutePatternMatched(mArguments?: any): sap.ui.core.routing.Router;
          /**
           * <p>Returns the Route with a name, if no route is found undefined is returned</p>
           * @param {string} sName <p>Name of the route</p>
           * @returns sap.ui.core.routing.Route <p>the route with the provided name or undefined.</p>
           */
          getRoute(sName: string): sap.ui.core.routing.Route;
          /**
           * <p>Returns a target by its name (if you pass myTarget: { view: "myView" }) in the config myTarget is the name. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets/methods/getTarget">sap.ui.core.routing.Targets#getTarget</a></p>
           * @param {string | string[]} vName <p>the name of a single target or the name of multiple targets</p>
           * @returns sap.ui.core.routing.Target|undefined|sap.ui.core.routing.Target[] <p>The target with the corresponding name or undefined. If an array way passed as name this will return an array with all found targets. Non existing targets will not be returned but will log an error.</p>
           */
          getTarget(vName: string | string[]): sap.ui.core.routing.Target | undefined | sap.ui.core.routing.Target[];
          /**
           * <p>Returns the instance of Targets, if you pass a targets config to the router</p>
           * @returns sap.ui.core.routing.Targets|undefined <p>The instance of targets, the router uses to place views or undefined if you did not specify the targets parameter in the router's constructor.</p>
           */
          getTargets(): sap.ui.core.routing.Targets | undefined;
          /**
           * <p>Returns the title history.</p><p>History entry example: <code> { title: "TITLE", // The displayed title hash: "HASH" // The url hash isHome: "true/false" // The app home indicator } </code></p>
           * @returns any[] <p>An array which contains the history entries.</p>
           */
          getTitleHistory(): any[];
          /**
           * <p>Returns the URL for the route and replaces the placeholders with the values in oParameters</p>
           * @param {string} sName <p>Name of the route</p>
           * @param {any} oParameters <p>Parameters for the route</p>
           * @returns string <p>the unencoded pattern with interpolated arguments</p>
           */
          getURL(sName: string, oParameters?: any): string;
          /**
           * <p>Returns the views instance created by the router</p>
           * @returns sap.ui.core.routing.Views <p>the Views instance</p>
           */
          getViews(): sap.ui.core.routing.Views;
          /**
           * <p>Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger</p>
           * @param {boolean} bIgnoreInitialHash <p>@since 1.48.0 whether the current url hash shouldn't be parsed after the router is initialized</p>
           * @returns sap.ui.core.routing.Router <p>this for chaining.</p>
           */
          initialize(bIgnoreInitialHash?: boolean): sap.ui.core.routing.Router;
          /**
           * <p>Returns whether the router is initialized by calling <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router/methods/initialize">sap.ui.core.routing.Router#initialize</a> function</p>
           * @returns boolean <p>whether the router is initialized</p>
           */
          isInitialized(): boolean;
          /**
           * <p>Returns whether the router is stopped by calling <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router/methods/stop">sap.ui.core.routing.Router#stop</a> function</p>
           * @returns boolean <p>whether the router is stopped</p>
           */
          isStopped(): boolean;
          /**
           * <p>Returns whether the given hash can be matched by any one of the Route in the Router.</p>
           * @param {string} hash <p>which will be tested by the Router</p>
           * @returns boolean <p>whether the hash can be matched</p>
           */
          match(hash: string): boolean;
          /**
           * <p>Navigates to a specific route defining a set of parameters. The Parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded. If you want to use special characters in your oParameters, you have to encode them (encodeURIComponent).</p><p>IF the given route name can't be found, an error message is logged to the console and the hash will be changed to empty string.</p>
           * @param {string} sName <p>Name of the route</p>
           * @param {any} oParameters <p>Parameters for the route</p>
           * @param {boolean} bReplace <p>If set to <code>true</code>, the hash is replaced, and there will be no entry in the browser history, if set to <code>false</code>, the hash is set and the entry is stored in the browser history.</p>
           * @returns sap.ui.core.routing.Router <p>this for chaining.</p>
           */
          navTo(sName: string, oParameters?: any, bReplace?: boolean): sap.ui.core.routing.Router;
          /**
           * <p>Will trigger routing events + place targets for routes matching the string</p>
           * @param {string} sNewHash <p>a new hash</p>
           */
          protected parse(sNewHash: string): void;
          /**
           * <p>Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance</p>
           * @param {string} sName <p>Name of the router</p>
           */
          register(sName: string): void;
          /**
           * <p>Stops to listen to the hashChange of the browser.</br> If you want the router to start again, call initialize again.</p>
           * @returns sap.ui.core.routing.Router <p>this for chaining.</p>
           */
          stop(): sap.ui.core.routing.Router;
        }
        /**
         * <p>Class for manipulating and receiving changes of the relevant hash segment which belongs to a router. This Class doesn't change the browser hash directly, but informs its parent RouterHashChanger and finally changes the browser hash through the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.HashChanger">sap.ui.core.routing.HashChanger</a></p>
         */
        export class RouterHashChanger extends sap.ui.core.routing.HashChangerBase {
          /**
           */
          constructor();
          /**
           * <p>Save the given hash and potentially fires a "hashChanged" event; may be extended to modify the hash before firing the event.</p>
           * @param {string} sHash <p>the new hash of the browser</p>
           * @param {any} oSubHashMap <p>the prefixes and hashes for the child RouterHashChangers</p>
           * @param {boolean} bUpdateHashOnly <p>if this parameter is set to true, the given sHash is saved in the instance but no "hashChanged" event is fired.</p>
           */
          protected fireHashChanged(sHash: string, oSubHashMap: any, bUpdateHashOnly: boolean): void;
          /**
           * <p>Gets the current hash</p>
           * @returns string <p>the current hash</p>
           */
          protected getHash(): string;
          /**
           * <p>Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setHash" href="#/api/sap.ui.core.routing.HashChangerBase/methods/setHash">#setHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected replaceHash(sHash: string): void;
          /**
           * <p>Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="setHash" href="#/api/sap.ui.core.routing.RouterHashChanger/methods/setHash">#setHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected replaceHash(sHash: string): void;
          /**
           * <p>Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="replaceHash" href="#/api/sap.ui.core.routing.HashChangerBase/methods/replaceHash">#replaceHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected setHash(sHash: string): void;
          /**
           * <p>Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="replaceHash" href="#/api/sap.ui.core.routing.RouterHashChanger/methods/replaceHash">#replaceHash</a> function.</p>
           * @param {string} sHash <p>New hash</p>
           */
          protected setHash(sHash: string): void;
        }
        /**
         * <p>Provides a convenient way for placing views into the correct containers of your application.</p><p>The main benefit of Targets is lazy loading: you do not have to create the views until you really need them.</p>
         */
        export class Target extends sap.ui.base.EventProvider {
          /**
           * <p><b>Don't call this constructor directly</b>, use <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets">sap.ui.core.routing.Targets</a> instead, it will create instances of a Target.<br/> If you are using the mobile library, please use the <a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets">sap.m.routing.Targets</a> constructor, please read the documentation there.<br/></p>
           * @param {any} oOptions <p>all of the parameters defined in <a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets/constructor">sap.m.routing.Targets#constructor</a> are accepted here, except for children you need to specify the parent.</p>
           * @param {sap.ui.core.routing.TargetCache} oCache <p>All views required by this target will get created by the views instance using <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Views/methods/getView">sap.ui.core.routing.Views#getView</a></p>
           * @param {sap.ui.core.routing.Target} oParent <p>the parent of this target. Will also get displayed, if you display this target. In the config you have the fill the children property <a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets/constructor">sap.m.routing.Targets#constructor</a></p>
           */
          constructor(oOptions: any, oCache: any, oParent?: sap.ui.core.routing.Target);
          /**
           * <p>This function is called between the target view is loaded and the view is added to the container.</p><p>This function can be used for applying modification on the view or the container to make the rerendering occur together with the later aggregation change.</p>
           * @param {any} mArguments 
           */
          protected _beforePlacingViewIntoContainer(mArguments: any): void;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function.</p>
           * @returns sap.ui.core.routing.Target <p><code>this</code> to allow method chaining</p>
           */
          attachDisplay(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Target;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Target <p><code>this</code> to allow method chaining</p>
           */
          detachDisplay(fnFunction: Function, oListener: any): sap.ui.core.routing.Target;
          /**
           * <p>Creates a view and puts it in an aggregation of a control that has been defined in the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Target/constructor">sap.ui.core.routing.Target#constructor</a>.</p>
           * @param {any} vData <p>an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.</p>
           * @returns Promise<any> <p>resolves with {name: *, view: *, control: *} if the target can be successfully displayed otherwise it resolves with {name: *, error: *}</p>
           */
          display(vData?: any): Promise<any>;
          /**
           * <p>Fire event created to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Target <p><code>this</code> to allow method chaining</p>
           */
          protected fireDisplay(mArguments?: any): sap.ui.core.routing.Target;
        }
        /**
         * <p>Provides a convenient way for placing views into the correct containers of your application.</p><p>The main benefit of <code>Targets</code> is lazy loading: you do not have to create the views until you really need them. If you are using the mobile library, please use <a target="_self" class="jsdoclink" href="#/api/sap.m.routing.Targets">sap.m.routing.Targets</a> instead of this class.</p>
         */
        export class Targets extends sap.ui.base.EventProvider {
          /**
           * <p>Constructor for a new Targets class.</p>
           * @param {any} oOptions undefined
           */
          constructor(oOptions: any);
          /**
           * <p>Creates a target by using the given name and options. If there's already a target with the same name exists, the existing target is kept from being overwritten and an error log will be written to the development console.</p>
           * @param {string} sName <p>the name of a target</p>
           * @param {any} oTarget <p>the options of a target. The option names are the same as the ones in "oOptions.targets.anyName" of <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets/constructor">#constructor</a>.</p>
           * @returns sap.ui.core.routing.Targets <p>Targets itself for method chaining</p>
           */
          addTarget(sName: string, oTarget: any): sap.ui.core.routing.Targets;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function.</p>
           * @returns sap.ui.core.routing.Targets <p><code>this</code> to allow method chaining</p>
           */
          attachDisplay(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Targets;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'titleChanged' event of this <code>sap.ui.core.routing.Targets</code>.<br/></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function.</p>
           * @returns sap.ui.core.routing.Targets <p><code>this</code> to allow method chaining</p>
           */
          attachTitleChanged(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.routing.Targets;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Destroys the targets instance and all created targets. Does not destroy the views instance passed to the constructor. It has to be destroyed separately.</p>
           * @returns sap.ui.core.routing.Targets <p>this for chaining.</p>
           */
          destroy(): sap.ui.core.routing.Targets;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Targets <p><code>this</code> to allow method chaining</p>
           */
          detachDisplay(fnFunction: Function, oListener: any): sap.ui.core.routing.Targets;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'titleChanged' event of this <code>sap.ui.core.routing.Targets</code>.<br/></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.routing.Targets <p><code>this</code> to allow method chaining</p>
           */
          detachTitleChanged(fnFunction: Function, oListener: any): sap.ui.core.routing.Targets;
          /**
           * <p>Creates a view and puts it in an aggregation of the specified control.</p>
           * @param {string | string[]} vTargets <p>the key of the target as specified in the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets/constructor">#constructor</a>. To display multiple targets you may also pass an array of keys.</p>
           * @param {any} oData <p>an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.</p>
           * @param {string} sTitleTarget <p>the name of the target from which the title option is taken for firing the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets/events/titleChanged">titleChanged</a> event</p>
           * @returns sap.ui.core.routing.Targets|Promise <p>this pointer for chaining or a Promise</p>
           */
          display(vTargets: string | string[], oData?: any, sTitleTarget?: string): sap.ui.core.routing.Targets | Promise<any>;
          /**
           * <p>Fire event created to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Targets <p><code>this</code> to allow method chaining</p>
           */
          fireDisplay(mArguments?: any): sap.ui.core.routing.Targets;
          /**
           * <p>Returns a target by its name (if you pass myTarget: { view: "myView" }) in the config myTarget is the name.</p>
           * @param {string | string[]} vName <p>the name of a single target or the name of multiple targets</p>
           * @returns sap.ui.core.routing.Target|undefined|sap.ui.core.routing.Target[] <p>The target with the coresponding name or undefined. If an array way passed as name this will return an array with all found targets. Non existing targets will not be returned but will log an error.</p>
           */
          getTarget(vName: string | string[]): sap.ui.core.routing.Target | undefined | sap.ui.core.routing.Target[];
          /**
           * <p>Returns the views instance passed to the constructor</p>
           * @returns sap.ui.core.routing.Views <p>the views instance</p>
           */
          getViews(): sap.ui.core.routing.Views;
        }
        /**
         */
        export class Views extends sap.ui.base.EventProvider {
          /**
           * <p>Instantiates a view repository that creates and caches views. If it is destroyed, all the Views it created are destroyed. Usually you do not have to create instances of this class, it is used by the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Router">sap.ui.core.routing.Router</a>. If you are using <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.routing.Targets">sap.ui.core.routing.Targets</a> without using a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent">sap.ui.core.UIComponent</a> you have to create an instance of this class. They will create an instance on their own, or if they are used with a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent">sap.ui.core.UIComponent</a> they will share the same instance of Views.</p>
           * @param {any} oOptions undefined
           */
          constructor(oOptions?: any);
          /**
           * <p>Fire event created to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.routing.Views <p><code>this</code> to allow method chaining</p>
           */
          protected fireCreated(mArguments?: any): sap.ui.core.routing.Views;
          /**
           * <p>Returns a cached view, for a given name. If it does not exist yet, it will create the view with the provided options. If you provide a viewId, it will be prefixed with the viewId of the component.</p>
           * @param {any} oOptions <p>see <a target="_self" class="jsdoclink" href="#/api/sap.ui/methods/sap.ui.view">sap.ui.view</a> for the documentation. The viewId you pass into the options will be prefixed with the id of the component you pass into the constructor. So you can retrieve the view later by calling the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.UIComponent/methods/byId">sap.ui.core.UIComponent#byId</a> function of the UIComponent.</p>
           * @returns Promise<any> <p>A promise that is resolved when the view is loaded <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.mvc.View/methods/loaded">sap.ui.core.mvc.View#loaded</a>. The view instance will be passed to the promise.</p>
           */
          getView(oOptions: any): Promise<any>;
          /**
           * <p>Adds or overwrites a view in the cache of the Views instance. The viewName serves as a key for caching.</p><p>If the second parameter is set to null or undefined, the previous cache view under the same name isn't managed by the Views instance. The lifecycle (for example the destroy of the view) of the view instance should be maintained by additional code.</p>
           * @param {string} sViewName <p>Name of the view, may differ from the actual viewName of the oView parameter provided, since you can retrieve this view per <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="sap.ui.core.routing.Views.getView" href="#/api/sap.ui.core.routing.Views/methods/sap.ui.core.routing.Views.getView">#.getView</a>.</p>
           * @param {sap.ui.core.mvc.View | null | undefined} oView <p>the view instance</p>
           * @returns sap.ui.core.routing.Views <p>this for chaining.</p>
           */
          setView(sViewName: string, oView: sap.ui.core.mvc.View | null | undefined): sap.ui.core.routing.Views;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace search {
        /**
         * <p>A SearchProvider which uses the OpenSearch protocol (either JSON or XML).</p>
         */
        export class OpenSearchProvider extends sap.ui.core.search.SearchProvider {
          /**
           * <p>Constructor for a new search/OpenSearchProvider.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestType" href="#/api/sap.ui.core.search.OpenSearchProvider/methods/getSuggestType">suggestType</a>.</p><p>The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.</p><p>Default value is <code>json</code>.</p>
           * @returns string <p>Value of property <code>suggestType</code></p>
           */
          getSuggestType(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestUrl" href="#/api/sap.ui.core.search.OpenSearchProvider/methods/getSuggestUrl">suggestUrl</a>.</p><p>The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.</p>
           * @returns sap.ui.core.URI <p>Value of property <code>suggestUrl</code></p>
           */
          getSuggestUrl(): sap.ui.core.URI;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestType" href="#/api/sap.ui.core.search.OpenSearchProvider/methods/getSuggestType">suggestType</a>.</p><p>The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>json</code>.</p>
           * @param {string} sSuggestType <p>New value for property <code>suggestType</code></p>
           * @returns sap.ui.core.search.OpenSearchProvider <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setSuggestType(sSuggestType: string): sap.ui.core.search.OpenSearchProvider;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSuggestUrl" href="#/api/sap.ui.core.search.OpenSearchProvider/methods/getSuggestUrl">suggestUrl</a>.</p><p>The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {sap.ui.core.URI} sSuggestUrl <p>New value for property <code>suggestUrl</code></p>
           * @returns sap.ui.core.search.OpenSearchProvider <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setSuggestUrl(sSuggestUrl: sap.ui.core.URI): sap.ui.core.search.OpenSearchProvider;
          /**
           * <p>Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).</p>
           * @param {string} sValue <p>The value for which suggestions are requested.</p>
           * @param {Function} fnCallback <p>The callback function which is called when the suggestions are available.</p>
           */
          suggest(sValue: string, fnCallback: Function): void;
          /**
           * <p>Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).</p>
           * @param {string} sValue <p>The value for which suggestions are requested.</p>
           * @param {Function} fCallback <p>The callback function which is called when the suggestions are available.</p>
           */
          suggest(sValue: string, fCallback: Function): void;
        }
        /**
         * <p>Abstract base class for all SearchProviders which can be e.g. attached to a SearchField.</p><p>Do not create instances of this class, but use a concrete subclass instead.</p>
         */
        export abstract class SearchProvider extends sap.ui.core.Element {
          /**
           * <p>Constructor for a new search/SearchProvider.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.search.SearchProvider/methods/getIcon">icon</a>.</p><p>Icon of the Search Provider</p>
           * @returns string <p>Value of property <code>icon</code></p>
           */
          getIcon(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getIcon" href="#/api/sap.ui.core.search.SearchProvider/methods/getIcon">icon</a>.</p><p>Icon of the Search Provider</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sIcon <p>New value for property <code>icon</code></p>
           * @returns sap.ui.core.search.SearchProvider <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setIcon(sIcon: string): sap.ui.core.search.SearchProvider;
          /**
           * <p>Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).</p>
           * @param {string} sValue <p>The value for which suggestions are requested.</p>
           * @param {Function} fnCallback <p>The callback function which is called when the suggestions are available.</p>
           */
          suggest(sValue: string, fnCallback: Function): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace service {
        /**
         * <p>A service provides a specific functionality. A service instance can be obtained by a <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.service.ServiceFactory">ServiceFactory</a> or at a Component via <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component/methods/getService">getService</a> function.</p><p>This class is the abstract base class for services and needs to be extended: <pre>
        sap.ui.define("my/Service", [
          "sap/ui/core/service/Service"
        ], function(Service) {
        
          return Service.extend("my.Service", {
        
            init: function() {
              // handle init lifecycle
            },
        
            exit: function() {
              // handle exit lifecycle
            },
        
            doSomething: function() {
              // some functionality
            }
        
         });
        
        });
        </pre></p><p>A service instance will have a service context: <pre>
        {
          "scopeObject": oComponent, // the Component instance
          "scopeType": "component"   // the stereotype of the scopeObject
        }
        </pre></p><p>The service context can be retrieved with the function <code>getContext</code>. This function is private to the service instance and will not be exposed via the service interface.</p><p>For consumers of the service it is recommended to provide the service instance only - as e.g. the <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.Component/methods/getService">getService</a> function of the Component does. The service interface can be accessed via the <code>getInterface</code> function.</p><p>Other private functions of the service instance are the lifecycle functions. Currently there are two lifecycle functions: <code>init</code> and <code>exit</code>. In addition the <code>destroy</code> function will also by hidden to avoid the control of the service lifecycle for service interface consumers.</p>
         */
        export abstract class Service extends sap.ui.base.Object {
          /**
           * <p>Creates a service for the given context.</p>
           * @param {any} oServiceContext <p>Context for which the service is created</p>
           */
          constructor(oServiceContext: any);
          /**
           * <p>Cleans up the service instance before destruction.</p><p>Applications must not call this hook method directly, it is called by the framework when the service is <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="destroy" href="#/api/sap.ui.core.service.Service/methods/destroy">destroyed</a>.</p><p>Subclasses of service should override this hook to implement any necessary clean-up.</p>
           */
          protected exit(): void;
          /**
           * <p>Returns the context of the service: <pre>
          {
            "scopeObject": oComponent, // the Component instance
            "scopeType": "component",   // the stereotype of the scopeObject
            "settings": {} // the provided service settings
          }
          </pre></p><p>This function is not available on the service interface.</p>
           * @returns any <p>the context of the service</p>
           */
          protected getContext(): any;
          /**
           * <p>Initializes the service instance after creation.</p><p>Applications must not call this hook method directly, it is called by the framework while the constructor of a service is executed.</p><p>Subclasses of service should override this hook to implement any necessary initialization.</p>
           */
          protected init(): void;
        }
        /**
         * <p>A service factory is used to create service instances for a specific context. The service factory needs to be registered in a central <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.service.ServiceFactoryRegistry">service factory registry</a>. Consumers of services require the service factory to create service instances.</p><p>The service factory base class can be used in a generic way to act as a factory for any service: <pre>
        sap.ui.require([
          "sap/ui/core/service/ServiceFactoryRegistry",
          "sap/ui/core/service/ServiceFactory",
          "my/Service"
        ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
        
          ServiceFactoryRegistry.register(new ServiceFactory(MService));
        
        });
        </pre></p><p>Additionally a concrete service factory can be implemented by extending the service factory base class if additional functionality is needed when creating new instances for a specific context: <pre>
        sap.ui.define("my/ServiceFactory", [
          "sap/ui/core/service/ServiceFactoryRegistry",
          "sap/ui/core/service/ServiceFactory",
          "my/Service"
        ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
        
          return ServiceFactory.extend("my.ServiceFactory", {
            createInstance: function(oServiceContext) {
              return Promise.resolve(new MyService(oServiceContext));
            }
          });
        
        });
        </pre></p><p>Another option for the usage of the service factory is to provide a structured object with information about the service which will create an anonymous service internally: <pre>
        sap.ui.define("my/ServiceFactory", [
          "sap/ui/core/service/ServiceFactoryRegistry",
          "sap/ui/core/service/ServiceFactory",
          "my/Service"
        ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {
        
          return new ServiceFactory({
        
            init: function() { ... },
            exit: function() { ... },
        
            doSomething: function() { ... }
        
          });
        
        });
        </pre></p><p>As <code>createInstance</code> returns a <code>Promise</code> e.g. the service module can also be loaded asynchronously and resolve once the module has been loaded and instantiated.</p>
         */
        export class ServiceFactory extends sap.ui.base.Object {
          /**
           * <p>Creates a service factory.</p>
           * @param {Function | any} vService <p>A constructor function of a service or a structured object with information about the service which creates an anonymous service.</p>
           */
          constructor(vService?: Function | any);
          /**
           * <p>Creates a new instance of a service. When used as a generic service factory by providing a service constructor function it will create a new service instance otherwise the function will fail. For custom service factories this function has to be overridden and should return a <code>Promise</code>.</p>
           * @param {any} oServiceContext <p>Context for which the service is created</p>
           * @returns Promise<any> <p>Promise which resolves with the new Service instance.</p>
           */
          protected createInstance(oServiceContext: any): Promise<any>;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace tmpl {
        /**
         * <p>Represents a DOM attribute of a DOM element.</p>
         */
        export class DOMAttribute extends sap.ui.core.Element {
          /**
           * <p>Constructor for a new tmpl/DOMAttribute.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.tmpl.DOMAttribute/methods/getName">name</a>.</p><p>Name of the DOM attribute</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.core.tmpl.DOMAttribute/methods/getValue">value</a>.</p><p>Value of the DOM attribute</p>
           * @returns string <p>Value of property <code>value</code></p>
           */
          getValue(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.tmpl.DOMAttribute/methods/getName">name</a>.</p><p>Name of the DOM attribute</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.core.tmpl.DOMAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.core.tmpl.DOMAttribute;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getValue" href="#/api/sap.ui.core.tmpl.DOMAttribute/methods/getValue">value</a>.</p><p>Value of the DOM attribute</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sValue <p>New value for property <code>value</code></p>
           * @returns sap.ui.core.tmpl.DOMAttribute <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setValue(sValue: string): sap.ui.core.tmpl.DOMAttribute;
        }
        /**
         * <p>Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.</p>
         */
        export class DOMElement extends sap.ui.core.Control {
          /**
           * <p>Constructor for a new tmpl/DOMElement.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Adds some attribute to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p>
           * @param {sap.ui.core.tmpl.DOMAttribute} oAttribute <p>The attribute to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addAttribute(oAttribute: sap.ui.core.tmpl.DOMAttribute): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Adds some element to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p>
           * @param {sap.ui.core.tmpl.DOMElement} oElement <p>The element to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addElement(oElement: sap.ui.core.tmpl.DOMElement): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only. When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute. In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.</p>
           * @param {string} sName <p>The name of the DOM attribute.</p>
           * @param {string} sValue <p>The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.</p>
           * @returns any <p>value of attribute or <code>this</code> when called as a setter</p>
           */
          attr(sName: string, sValue: string): any;
          /**
           * <p>Destroys all the attributes in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyAttributes(): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Destroys all the elements in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyElements(): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p><p>DOM attributes which are rendered as part of the DOM element and bindable</p>
           * @returns sap.ui.core.tmpl.DOMAttribute[] 
           */
          getAttributes(): sap.ui.core.tmpl.DOMAttribute[];
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p><p>Nested DOM elements to support nested bindable structures</p>
           * @returns sap.ui.core.tmpl.DOMElement[] 
           */
          getElements(): sap.ui.core.tmpl.DOMElement[];
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTag" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getTag">tag</a>.</p><p>The HTML-tag of the DOM element which contains the text</p><p>Default value is <code>span</code>.</p>
           * @returns string <p>Value of property <code>tag</code></p>
           */
          getTag(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getText">text</a>.</p><p>The text content of the DOM element</p>
           * @returns string <p>Value of property <code>text</code></p>
           */
          getText(): string;
          /**
           * <p>Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.tmpl.DOMAttribute} oAttribute <p>The attribute whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfAttribute(oAttribute: sap.ui.core.tmpl.DOMAttribute): number;
          /**
           * <p>Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.tmpl.DOMElement} oElement <p>The element whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfElement(oElement: sap.ui.core.tmpl.DOMElement): number;
          /**
           * <p>Inserts a attribute into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p>
           * @param {sap.ui.core.tmpl.DOMAttribute} oAttribute <p>The attribute to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the attribute should be inserted at; for a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertAttribute(oAttribute: sap.ui.core.tmpl.DOMAttribute, iIndex: number): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Inserts a element into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p>
           * @param {sap.ui.core.tmpl.DOMElement} oElement <p>The element to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the element should be inserted at; for a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value greater than the current size of the aggregation, the element is inserted at the last position</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertElement(oElement: sap.ui.core.tmpl.DOMElement, iIndex: number): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.tmpl.DOMAttribute[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllAttributes(): sap.ui.core.tmpl.DOMAttribute[];
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.tmpl.DOMElement[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllElements(): sap.ui.core.tmpl.DOMElement[];
          /**
           * <p>Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.</p>
           * @param {string} sName <p>The name of the DOM attribute.</p>
           * @returns sap.ui.core.tmpl.DOMElement 
           */
          removeAttr(sName: string): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Removes a attribute from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getAttributes" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getAttributes">attributes</a>.</p>
           * @param {number | string | sap.ui.core.tmpl.DOMAttribute} vAttribute <p>The attribute to remove or its index or id</p>
           * @returns sap.ui.core.tmpl.DOMAttribute <p>The removed attribute or <code>null</code></p>
           */
          removeAttribute(vAttribute: number | string | sap.ui.core.tmpl.DOMAttribute): sap.ui.core.tmpl.DOMAttribute;
          /**
           * <p>Removes a element from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getElements" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getElements">elements</a>.</p>
           * @param {number | string | sap.ui.core.tmpl.DOMElement} vElement <p>The element to remove or its index or id</p>
           * @returns sap.ui.core.tmpl.DOMElement <p>The removed element or <code>null</code></p>
           */
          removeElement(vElement: number | string | sap.ui.core.tmpl.DOMElement): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTag" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getTag">tag</a>.</p><p>The HTML-tag of the DOM element which contains the text</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>span</code>.</p>
           * @param {string} sTag <p>New value for property <code>tag</code></p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setTag(sTag: string): sap.ui.core.tmpl.DOMElement;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getText" href="#/api/sap.ui.core.tmpl.DOMElement/methods/getText">text</a>.</p><p>The text content of the DOM element</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sText <p>New value for property <code>text</code></p>
           * @returns sap.ui.core.tmpl.DOMElement <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setText(sText: string): sap.ui.core.tmpl.DOMElement;
        }
        /**
         * <p>The class for Handlebars Templates.</p>
         */
        export abstract class HandlebarsTemplate extends sap.ui.core.tmpl.Template {
          /**
           * <p>Creates and initializes a new handlebars template with the given <code>sId</code> and settings.</p><p>The set of allowed entries in the <code>mSettings</code> object depends on the concrete subclass and is described there.</p>
           * @param {string} sId <p>optional id for the new template; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new component instance</p>
           */
          constructor(sId?: string, mSettings?: any);
        }
        /**
         * <p>Base Class for Template.</p>
         */
        export abstract class Template extends sap.ui.base.ManagedObject {
          /**
           * <p>Returns the registered template for the given ID, if any.</p>
           * @param {string} sId 
           * @returns sap.ui.core.tmpl.Template <p>the template for the given ID</p>
           */
          static byId(sId: string): sap.ui.core.tmpl.Template;
          /**
           * <p>Creates and initializes a new template with the given <code>sId</code> and settings.</p><p>The set of allowed entries in the <code>mSettings</code> object depends on the concrete subclass and is described there.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>optional id for the new template; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial settings for the new component instance</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Creates an anonymous TemplateControl for the Template.</p>
           * @param {string} sId <p>the control ID</p>
           * @param {any} oContext <p>the context for the renderer/templating</p>
           * @param {sap.ui.core.mvc.View} oView 
           * @returns sap.ui.core.tmpl.TemplateControl <p>the created control instance</p>
           */
          createControl(sId: string, oContext: any, oView: sap.ui.core.mvc.View): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Declares a new control based on this template and returns the created class / constructor function. The class is based on the information coming from the abstract functions <code>createMetadata</code> and <code>createRenderer</code>.</p>
           * @param {string} sControl <p>the fully qualified name of the control</p>
           * @returns Function <p>the created class / constructor function</p>
           */
          declareControl(sControl: string): Function;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.tmpl.Template/methods/getContent">content</a>.</p><p>The Template definition as a String.</p>
           * @returns string <p>Value of property <code>content</code></p>
           */
          getContent(): string;
          /**
           * <p>Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.</p>
           * @param {string | HTMLElement | sap.ui.core.Control} oRef <p>the id or the DOM reference where to render the template</p>
           * @param {any} oContext <p>The context to use to evaluate the Template. It will be applied as value for the context property of the created control.</p>
           * @param {string | number} vPosition <p>Describes the position where the control should be put into the container</p>
           * @param {boolean} bInline 
           * @returns sap.ui.core.tmpl.TemplateControl <p>the created control instance</p>
           */
          placeAt(oRef: string | HTMLElement | sap.ui.core.Control, oContext: any, vPosition: string | number, bInline: boolean): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.tmpl.Template/methods/getContent">content</a>.</p><p>The Template definition as a String.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sContent <p>New value for property <code>content</code></p>
           * @returns sap.ui.core.tmpl.Template <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setContent(sContent: string): sap.ui.core.tmpl.Template;
        }
        /**
         * <p>This is the base class for all template controls. Template controls are declared based on templates.</p>
         */
        export class TemplateControl extends sap.ui.core.Control {
          /**
           * <p>Constructor for a new tmpl/TemplateControl.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.</p><p>Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachAfterRendering(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Attaches event handler <code>fnFunction</code> to the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/beforeRendering">beforeRendering</a> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.</p><p>When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.</p><p>Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.</p>
           * @param {any} oData <p>An application-specific payload object that will be passed to the event handler along with the event object when firing the event</p>
           * @param {Function} fnFunction <p>The function to be called when the event occurs</p>
           * @param {any} oListener <p>Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          attachBeforeRendering(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Creates a pseudo binding for an aggregation to get notified once the property changes to invalidate the control and trigger a re-rendering.</p>
           * @param {string} sPath <p>the binding path</p>
           * @returns any <p>the value of the path</p>
           */
          protected bindList(sPath: string): any;
          /**
           * <p>Creates a pseudo binding for a property to get notified once the property changes to invalidate the control and trigger a re-rendering.</p>
           * @param {string} sPath <p>the binding path</p>
           * @returns any <p>the value of the path</p>
           */
          protected bindProp(sPath: string): any;
          /**
           * <p>compiles (creates and registers) a new control</p>
           * @param {any} mSettings <p>the settings for the new control</p>
           * @param {string} sParentPath <p>the parent path for the control</p>
           * @param {boolean} bDoNotAdd <p>if true, then the control will not be added to the _controls aggregation</p>
           * @param {sap.ui.core.mvc.View} oView 
           * @returns sap.ui.core.Control <p>new control instance</p>
           */
          protected createControl(mSettings: any, sParentPath: string, bDoNotAdd: boolean, oView: sap.ui.core.mvc.View): sap.ui.core.Control;
          /**
           * <p>compiles (creates and registers) a new DOM element</p>
           * @param {any} mSettings <p>the settings for the new DOM element</p>
           * @param {string} sParentPath <p>the parent path for the DOM element</p>
           * @param {boolean} bDoNotAdd <p>if true, then the control will not be added to the _controls aggregation</p>
           * @returns sap.ui.core.Control <p>new DOM element instance</p>
           */
          protected createDOMElement(mSettings: any, sParentPath?: string, bDoNotAdd?: boolean): sap.ui.core.Control;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/afterRendering">afterRendering</a> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachAfterRendering(fnFunction: Function, oListener?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Detaches event handler <code>fnFunction</code> from the <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/beforeRendering">beforeRendering</a> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.</p><p>The passed function and listener object must match the ones used for event registration.</p>
           * @param {Function} fnFunction <p>The function to be called, when the event occurs</p>
           * @param {any} oListener <p>Context object on which the given function had to be called</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          detachBeforeRendering(fnFunction: Function, oListener?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="afterRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/afterRendering">afterRendering</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireAfterRendering(mParameters?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Fires event <a target="_self" class="jsdoclink scrollToEvent" data-sap-ui-target="beforeRendering" href="#/api/sap.ui.core.tmpl.TemplateControl/events/beforeRendering">beforeRendering</a> to attached listeners.</p>
           * @param {any} mParameters <p>Parameters to pass along with the event</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          protected fireBeforeRendering(mParameters?: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContext" href="#/api/sap.ui.core.tmpl.TemplateControl/methods/getContext">context</a>.</p><p>The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.</p>
           * @returns any <p>Value of property <code>context</code></p>
           */
          getContext(): any;
          /**
           * <p>ID of the element which is the current target of the association <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTemplate" href="#/api/sap.ui.core.tmpl.TemplateControl/methods/getTemplate">template</a>, or <code>null</code>.</p>
           * @returns sap.ui.core.ID 
           */
          getTemplate(): sap.ui.core.ID;
          /**
           * <p>Returns the instance specific renderer for an anonymous template control.</p>
           * @returns Function <p>the instance specific renderer function</p>
           */
          protected getTemplateRenderer(): Function;
          /**
           * <p>checks whether the control is inline or not</p>
           * @returns boolean <p>flag, whether to control is inline or not</p>
           */
          protected isInline(): boolean;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContext" href="#/api/sap.ui.core.tmpl.TemplateControl/methods/getContext">context</a>.</p><p>The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {any} oContext <p>New value for property <code>context</code></p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setContext(oContext: any): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Sets the associated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTemplate" href="#/api/sap.ui.core.tmpl.TemplateControl/methods/getTemplate">template</a>.</p>
           * @param {sap.ui.core.ID | sap.ui.core.tmpl.Template} oTemplate <p>ID of an element which becomes the new target of this template association; alternatively, an element instance may be given</p>
           * @returns sap.ui.core.tmpl.TemplateControl <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setTemplate(oTemplate: sap.ui.core.ID | sap.ui.core.tmpl.Template): sap.ui.core.tmpl.TemplateControl;
          /**
           * <p>Sets the instance specific renderer for an anonymous template control.</p>
           * @param {Function} fnRenderer <p>the instance specific renderer function</p>
           * @returns sap.ui.core.tmpl.Template <p><code>this</code> to allow method chaining</p>
           */
          protected setTemplateRenderer(fnRenderer: Function): sap.ui.core.tmpl.Template;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace util {
        /**
         * <p>Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use it in other programs / applications.</p>
         */
        export class Export extends sap.ui.core.Control {
          /**
           * <p>Constructor for a new Export.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Adds some column to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p>
           * @param {sap.ui.core.util.ExportColumn} oColumn <p>The column to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addColumn(oColumn: sap.ui.core.util.ExportColumn): sap.ui.core.util.Export;
          /**
           * <p>Adds some row to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p>
           * @param {sap.ui.core.util.ExportRow} oRow <p>The row to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addRow(oRow: sap.ui.core.util.ExportRow): sap.ui.core.util.Export;
          /**
           * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
           * @param {any} oBindingInfo <p>The binding information</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          bindColumns(oBindingInfo: any): sap.ui.core.util.Export;
          /**
           * <p>Binds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a> to model data.</p><p>See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/methods/bindAggregation">ManagedObject.bindAggregation</a> for a detailed description of the possible properties of <code>oBindingInfo</code>.</p>
           * @param {any} oBindingInfo <p>The binding information</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          bindRows(oBindingInfo: any): sap.ui.core.util.Export;
          /**
           * <p>Destroys all the columns in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyColumns(): sap.ui.core.util.Export;
          /**
           * <p>Destroys the exportType in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExportType" href="#/api/sap.ui.core.util.Export/methods/getExportType">exportType</a>.</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyExportType(): sap.ui.core.util.Export;
          /**
           * <p>Destroys all the rows in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyRows(): sap.ui.core.util.Export;
          /**
           * <p>Generates the file content and returns a Promise with the instance as context (this).<br> The promise will be resolved with the generated content as a string.</p><p><p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used. Please use only the standard methods 'then' and 'catch'!</b></p></p>
           * @returns Promise<any> <p>Promise object</p>
           */
          generate(): Promise<any>;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p><p>Columns for the Export.</p>
           * @returns sap.ui.core.util.ExportColumn[] 
           */
          getColumns(): sap.ui.core.util.ExportColumn[];
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExportType" href="#/api/sap.ui.core.util.Export/methods/getExportType">exportType</a>.</p><p>Type that generates the content.</p>
           * @returns sap.ui.core.util.ExportType 
           */
          getExportType(): sap.ui.core.util.ExportType;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p><p>Rows of the Export.</p>
           * @returns sap.ui.core.util.ExportRow[] 
           */
          getRows(): sap.ui.core.util.ExportRow[];
          /**
           * <p>Checks for the provided <code>sap.ui.core.util.ExportColumn</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.util.ExportColumn} oColumn <p>The column whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfColumn(oColumn: sap.ui.core.util.ExportColumn): number;
          /**
           * <p>Checks for the provided <code>sap.ui.core.util.ExportRow</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.util.ExportRow} oRow <p>The row whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfRow(oRow: sap.ui.core.util.ExportRow): number;
          /**
           * <p>Inserts a column into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p>
           * @param {sap.ui.core.util.ExportColumn} oColumn <p>The column to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the column should be inserted at; for a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted at the last position</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertColumn(oColumn: sap.ui.core.util.ExportColumn, iIndex: number): sap.ui.core.util.Export;
          /**
           * <p>Inserts a row into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p>
           * @param {sap.ui.core.util.ExportRow} oRow <p>The row to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the row should be inserted at; for a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value greater than the current size of the aggregation, the row is inserted at the last position</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertRow(oRow: sap.ui.core.util.ExportRow, iIndex: number): sap.ui.core.util.Export;
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.util.ExportColumn[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllColumns(): sap.ui.core.util.ExportColumn[];
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.util.ExportRow[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllRows(): sap.ui.core.util.ExportRow[];
          /**
           * <p>Removes a column from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a>.</p>
           * @param {number | string | sap.ui.core.util.ExportColumn} vColumn <p>The column to remove or its index or id</p>
           * @returns sap.ui.core.util.ExportColumn <p>The removed column or <code>null</code></p>
           */
          removeColumn(vColumn: number | string | sap.ui.core.util.ExportColumn): sap.ui.core.util.ExportColumn;
          /**
           * <p>Removes a row from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a>.</p>
           * @param {number | string | sap.ui.core.util.ExportRow} vRow <p>The row to remove or its index or id</p>
           * @returns sap.ui.core.util.ExportRow <p>The removed row or <code>null</code></p>
           */
          removeRow(vRow: number | string | sap.ui.core.util.ExportRow): sap.ui.core.util.ExportRow;
          /**
           * <p>Generates the file content, triggers a download / save action and returns a Promise with the instance as context (this).<br> The promise will be resolved with the generated content as a string. <p><b>For information about browser support, see <code>sap.ui.core.util.File.save</code></b></p></p><p><p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used. Please use only the standard methods 'then' and 'catch'!</b></p></p>
           * @param {string} sFileName <p>file name, defaults to 'data'</p>
           * @returns Promise<any> <p>Promise object</p>
           */
          saveFile(sFileName?: string): Promise<any>;
          /**
           * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getExportType" href="#/api/sap.ui.core.util.Export/methods/getExportType">exportType</a>.</p>
           * @param {sap.ui.core.util.ExportType} oExportType <p>The exportType to set</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setExportType(oExportType: sap.ui.core.util.ExportType): sap.ui.core.util.Export;
          /**
           * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getColumns" href="#/api/sap.ui.core.util.Export/methods/getColumns">columns</a> from model data.</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          unbindColumns(): sap.ui.core.util.Export;
          /**
           * <p>Unbinds aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getRows" href="#/api/sap.ui.core.util.Export/methods/getRows">rows</a> from model data.</p>
           * @returns sap.ui.core.util.Export <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          unbindRows(): sap.ui.core.util.Export;
        }
        /**
         * <p>Contains content that can be used to export data. Used in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.ExportColumn">ExportColumn</a> / <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.Export">Export</a>.</p>
         */
        export class ExportCell extends sap.ui.core.Element {
          /**
           * <p>Constructor for a new ExportCell.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.util.ExportCell/methods/getContent">content</a>.</p><p>Cell content.</p>
           * @returns string <p>Value of property <code>content</code></p>
           */
          getContent(): string;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getContent" href="#/api/sap.ui.core.util.ExportCell/methods/getContent">content</a>.</p><p>Cell content.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sContent <p>New value for property <code>content</code></p>
           * @returns sap.ui.core.util.ExportCell <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setContent(sContent: string): sap.ui.core.util.ExportCell;
        }
        /**
         * <p>Can have a name and a cell template.</p>
         */
        export class ExportColumn extends sap.ui.base.ManagedObject {
          /**
           * <p>Constructor for a new ExportCell.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Destroys the template in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTemplate" href="#/api/sap.ui.core.util.ExportColumn/methods/getTemplate">template</a>.</p>
           * @returns sap.ui.core.util.ExportColumn <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyTemplate(): sap.ui.core.util.ExportColumn;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.util.ExportColumn/methods/getName">name</a>.</p><p>Column name.</p>
           * @returns string <p>Value of property <code>name</code></p>
           */
          getName(): string;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTemplate" href="#/api/sap.ui.core.util.ExportColumn/methods/getTemplate">template</a>.</p><p>Cell template for column.</p>
           * @returns sap.ui.core.util.ExportCell 
           */
          getTemplate(): sap.ui.core.util.ExportCell;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getName" href="#/api/sap.ui.core.util.ExportColumn/methods/getName">name</a>.</p><p>Column name.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sName <p>New value for property <code>name</code></p>
           * @returns sap.ui.core.util.ExportColumn <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setName(sName: string): sap.ui.core.util.ExportColumn;
          /**
           * <p>Sets the aggregated <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getTemplate" href="#/api/sap.ui.core.util.ExportColumn/methods/getTemplate">template</a>.</p>
           * @param {sap.ui.core.util.ExportCell} oTemplate <p>The template to set</p>
           * @returns sap.ui.core.util.ExportColumn <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setTemplate(oTemplate: sap.ui.core.util.ExportCell): sap.ui.core.util.ExportColumn;
        }
        /**
         * <p>Internally used in <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.Export">Export</a>.</p>
         */
        export class ExportRow extends sap.ui.base.ManagedObject {
          /**
           * <p>Constructor for a new ExportRow.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Adds some cell to the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p>
           * @param {sap.ui.core.util.ExportCell} oCell <p>The cell to add; if empty, nothing is inserted</p>
           * @returns sap.ui.core.util.ExportRow <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          addCell(oCell: sap.ui.core.util.ExportCell): sap.ui.core.util.ExportRow;
          /**
           * <p>Destroys all the cells in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p>
           * @returns sap.ui.core.util.ExportRow <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          destroyCells(): sap.ui.core.util.ExportRow;
          /**
           * <p>Gets content of aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p><p>Cells for the Export.</p>
           * @returns sap.ui.core.util.ExportCell[] 
           */
          getCells(): sap.ui.core.util.ExportCell[];
          /**
           * <p>Checks for the provided <code>sap.ui.core.util.ExportCell</code> in the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>. and returns its index if found or -1 otherwise.</p>
           * @param {sap.ui.core.util.ExportCell} oCell <p>The cell whose index is looked for</p>
           * @returns number <p>The index of the provided control in the aggregation if found, or -1 otherwise</p>
           */
          indexOfCell(oCell: sap.ui.core.util.ExportCell): number;
          /**
           * <p>Inserts a cell into the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p>
           * @param {sap.ui.core.util.ExportCell} oCell <p>The cell to insert; if empty, nothing is inserted</p>
           * @param {number} iIndex <p>The <code>0</code>-based index the cell should be inserted at; for a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value greater than the current size of the aggregation, the cell is inserted at the last position</p>
           * @returns sap.ui.core.util.ExportRow <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          insertCell(oCell: sap.ui.core.util.ExportCell, iIndex: number): sap.ui.core.util.ExportRow;
          /**
           * <p>Removes all the controls from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p><p>Additionally, it unregisters them from the hosting UIArea.</p>
           * @returns sap.ui.core.util.ExportCell[] <p>An array of the removed elements (might be empty)</p>
           */
          removeAllCells(): sap.ui.core.util.ExportCell[];
          /**
           * <p>Removes a cell from the aggregation <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCells" href="#/api/sap.ui.core.util.ExportRow/methods/getCells">cells</a>.</p>
           * @param {number | string | sap.ui.core.util.ExportCell} vCell <p>The cell to remove or its index or id</p>
           * @returns sap.ui.core.util.ExportCell <p>The removed cell or <code>null</code></p>
           */
          removeCell(vCell: number | string | sap.ui.core.util.ExportCell): sap.ui.core.util.ExportCell;
        }
        /**
         * <p>Base export type. Subclasses can be used for <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.Export">Export</a>.</p>
         */
        export class ExportType extends sap.ui.base.ManagedObject {
          /**
           * <p>Constructor for a new ExportType.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Handles the generation process of the file.<br></p>
           * @param {sap.ui.core.util.Export} oExport <p>export instance</p>
           * @returns string <p>content</p>
           */
          protected _generate(oExport: sap.ui.core.util.Export): string;
          /**
           * <p>Creates a cell "generator" (inspired by ES6 Generators)</p>
           * @returns Generator <p>generator</p>
           */
          protected cellGenerator(): Generator;
          /**
           * <p>Creates a column "generator" (inspired by ES6 Generators)</p>
           * @returns Generator <p>generator</p>
           */
          protected columnGenerator(): Generator;
          /**
           * <p>Generates the file content.<br> Should be implemented by the individual types!</p>
           * @returns string <p>content</p>
           */
          protected generate(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getByteOrderMark" href="#/api/sap.ui.core.util.ExportType/methods/getByteOrderMark">byteOrderMark</a>.</p><p>Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).</p><p>Default value is <code>undefined</code>.</p>
           * @returns boolean <p>Value of property <code>byteOrderMark</code></p>
           */
          getByteOrderMark(): boolean;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCharset" href="#/api/sap.ui.core.util.ExportType/methods/getCharset">charset</a>.</p><p>Charset.</p>
           * @returns string <p>Value of property <code>charset</code></p>
           */
          getCharset(): string;
          /**
           * <p>Returns the number of columns.</p>
           * @returns number <p>count</p>
           */
          protected getColumnCount(): number;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileExtension" href="#/api/sap.ui.core.util.ExportType/methods/getFileExtension">fileExtension</a>.</p><p>File extension.</p>
           * @returns string <p>Value of property <code>fileExtension</code></p>
           */
          getFileExtension(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.ui.core.util.ExportType/methods/getMimeType">mimeType</a>.</p><p>MIME type.</p>
           * @returns string <p>Value of property <code>mimeType</code></p>
           */
          getMimeType(): string;
          /**
           * <p>Returns the number of rows.</p>
           * @returns number <p>count</p>
           */
          protected getRowCount(): number;
          /**
           * <p>Creates a row "generator" (inspired by ES6 Generators)</p>
           * @returns Generator <p>generator</p>
           */
          protected rowGenerator(): Generator;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getByteOrderMark" href="#/api/sap.ui.core.util.ExportType/methods/getByteOrderMark">byteOrderMark</a>.</p><p>Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p><p>Default value is <code>undefined</code>.</p>
           * @param {boolean} bByteOrderMark <p>New value for property <code>byteOrderMark</code></p>
           * @returns sap.ui.core.util.ExportType <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setByteOrderMark(bByteOrderMark: boolean): sap.ui.core.util.ExportType;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getCharset" href="#/api/sap.ui.core.util.ExportType/methods/getCharset">charset</a>.</p><p>Charset.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sCharset <p>New value for property <code>charset</code></p>
           * @returns sap.ui.core.util.ExportType <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setCharset(sCharset: string): sap.ui.core.util.ExportType;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getFileExtension" href="#/api/sap.ui.core.util.ExportType/methods/getFileExtension">fileExtension</a>.</p><p>File extension.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sFileExtension <p>New value for property <code>fileExtension</code></p>
           * @returns sap.ui.core.util.ExportType <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setFileExtension(sFileExtension: string): sap.ui.core.util.ExportType;
          /**
           * <p>Sets a new value for property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getMimeType" href="#/api/sap.ui.core.util.ExportType/methods/getMimeType">mimeType</a>.</p><p>MIME type.</p><p>When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.</p>
           * @param {string} sMimeType <p>New value for property <code>mimeType</code></p>
           * @returns sap.ui.core.util.ExportType <p>Reference to <code>this</code> in order to allow method chaining</p>
           */
          setMimeType(sMimeType: string): sap.ui.core.util.ExportType;
        }
        /**
         * <p>CSV export type. Can be used for <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.util.Export">Export</a>.</p><p>Please note that there could be an issue with the separator char depending on the user's system language in some programs such as Microsoft Excel. To prevent those issues use the data-import functionality which enables the possibility to explicitly set the separator char that should be used. This way the content will be displayed correctly.</p><p>Potential formulas (cell data starts with one of = + - @) will be escaped by prepending a single quote. As the export functionality is intended to be used with actual (user) data there is no reason to allow formulas.</p>
         */
        export class ExportTypeCSV extends sap.ui.core.util.ExportType {
          /**
           * <p>Constructor for a new ExportTypeCSV.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new control, generated automatically if no id is given</p>
           * @param {any} mSettings <p>initial settings for the new control</p>
           */
          constructor(sId?: string, mSettings?: any);
          /**
           * <p>Generates the file content.<br> Should be implemented by the individual types!</p>
           * @returns string <p>content</p>
           */
          protected generate(): string;
          /**
           * <p>Generates the file content.</p>
           * @returns string <p>content</p>
           */
          protected generate(): string;
          /**
           * <p>Gets current value of property <a target="_self" class="jsdoclink scrollToMethod" data-sap-ui-target="getSeparatorChar" href="#/api/sap.ui.core.util.ExportTypeCSV/methods/getSeparatorChar">separatorChar</a>.</p><p>Separator char.</p><p>Value needs to be exactly one character or empty for default.</p><p>Default value is <code>,</code>.</p>
           * @returns string <p>Value of property <code>separatorChar</code></p>
           */
          getSeparatorChar(): string;
          /**
           * <p>Setter for property <code>separatorChar</code>.</p><p>Value needs to be exactly one character or empty for default. Default value is ','.</p>
           * @param {string} sSeparatorChar <p>new value for property <code>separatorChar</code></p>
           * @returns sap.ui.core.util.ExportTypeCSV <p><code>this</code> to allow method chaining</p>
           */
          setSeparatorChar(sSeparatorChar: string): sap.ui.core.util.ExportTypeCSV;
        }
        /**
         * <p>Class to mock http requests made to a remote server.</p>
         */
        export abstract class MockServer extends sap.ui.base.ManagedObject {
          /**
           * <p>Global configuration of all mock servers.</p>
           * @param {any} mConfig <p>the configuration object.</p>
           */
          static config(mConfig: any): void;
          /**
           * <p>Stops and calls destroy on all registered servers. Use this method for cleaning up.</p>
           */
          static destroyAll(): void;
          /**
           * <p>Respond to a request, when the servers are configured not to automatically respond.</p>
           */
          static respond(): void;
          /**
           * <p>Starts all registered servers.</p>
           */
          static startAll(): void;
          /**
           * <p>Stops all registered servers.</p>
           */
          static stopAll(): void;
          /**
           * <p>Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without changing the application code. This class can also be used for qunit tests.</p><p>Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and associated objects as well as event handlers. See <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject/constructor">sap.ui.base.ManagedObject#constructor</a> for a general description of the syntax of the settings object.</p>
           * @param {string} sId <p>id for the new server object; generated automatically if no non-empty id is given Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!</p>
           * @param {any} mSettings <p>optional map/JSON-object with initial property values, aggregated objects etc. for the new object</p>
           * @param {any} oScope <p>scope object for resolving string based type and formatter references in bindings</p>
           */
          constructor(sId?: string, mSettings?: any, oScope?: any);
          /**
           * <p>Enum for the method.</p>
           */
          HTTPMETHOD: any;
          /**
           * <p>Attaches an event handler to be called after the built-in request processing of the mock server</p>
           * @param {string} event <p>type according to HTTP Method</p>
           * @param {Function} fnCallback <p>the name of the function that will be called at this exit The callback function exposes an event with parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per the request. Examples are: oXhr : the request object; oFilteredData : the mock data entries that are about to be returned in the response; oEntry : the mock data entry that is about to be returned in the response;</p>
           * @param {string} sEntitySet <p>(optional) the name of the entity set</p>
           */
          attachAfter(event: string, fnCallback: Function, sEntitySet: string): void;
          /**
           * <p>Attaches an event handler to be called before the built-in request processing of the mock server</p>
           * @param {string} event <p>type according to HTTP Method</p>
           * @param {Function} fnCallback <p>the name of the function that will be called at this exit. The callback function exposes an event with parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per the request. Examples are: oXhr : the request object; sUrlParams : the URL parameters of the request; sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation</p>
           * @param {string} sEntitySet <p>(optional) the name of the entity set</p>
           */
          attachBefore(event: string, fnCallback: Function, sEntitySet: string): void;
          /**
           * <p>Destructor method for objects.</p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the internal structures and removes all event handlers.</p><p>The object must not be used anymore after destroy was called.<br><br>References: <ul><li>sap.ui.base.Object#destroy</li></ul></p>
           */
          destroy(): void;
          /**
           * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.</p>
           * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
           */
          destroy(bSuppressInvalidate?: boolean): void;
          /**
           * <p>Cleans up the resources associated with this object and all its aggregated children.</p><p>After an object has been destroyed, it can no longer be used!</p><p>Applications should call this method if they don't need the object any longer.<br><br>References: <ul><li>sap.ui.base.ManagedObject#destroy</li></ul></p>
           * @param {boolean} bSuppressInvalidate <p>if true, this ManagedObject is not marked as changed</p>
           */
          destroy(bSuppressInvalidate?: boolean): void;
          /**
           * <p>Removes a previously attached event handler</p>
           * @param {string} event <p>type according to HTTP Method</p>
           * @param {Function} fnCallback <p>the name of the function that will be called at this exit</p>
           * @param {string} sEntitySet <p>(optional) the name of the entity set</p>
           */
          detachAfter(event: string, fnCallback: Function, sEntitySet: string): void;
          /**
           * <p>Removes a previously attached event handler</p>
           * @param {string} event <p>type according to HTTP Method</p>
           * @param {Function} fnCallback <p>the name of the function that will be called at this exit</p>
           * @param {string} sEntitySet <p>(optional) the name of the entity set</p>
           */
          detachBefore(event: string, fnCallback: Function, sEntitySet: string): void;
          /**
           * <p>Returns the data model of the given EntitySet name.</p>
           * @param {string} sEntitySetName <p>EntitySet name</p>
           * @returns any[] <p>data model of the given EntitySet</p>
           */
          getEntitySetData(sEntitySetName: string): any[];
          /**
           * <p>Getter for property <code>recordRequests</code>. Returns whether or not the requests performed should be recorded (stored).</p><p>Default value is <code>true</code></p>
           * @returns boolean <p>the value of property <code>recordRequests</code></p>
           */
          getRecordRequests(): boolean;
          /**
           * <p>Getter for property <code>requests</code>.</p><p>Default value is <code>[]</code></p>
           * @returns object[] <p>the value of property <code>rootUri</code></p>
           */
          getRequests(): object[];
          /**
           * <p>Getter for property <code>rootUri</code>. Has to be relative and requires a trailing '/'. It also needs to match the URI set in OData/JSON models or simple XHR calls in order for the mock server to intercept them.</p><p>Default value is empty/<code>undefined</code>. Must end with a a trailing slash ("/").</p>
           * @returns string <p>the value of property <code>rootUri</code></p>
           */
          getRootUri(): string;
          /**
           * <p>Returns whether the server is started or not.</p>
           * @returns boolean <p>whether the server is started or not.</p>
           */
          isStarted(): boolean;
          /**
           * <p>Sets the data of the given EntitySet name with the given array.</p>
           * @param {string} sEntitySetName <p>EntitySet name</p>
           * @param {any[]} aData 
           */
          setEntitySetData(sEntitySetName: string, aData: any[]): void;
          /**
           * <p>Setter for property <code>recordRequests</code>. Defines whether or not the requests performed should be recorded (stored).</p><p>Default value is <code>true</code></p>
           * @param {boolean} recordRequests <p>new value for property <code>recordRequests</code></p>
           */
          setRecordRequests(recordRequests: boolean): void;
          /**
           * <p>Setter for property <code>requests</code>.</p><p>Default value is is <code>[]</code></p><p>Each array entry should consist of an object with the following properties / values:</p><p><ul> <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b> <br> (any HTTP verb) </li> <li><b>path <string>: "/path/to/resource"</b> <br> The path is converted to a regular expression, so it can contain normal regular expression syntax. All regular expression groups are forwarded as arguments to the <code>response</code> function. In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups. </li> <li><b>response <function>: function(xhr, param1, param2, ...) { }</b> <br> The xhr object can be used to respond on the request. Supported methods are: <br> <code>xhr.respond(iStatusCode, mHeaders, sBody)</code> <br> <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header <br> <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default an XML header is set for response header <br> <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header </li> </ul></p>
           * @param {object[]} requests <p>new value for property <code>requests</code></p>
           */
          setRequests(requests: object[]): void;
          /**
           * <p>Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.</p><p>Default value is empty/<code>undefined</code></p>
           * @param {string} rootUri <p>new value for property <code>rootUri</code></p>
           */
          setRootUri(rootUri: string): void;
          /**
           * <p>Simulates an existing OData service by sepcifying the metadata URL and the base URL for the mockdata. The server configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If no base url for the mockdata is specified then the mockdata are generated from the metadata</p>
           * @param {string} sMetadataString <p>Either the URL to the service metadata document or the metadata document as xml string itself (starting with "<?xml")</p>
           * @param {string | any} vMockdataSettings <p>(optional) base url which contains the path to the mockdata, or an object which contains the following properties: sMockdataBaseUrl, bGenerateMissingMockData, aEntitySetsNames. See below for descriptions of these parameters. Ommit this parameter to produce random mock data based on the service metadata.</p>
           */
          simulate(sMetadataString: string, vMockdataSettings?: string | any): void;
          /**
           * <p>Starts the server.</p>
           */
          start(): void;
          /**
           * <p>Stops the server.</p>
           */
          stop(): void;
        }
        /**
         * <p>Parses and validates data on the <code>paste</code> event of an SAPUI5 table.</p>
         */
        export class PasteHelper {
          /**
           * <p>A utility for converting and validating data pasted from the clipboard. This utility is used for importing data from spreadsheets to SAPUI5 tables.</p>
           */
          constructor();
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        /**
         */
        namespace reflection {
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        /**
         */
        namespace serializer {
          /**
           * <p>HTMLViewSerializer class.</p>
           */
          export class HTMLViewSerializer extends sap.ui.base.EventProvider {
            /**
             * <p>HTML view serializer class. Serializes a given view.</p>
             * @param {sap.ui.core.mvc.HTMLView} oView <p>the view to serialize</p>
             * @param {any} oWindow <p>the window object. Default is the window object the instance of the serializer is running in</p>
             * @param {Function} fnGetControlId <p>delegate function which returns the control id</p>
             * @param {Function} fnGetEventHandlerName <p>delegate function which returns the event handler name</p>
             */
            constructor(oView: sap.ui.core.mvc.HTMLView, oWindow: any, fnGetControlId: Function, fnGetEventHandlerName: Function);
          }
          /**
           * <p>Serializer class.</p>
           */
          export class Serializer extends sap.ui.base.EventProvider {
            /**
             * <p>Serializer class. Iterates over all controls and call a given serializer delegate.</p>
             * @param {sap.ui.core.Control | sap.ui.core.UIArea} oRootControl <p>the root control to serialize</p>
             * @param {any} serializeDelegate <p>the serializer delegate. Has to implement start/middle/end methods.</p>
             * @param {boolean} bSkipRoot <p>whether to skip the root node or not</p>
             * @param {Function} fnSkipAggregations <p>whether to skip aggregations</p>
             * @param {Function} fnSkipElement <p>whether to skip an element</p>
             */
            constructor(oRootControl: sap.ui.core.Control | sap.ui.core.UIArea, serializeDelegate: any, bSkipRoot: boolean, fnSkipAggregations: Function, fnSkipElement: Function);
          }
          /**
           * <p>ViewSerializer class.</p>
           */
          export class ViewSerializer extends sap.ui.base.EventProvider {
            /**
             * <p>View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.</p>
             * @param {sap.ui.core.Control | sap.ui.core.UIArea} oRootControl <p>the root control to serialize</p>
             * @param {any} oWindow <p>the window object. Default is the window object the instance of the serializer is running in.</p>
             * @param {string} sDefaultXmlNamespace <p>defines the default xml namespace</p>
             */
            constructor(oRootControl: sap.ui.core.Control | sap.ui.core.UIArea, oWindow?: any, sDefaultXmlNamespace?: string);
          }
          /**
           * <p>XMLViewSerializer class.</p>
           */
          export class XMLViewSerializer extends sap.ui.base.EventProvider {
            /**
             * <p>XML view serializer class. Serializes a given view.</p>
             * @param {sap.ui.core.mvc.XMLView} oView <p>the view to serialize</p>
             * @param {any} oWindow <p>the window object. Default is the window object the instance of the serializer is running in</p>
             * @param {string} sDefaultXmlNamespace <p>defines the default XML namespace</p>
             * @param {Function} fnGetControlId <p>delegate function which returns the control id</p>
             * @param {Function} fnGetEventHandlerName <p>delegate function which returns the event handler name</p>
             */
            constructor(oView: sap.ui.core.mvc.XMLView, oWindow: any, sDefaultXmlNamespace: string, fnGetControlId: Function, fnGetEventHandlerName: Function);
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      namespace util {
        namespace serializer {
          /**
           */
          namespace delegate {
            /**
             * <p>Abstract serializer delegate class.</p>
             */
            export abstract class Delegate extends sap.ui.base.EventProvider {
              /**
               * <p>Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.</p>
               */
              constructor();
            }
            /**
             * <p>HTML serializer delegate class.</p>
             */
            export class HTML extends sap.ui.core.util.serializer.delegate.Delegate {
              /**
               * <p>HTML serializer delegate class. Called by the serializer instance.</p>
               * @param {Function} fnGetControlId <p>delegate function which returns the control id</p>
               * @param {Function} fnGetEventHandlerName <p>delegate function which returns the event handler name</p>
               */
              constructor(fnGetControlId?: Function, fnGetEventHandlerName?: Function);
            }
            /**
             * <p>XML serializer delegate class.</p>
             */
            export class XML extends sap.ui.core.util.serializer.delegate.Delegate {
              /**
               * <p>XML serializer delegate class. Called by the serializer instance.</p>
               * @param {string} sDefaultXmlNamespace <p>defines the default XML namespace</p>
               * @param {Function} fnGetControlId <p>delegate function which returns the control id</p>
               * @param {Function} fnGetEventHandlerName <p>delegate function which returns the event handler name</p>
               * @param {Function} fnMemorizePackage <p>a delegate function to memorize the control packages</p>
               */
              constructor(sDefaultXmlNamespace?: string, fnGetControlId?: Function, fnGetEventHandlerName?: Function, fnMemorizePackage?: Function);
            }
          }
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace core {
      /**
       */
      namespace ws {
        /**
         * <p><p>Defines the different ready states for a WebSocket connection.</p></p>
         */
        export enum ReadyState {
          /**
           * <p>The connection has been closed or could not be opened.</p>
           */
          CLOSED = "CLOSED",
          /**
           * <p>The connection is going through the closing handshake.</p>
           */
          CLOSING = "CLOSING",
          /**
           * <p>The connection has not yet been established.</p>
           */
          CONNECTING = "CONNECTING",
          /**
           * <p>The WebSocket connection is established and communication is possible.</p>
           */
          OPEN = "OPEN",
        }
        /**
         * <p>WebSocket class implementing the pcp-protocol.</p>
         */
        export class SapPcpWebSocket extends sap.ui.core.ws.WebSocket {
          /**
           * <p>Creates a new WebSocket connection and uses the pcp-protocol for communication.</p>
           * @param {string} sUrl <p>relative or absolute URL for WebSocket connection.</p>
           * @param {any[]} aProtocols <p>array of protocols as strings, a single protocol as a string. Protocol(s) should be selected from <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS">sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS</a>.</p>
           */
          constructor(sUrl: string, aProtocols?: any[]);
          /**
           * <p>Fire event 'message' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireMessage(mArguments?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Fire event 'message' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.SapPcpWebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireMessage(mArguments?: any): sap.ui.core.ws.SapPcpWebSocket;
          /**
           * <p>Sends a message.<br> <br> If the connection is not yet opened, the message will be queued and sent when the connection is established.</p>
           * @param {string} sMessage <p>Message to send</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          send(sMessage: string): sap.ui.core.ws.WebSocket;
          /**
           * <p>Sends a message and optional pcp-header-fields using the pcp-protocol.<br> <br> If the connection is not yet opened, the message will be queued and sent when the connection is established.</p>
           * @param {string | Blob | ArrayBuffer} message <p>message to send</p>
           * @param {any} oPcpFields <p>additional pcp-fields as key-value map</p>
           * @returns sap.ui.core.ws.SapPcpWebSocket <p><code>this</code> to allow method chaining</p>
           */
          send(message: string | Blob | ArrayBuffer, oPcpFields?: any): sap.ui.core.ws.SapPcpWebSocket;
        }
        namespace SapPcpWebSocket {
          /**
           * <p><p>Protocol versions.</p><p>One (or more) of these have to be selected to create an SapPcpWebSocket connection (or no protocol at all).</p></p>
           */
          export enum SUPPORTED_PROTOCOLS {
            /**
             */
            v10 = "v10",
          }
        }
        /**
         * <p>Basic WebSocket class.</p>
         */
        export class WebSocket extends sap.ui.base.EventProvider {
          /**
           * <p>Creates a new WebSocket connection.</p>
           * @param {string} sUrl <p>relative or absolute URL for WebSocket connection.</p>
           * @param {any[]} aProtocols <p>array of protocols as strings, a single protocol as a string</p>
           */
          constructor(sUrl: string, aProtocols?: any[]);
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this WebSocket is used.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          attachClose(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this WebSocket is used.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          attachError(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this WebSocket is used.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          attachMessage(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p>
           * @param {any} oData <p>The object, that should be passed along with the event-object when firing the event.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs. This function will be called on the oListener-instance (if present) or in a 'static way'.</p>
           * @param {any} oListener <p>Object on which to call the given function. If empty, this WebSocket is used.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          attachOpen(oData: any, fnFunction: Function, oListener?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Closes the connection.</p>
           * @param {number} iCode <p>Status code that explains why the connection is closed. Must be either 1000, or between 3000 and 4999 (default 1000)</p>
           * @param {string} sReason <p>Closing reason as a string</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          close(iCode?: number, sReason?: string): sap.ui.core.ws.WebSocket;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          detachClose(fnFunction: Function, oListener: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          detachError(fnFunction: Function, oListener: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          detachMessage(fnFunction: Function, oListener: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br></p><p>The passed function and listener object must match the ones previously used for event registration.</p>
           * @param {Function} fnFunction <p>The function to call, when the event occurs.</p>
           * @param {any} oListener <p>Object on which the given function had to be called.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          detachOpen(fnFunction: Function, oListener: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Fire event 'close' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireClose(mArguments?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Fire event 'error' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireError(mArguments?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Fire event 'message' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireMessage(mArguments?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Fire event 'open' to attached listeners.</p>
           * @param {any} mArguments <p>the arguments to pass along with the event.</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          protected fireOpen(mArguments?: any): sap.ui.core.ws.WebSocket;
          /**
           * <p>Getter for the protocol selected by the server once the connection is open.</p>
           * @returns string <p>protocol</p>
           */
          getProtocol(): string;
          /**
           * <p>Getter for WebSocket readyState.</p>
           * @returns sap.ui.core.ws.ReadyState <p>readyState</p>
           */
          getReadyState(): sap.ui.core.ws.ReadyState;
          /**
           * <p>Sends a message.<br> <br> If the connection is not yet opened, the message will be queued and sent when the connection is established.</p>
           * @param {string} sMessage <p>Message to send</p>
           * @returns sap.ui.core.ws.WebSocket <p><code>this</code> to allow method chaining</p>
           */
          send(sMessage: string): sap.ui.core.ws.WebSocket;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       */
      namespace base {
        /**
         * <p>The ManagedObjectModel class can be used for data binding of properties and aggregations for managed objects.</p><p>Provides model access to a given <a target="_self" class="jsdoclink" href="#/api/sap.ui.base.ManagedObject">sap.ui.base.ManagedObject</a>. Such access allows to bind to properties and aggregations of this object.</p>
         */
        export class ManagedObjectModel extends sap.ui.model.json.JSONModel {
          /**
           * <p>The ManagedObjectModel class allows you to bind to properties and aggregations of managed objects.</p>
           * @param {sap.ui.base.ManagedObject} oObject <p>the managed object models root object</p>
           * @param {any} oData <p>an object for custom data</p>
           */
          constructor(oObject: sap.ui.base.ManagedObject, oData: any);
          /**
           * <p>Private method iterating the registered bindings of this model instance and initiating their check for update</p>
           * @param {boolean} bForceUpdate 
           * @param {boolean} bAsync 
           * @param {Function} fnFilter <p>an optional test function to filter the binding</p>
           */
          protected checkUpdate(bForceUpdate: boolean, bAsync: boolean, fnFilter: Function): void;
          /**
           * <p>Sets the data, passed as a JS object tree, to the model.</p>
           * @param {any} oData <p>the data to set on the model</p>
           * @param {boolean} bMerge <p>whether to merge the data instead of replacing it</p>
           */
          setData(oData: any, bMerge?: boolean): void;
          /**
           * <p>Inserts the user-defined custom data into the model.</p>
           * @param {any} oData <p>The data as JSON object to be set on the model</p>
           * @param {boolean} bMerge <p>If set to <code>true</code>, the data is merged instead of replaced</p>
           */
          setData(oData: any, bMerge?: boolean): void;
        }
      }
    }
  }
}
declare namespace sap {
  namespace ui {
    namespace model {
      /**
       */
      namespace type {
        /**
         * <p>This class represents boolean simple types.</p>
         */
        export class Boolean extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for a Boolean type.</p>
           * @param {any} oFormatOptions <p>formatting options. Boolean doesn't support any specific format options</p>
           * @param {any} oConstraints <p>value constraints. Boolean doesn't support additional constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents the currency composite type.</p>
         */
        export class Currency extends sap.ui.model.CompositeType {
          /**
           * <p>Constructor for a Currency type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/constructor">NumberFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
          /**
           * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
           * @param {any} oValue <p>the value to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
           */
          formatValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
           * @param {any[]} aValues <p>the values to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any <p>the formatted output value</p>
           */
          formatValue(aValues: any[], sInternalType: string): any;
          /**
           * <p>Format the given array containing amount and currency code to an output value of type string. Other internal types than 'string' are not supported by the Currency type. If a source format has been defined for this type, the formatValue does also accept a string value as input, which will be parsed into an array using the source format. If aValues is not defined or null, null will be returned.</p>
           * @param {any[] | string} vValue <p>the array of values or string value to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any <p>the formatted output value</p>
           */
          formatValue(vValue: any[] | string, sInternalType: string): any;
          /**
           * <p>Parse a value of an internal type to the expected value of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
           */
          parseValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
           * @returns any[] <p>the parse result array</p>
           */
          parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
          /**
           * <p>Parse a string value to an array containing amount and currency. Parsing of other internal types than 'string' is not supported by the Currency type. In case a source format has been defined, after parsing the currency is formatted using the source format and a string value is returned instead.</p>
           * @param {any} vValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
           * @returns array|string <p>the parse result array</p>
           */
          parseValue(vValue: any, sInternalType: string, aCurrentValues: any[]): any[] | string;
        }
        /**
         * <p>This class represents date simple types.</p>
         */
        export class Date extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for a Date type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getDateInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents the Date interval composite type.</p>
         */
        export class DateInterval extends sap.ui.model.CompositeType {
          /**
           * <p>Constructor for a Date interval type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getDateInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
          /**
           * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
           * @param {any} oValue <p>the value to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
           */
          formatValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
           * @param {any[]} aValues <p>the values to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any <p>the formatted output value</p>
           */
          formatValue(aValues: any[], sInternalType: string): any;
          /**
           * <p>Format the given array containing two values to an output value of type string. Other internal types than 'string' and 'any' are not supported by the date interval type. If a source format has been defined for this type, the formatValue does also accept an array with string values as input. This will be parsed into an array of Dates using the source format.</p><p>If <code>aValues</code> isn't an array, a format exception is thrown. If one of the elements in <code>aValues</code> is not defined or null, empty string will be returned.</p>
           * @param {any[]} aValues <p>The array of values</p>
           * @param {string} sInternalType <p>The target type</p>
           * @returns any <p>The formatted output value</p>
           */
          formatValue(aValues: any[], sInternalType: string): any;
          /**
           * <p>Parse a value of an internal type to the expected value of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
           */
          parseValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
           * @returns any[] <p>the parse result array</p>
           */
          parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
          /**
           * <p>Parse a string value to an array containing two values. Parsing of other internal types than 'string' is not supported by the DateInterval type. In case a source format has been defined, the two values are formatted using the source format after parsing the inteval string and an array which contains two string values is returned.</p>
           * @param {any} sValue <p>The value to be parsed</p>
           * @param {string} sInternalType <p>The source type</p>
           * @param {any[]} aCurrentValues <p>The current values of all binding parts</p>
           * @returns any[] <p>The parsed result array</p>
           */
          parseValue(sValue: any, sInternalType: string, aCurrentValues: any[]): any[];
        }
        /**
         * <p>This class represents datetime simple types.</p>
         */
        export class DateTime extends sap.ui.model.type.Date {
          /**
           * <p>Constructor for a DateTime type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getDateTimeInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime).</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents the DateTime interval composite type.</p>
         */
        export class DateTimeInterval extends sap.ui.model.type.DateInterval {
          /**
           * <p>Constructor for a DateTime interval type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getDateTimeInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents file size simple types.</p>
         */
        export class FileSize extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for a FileSize type.</p>
           * @param {any} oFormatOptions <p>formatting options. Supports the same options as <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.FileSizeFormat/methods/sap.ui.core.format.FileSizeFormat.getInstance">FileSizeFormat.getInstance</a></p>
           * @param {any} oConstraints <p>value constraints.</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents float simple types.</p>
         */
        export class Float extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for a Float type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/constructor">NumberFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents integer simple types.</p>
         */
        export class Integer extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for an Integer type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/constructor">NumberFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents string simple types.</p>
         */
        export class String extends sap.ui.model.SimpleType {
          /**
           * <p>Constructor for a String type.</p>
           * @param {any} oFormatOptions <p>formatting options. String doesn't support any formatting options</p>
           * @param {any} oConstraints <p>value constraints. All given constraints must be fulfilled by a value to be valid</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents time simple types.</p>
         */
        export class Time extends sap.ui.model.type.Date {
          /**
           * <p>Constructor for a Time type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getTimeInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time).</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents the Time interval composite type.</p>
         */
        export class TimeInterval extends sap.ui.model.type.DateInterval {
          /**
           * <p>Constructor for a Time interval type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.DateFormat/methods/sap.ui.core.format.DateFormat.getTimeInstance">DateFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any);
        }
        /**
         * <p>This class represents the Unit composite type.</p>
         */
        export class Unit extends sap.ui.model.CompositeType {
          /**
           * <p>Constructor for a Unit type.</p>
           * @param {any} oFormatOptions <p>Formatting options. For a list of all available options, see <a target="_self" class="jsdoclink" href="#/api/sap.ui.core.format.NumberFormat/methods/sap.ui.core.format.NumberFormat.getUnitInstance">NumberFormat</a>.</p>
           * @param {any} oConstraints <p>Value constraints</p>
           * @param {any[]} aDynamicFormatOptionNames <p>keys for dynamic format options which are used to map additional binding values, e.g. <code>["decimals"]</code></p>
           */
          constructor(oFormatOptions?: any, oConstraints?: any, aDynamicFormatOptionNames?: any[]);
          /**
           * <p>Format the given value in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If oValue is not defined or null, null will be returned.</p>
           * @param {any} oValue <p>the value to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any|Promise <p>the formatted output value or a Promise resolving with the formatted value</p>
           */
          formatValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Format the given set of values in model representation to an output value in the given internal type. This happens according to the format options, if target type is 'string'. If aValues is not defined or null, null will be returned.</p>
           * @param {any[]} aValues <p>the values to be formatted</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any <p>the formatted output value</p>
           */
          formatValue(aValues: any[], sInternalType: string): any;
          /**
           * <p>Format the given array containing amount and Unit code to an output value of type string. Other internal types than 'string' are not supported by the Unit type. If a source format has been defined for this type, the formatValue does also accept a string value as input, which will be parsed into an array using the source format. If vValues is not defined or null, null will be returned.</p>
           * @param {any[] | string} vValue <p>the array of values or string value to be formatted. If an array is given, index 0 is the number value, and index 1 is the Unit code (CLDR or custom). Indices 2+ are the bound values for the dynamic format options.</p>
           * @param {string} sInternalType <p>the target type</p>
           * @returns any <p>the formatted output value</p>
           */
          formatValue(vValue: any[] | string, sInternalType: string): any;
          /**
           * <p>Parse a value of an internal type to the expected value of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @returns any|Promise <p>the parse result or a Promise resolving with the parse result</p>
           */
          parseValue(oValue: any, sInternalType: string): any | Promise<any>;
          /**
           * <p>Parse a value of an internal type to the expected set of values of the model type.</p>
           * @param {any} oValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
           * @returns any[] <p>the parse result array</p>
           */
          parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
          /**
           * <p>Parse a string value to an array containing amount and Unit. Parsing of other internal types than 'string' is not supported by the Unit type. In case a source format has been defined, after parsing the Unit is formatted using the source format and a string value is returned instead.</p>
           * @param {any} vValue <p>the value to be parsed</p>
           * @param {string} sInternalType <p>the source type</p>
           * @param {any[]} aCurrentValues <p>the current values of all binding parts</p>
           * @returns array|string <p>the parse result array</p>
           */
          parseValue(vValue: any, sInternalType: string, aCurrentValues: any[]): any[] | string;
        }
      }
    }
  }
}
